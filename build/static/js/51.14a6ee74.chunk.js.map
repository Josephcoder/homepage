{"version":3,"sources":["containers/DoExam/QuestionDetails/ConvertingAnswers.ts","assets/profile.png","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","components/ProctoringRuleItem/ProctoringRuleItem.tsx","containers/DoExam/DoExam.tsx"],"names":["toMultipleChoice","answers","res","answer","id","value","status","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","MultipleChoice","props","checkAnswer","item","available_answers","length","check","find","itm","question_id","selectedQuestionAnswer","undefined","x","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","test","a","map","i","onClick","oldAnswers","temp","type","questionTypeElementsType","SingleMultiple","t","addAnswer","className","TrueFalse","Matching","checkIfSelected","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","question","language","key","testAnswerLang","it","toString","checkAnswerStatus","selectedLanguage","findWord","arr","ReturnMatchingStatus","newItem","onChange","e","target","Shuffle","selected","SimpleCalculated","answeredValue","ShortAnswer","style","minHeight","Numerical","CalculatedMultipleChoice","filter","QuestionDetails","connect","auth","doExam","candidateExam","system","questionTypes","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","useState","loading","setLoading","selectLang","setSelectLang","QuestionData","candidate_exam","q","selected_question","findSelectedQuestionDetails","Loading","LoadingType","white","selected_language","title","description","width","findQuestionType","question_answers","SimpleCalculate","Numeric","Footer","proctoring","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","findIndex","selectedIndexPrevious","selectedIndexNext","ConfirmSubmitAnswer","exam_id","questionAnswered","SubmitAnswer","setProfileWindowStatus","windowStatus","profile","position","top","right","events","questionsList","selected_exam_id","exam_paper_id","height","submitQuestionAnswer","Profile","src","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","event_type_id","DATE","time","Date","getHours","getMinutes","getSeconds","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","setSubmitModal","submitExam","maxHeight","DoExamTitle","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","course_name","course_code","alignSelf","start_time","duration","toFixed","CountDown","duration_min","timeout","returnString","labels","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","maxWidth","displayClose","padding","marginTop","ModalMarginTop","small","DoExamResults","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","page","ProctoringRuleItem","getDetails","examDetails","rule_key","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","_DoEam","setState","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","setExamQuestionAnswer","setCompletedTest","completedTest","changingExamStatusLoading","changingExamStatus","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","periods","selected_period","selected_exam_details","checkUserExam","exam","positions","selected_position","exam_room_details","RequestUserExamDetails","user_id","position_id","userExamLocation","district_id","center_id","room_id","setLoadExamResultMessage","BackToExamination","loadUserProfileDetails","FC_GetProfileDetails","msg","componentDidMount","sex","course","courses","loadCourses","exam_questions_answers","testAnswers","componentWillUnmount","socket","emit","Events","USER_DISCONNECTED_ONLINE_SERVER","setLoadExamResultNoMessage","PushPopupAlert","PopupAlertTheme","danger","success","user_exams_done","exam_paper","CleanCandidateExam","examQuestionIds","SubmitExamQuestionAnswer","disability","gender","in_education","questions_order","userAnswer","submitWholeExam","axios","put","API","DO_EXAM","doneExam","submittedExam","document","fullscreenElement","exitFullscreen","errorToText","startExam","display_exam","start_exam","requestExam","loadCandidateExamFromSupervisor","candidateDetailsProctoring","joined","pauseExam","inExam","data","application_session_id","application_session","session_plan_id","done_by","EventsLabels","DONE_EXAM","FC_SaveEvent","error","EXAM_DONE_SERVER","timeOutExam","TIME_OUT","TIME_OUT_SERVER","getExam","REQUEST_EXAM_SERVER","examStatus","loadUserExamErr","added_minutes","group_id","this","window","location","reload","ProctoringCandidateOnline","restartExam","CleanCandidateExamAnswers","setExamStatus","UserExamActions","Restart","requestUserAnswers","stopExam","Done","period_id","removeClient","Removed","examAlreadyDone","candidateStopExam","reason","Paused","candidateContinueExam","Continue","joinedRoom","changeTime","timer","candidateProctoringDetails","QuestionsList","selected_course","preview","setSelectedCandidateExam","extraLarge","exam_date","dangerouslySetInnerHTML","__html","termes","medium","Component","DoExam","ChangeExamStatus","loadCandidateExam","setSelectedPeriod","GetUserExamDetails","FC_AddRules"],"mappings":"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","file":"static/js/51.14a6ee74.chunk.js","sourcesContent":["import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.type === questionTypeElementsType.SingleMultiple\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  TrueFalseQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n\n  const addAnswer = (\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [\n          ...temp,\n          {\n            id: t.id,\n            value: t.value,\n            status: false,\n          },\n        ];\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport { Shuffle } from \"../../../../utils/functions\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: item.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ans: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(\n              (it) => it.status.toString() === ans.status\n            );\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let ans = temp.answer.find((itm) => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(\n            props.selectedQuestionAnswer.question_id,\n            props.selectedLanguage,\n            ans\n          );\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [\n            ...res,\n            {\n              id: ans.id,\n              lang: item.language,\n              status: ans.status.toString(),\n            },\n          ];\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item) => (\n          <div\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-2`}\n          >\n            <div className=\"col-span-1 flex flex-row items-center gap-2\">\n              {checkAnswer(item) === true ? (\n                <RiCheckboxCircleFill className=\"text-2xl\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-2xl\" />\n              )}\n              <span className=\"ml-2\">{item.value}</span>\n            </div>\n            <div className=\"col-span-1\">\n              <select\n                onChange={(e) => {\n                  addAnswer(\n                    {\n                      id: item.id,\n                      value: item.value,\n                      status: e.target.value,\n                    },\n                    props.selectedQuestionAnswer.question_id\n                  );\n                }}\n                className={`border rounded w-full py-2 px-2 cursor-pointer focus:outline-none focus:border-blue-500 ${\n                  checkAnswer(item) === false\n                    ? \"border-gray-400 text-gray-600\"\n                    : \"border-blue-50 bg-blue-50 text-blue-600 hover:border-blue-600\"\n                }`}\n              >\n                <option value=\"\">Select matching</option>\n                {props.selectedQuestionAnswer !== null &&\n                  props.selectedQuestionAnswer.answers !== undefined &&\n                  Shuffle(props.selectedQuestionAnswer.answers).map(\n                    (itm, x) => (\n                      <option\n                        selected={\n                          itm.status ===\n                          findWord(\n                            props.selectedLanguage,\n                            checkIfSelected(item.id)\n                          )\n                            ? true\n                            : false\n                        }\n                        key={x + 1}\n                        value={itm.status}\n                      >\n                        {itm.status}\n                      </option>\n                    )\n                  )}\n              </select>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { SimpleCalculatedQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (item: SimpleCalculatedQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: [newAnswers[0].value],\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0].toString() : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SimpleCalculated\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { ShortAnswerQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: ShortAnswerQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: \"\",\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <textarea \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }} value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} style={{minHeight: '200px'}}></textarea>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ShortAnswer\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { NumericalQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: NumericalQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: {id: string; value: string[]; status: number[]}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: {id: string; value: string; status: number[]}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: [item.value],\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0] : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold border-blue-600\" : \"border text-gray-700 border-gray-500\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Numerical\n","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CalculatedMultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center rounded cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ?\n          <MdRadioButtonUnchecked className=\"text-2xl\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default CalculatedMultipleChoice\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../interfaces/index\";\nimport { newAnswer } from \"../DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from \"../../../interfaces/exam_question\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../components/Loading/LoadingV2\";\nimport MultipleChoice from \"./Answers/MultipleChoice\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"./ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\nimport TrueFalse from \"./Answers/TrueFalse\";\nimport Matching from \"./Answers/Matching\";\nimport SimpleCalculated from \"./Answers/SimpleCalculated\";\nimport ShortAnswer from \"./Answers/ShortAnswer\";\nimport Numerical from \"./Answers/Numerical\";\nimport CalculatedMultipleChoice from \"./Answers/CalculatedMultipleChoice\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined =\n        props.candidateExam.candidate_exam.questions.find(\n          (itm) =>\n            props.candidateExam.selected_question &&\n            itm.question_id === props.candidateExam.selected_question\n        );\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  };\n\n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res: QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(\n        (itm) => itm.question_id === props.candidateExam.selected_question\n      );\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  };\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          {/* <div\n            className={`h-8 ${\n              props.submitQuestionAnswer === true\n                ? \"animate__animated animate__fadeIn bg-yellow-50 text-yellow-700 animate-pulse\"\n                : \"text-blue-400 italic\"\n            } px-3 py-2 rounded  font-bold text-sm`}\n          >\n            {props.submitQuestionAnswer === true\n              ? \"Saving your answer ...\"\n              : \"\"}\n          </div> */}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              <div className=\"text-md flex flex-col w-full\">\n                <span className=\"text-sm text-gray-600\">\n                  {QuestionData() !== null &&\n                    QuestionData()?.question.find(\n                      (itm) =>\n                        itm.language === props.candidateExam.selected_language\n                    )?.title}\n                </span>\n                <span className=\"text-lg text-gray-800 font-bold\">\n                  {QuestionData() !== null &&\n                    QuestionData()?.question.find(\n                      (itm) =>\n                        itm.language === props.candidateExam.selected_language\n                    )?.description}\n                </span>\n              </div>\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div\n                  onClick={() => setSelectLang(!selectLang)}\n                  className=\"flex flex-row items-center gap-2\"\n                >\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{ width: \"97px\" }}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">\n                      Language\n                    </span>\n                    <span\n                      title={\n                        QuestionLanguages.find(\n                          (itm) =>\n                            itm.key === props.candidateExam.selected_language\n                        )?.value\n                      }\n                      className=\"text-sm font-bold text-blue-600 truncate\"\n                      style={{ width: \"97px\" }}\n                    >\n                      {\n                        QuestionLanguages.find(\n                          (itm) =>\n                            itm.key === props.candidateExam.selected_language\n                        )?.value\n                      }\n                    </span>\n                  </div>\n                  <div\n                    className={`${\n                      selectLang === true\n                        ? \"bg-yellow-800 text-white\"\n                        : \"bg-gray-50 hover:bg-blue-600\"\n                    } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                  >\n                    {selectLang === true ? (\n                      <FaTimes className=\"text-xl my-2 mx-2\" />\n                    ) : (\n                      <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                    )}\n                  </div>\n                </div>\n                {selectLang === true && (\n                  <div\n                    className=\"relative rounded overflow-hidden\"\n                    style={{ width: \"182px\" }}\n                  >\n                    <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                      {QuestionLanguages.map((item, i) => (\n                        <span\n                          onClick={() => {\n                            props.setQuestionLanguage(item.key);\n                            setSelectLang(!selectLang);\n                          }}\n                          key={i + 1}\n                          className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                            props.candidateExam.selected_language === item.key\n                              ? \"bg-blue-800 font-extrabold border-blue-800\"\n                              : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                          }`}\n                        >\n                          {props.candidateExam.selected_language ===\n                          item.key ? (\n                            <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                          ) : (\n                            <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                          )}{\" \"}\n                          {item.value}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"my-4 py-2 px-2 bg-white rounded\"\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.candidateExam.candidate_exam?.questions.find(\n                    (itm) =>\n                      itm.question_id === props.candidateExam.selected_question\n                  )?.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) =>\n                          itm.language === props.candidateExam.selected_language\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toTrueFalse(\n                      findSelectedQuestionDetails().find(\n                        (itm) =>\n                          itm.language === props.candidateExam.selected_language\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={props.candidateExam.selected_language}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toMatching(\n                      findSelectedQuestionDetails().find(\n                        (itm) =>\n                          itm.language === props.candidateExam.selected_language\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toSimpleCalculated(\n                      findSelectedQuestionDetails().find(\n                        (itm) =>\n                          itm.language === props.candidateExam.selected_language\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toShortAnswer(\n                      findSelectedQuestionDetails().find(\n                        (itm) =>\n                          itm.language === props.candidateExam.selected_language\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toNumerical(\n                      findSelectedQuestionDetails().find(\n                        (itm) =>\n                          itm.language === props.candidateExam.selected_language\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toCalculatedMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) =>\n                          itm.language === props.candidateExam.selected_language\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;\n","import React from \"react\";\nimport { IoNotifications } from \"react-icons/io5\";\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from \"../utils/utils\";\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n  proctoring: Proctoring;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (\n        let x: number = 0;\n        x < props.candidateExam.candidate_exam.questions.length;\n        x++\n      ) {\n        if (\n          props.candidateExam.candidate_exam.questions[x].question_id ===\n          question_id\n        ) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  };\n\n  let selectedIndexPrevious: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0\n        ? findIndex(props.candidateExam.selected_question)\n        : props.candidateExam.candidate_exam.questions.length\n      : -1;\n\n  let selectedIndexNext: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0 &&\n        findIndex(props.candidateExam.selected_question) <\n          props.candidateExam.candidate_exam.questions.length - 1\n        ? findIndex(props.candidateExam.selected_question)\n        : findIndex(props.candidateExam.selected_question) === 0\n        ? 0\n        : -1\n      : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(\n        (item) =>\n          questionAnswered(\n            props.candidateExam.question_answers,\n            item.question_id,\n            findQuestionType(item.type, props.questionTypes.questionTypes)!\n          ) === true\n      );\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {/* {console.log(\"Selected: \", selectedIndexNext)} */}\n      <div className=\"flex flex-row items-center\">\n        <div\n          onClick={() =>\n            props.setProfileWindowStatus(!props.windowStatus.profile)\n          }\n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}\n        >\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div\n              className=\"bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\"\n              style={{ position: \"relative\", top: \"-10px\", right: \"-12px\" }}\n            >\n              {props.proctoring.events.length}\n            </div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && (\n            <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">\n              New events <br />\n              are available\n            </div>\n          )}\n        </div>\n\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexPrevious - 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex justify-center items-center\"\n          style={{ height: \"fit-content\" }}\n        >\n          <MdChevronLeft className=\"text-xl\" />{\" \"}\n          <span className=\"hidden md:block\">Previous</span>\n        </button>\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">\n            Question{\" \"}\n            {props.candidateExam.selected_question &&\n              findIndex(props.candidateExam.selected_question) + 1}\n          </span>\n          {props.submitQuestionAnswer === true ? (\n            <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">\n              Saving question answer...\n            </span>\n          ) : (\n            <span className=\"text-xs\">Auto save is activated</span>\n          )}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div> */}\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexNext + 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex items-center\"\n        >\n          <span className=\"hidden md:block\">Next</span>{\" \"}\n          <MdChevronRight className=\"text-xl\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    system: system,\n    proctoring: proctoring,\n  };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;\n","import React from \"react\";\nimport { IoClose } from \"react-icons/io5\";\nimport userImage from \"../../../assets/profile.png\";\n\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring } from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { DATE } from \"../../../utils/functions\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose\n                  onClick={() => props.setProfileWindowStatus(false)}\n                  className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\"\n                />\n              </div>\n            </div>\n            <div\n              className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            >\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">\n              {props.auth.user.fname} {props.auth.user.lname}\n            </span>\n            <span className=\"text-gray-400 text-xs\">\n              ID: {props.auth.user.n_id}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>{props.proctoring.events.length}</span>\n          </div>\n          <div\n            className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\"\n            style={{ paddingBottom: \"550px\", paddingTop: \"10px\" }}\n          >\n            {props.proctoring.events.length === 0 ? (\n              <div className=\"text-white font-bold\">No events found!</div>\n            ) : (\n              props.proctoring.events.map((item, i) => (\n                <div className=\"flex flex-col text-gray-300 border-b py-2 border-gray-700\">\n                  <div\n                    key={i + 1}\n                    className=\"flex flex-row items-center my-1 gap-2\"\n                  >\n                    <div className=\"bg-gray-600 text-white h-6 w-6 px-3 rounded-full flex items-center justify-center\">\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span>{item.event_type_id}</span>\n                      <span className=\"font-bold\">{item.description}</span>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row justify-between items-center\">\n                    <span className=\"text-gray-500\">\n                      {DATE(item.time, \"DD/MM/YYYY\")}\n                    </span>\n                    <span className=\"bg-gray-600 px-2 rounded-full text-xs font-bold text-yellow-300\">\n                      {new Date(item.time).getHours()} :\n                      {new Date(item.time).getMinutes()} :\n                      {new Date(item.time).getSeconds()}\n                    </span>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {})(_Profile);\n\nexport default Profile;\n","import React from \"react\";\nimport { MdCheckCircle, MdClose } from \"react-icons/md\";\nimport { Auth } from \"../../../actions/auth\";\nimport { candidateExamStoreInterface } from \"../../../actions/candidate_exam\";\nimport { questionTypesStoreInterface } from \"../../../actions/questionTypes\";\nimport { System } from \"../../../actions/system\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { course } from \"../../../interfaces/course\";\nimport { QuestionInterface } from \"../../../interfaces/question\";\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from \"../utils/utils\";\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamPendingQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    );\n  }\n  return (\n    <div\n      className={`pt-4 border-t border-gray-300 ${\n        PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"\n      }`}\n    >\n      {props.candidateExam.candidate_exam &&\n      AnsweredQuest.length !==\n        props.candidateExam.candidate_exam.questions.length &&\n      PendingQuest.length !== 0 ? (\n        <div>\n          <div className=\"grid md:grid-cols-2 h-full\">\n            <div className=\"md:col-span-2 h-full\">\n              <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n                {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n                <div className=\"flex flex-col\">\n                  <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">\n                    Submit incomplete questions\n                  </div>\n                  <div className=\"text-gray-700 text-sm text-left pb-2\">\n                    Please, make sure to complete the following remaining\n                    questions which are not yet answered. Please, if you proceed\n                    anyway, for these questions, you will not be marked!\n                  </div>\n                </div>\n                <div className=\"mr-4\">\n                  <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => props.setSubmitModal(false)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"md:col-span-2\">\n              <div className=\"\">\n                <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                  {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                  <div className=\"text-center mb-5 text-gray-600 font-bold\">\n                    Pick a question number you want to answer directly\n                  </div>\n                  <div className=\"flex justify-center items-center text-center\">\n                    <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                      {props.candidateExam.candidate_exam.questions.map(\n                        (item, i) =>\n                          PendingQuest.find(\n                            (itm) => itm.question_id === item.question_id\n                          )?.question_id !== undefined && (\n                            <div\n                              onClick={() => {\n                                props.candidateExam.candidate_exam &&\n                                  props.setSelectedExamQuestion(\n                                    props.candidateExam.candidate_exam\n                                      .exam_paper_id,\n                                    item.question_id\n                                  );\n                                props.setSubmitModal(false);\n                              }}\n                              key={i + 1}\n                              className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\"\n                            >\n                              {i + 1}\n                            </div>\n                          )\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                  <div\n                    onClick={() => props.setSubmitModal(false)}\n                    className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\"\n                  >\n                    Back to edit\n                  </div>\n                  <div\n                    onClick={() => props.submitExam()}\n                    className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\"\n                  >\n                    Submit anyway\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"px-4 pb-2\">\n          <div className=\"flex flex-row items-center justify-between mb-4\">\n            <div className=\"text-blue-700 font-bold\">\n              Hey{\" \"}\n              <b>\n                <u>{props.auth.user.fname}</u>\n              </b>\n              , All questions have been answered, are you sure do you want to\n              submit the final answers?\n            </div>\n            <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n              <MdClose\n                className=\"cursor-pointer font-extrabold text-3xl\"\n                onClick={() => props.setSubmitModal(false)}\n              />\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between\">\n            <div\n              onClick={() => props.setSubmitModal(false)}\n              className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\"\n            >\n              <span className=\"\">Back to edit</span>\n            </div>\n            <div\n              onClick={() => {\n                props.submitExam();\n              }}\n              className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\"\n            >\n              <MdCheckCircle className=\"text-3xl\" />\n              <span className=\"\">Submit exam</span>\n            </div>\n          </div>\n\n          <div className=\"my-2\">\n            <div className=\"font-extrabold text-xl text-gray-700 my-2 mt-4\">\n              Verify your answers\n            </div>\n            <div\n              className=\"flex flex-col gap-3 overflow-y-auto\"\n              style={{ maxHeight: \"100%\" }}\n            >\n              {props.candidateExam.candidate_exam === null ? (\n                <Loading />\n              ) : (\n                AnsweredQuest.length > 0 &&\n                AnsweredQuest.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className=\"bg-gray-200 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast\"\n                  >\n                    <div className=\"grid md:grid-cols-12 w-full\">\n                      <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                        <div\n                          key={i + 1}\n                          className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\"\n                        >\n                          {i + 1}\n                        </div>\n                        <div className=\"text-sm\">\n                          <div>{item.question[0].description}</div>\n                          <div className=\"text-blue-700 font-bold text-sm\">\n                            Answer:&nbsp; Done\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-span-2 float-right flex items-center justify-end\">\n                        <div\n                          onClick={() => {\n                            props.candidateExam.candidate_exam &&\n                              props.setSelectedExamQuestion(\n                                props.candidateExam.candidate_exam\n                                  .exam_paper_id,\n                                item.question_id\n                              );\n                            props.setSubmitModal(false);\n                          }}\n                          className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\"\n                        >\n                          Edit\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionsReview;\n","import React, { Fragment } from \"react\";\nimport { useState } from \"react\";\nimport { IoDocumentTextOutline } from \"react-icons/io5\";\nimport { MdCheckCircle } from \"react-icons/md\";\nimport Modal, {\n  Themes,\n  ModalSize,\n  ModalMarginTop,\n} from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from \"../utils/utils\";\nimport { course } from \"../../../interfaces\";\nimport QuestionsReview from \"./QuestionsReview\";\nimport { CountDown } from \"../../../components/CountDown/CountDown\";\n\ninterface TestTitleInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n  start_time: string;\n  duration_min: number;\n  timeout: () => void;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n\n  const TotalAnswered: number = props.candidateExam.candidate_exam\n    ? NumberOfAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam\n    ? (TotalAnswered * 100) /\n      props.candidateExam.candidate_exam.questions.length\n    : 0;\n  return (\n    <Fragment>\n      <div className=\"bg-gray-800\">\n        <div className=\"grid grid-cols-6\">\n          <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n            <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n              <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n              <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n                <span className=\"font-bold text-lg truncate -mb-1\">\n                  {props.selectedExam?.course_name}\n                </span>\n                <span className=\"text-gray-300 text-xs truncate\">\n                  Code: {props.selectedExam?.course_code}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"col-span-6 md:col-span-4 lg:col-span-4\"\n            style={{ alignSelf: \"center\" }}\n          >\n            <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n              <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n                <div className=\"text-gray-200 text-sm w-full hidden lg:block\">\n                  Completed {TotalAnswered} of{\" \"}\n                  {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.questions.length}\n                </div>\n                <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                  <div\n                    className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  ></div>\n                </div>\n                <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                  <div\n                    className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  >\n                    <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">\n                      {answeredPercentage}%\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-4 hidden lg:block h-full\">\n                <div className=\"flex flex-row justify-center items-center h-full\">\n                  <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                    <div>\n                      Start time:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam?.start_time}\n                      </span>\n                    </div>\n                    <div>\n                      Duration:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam &&\n                        props.candidateExam.candidate_exam.duration / 60 > 1\n                          ? (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hours\"\n                          : props.candidateExam.candidate_exam &&\n                            (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hour\"}\n                        {props.candidateExam.candidate_exam &&\n                          props.candidateExam.candidate_exam.duration % 60 >\n                            0 &&\n                          \", \" +\n                            (props.candidateExam.candidate_exam.duration % 60) +\n                            \" mins\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-5 bg-gray-800\">\n                <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                  <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                    <span>Counting down</span>\n                    <div className=\"text-lg lg:text-xl font-bold\">\n                      <CountDown\n                        start_time={props.start_time}\n                        duration_min={props.duration_min}\n                        timeout={() => props.timeout()}\n                        returnString={true}\n                        labels\n                      />\n                    </div>\n                  </div>\n                  {props.submitQuestionAnswer === true ? (\n                    <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 border border-gray-600 animate-pulse\">\n                      Saving...\n                    </div>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        props.SubmitAnswer();\n                        setSubmitModal(true);\n                      }}\n                      type=\"button\"\n                      className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\"\n                    >\n                      <MdCheckCircle className=\"text-white text-xl\" />\n                      <span>Submit</span>\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {submitModal === true && (\n        <Modal\n          title={\"\"}\n          backDrop={true}\n          theme={\n            props.candidateExam.question_answers.length === 0\n              ? Themes.default\n              : Themes.default\n          }\n          close={() => setSubmitModal(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.maxWidth}\n          displayClose={false}\n          padding={{ title: false }}\n          marginTop={ModalMarginTop.small}\n        >\n          <QuestionsReview\n            auth={props.auth}\n            candidateExam={props.candidateExam}\n            system={props.system}\n            setSelectedExamQuestion={props.setSelectedExamQuestion}\n            submitQuestionAnswer={props.submitQuestionAnswer}\n            questionTypes={props.questionTypes}\n            loadQuestionTypes={props.loadQuestionTypes}\n            submitExam={props.submitExam}\n            selectedExam={props.selectedExam}\n            setSubmitModal={setSubmitModal}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n} => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React from \"react\";\nimport { MdCheckCircleOutline, MdHighlightOff } from \"react-icons/md\";\nimport { InitialExamDetails } from \"../../actions/candidate_exam\";\n\ninterface ProctoringRuleItemProps {\n  examDetails: () => InitialExamDetails | null;\n  rule_key: string;\n}\n\nconst ProctoringRuleItem = (props: ProctoringRuleItemProps) => {\n  const getDetails = () => {\n    let res: {\n      value: string;\n      status: boolean;\n    } | null = null;\n    if (props.examDetails() !== null) {\n      switch (props.rule_key) {\n        case \"right_click_enabled\":\n          res = {\n            value: \"Right click\",\n            status: props.examDetails()!.rules.right_click_enabled,\n          };\n          break;\n        case \"copy_enabled\":\n          res = {\n            value: \"Copy text\",\n            status: props.examDetails()!.rules.copy_enabled,\n          };\n          break;\n        case \"paste_enabled\":\n          res = {\n            value: \"Paste item or text\",\n            status: props.examDetails()!.rules.paste_enabled,\n          };\n          break;\n        case \"stop_candidate_when_comeback\":\n          res = {\n            value: \"Coming back after leaving\",\n            status: props.examDetails()!.rules.stop_candidate_when_comeback,\n          };\n          break;\n        case \"allow_to_leave_browser\":\n          res = {\n            value: \"Leave browser\",\n            status: props.examDetails()!.rules.allow_to_leave_browser,\n          };\n          break;\n      }\n    }\n    return res;\n  };\n  return (\n    <div className=\"flex flex-row items-center justify-between w-full border-b py-2\">\n      <div\n        className={`flex flex-row items-center ${\n          getDetails()?.status === true\n            ? \"text-blue-600 font-bold\"\n            : \"text-yellow-800 font-bold\"\n        }`}\n      >\n        {getDetails()?.status === true ? (\n          <MdCheckCircleOutline className=\"text-2xl mr-3\" />\n        ) : (\n          <MdHighlightOff className=\"text-2xl mr-3\" />\n        )}\n        <span>{getDetails()?.value}</span>\n      </div>\n      <span\n        className={`rounded-full px-3 py-1 border font-bold ${\n          getDetails()?.status === true\n            ? \"bg-white text-blue-800 border-blue-100\"\n            : \"bg-yellow-50 text-yellow-800 border-yellow-100\"\n        }`}\n      >\n        {getDetails()?.status === true ? \"Allowed\" : \"Prohibited\"}\n      </span>\n    </div>\n  );\n};\n\nexport default ProctoringRuleItem;\n","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  Socket,\n  FC_AddRules,\n  FT_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  EventInterface,\n  Events,\n  EventsLabels,\n  LiveServer__Candidate_Details,\n  LiveServer__Room,\n  question_answer,\n} from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport {\n  CandidateExam,\n  CandidateExamQuestionAnswer,\n  ExamInterface,\n  ExamResultsDetails,\n  examStatus,\n  UserExamActions,\n  userExamDetails,\n} from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdCheckCircle, MdInfoOutline } from \"react-icons/md\";\nimport ProctoringRuleItem from \"../../components/ProctoringRuleItem/ProctoringRuleItem\";\n\ninterface DoExamProps {\n  FC_GetProfileDetails: Function;\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (\n    exam_id: string,\n    CheckUserExam: (candidateExam: CandidateExam) => void,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (\n    userExamDetails: userExamDetails,\n    callback: (loading: boolean) => void,\n    setLoadExamResultMessage: (msg: string, status: boolean) => void,\n    BackToExamination: (exam: ExamResultsDetails) => void\n  ) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  CleanCandidateExamAnswers: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (\n    answer: CandidateExamQuestionAnswer,\n    callback: (loading: boolean) => void,\n    actionStatus: (msg: string, status: boolean) => void\n  ) => void;\n  GetUserExamDetails: (\n    request: RequestUserExamDetailsInterface,\n    callback: (loading: boolean) => void\n  ) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n  setExamStatus: (\n    user: string,\n    exam_paper_id: string,\n    action: UserExamActions,\n    reason: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_SaveEvent: Function;\n  socket: Socket;\n  FC_AddRules: FT_AddRules;\n  loadCandidateExamFromSupervisor: (\n    candidateExam: CandidateExam,\n    firstTime: boolean\n  ) => void;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n  changingExamStatus: boolean;\n  inExam: boolean;\n\n  // Exam counter\n  start_exam: boolean;\n  start_time: string;\n  duration: number;\n  added_minutes: number;\n  group_id: string;\n  submittedExam: boolean;\n  candidateDetailsProctoring: LiveServer__Candidate_Details | null;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n      changingExamStatus: false,\n      // timer\n      start_exam: false,\n      start_time: \"\",\n      duration: 0,\n      added_minutes: 0,\n      group_id: \"\",\n      inExam: false,\n      submittedExam: false,\n      candidateDetailsProctoring: null,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  };\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    // console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  changingExamStatusLoading = (status: boolean) => {\n    this.setState({ changingExamStatus: status });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check;\n      }\n    }\n    return null;\n  };\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (\n      this.props.positions.selected_position !== null &&\n      this.props.candidateExam.selected_exam_details !== null\n    ) {\n      if (this.props.candidateExam.exam_room_details !== null) {\n        // alert(this.props.candidateExam.exam_room_details.district_id)\n        this.props.RequestUserExamDetails(\n          {\n            user: this.props.auth.user.user_id,\n            position: this.props.positions.selected_position.position_id,\n            exam: exam,\n            userExamLocation: {\n              district_id:\n                this.props.candidateExam.exam_room_details.district_id,\n              center_id: this.props.candidateExam.exam_room_details.center_id,\n              room_id: this.props.candidateExam.exam_room_details.room_id,\n            },\n          },\n          this.setLoading,\n          this.setLoadExamResultMessage,\n          this.props.BackToExamination\n        );\n      }\n    }\n  };\n\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  componentWillUnmount = () => {\n    if (this.props.candidateExam.exam_room_details) {\n      this.props.socket.socket.emit(Events.USER_DISCONNECTED_ONLINE_SERVER, {\n        room_id: this.props.candidateExam.exam_room_details.room_id,\n        user_id: this.props.auth.user.user_id,\n      });\n    }\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      // this.props.GetUserExamDetails(\n      //   {\n      //     period: this.props.candidateExam.candidate_exam.period,\n      //     course: this.props.candidateExam.candidate_exam.course,\n      //     user: this.props.auth.user.user_id,\n      //   },\n      //   this.setLoading\n      // );\n      let test = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.exam_paper ===\n          this.props.candidateExam.candidate_exam?.exam_paper_id\n      );\n      if (test === undefined) {\n        this.props.CleanCandidateExam(\n          this.props.candidateExam.candidate_exam.exam_paper_id\n        );\n      }\n    }\n  };\n\n  SubmitAnswer = () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.question_answers.length > 0\n    ) {\n      let examQuestionIds: string[] = [];\n      for (let temp of this.props.candidateExam.candidate_exam.questions) {\n        examQuestionIds = [...examQuestionIds, temp.question_id];\n      }\n      for (let answer of this.props.candidateExam.question_answers) {\n        if (\n          answer.status === false &&\n          this.props.candidateExam.exam_room_details\n        ) {\n          //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer(\n            {\n              user: this.props.auth.user.user_id,\n              exam_paper: this.props.candidateExam.candidate_exam.exam_paper_id,\n              // New updates need to be checked\n              position: this.props.candidateExam.exam_room_details.position_id,\n              disability: false,\n              gender: this.props.auth.user.sex,\n              in_education: false,\n              questions_order: examQuestionIds,\n              // End new updates\n              question: answer.question_id,\n              language: this.props.candidateExam.selected_language,\n              userAnswer: answer.answer,\n            },\n            this.setSubmitQuestionAnswer,\n            this.setLoadExamResultNoMessage\n          );\n        }\n      }\n    }\n  };\n\n  submitExam = async () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.exam_room_details !== null\n    ) {\n      let exam_id = this.props.candidateExam.candidate_exam.exam_paper_id;\n      let user_id = this.props.auth.user.user_id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(\n          `${API.DO_EXAM}/answersheet/submit/${user_id}/${exam_id}`\n        );\n        if (res) {\n          this.doneExam();\n          this.setState({ submittedExam: true });\n          // this.props.CleanCandidateExam(exam_id);\n          // Exit full screen\n          if (document.fullscreenElement) {\n            if (document.exitFullscreen) {\n              document.exitFullscreen();\n            }\n          }\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success,\n          });\n        }\n      } catch (error: any) {\n        // console.log(\"Submit exam err: \", { ...error });\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  };\n\n  startExam = () => {\n    this.setState({ display_exam: true, start_exam: true });\n    this.props.candidateExam.selected_exam_id !== null &&\n      this.requestExam(\n        this.props.candidateExam.selected_exam_id,\n        (status: boolean, exam: CandidateExam) => {\n          // console.log(\"Testing exam from supervisor: \", exam);\n          if (status === true) {\n            this.props.loadCandidateExamFromSupervisor(\n              exam,\n              this.state.candidateDetailsProctoring !== null &&\n                this.state.candidateDetailsProctoring.user.joined === true\n                ? true\n                : false\n            );\n          }\n        }\n      );\n  };\n  pauseExam = () => {\n    this.setState({ display_exam: false, start_exam: false, inExam: false });\n  };\n\n  doneExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Done the exam\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.DONE_EXAM,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.EXAM_DONE_SERVER, data);\n    }\n  };\n\n  timeOutExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Time out\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.TIME_OUT,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.TIME_OUT_SERVER, data);\n      this.submitExam();\n      // console.log(\"this.submitExam(); ==> timeOutExam()\");\n    }\n  };\n\n  requestExam = (\n    exam_id: string,\n    getExam: (status: boolean, exam: CandidateExam) => void\n  ) => {\n    this.props.socket.socket.emit(Events.REQUEST_EXAM_SERVER, exam_id, getExam);\n  };\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/candidate-exams\" />;\n    }\n\n    if (\n      this.state.loading === true ||\n      this.props.candidateExam.exam_room_details === null\n    ) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Loading, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Submitting your exam, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50 w-full\">\n        <Fragment>\n          {/* {console.log(\"Rules: \")} */}\n          {this.state.inExam === false ? (\n            <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n              <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n                <div className=\"text-gray-600 text-lg px-4 mb-4\">Confirm</div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <div\n                    onClick={() => window.location.reload()}\n                    className=\"btn bg-yellow-100 text-yellow-800 border border-yellow-600 w-max text-center cursor-pointer\"\n                  >\n                    Click here to reload\n                  </div>\n                </div>\n                <Loading />\n              </div>\n            </div>\n          ) : (\n            <ProctoringCandidateOnline\n              startExam={() => {\n                this.startExam();\n                this.setState({ start_exam: true });\n              }}\n              restartExam={() => {\n                if (this.props.candidateExam.candidate_exam !== null) {\n                  let id =\n                    this.props.candidateExam.candidate_exam.exam_paper_id;\n                  this.props.CleanCandidateExamAnswers(id);\n\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    id,\n                    UserExamActions.Restart,\n                    \"Exam restarted by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n\n                  this.props.candidateExam.candidate_exam &&\n                    this.props.requestUserAnswers(\n                      this.props.candidateExam.candidate_exam.exam_paper_id,\n                      this.props.auth.user.user_id,\n                      this.setLoading\n                    );\n                }\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              stopExam={() => {\n                // EXAM DONE ON WHOLE ROOM\n                // Stop all the room\n                // this.setState({ start_exam: false });\n                // console.log(\"DONE whole room\");\n                this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Done,\n                    \"All candidates ended by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              room_id={this.props.candidateExam.exam_room_details.room_id}\n              exam_id={\n                this.props.candidateExam.candidate_exam === null\n                  ? this.props.candidateExam.selected_exam_id\n                  : this.props.candidateExam.candidate_exam.exam_paper_id\n              }\n              position_id={\n                this.props.candidateExam.exam_room_details.position_id\n              }\n              application_session_id={\n                this.props.candidateExam.exam_room_details.period_id\n              }\n              removeClient={() => {\n                // REMOVE INDIVIDUAL\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Removed,\n                    \"Exam stopped by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              examAlreadyDone={() => {\n                this.props.candidateExam.candidate_exam &&\n                  this.props.requestUserAnswers(\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    this.props.auth.user.user_id,\n                    this.setLoading\n                  );\n                // console.log(\"Exam already done\");\n              }}\n              candidateStopExam={(reason: string) => {\n                // PAUSE\n                // console.log(`candidateStopExam: ${reason}`);\n                // this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Paused,\n                    reason,\n                    this.changingExamStatusLoading\n                  );\n              }}\n              candidateContinueExam={(reason: string) => {\n                // console.log(`candidateContinueExam: ${reason}`);\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Continue,\n                    reason,\n                    this.changingExamStatusLoading\n                  );\n\n                this.props.candidateExam.candidate_exam &&\n                  this.props.requestUserAnswers(\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    this.props.auth.user.user_id,\n                    this.setLoading\n                  );\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              joinedRoom={(data: LiveServer__Room) => {\n                // console.log(\"Joined room: \", data);\n                this.setState({\n                  group_id: data.group_id,\n                });\n              }}\n              changeTime={(timer: {\n                duration: number;\n                start_time: string;\n                added_minutes: string;\n              }) => {\n                this.setState({\n                  duration: timer.duration,\n                  start_time: timer.start_time,\n                });\n              }}\n              candidateProctoringDetails={(\n                data: LiveServer__Candidate_Details\n              ) => {\n                this.setState({ candidateDetailsProctoring: data });\n                if (data.user.joined === true) {\n                  this.startExam();\n                  this.props.candidateExam.candidate_exam &&\n                    this.props.requestUserAnswers(\n                      this.props.candidateExam.candidate_exam.exam_paper_id,\n                      this.props.auth.user.user_id,\n                      this.setLoading\n                    );\n                }\n                // console.log(\"Joined: \", data.user.joined);\n              }}\n            >\n              {this.state.start_exam === false ||\n              (this.props.candidateExam.candidate_exam === null &&\n                this.state.inExam === true) ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    <MdInfoOutline className=\"text-9xl text-blue-600\" />\n                    <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">\n                      Please wait for the supervisor\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The supervisor will allow you to start your exam, please\n                      wait or contact him/her when forgot to let you start exam!\n                    </div>\n\n                    <Loading />\n                    <div className=\"flex flex-row items-center -mt-2\">\n                      <div\n                        onClick={() => window.location.reload()}\n                        className=\"btn bg-blue-100 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-808\"\n                      >\n                        Reload page\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : this.props.candidateExam.candidate_exam === null ||\n                this.props.candidateExam.candidate_exam === null ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-2 px-4 py-4 w-full h-full\">\n                    <div className=\"text-gray-500 text-lg px-4 mb-4\">\n                      Waiting for loading exam...\n                    </div>\n                    <Loading />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  {this.state.completedTest === true &&\n                  this.props.doExam.exam_answers?.exam_questions_answers\n                    ?.questionAnswers !== null ? (\n                    <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                      <DoExamResults\n                        page=\"doExam\"\n                        answeredQuestions={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers\n                        }\n                        testAnswers={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers.length === undefined\n                            ? 0\n                            : this.props.doExam.exam_answers\n                                ?.exam_questions_answers?.questionAnswers.length\n                        }\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                      <div className=\"grid md:grid-cols-12 h-full\">\n                        {this.state.windowStatus.profile === true && (\n                          <div\n                            className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                          >\n                            <Profile\n                              setProfileWindowStatus={\n                                this.setProfileWindowStatus\n                              }\n                            />\n                          </div>\n                        )}\n                        <div\n                          className={`col-span-${\n                            this.state.windowStatus.profile === false\n                              ? \"12\"\n                              : \"10\"\n                          } bg-gray-800 shadow-lg h-full`}\n                        >\n                          <div className=\"flex flex-row h-screen bg-gray-800\">\n                            <div className=\"h-full\">\n                              {/* Questions list */}\n                              <div className={`h-full`}>\n                                <QuestionsList\n                                  windowStatus={this.state.windowStatus}\n                                  setProfileWindowStatus={\n                                    this.setProfileWindowStatus\n                                  }\n                                  setQuestionsListWindowStatus={\n                                    this.setQuestionsListWindowStatus\n                                  }\n                                  questionTypes={this.props.questionTypes}\n                                  loadQuestionTypes={\n                                    this.props.loadQuestionTypes\n                                  }\n                                  SubmitAnswer={this.SubmitAnswer}\n                                />\n                              </div>\n                            </div>\n                            <div className=\"w-full h-full\">\n                              {/* Do exam test title */}\n                              <DoExamTitle\n                                setCompletedTest={this.setCompletedTest}\n                                windowStatus={this.state.windowStatus}\n                                setProfileWindowStatus={\n                                  this.setProfileWindowStatus\n                                }\n                                setQuestionsListWindowStatus={\n                                  this.setQuestionsListWindowStatus\n                                }\n                                questionTypes={this.props.questionTypes}\n                                loadQuestionTypes={this.props.loadQuestionTypes}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                                submitExam={() => {\n                                  this.submitExam();\n                                  // console.log(\n                                  //   \"this.submitExam() ===> <DoExamTitle />\"\n                                  // );\n                                }}\n                                selectedExam={this.props.course.selected_course}\n                                SubmitAnswer={this.SubmitAnswer}\n                                start_time={this.state.start_time}\n                                duration_min={this.state.duration}\n                                timeout={() => this.timeOutExam()}\n                              />\n                              {/* Question details */}\n                              <QuestionDetails\n                                questionAnswers={\n                                  this.props.doExam.exam_answers\n                                    ?.exam_questions_answers?.questionAnswers\n                                }\n                                answerQuestionFn={this.answerQuestionFn}\n                                selectedQuestion={this.state.selectedQuestion}\n                                setSelectedQuestion={this.setSelectedQuestion}\n                                preview={false}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <Footer\n                        windowStatus={this.state.windowStatus}\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                        setQuestionsListWindowStatus={\n                          this.setQuestionsListWindowStatus\n                        }\n                        questionTypes={this.props.questionTypes}\n                        loadQuestionTypes={this.props.loadQuestionTypes}\n                        SubmitAnswer={this.SubmitAnswer}\n                        submitQuestionAnswer={this.state.submitQuestionAnswer}\n                      />\n                    </div>\n                  )}\n                </div>\n              )}\n            </ProctoringCandidateOnline>\n          )}\n          {this.props.candidateExam.candidate_exam === null &&\n            this.state.inExam === false && (\n              <Modal\n                title=\"\"\n                backDrop={true}\n                theme={Themes.default}\n                close={() => this.props.setSelectedCandidateExam(null)}\n                backDropClose={false}\n                widthSizeClass={ModalSize.extraLarge}\n                displayClose={false}\n                padding={{ title: false }}\n              >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? (\n                    <Loading />\n                  ) : (\n                    <div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                        <div className=\"my-2 w-full\">\n                          <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                            {this.props.course.selected_course && (\n                              <div>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_code\n                                  }\n                                  -\n                                </span>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_name\n                                  }\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam date:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {DATE(\n                                this.examDetails()!.exam_date,\n                                \"DD/MM/YYYY\"\n                              )}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Start time:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails()?.start_time}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam duration:\n                            </span>\n                            {this.examDetails() !== null && (\n                              <span className=\"text-blue-600 font-bold\">\n                                {this.examDetails()!.duration / 60 >= 1 &&\n                                  this.examDetails()!.duration / 60 +\n                                    \" hrs\"}{\" \"}\n                                {this.examDetails()!.duration % 60 > 0 && (\n                                  <span>\n                                    {this.examDetails()!.duration % 60} mins\n                                  </span>\n                                )}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                      <div className=\"flex flex-row justify-center items-center\">\n                        {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                      </div>\n                      <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Examination rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: this.examDetails()!.termes,\n                              }}\n                            ></div>\n                          )}\n                        </div>\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Exam Proctoring rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <>\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"right_click_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"copy_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"paste_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"stop_candidate_when_comeback\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"allow_to_leave_browser\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        <span className=\"text-blue-700\">\n                          If you are ready, click to start the exam now, The\n                          system will start to count your time!\n                        </span>\n                      </div>\n                      <div className=\"flex flex-row items-center justify-between mt-2\">\n                        <button\n                          onClick={() =>\n                            this.props.setSelectedCandidateExam(null)\n                          }\n                          className=\"btn bg-gray-50 text-gray-600 border\"\n                        >\n                          Go Back\n                        </button>\n                        <button\n                          onClick={() => {\n                            this.setState({ inExam: true });\n                            this.props.candidateExam.selected_exam_id !==\n                              null &&\n                              this.requestExam(\n                                this.props.candidateExam.selected_exam_id,\n                                (status: boolean, exam: CandidateExam) => {\n                                  if (status === true) {\n                                    this.props.loadCandidateExamFromSupervisor(\n                                      exam,\n                                      this.state.candidateDetailsProctoring !==\n                                        null &&\n                                        this.state.candidateDetailsProctoring\n                                          .user.joined === true\n                                        ? true\n                                        : false\n                                    );\n                                  }\n                                }\n                              );\n                          }}\n                          className=\"btn bg-blue-600 text-white\"\n                        >\n                          I accept, Start exam\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </Modal>\n            )}\n          {this.state.submittedExam === true && (\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.medium}\n              displayClose={false}\n              padding={{ title: false }}\n            >\n              <div className=\"px-5 py-5\">\n                <div className=\"flex flex-row items-center justify-center\">\n                  <MdCheckCircle className=\"text-7xl text-blue-600\" />\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <span className=\"text-3xl font-extrabold text-blue-600 text-center\">\n                    Exam submitted\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center mt-3 mb-5\">\n                  <span className=\"text-center text-gray-500\">\n                    Thank you for attending the exam, Your exam has been\n                    submitted successfully!, click continue to the applications\n                    list, you will open the application to view your score right\n                    now.\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <div\n                    onClick={() => {\n                      this.setState({ submittedExam: false });\n                      if (document.fullscreenElement) {\n                        if (document.exitFullscreen) {\n                          document.exitFullscreen();\n                        }\n                      }\n                      this.props.candidateExam.candidate_exam &&\n                        this.props.CleanCandidateExam(\n                          this.props.candidateExam.candidate_exam.exam_paper_id\n                        );\n                      window.location.reload();\n                    }}\n                    className=\"btn bg-blue-100 text-blue-700 rounded w-max cursor-pointer\"\n                  >\n                    Continue to view marks\n                  </div>\n                </div>\n              </div>\n            </Modal>\n          )}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n  socket,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  positions: positionsStoreInterface;\n  socket: Socket;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    course: course,\n    periods: periods,\n    questionTypes: questionTypes,\n    positions: positions,\n    socket,\n  };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  FC_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n})(_DoEam);\n"],"sourceRoot":""}