{"version":3,"sources":["components/Modal/Modal.tsx","utils/functions.ts","assets/profile.png","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","containers/DoExam/DoExam.tsx"],"names":["Themes","ModalMarginTop","ModalSize","Modal","props","themeColor","title","backDrop","theme","close","backDropClose","widthSizeClass","displayClose","padding","body","footer","primary","secondary","danger","success","warning","onClick","className","undefined","marginTop","none","style","width","maxHeight","height","maxWidth","overflowY","margin","zIndex","default","children","errorToText","error","console","error_res","JSON","parse","request","response","errors","length","message","DATE","data","format","date","Date","getFullYear","getMonth","slice","getDate","checkIfImageExists","url","callback","img","Image","src","complete","onload","onerror","calculate_age","dob","diff_ms","now","getTime","age_dt","Math","abs","getUTCFullYear","MultipleChoice","checkAnswer","item","res","available_answers","check","find","itm","question_id","selectedQuestionAnswer","x","answer","id","status","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","test","answers","a","value","map","oldAnswers","temp","type","questionTypeElementsType","SingleMultiple","t","addAnswer","toMultipleChoice","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","TrueFalse","Matching","checkIfSelected","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","question","language","key","testAnswerLang","it","toString","checkAnswerStatus","selectedLanguage","findWord","arr","ReturnMatchingStatus","newItem","onChange","e","target","selected","SimpleCalculated","answeredValue","ShortAnswer","minHeight","Numerical","CalculatedMultipleChoice","filter","QuestionDetails","connect","auth","doExam","candidateExam","system","questionTypes","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","useState","loading","setLoading","selectLang","setSelectLang","QuestionData","candidate_exam","q","selected_question","findSelectedQuestionDetails","Loading","LoadingType","white","submitQuestionAnswer","selected_language","description","i","findQuestionType","question_answers","log","SimpleCalculate","Numeric","Footer","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","findIndex","selectedIndexPrevious","selectedIndexNext","ConfirmSubmitAnswer","exam_id","questionAnswered","SubmitAnswer","setProfileWindowStatus","windowStatus","profile","position","top","right","questionsList","selected_exam_id","Profile","proctoring","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","events","time","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","setSubmitModal","submitExam","DoExamTitle","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","course_name","course_code","alignSelf","start_time","duration","small","DoExamResults","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","page","_DoEam","setState","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","setExamQuestionAnswer","setCompletedTest","completedTest","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","questionAnswers","examDetails","periods","selected_period","selected_exam_details","checkUserExam","exam","positions","selected_position","RequestUserExamDetails","user_id","position_id","setLoadExamResultMessage","BackToExamination","componentDidMount","course","courses","loadCourses","exam_questions_answers","testAnswers","setLoadExamResultNoMessage","msg","PushPopupAlert","PopupAlertTheme","GetUserExamDetails","period","user_exams_done","CleanCandidateExam","SubmitExamQuestionAnswer","userAnswer","submitWholeExam","axios","put","API","DO_EXAM","startExam","display_exam","pauseExam","examStatus","loadUserExamErr","this","exam_room_details","user_exam_details","ProctoringCandidateOnline","restartExam","loadCandidateExam","stopExam","room_id","ExamId","application_session_id","period_id","removeClient","QuestionsList","selected_course","preview","setSelectedCandidateExam","large","exam_date","dangerouslySetInnerHTML","__html","termes","Component","DoExam","ChangeExamStatus","setSelectedPeriod"],"mappings":"yJAAA,0GAMYA,EASAC,EAQAC,EAvBZ,e,SAMYF,K,kBAAAA,E,kBAAAA,E,sBAAAA,E,gBAAAA,E,kBAAAA,E,mBAAAA,M,cASAC,K,aAAAA,E,eAAAA,E,iBAAAA,E,gBAAAA,E,iBAAAA,M,cAQAC,K,iBAAAA,E,yBAAAA,E,wBAAAA,E,6BAAAA,E,gCAAAA,M,KAqFGC,IA/DD,SAACC,GACb,IAWIC,EAVFC,EAQkBF,EARlBE,MACAC,EAOkBH,EAPlBG,SACAC,EAMkBJ,EANlBI,MACAC,EAKkBL,EALlBK,MACAC,EAIkBN,EAJlBM,cACAC,EAGkBP,EAHlBO,eACAC,EAEkBR,EAFlBQ,aAPF,EASoBR,EADlBS,eARF,MAQY,CAAEP,OAAO,EAAMQ,MAAM,EAAMC,QAAQ,GAR/C,EAaA,OAAQP,GACN,KAAKR,EAAOgB,QACVX,EAAa,WACb,MACF,KAAKL,EAAOiB,UACVZ,EAAa,WACb,MACF,KAAKL,EAAOkB,OACVb,EAAa,UACb,MACF,KAAKL,EAAOmB,QACVd,EAAa,YACb,MACF,KAAKL,EAAOoB,QACVf,EAAa,aACb,MACF,QACEA,EAAa,QAGjB,OACE,qCACE,qBAAKgB,QAAS,kBAAYX,GAAiBD,KAASa,UAAS,6FAAoG,IAAbf,EAAoB,KAAO,OAC/K,sBAAKe,UAAS,uDAAiEC,IAApBnB,EAAMoB,UAA0BvB,EAAewB,KAAOrB,EAAMoB,UAAzG,2EAAqLb,EAArL,mCAA6OY,IAApBnB,EAAMoB,WAA2BpB,EAAMoB,YAAcvB,EAAewB,KAAO,oBAAsB,kBAA1T,oBAA+VC,MAAO,CAACC,MAAO,OAAQC,UAAW,OAAQC,OAAO,GAAD,OAAKlB,IAAmBT,EAAU4B,cAA+BP,IAApBnB,EAAMoB,UAA0B,OAAS,QAAU,eAAiBO,UAAW,OAAQC,OAAQ,OAAQC,OAAQ,UAAzjB,UACE,sBAAKX,UAAS,kCAA6BjB,EAA7B,aAA6D,IAAlBQ,EAAQP,MAAiB,YAAc,GAAlF,2BAAwGE,IAAUR,EAAOkC,SAAW1B,IAAUR,EAAOiB,UAAY,QAAU,SAAzL,UACIX,GAAmB,KAAVA,EAA8B,oBAAIgB,UAAS,qBAAb,SAAsChB,IAArD,yBACR,IAAjBM,EAAyB,GAAK,qBAAKU,UAAU,+DAAf,SAA8E,cAAC,IAAD,CAASA,UAAU,yCAAyCD,QAAS,kBAAWZ,YAE/L,qBACEa,UAAS,qBAAgC,IAAjBT,EAAQC,KAAgB,YAAc,IADhE,SAGE,8BAAyB,KAAnBV,EAAM+B,SAAkB/B,EAAM+B,SAAW,YAE/BZ,IAAjBnB,EAAMW,QAAyC,KAAjBX,EAAMW,OACnC,qBACEO,UAAS,4BACY,IAAnBT,EAAQE,OAAkB,YAAc,IAF5C,SAKGX,EAAMW,SAGT,W,0LCrGGqB,EAAc,SAACC,GAAwB,IAAD,EACjDC,QAAQD,MAAR,eAAmBA,IACnB,IAAIE,EAAYC,KAAKC,MAAL,OAAWJ,QAAX,IAAWA,GAAX,UAAWA,EAAOK,eAAlB,aAAW,EAAgBC,UAC3C,OAAIJ,EAAUK,OAAOC,QAAU,EACtBN,EAAUK,OAAO,GAAGE,QAEpB,gDAoBEC,EAAO,SAClBC,GAEY,IADZC,EACW,uDAD2B,aAEhCC,EAAO,IAAIC,KAAKH,GACtB,MAAe,eAAXC,EAEAC,EAAKE,cACL,KACC,KAAOF,EAAKG,WAAa,IAAIC,OAAO,GACrC,IACAJ,EAAKK,UAILL,EAAKK,UACL,KACC,KAAOL,EAAKG,WAAa,IAAIC,OAAO,GACrC,IACAJ,EAAKE,eAKEI,EAAqB,SAACC,EAAaC,GAC9C,IAAMC,EAAM,IAAIC,MAEhBD,EAAIE,IAAMJ,EAENE,EAAIG,SACNJ,GAAS,IAETC,EAAII,OAAS,WACXL,GAAS,IAEXC,EAAIK,QAAU,WACZN,GAAS,MAKFO,EAAgB,SAACC,GAC5B,IAAMhB,EAAO,IAAIC,KAAKe,GAClBC,EAAUhB,KAAKiB,MAAQlB,EAAKmB,UAC5BC,EAAS,IAAInB,KAAKgB,GAEtB,OAAOI,KAAKC,IAAIF,EAAOG,iBAAmB,Q,iCCxE7B,QAA0B,qC,0ICgH1BC,EAhGQ,SAACtE,GAEtB,IAAMuE,EAAc,SAACC,GACnB,IAAIC,GAAM,EACV,GAAIzE,EAAM0E,kBAAkBjC,OAAS,EAAG,CACtC,IAAIkC,EAAQ3E,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eACjG,QAAc3D,IAAVwD,EAAqB,CACvB,IAAIK,EAAIL,EAAMM,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,WACvC/D,IAAN6D,IAAgC,IAAbA,EAAEG,SACvBV,GAAM,IAIZ,OAAOA,GAGHW,EAAkB,SAACC,GAC0B,OAA7CrF,EAAM+E,uBAAuBD,aAC/B9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,KAsDd,OApBAE,qBAAU,WACR,IAAIC,EAAOxF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAChG,SAAa3D,IAATqE,QAAgCrE,IAATqE,GAA6C,IAAvBA,EAAKP,OAAOxC,cACdtB,IAAzCnB,EAAM+E,uBAAuBU,cAA0DtE,IAAjCnB,EAAM+E,wBAAsF,OAA7C/E,EAAM+E,uBAAuBD,YAAsB,CAC1J,IAD0J,EACtJO,EAAsD,GADgG,cAE3IrF,EAAM+E,uBAAuBU,SAF8G,IAE1J,2BAAqD,CAAC,IAA7CC,EAA4C,QACnDL,EAAU,sBAAOA,GAAP,CAAmB,CAC3BH,GAAIQ,EAAER,GACNS,MAAOD,EAAEC,MACTR,QAAQ,MAN8I,8BAS1JnF,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,OAIb,CAACrF,IAEF,8BACoC,OAAjCA,EAAM+E,6BACkC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACpB,GAAD,OAC7F,sBAAKvD,QAAS,kBAtDF,SAACuD,EAA6CM,GAC9D,IAAIe,EAAa7F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBA,KACzE,QAAmB3D,IAAf0E,EAA0B,CAE5B,IAAIC,EAAgD,GACpD,GAAI9F,EAAM+F,OAASC,IAAyBC,eAAgB,CAAC,IAAD,gBAC5CJ,EAAWZ,QADiC,IAC1D,2BAAiC,CAAC,IAAzBiB,EAAwB,QAC/BJ,EAAI,sBAAOA,GAAP,CAAa,CACfZ,GAAIgB,EAAEhB,GACNS,MAAOO,EAAEP,MACTR,QAAQ,MAL8C,8BAQ1DC,EAAgBU,GAElB,IAb4B,EAaxBT,EAAsD,GAb9B,cAcE,IAAhBS,EAAKrD,OAAeoD,EAAWZ,OAASa,GAd1B,IAc5B,2BAA4D,CAAC,IAApDd,EAAmD,QAExDK,EADEL,EAAEE,KAAOV,EAAKU,GACN,sBAAOG,GAAP,CAAmB,CAC3BH,GAAIV,EAAKU,GACTS,MAAOnB,EAAKmB,MACZR,OAAQnF,EAAM+F,OAASC,IAAyBC,iBAAyBjB,EAAEG,UAGnE,sBAAOE,GAAP,CAAmBL,KAtBL,8BAyB5BI,EAAgBC,IA2BMc,CAAU3B,EAAMxE,EAAM+E,uBAAuBD,cAAc5D,UAAS,qBAAqC,IAAtBqD,EAAYC,GAAiB,wFAA0F,sDAAtI,2DAAxF,WACyB,IAAtBD,EAAYC,GACb,mCACCxE,EAAM+F,OAASC,IAAyBC,eACzC,cAAC,KAAD,CAAsB/E,UAAU,aAChC,cAAC,IAAD,CAAmBA,UAAU,eAE7BlB,EAAM+F,OAASC,IAAyBC,eACxC,cAAC,KAAD,CAAwB/E,UAAU,sBAClC,cAAC,IAAD,CAAqBA,UAAU,aAC/B,sBAAMA,UAAU,OAAhB,SAAwBsD,EAAKmB,iBCvG1BS,EAAmB,SAACX,GAC/B,IAD2F,EACvFhB,EAA+C,GADwC,cAExEgB,GAFwE,IAE3F,2BAA4B,CAAC,IAApBR,EAAmB,QAC1BR,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAID,EAAOC,GACXS,MAAOV,EAAOU,MACdR,OAAQF,EAAOE,WANwE,8BAS3F,OAAOV,GAGI4B,EAAc,SAACZ,GAC1B,IADiF,EAC7EhB,EAA0C,GADmC,cAE9DgB,GAF8D,IAEjF,2BAA4B,CAAC,IAApBR,EAAmB,QAC1BR,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAID,EAAOC,GACXS,MAAOV,EAAOU,MACdR,OAAQF,EAAOE,WAN8D,8BASjF,OAAOV,GAGI6B,EAAa,SAACb,GACzB,IAD+E,EAC3EhB,EAAyC,GADkC,cAE5DgB,GAF4D,IAE/E,2BAA4B,CAAC,IAApBR,EAAmB,QAC1BR,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAID,EAAOC,GACXS,MAAOV,EAAOU,MACdR,OAAQF,EAAOE,WAN4D,8BAS/E,OAAOV,GAGI8B,EAAqB,SAACd,GACjC,IAD+F,EAC3FhB,EAAiD,GAD0C,cAE5EgB,GAF4E,IAE/F,2BAA4B,CAAC,IAApBR,EAAmB,QAC1BR,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAID,EAAOC,GACXS,MAAOV,EAAOU,MACdR,OAAQF,EAAOE,WAN4E,8BAS/F,OAAOV,GAGI+B,EAAgB,SAACf,GAC5B,IADqF,EACjFhB,EAA4C,GADqC,cAElEgB,GAFkE,IAErF,2BAA4B,CAAC,IAApBR,EAAmB,QAC1BR,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAID,EAAOC,GACXS,MAAOV,EAAOU,MACdR,OAAQF,EAAOE,WANkE,8BASrF,OAAOV,GAGIgC,EAAc,SAAChB,GAC1B,IADiF,EAC7EhB,EAA0C,GADmC,cAE9DgB,GAF8D,IAEjF,2BAA4B,CAAC,IAApBR,EAAmB,QAC1BR,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAID,EAAOC,GACXS,MAAOV,EAAOU,MACdR,OAAQF,EAAOE,WAN8D,8BASjF,OAAOV,GAGIiC,EAA6B,SAACjB,GACzC,IAD+G,EAC3GhB,EAAyD,GADkD,cAE5FgB,GAF4F,IAE/G,2BAA4B,CAAC,IAApBR,EAAmB,QAC1BR,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAID,EAAOC,GACXS,MAAOV,EAAOU,MACdR,OAAQF,EAAOE,WAN4F,8BAS/G,OAAOV,G,QCqBMkC,EAzFG,SAAC3G,GACjB,IAAMuE,EAAc,SAACC,GACnB,IAAIC,GAAM,EACV,GAAIzE,EAAM0E,kBAAkBjC,OAAS,EAAG,CACtC,IAAIkC,EAAQ3E,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eACjG,QAAc3D,IAAVwD,EAAqB,CACvB,IAAIK,EAAIL,EAAMM,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,WACvC/D,IAAN6D,IAAgC,IAAbA,EAAEG,SACvBV,GAAM,IAIZ,OAAOA,GAEHW,EAAkB,SAACC,GAC0B,OAA7CrF,EAAM+E,uBAAuBD,aAC/B9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,KAuDd,OArBAE,qBAAU,WACR,IAAIC,EAAOxF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAChG,SAAa3D,IAATqE,QAAgCrE,IAATqE,GAA6C,IAAvBA,EAAKP,OAAOxC,cACdtB,IAAzCnB,EAAM+E,uBAAuBU,cAA0DtE,IAAjCnB,EAAM+E,wBAAsF,OAA7C/E,EAAM+E,uBAAuBD,YAAsB,CAC1J,IAD0J,EACtJO,EAAiD,GADqG,cAE3IrF,EAAM+E,uBAAuBU,SAF8G,IAE1J,2BAAqD,CAAC,IAA7CC,EAA4C,QACnDL,EAAU,sBAAOA,GAAP,CAAmB,CAC3BH,GAAIQ,EAAER,GACNS,MAAOD,EAAEC,MACTR,QAAQ,MAN8I,8BAS1JnF,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,OAIb,CAACrF,IAGF,qBAAKkB,UAAU,GAAf,SACoC,OAAjClB,EAAM+E,6BACkC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACpB,GAAD,OAC7F,sBAAKvD,QAAS,kBAtDF,SAACuD,EAAwCM,GACzD,IAAIe,EAAa7F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBA,KACzE,QAAmB3D,IAAf0E,EAA0B,CAE5B,IAF4B,EAExBC,EAA2C,GAFnB,cAGdD,EAAWZ,QAHG,IAG5B,2BAAiC,CAAC,IAAzBiB,EAAwB,QAC/BJ,EAAI,sBAAOA,GAAP,CAAa,CACfZ,GAAIgB,EAAEhB,GACNS,MAAOO,EAAEP,MACTR,QAAQ,MAPgB,8BAU5BC,EAAgBU,GAChB,IAX4B,EAWxBT,EAAiD,GAXzB,cAYE,IAAhBS,EAAKrD,OAAeoD,EAAWZ,OAASa,GAZ1B,IAY5B,2BAA4D,CAAC,IAApDd,EAAmD,QAExDK,EADEL,EAAEE,KAAOV,EAAKU,GACN,sBAAOG,GAAP,CAAmB,CAC3BH,GAAIV,EAAKU,GACTS,MAAOnB,EAAKmB,MACZR,QAASH,EAAEG,UAGH,sBAAOE,GAAP,CAAmBL,KApBL,8BAuB5BI,EAAgBC,IA6BMc,CAAU3B,EAAMxE,EAAM+E,uBAAuBD,cAAc5D,UAAS,8BAA8C,IAAtBqD,EAAYC,GAAiB,wFAA0F,sDAA/I,2DAAxF,WACyB,IAAtBD,EAAYC,GACb,cAAC,KAAD,CAAsBtD,UAAU,aAChC,cAAC,KAAD,CAAwBA,UAAU,aAClC,sBAAMA,UAAU,OAAhB,SAAwBsD,EAAKmB,iB,QCmFxBiB,EAjKE,SAAC5G,GAChB,IASMuE,EAAc,SAACC,GACnB,IAAIC,GAAM,EACV,GAAIzE,EAAM0E,kBAAkBjC,OAAS,EAAG,CACtC,IAAIkC,EAAQ3E,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eACjG,QAAc3D,IAAVwD,EAAqB,CACvB,IAAIK,EAAIL,EAAMM,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,WACvC/D,IAAN6D,GAAgC,KAAbA,EAAEG,SACvBV,GAAM,IAIZ,OAAOA,GAGH0B,EAAY,SAAC3B,EAAuCM,GACxD,IAAIe,EAAa7F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBA,KACzE,QAAmB3D,IAAf0E,EAA0B,CAC5B,IAD4B,EACxBR,EAAgD,GADxB,cAEdQ,EAAWZ,QAFG,IAE5B,2BAAiC,CAAC,IAAzBD,EAAwB,QAE7BK,EADEL,EAAEE,KAAOV,EAAKU,GACN,sBAAOG,GAAP,CAAmB,CAC3BH,GAAIV,EAAKU,GACTS,MAAOnB,EAAKmB,MACZR,OAAQX,EAAKW,UAGL,sBAAOE,GAAP,CAAmBL,KAVL,+BAzBR,SAACK,GAC0B,OAA7CrF,EAAM+E,uBAAuBD,aAC/B9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,IAiCVD,CAAgBC,KAIpBE,qBAAU,WACR,IAAIC,EAAOxF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAChG,SAAa3D,IAATqE,QAAgCrE,IAATqE,GAA6C,IAAvBA,EAAKP,OAAOxC,cACdtB,IAAzCnB,EAAM+E,uBAAuBU,cAA0DtE,IAAjCnB,EAAM+E,wBAAsF,OAA7C/E,EAAM+E,uBAAuBD,YAAsB,CAC1J,IAD0J,EACtJO,EAAgD,GADsG,cAE3IrF,EAAM+E,uBAAuBU,SAF8G,IAE1J,2BAAqD,CAAC,IAA7CC,EAA4C,QACnDL,EAAU,sBAAOA,GAAP,CAAmB,CAC3BH,GAAIQ,EAAER,GACNS,MAAOD,EAAEC,MACTR,OAAQ,OAN8I,8BAS1JnF,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,OAIb,CAACrF,IAEJ,IAkBM6G,EAAkB,SAAC7B,GACvB,IAAIc,EAAO9F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAChG,QAAa3D,IAAT2E,EAAoB,CACtB,IAAIgB,EAAMhB,EAAKb,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOF,KAC7C,QAAY7D,IAAR2F,GAAoC,KAAfA,EAAI3B,QACsB,OAA7CnF,EAAM+E,uBAAuBD,YAC/B,OAxBkB,SAACiC,EAA4BC,EAAgCF,GACrF,GAA2B,OAAvB9G,EAAMiH,aAAuB,CAC/B,IAAIC,EAAUlH,EAAMiH,aAAaE,UAAUvC,MAAK,SAAAY,GAAI,OAAIA,EAAKN,KAAO6B,KACpE,QAAgB5F,IAAZ+F,EAAuB,CAAC,IAAD,gBACRE,KADQ,yBAChBC,EADgB,QAEnBC,EAAWJ,EAAQK,SAAS3C,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaH,EAAKI,OAClE,QAAiBtG,IAAbmG,EAAwB,CAC1B,IAAII,EAAiBJ,EAASrC,OAAOL,MAAK,SAAA+C,GAAE,OAAIA,EAAGxC,OAAOyC,aAAed,EAAI3B,UAC7E,QAAuBhE,IAAnBuG,EACF,MAAM,CAAN,EAAOA,EAAevC,OAAOyC,cALnC,2BAAoC,CAAC,IAAD,yCADX,gCAY7B,OAAO,EASMC,CAAkB7H,EAAM+E,uBAAuBD,YAAa9E,EAAM8H,iBAAkBhB,GAIjG,OAAO,GAoBHiB,EAAW,SAACV,EAAwBlC,GACxC,IAAIV,EAAc,GACduD,EAnBuB,WAA2B,IAAD,EACjDvD,EAA0B,GAC1B8C,EAAuC,UAAGvH,EAAMiH,oBAAT,aAAG,EAAoBE,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAM+E,uBAAuBD,eAChI,QAAiB3D,IAAboG,EAAwB,CAAC,IAAD,gBACTA,EAASA,UADA,IAC1B,2BAAoC,CAAC,IAAD,EAA3B/C,EAA2B,sBAClBA,EAAKS,QADa,IAClC,2BAA6B,CAAC,IAArB6B,EAAoB,QAC3BrC,EAAG,sBAAOA,GAAP,CAAY,CACbS,GAAI4B,EAAI5B,GACRmC,KAAM7C,EAAKgD,SACXrC,OAAQ2B,EAAI3B,OAAOyC,eALW,gCADV,+BAW5B,OAAOnD,EAKuBwD,GAC9B,GAAID,EAAIvF,OAAS,EAAG,CAAC,IAAD,EACd+B,EAAI,UAAGwD,EAAIpD,MAAK,SAAAC,GAAG,OAAIA,EAAIM,SAAWA,YAAlC,aAAG,EAAwCD,GACnD,QAAa/D,IAATqD,EAAoB,CAAC,IAAD,EAClB0D,EAAO,UAAGF,EAAIpD,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,GAAQK,EAAIwC,OAASA,YAAnD,aAAG,EAAuDlC,YACrDhE,IAAZ+G,IACFzD,EAAMyD,IAIZ,OAAOzD,GAGT,OACE,qBAAKvD,UAAU,GAAf,SACoC,OAAjClB,EAAM+E,6BACkC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACpB,GAAD,OAC7F,sBAAKtD,UAAS,8BAA8C,IAAtBqD,EAAYC,GAAiB,gCAAkC,GAAvF,qBAAd,UACE,sBAAKtD,UAAU,8CAAf,WACyB,IAAtBqD,EAAYC,GACb,cAAC,IAAD,CAAsBtD,UAAU,aAChC,cAAC,KAAD,CAAwBA,UAAU,aAClC,sBAAMA,UAAU,OAAhB,SAAwBsD,EAAKmB,WAE/B,qBAAKzE,UAAU,aAAf,SACE,yBACAiH,SAAU,SAACC,GACTjC,EAAU,CACRjB,GAAIV,EAAKU,GACTS,MAAOnB,EAAKmB,MACZR,OAAQiD,EAAEC,OAAO1C,OAChB3F,EAAM+E,uBAAuBD,cAElC5D,UAAS,mGAAmH,IAAtBqD,EAAYC,GAAkB,gCAAkC,iEARtK,UASE,wBAAQmB,MAAM,GAAd,6BACkC,OAAjC3F,EAAM+E,6BACoC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACf,EAAKG,GAAN,OAC7F,wBAAQsD,SAAUzD,EAAIM,SAAW4C,EAAS/H,EAAM8H,iBAAkBjB,EAAgBrC,EAAKU,KAAiCS,MAAOd,EAAIM,OAAnI,SAA4IN,EAAIM,QAA/BH,EAAI,oBC3ExHuD,EAjFU,SAACvI,GACxB,IAAMuE,EAAc,SAACC,GACnB,IAAIC,GAAM,EACV,GAAIzE,EAAM0E,kBAAkBjC,OAAS,EAAG,CACtC,IAAIkC,EAAQ3E,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eACjG,QAAc3D,IAAVwD,EAAqB,CACvB,IAAIK,EAAIL,EAAMM,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,WACvC/D,IAAN6D,GAAkC,KAAfA,EAAEW,MAAM,KAC7BlB,GAAM,IAIZ,OAAOA,GAeH0B,EAAY,SAAC3B,EAAqDM,GACtE,IAduBO,EAcnBQ,EAAa7F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBA,UACtD3D,IAAf0E,IAfmBR,EAiBL,CAAC,CACfH,GAAIW,EAAWZ,OAAO,GAAGC,GACzBS,MAAOnB,EAAKmB,MACZR,OAAQU,EAAWZ,OAAO,GAAGE,SAnBgB,OAA7CnF,EAAM+E,uBAAuBD,aAC/B9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQ,CAAC,CACPC,GAAIG,EAAW,GAAGH,GAClBS,MAAO,CAACN,EAAW,GAAGM,OACtBR,OAAQE,EAAW,GAAGF,aAgBxBqD,EAAgB,WACpB,IAAIvD,EAASjF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAClG,YAAkB3D,IAAX8D,EAAgD,IAAzBA,EAAOA,OAAOxC,QAAgBwC,EAAOA,OAAO,GAAGU,MAAM,GAAGiC,WAAa,IAoBrG,OAjBArC,qBAAU,WACR,IAAIC,EAAOxF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,qBACnF3D,IAATqE,QAAgCrE,IAATqE,GAA6C,IAAvBA,EAAKP,OAAOxC,cACdtB,IAAzCnB,EAAM+E,uBAAuBU,cAA0DtE,IAAjCnB,EAAM+E,wBAAsF,OAA7C/E,EAAM+E,uBAAuBD,aACpI9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQ,CAAC,CACPC,GAAIlF,EAAM+E,uBAAuBU,QAAQ,GAAGP,GAC5CS,MAAO,CAAC,IACRR,OAAQnF,EAAM+E,uBAAuBU,QAAQ,GAAGN,aAKvD,CAACnF,IAGF,qBAAKkB,UAAU,GAAf,SACoC,OAAjClB,EAAM+E,6BACkC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACpB,GAAD,OAC7F,qBAAKtD,UAAS,iDAAd,SACE,uBACAiH,SAAU,SAACC,GACTjC,EAAU,CACRjB,GAAIV,EAAKU,GACTS,MAAOyC,EAAEC,OAAO1C,MAChBR,OAAQX,EAAKW,QACZnF,EAAM+E,uBAAuBD,cAElCiB,KAAK,OAAOJ,MAAO6C,IACnBtH,UAAS,kEAAkF,IAAtBqD,EAAYC,GAAiB,4DAA8D,6DCK3JiE,EA/EK,SAACzI,GACnB,IAAMuE,EAAc,SAACC,GACnB,IAAIC,GAAM,EACV,GAAIzE,EAAM0E,kBAAkBjC,OAAS,EAAG,CACtC,IAAIkC,EAAQ3E,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eACjG,QAAc3D,IAAVwD,EAAqB,CACvB,IAAIK,EAAIL,EAAMM,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,WACvC/D,IAAN6D,GAA+B,KAAZA,EAAEW,QACvBlB,GAAM,IAIZ,OAAOA,GAeH0B,EAAY,SAAC3B,EAAqDM,GACtE,IAduBO,EAcnBQ,EAAa7F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBA,UACtD3D,IAAf0E,IAfmBR,EAiBL,CAAC,CACfH,GAAIW,EAAWZ,OAAO,GAAGC,GACzBS,MAAOnB,EAAKmB,MACZR,OAAQU,EAAWZ,OAAO,GAAGE,SAnBgB,OAA7CnF,EAAM+E,uBAAuBD,aAC/B9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQ,CAAC,CACPC,GAAIG,EAAW,GAAGH,GAClBS,MAAON,EAAW,GAAGM,MACrBR,OAAQE,EAAW,GAAGF,aAgBxBqD,EAAgB,WACpB,IAAIvD,EAASjF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAClG,YAAkB3D,IAAX8D,EAAgD,IAAzBA,EAAOA,OAAOxC,QAAgBwC,EAAOA,OAAO,GAAGU,MAAQ,IAmBvF,OAhBAJ,qBAAU,WACR,IAAIC,EAAOxF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,qBACnF3D,IAATqE,QAAgCrE,IAATqE,GAA6C,IAAvBA,EAAKP,OAAOxC,cACdtB,IAAzCnB,EAAM+E,uBAAuBU,cAA0DtE,IAAjCnB,EAAM+E,wBAAsF,OAA7C/E,EAAM+E,uBAAuBD,aACpI9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQ,CAAC,CACPC,GAAIlF,EAAM+E,uBAAuBU,QAAQ,GAAGP,GAC5CS,MAAO,GACPR,OAAQnF,EAAM+E,uBAAuBU,QAAQ,GAAGN,aAKvD,CAACnF,IAEF,qBAAKkB,UAAU,GAAf,SACoC,OAAjClB,EAAM+E,6BACkC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACpB,GAAD,OAC7F,qBAAKtD,UAAS,gEAAd,SACE,0BACAiH,SAAU,SAACC,GACTjC,EAAU,CACRjB,GAAIV,EAAKU,GACTS,MAAOyC,EAAEC,OAAO1C,MAChBR,OAAQX,EAAKW,QACZnF,EAAM+E,uBAAuBD,cAC/Ba,MAAO6C,IACVtH,UAAS,kEAAkF,IAAtBqD,EAAYC,GAAiB,4DAA8D,mDAAqDlD,MAAO,CAACoH,UAAW,mBCQnOC,EAhFG,SAAC3I,GACjB,IAAMuE,EAAc,SAACC,GACnB,IAAIC,GAAM,EACV,GAAIzE,EAAM0E,kBAAkBjC,OAAS,EAAG,CACtC,IAAIkC,EAAQ3E,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eACjG,QAAc3D,IAAVwD,EAAqB,CACvB,IAAIK,EAAIL,EAAMM,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,WACvC/D,IAAN6D,GAAkC,KAAfA,EAAEW,MAAM,KAC7BlB,GAAM,IAIZ,OAAOA,GAeH0B,EAAY,SAAC3B,EAAqDM,GACtE,IAduBO,EAcnBQ,EAAa7F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBA,UACtD3D,IAAf0E,IAfmBR,EAiBL,CAAC,CACfH,GAAIW,EAAWZ,OAAO,GAAGC,GACzBS,MAAO,CAACnB,EAAKmB,OACbR,OAAQU,EAAWZ,OAAO,GAAGE,SAnBgB,OAA7CnF,EAAM+E,uBAAuBD,aAC/B9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQ,CAAC,CACPC,GAAIG,EAAW,GAAGH,GAClBS,MAAON,EAAW,GAAGM,MACrBR,OAAQE,EAAW,GAAGF,aAgBxBqD,EAAgB,WACpB,IAAIvD,EAASjF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAClG,YAAkB3D,IAAX8D,EAAgD,IAAzBA,EAAOA,OAAOxC,QAAgBwC,EAAOA,OAAO,GAAGU,MAAM,GAAK,IAmB1F,OAhBAJ,qBAAU,WACR,IAAIC,EAAOxF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,qBACnF3D,IAATqE,QAAgCrE,IAATqE,GAA6C,IAAvBA,EAAKP,OAAOxC,cACdtB,IAAzCnB,EAAM+E,uBAAuBU,cAA0DtE,IAAjCnB,EAAM+E,wBAAsF,OAA7C/E,EAAM+E,uBAAuBD,aACpI9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQ,CAAC,CACPC,GAAIlF,EAAM+E,uBAAuBU,QAAQ,GAAGP,GAC5CS,MAAO,CAAC,IACRR,OAAQnF,EAAM+E,uBAAuBU,QAAQ,GAAGN,aAKvD,CAACnF,IAEF,qBAAKkB,UAAU,GAAf,SACoC,OAAjClB,EAAM+E,6BACkC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACpB,GAAD,OAC7F,qBAAKtD,UAAS,gEAAd,SACE,uBACAiH,SAAU,SAACC,GACTjC,EAAU,CACRjB,GAAIV,EAAKU,GACTS,MAAOyC,EAAEC,OAAO1C,MAChBR,OAAQX,EAAKW,QACZnF,EAAM+E,uBAAuBD,cAElCiB,KAAK,OAAOJ,MAAO6C,IACnBtH,UAAS,kEAAkF,IAAtBqD,EAAYC,GAAiB,mDAAqD,kDCwBlJoE,EA/FkB,SAAC5I,GAChC,IAAMuE,EAAc,SAACC,GACnB,IAAIC,GAAM,EACV,GAAIzE,EAAM0E,kBAAkBjC,OAAS,EAAG,CACtC,IAAIkC,EAAQ3E,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eACjG,QAAc3D,IAAVwD,EAAqB,CACvB,IAAIK,EAAIL,EAAMM,OAAOL,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,WACvC/D,IAAN6D,IAAgC,IAAbA,EAAEG,SACvBV,GAAM,IAIZ,OAAOA,GAGHW,EAAkB,SAACC,GAC0B,OAA7CrF,EAAM+E,uBAAuBD,aAC/B9E,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,KAsDd,OApBAE,qBAAU,WACR,IAAIC,EAAOxF,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgB9E,EAAM+E,uBAAuBD,eAChG,SAAa3D,IAATqE,QAAgCrE,IAATqE,GAA6C,IAAvBA,EAAKP,OAAOxC,cACdtB,IAAzCnB,EAAM+E,uBAAuBU,cAA0DtE,IAAjCnB,EAAM+E,wBAAsF,OAA7C/E,EAAM+E,uBAAuBD,YAAsB,CAC1J,IAD0J,EACtJO,EAAgE,GADsF,cAE3IrF,EAAM+E,uBAAuBU,SAF8G,IAE1J,2BAAqD,CAAC,IAA7CC,EAA4C,QACnDL,EAAU,sBAAOA,GAAP,CAAmB,CAC3BH,GAAIQ,EAAER,GACNS,MAAOD,EAAEC,MACTR,QAAQ,MAN8I,8BAS1JnF,EAAMsF,iBAAiB,CACrBR,YAAa9E,EAAM+E,uBAAuBD,YAC1CK,QAAQ,EACRF,OAAQI,OAIb,CAACrF,IAEF,8BACoC,OAAjCA,EAAM+E,6BACkC5D,IAAzCnB,EAAM+E,uBAAuBU,SAAyBzF,EAAM+E,uBAAuBU,QAAQG,KAAI,SAACpB,GAAD,OAC7F,sBAAKvD,QAAS,kBAtDF,SAACuD,EAAuDM,GACxE,IAAIe,EAAa7F,EAAM0E,kBAAkBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBA,KACzE,QAAmB3D,IAAf0E,EAA0B,CAE5B,IAAIC,EAA0D,GAC9D,QAA6C3E,IAAzCnB,EAAM+E,uBAAuBU,SAA4G,IAAnFzF,EAAM+E,uBAAuBU,QAAQoD,QAAO,SAAAhE,GAAG,OAAmB,IAAfA,EAAIM,UAAiB1C,OAAc,CAAC,IAAD,gBAChIoD,EAAWZ,QADqH,IAC9I,2BAAiC,CAAC,IAAzBiB,EAAwB,QAC/BJ,EAAI,sBAAOA,GAAP,CAAa,CACfZ,GAAIgB,EAAEhB,GACNS,MAAOO,EAAEP,MACTR,QAAQ,MALkI,8BAQ9IC,EAAgBU,GAElB,IAb4B,EAaxBT,EAAgE,GAbxC,cAcE,IAAhBS,EAAKrD,OAAeoD,EAAWZ,OAASa,GAd1B,IAc5B,2BAA4D,CAAC,IAApDd,EAAmD,QAExDK,EADEL,EAAEE,KAAOV,EAAKU,GACN,sBAAOG,GAAP,CAAmB,CAC3BH,GAAIV,EAAKU,GACTS,MAAOnB,EAAKmB,MACZR,YAAiDhE,IAAzCnB,EAAM+E,uBAAuBU,SAA4G,IAAnFzF,EAAM+E,uBAAuBU,QAAQoD,QAAO,SAAAhE,GAAG,OAAmB,IAAfA,EAAIM,UAAiB1C,SAAuBuC,EAAEG,UAGvJ,sBAAOE,GAAP,CAAmBL,KAtBL,8BAyB5BI,EAAgBC,IA2BMc,CAAU3B,EAAMxE,EAAM+E,uBAAuBD,cAAc5D,UAAS,8BAA8C,IAAtBqD,EAAYC,GAAiB,wFAA0F,sDAA/I,mEAAxF,WACyB,IAAtBD,EAAYC,GACb,wCAC0CrD,IAAzCnB,EAAM+E,uBAAuBU,SAA4G,IAAnFzF,EAAM+E,uBAAuBU,QAAQoD,QAAO,SAAAhE,GAAG,OAAmB,IAAfA,EAAIM,UAAiB1C,OAC/H,cAAC,KAAD,CAAsBvB,UAAU,aAChC,cAAC,IAAD,CAAmBA,UAAU,oBAEYC,IAAzCnB,EAAM+E,uBAAuBU,SAA4G,IAAnFzF,EAAM+E,uBAAuBU,QAAQoD,QAAO,SAAAhE,GAAG,OAAmB,IAAfA,EAAIM,UAAiB1C,OAC9H,cAAC,KAAD,CAAwBvB,UAAU,aAClC,cAAC,IAAD,CAAqBA,UAAU,aAC/B,sBAAMA,UAAU,OAAhB,SAAwBsD,EAAKmB,iB,2BC4IjCmD,EAAkBC,aAVA,SAAC,GAOvB,MAAO,CAAEC,KAD2J,EALpKA,KAMqBC,OAD+I,EAJpKA,OAKqCC,cAD+H,EAHpKA,cAImEC,OADiG,EAFpKA,OAGmFC,cADiF,EADpKA,iBAK+C,CAC/CC,6BACAC,yBACAC,wBAHsBR,EAlMC,SAAC/I,GAAiC,IAAD,gIACxD,GAA8BwJ,oBAAkB,GAAhD,qBAAOC,GAAP,MAAgBC,GAAhB,MACA,GAAoCF,oBAAkB,GAAtD,qBAAOG,GAAP,MAAmBC,GAAnB,MACMC,GAAe,WACnB,IAAIpF,EAAM,KACV,GAA2C,OAAvCzE,EAAMkJ,cAAcY,eAAyB,CAC/C,IAAIC,EAAmC/J,EAAMkJ,cAAcY,eAAe3C,UAAUvC,MAAK,SAAAC,GAAG,OAAI7E,EAAMkJ,cAAcc,mBAAqBnF,EAAIK,KAAOlF,EAAMkJ,cAAcc,0BAC9J7I,IAAN4I,IACFtF,EAAMsF,GAGV,OAAOtF,GAGHwF,GAA8B,WAClC,IAAIxF,EAA8B,GAClC,GAAIzE,EAAMkJ,cAAcY,eAAgB,CACtC,IAAI9E,EAAIhF,EAAMkJ,cAAcY,eAAe3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,0BACtF7I,IAAN6D,IACFP,EAAMO,EAAEuC,UAGZ,OAAO9C,GAOT,OALAc,qBAAU,WACkC,OAAtCvF,EAAMoJ,cAAcA,eAAuE,IAA7CpJ,EAAMoJ,cAAcA,cAAc3G,QAClFzC,EAAMuJ,kBAAkBG,MAEzB,CAAC1J,IAEF,qBAAKkB,UAAU,qBAAf,UACe,IAAZuI,GACD,qBAAKvI,UAAU,gFAAf,SACE,sBAAKA,UAAU,uCAAf,UACE,qBAAKA,UAAU,qBAAf,wBACA,cAACgJ,EAAA,EAAD,CAASnE,KAAMoE,IAAYC,aAG/B,sBAAKlJ,UAAU,gFAAf,WACoC,IAA/BlB,EAAMqK,sBACP,qBAAKnJ,UAAU,6EAAf,oCACA,qBAAKA,UAAU,2BAAf,SACE,sBAAKA,UAAU,uCAAf,UACE,sBAAKA,UAAU,+BAAf,UACE,sBAAMA,UAAU,wBAAhB,SACsB,OAAnB2I,OAAA,UAA2BA,YAA3B,iBAA2B,EAAgBtC,SAAS3C,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,4BAArG,aAA2B,EAA8FpK,SAE5H,sBAAMgB,UAAU,kCAAhB,SACsB,OAAnB2I,OAAA,UAA2BA,YAA3B,iBAA2B,EAAgBtC,SAAS3C,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,4BAArG,aAA2B,EAA8FC,kBAG9H,sBAAKrJ,UAAU,sDAAf,UACE,sBAAKD,QAAS,kBAAM2I,IAAeD,KAAazI,UAAU,mCAA1D,UACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,CAASA,UAAU,yBAErB,sBAAKA,UAAU,gBAAgBI,MAAO,CAACC,MAAO,QAA9C,UACE,sBAAML,UAAU,yCAAhB,sBACA,sBAAMhB,MAAK,UAAEkH,IAAkBxC,MAAK,SAAAC,GAAG,OAAIA,EAAI4C,MAAQzH,EAAMkJ,cAAcoB,4BAAhE,aAAE,EAAkF3E,MAAOzE,UAAU,2CAA2CI,MAAO,CAACC,MAAO,QAA1K,mBACG6F,IAAkBxC,MAAK,SAAAC,GAAG,OAAIA,EAAI4C,MAAQzH,EAAMkJ,cAAcoB,4BADjE,aACG,EAAkF3E,WAGvF,qBAAKzE,UAAS,WAAoB,IAAfyI,GAAsB,2BAA6B,+BAAxD,yIAAd,UACkB,IAAfA,GACD,cAAC,IAAD,CAASzI,UAAU,sBACnB,cAAC,IAAD,CAAiBA,UAAU,iCAGf,IAAfyI,IACD,qBAAKzI,UAAU,mCAAmCI,MAAO,CAACC,MAAO,SAAjE,SACE,qBAAKL,UAAU,uGAAf,SACGkG,IAAkBxB,KAAI,SAACpB,EAAMgG,GAAP,OACrB,uBAAMvJ,QAAS,WAAOjB,EAAMsJ,oBAAoB9E,EAAKiD,KAAMmC,IAAeD,KAC1EzI,UAAS,iIAA4HlB,EAAMkJ,cAAcoB,oBAAsB9F,EAAKiD,IAAM,6CAA+C,qFADzO,UAEGzH,EAAMkJ,cAAcoB,oBAAsB9F,EAAKiD,IAAM,cAAC,KAAD,CAAsBvG,UAAU,iBAAoB,cAAC,KAAD,CAAwBA,UAAU,iBAF9I,IAEkKsD,EAAKmB,QAF1E6E,EAAI,kBAU7G,sBAAKtJ,UAAU,kCAAkCD,QAAS,kBAAqB,IAAf0I,IAAuBC,IAAc,IAArG,UAE6C,OAA1C5J,EAAMkJ,cAAcc,mBACsJ,OAA3KS,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBACvJqB,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyB1B,gBACrMmG,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyBC,iBACpM,cAAC,EAAD,CACEF,KAAM0E,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,eAC9J1E,kBAAmB1E,EAAMkJ,cAAcwB,iBACvC3F,uBAAwB,CACtBD,YAAa9E,EAAMkJ,cAAcc,kBACjCvE,QAASW,EAAiB6D,KAA8BrF,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,qBAAoBrF,SAE/HK,iBAAkBtF,EAAMsF,mBAGiB,OAA1CtF,EAAMkJ,cAAcc,mBACsJ,OAA3KS,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,gBACxJqB,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyBW,WACpM,cAAC,EAAD,CACEZ,KAAM0E,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,eAC9J1E,kBAAmB1E,EAAMkJ,cAAcwB,iBACvC3F,uBAAwB,CACtBD,YAAa9E,EAAMkJ,cAAcc,kBACjCvE,QAASY,EAAY4D,KAA8BrF,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,qBAAoBrF,SAE1HK,iBAAkBtF,EAAMsF,mBAGzBpD,QAAQyI,IAAI,SAAUF,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,gBACpI,OAA1CpJ,EAAMkJ,cAAcc,mBACsJ,OAA3KS,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,gBACxJqB,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyBY,UACpM,cAAC,EAAD,CACEkB,iBAAkB9H,EAAMkJ,cAAcoB,kBACtCrD,aAAcjH,EAAMkJ,cAAcY,eAClC/D,KAAM0E,YAAgB,UAACzK,EAAMkJ,cAAcY,sBAArB,iBAAC,EAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,aAAC,EAA6GjE,KAAM/F,EAAMoJ,cAAcA,eAC9J1E,kBAAmB1E,EAAMkJ,cAAcwB,iBACvC3F,uBAAwB,CACtBD,YAAa9E,EAAMkJ,cAAcc,kBACjCvE,QAASa,EAAW2D,KAA8BrF,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,qBAAoBrF,SAEzHK,iBAAkBtF,EAAMsF,mBAGiB,OAA1CtF,EAAMkJ,cAAcc,mBACsJ,OAA3KS,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,gBACxJqB,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyB4E,iBACpM,cAAC,EAAD,CACE7E,KAAM0E,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,eAC9J1E,kBAAmB1E,EAAMkJ,cAAcwB,iBACvC3F,uBAAwB,CACtBD,YAAa9E,EAAMkJ,cAAcc,kBACjCvE,QAASc,EAAmB0D,KAA8BrF,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,qBAAoBrF,SAEjIK,iBAAkBtF,EAAMsF,mBAGiB,OAA1CtF,EAAMkJ,cAAcc,mBACsJ,OAA3KS,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,gBACxJqB,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyByC,aACpM,cAAC,EAAD,CACE1C,KAAM0E,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,eAC9J1E,kBAAmB1E,EAAMkJ,cAAcwB,iBACvC3F,uBAAwB,CACtBD,YAAa9E,EAAMkJ,cAAcc,kBACjCvE,QAASe,EAAcyD,KAA8BrF,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,qBAAoBrF,SAE5HK,iBAAkBtF,EAAMsF,mBAGiB,OAA1CtF,EAAMkJ,cAAcc,mBACsJ,OAA3KS,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,gBACxJqB,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyB6E,SACpM,cAAC,EAAD,CACE9E,KAAM0E,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,eAC9J1E,kBAAmB1E,EAAMkJ,cAAcwB,iBACvC3F,uBAAwB,CACtBD,YAAa9E,EAAMkJ,cAAcc,kBACjCvE,QAASgB,EAAYwD,KAA8BrF,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,qBAAoBrF,SAE1HK,iBAAkBtF,EAAMsF,mBAGiB,OAA1CtF,EAAMkJ,cAAcc,mBACsJ,OAA3KS,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,gBACxJqB,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,iBAAmBpD,IAAyB4C,0BACpM,cAAC,EAAD,CACE7C,KAAM0E,YAAgB,WAACzK,EAAMkJ,cAAcY,sBAArB,mBAAC,GAAoC3C,UAAUvC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOlF,EAAMkJ,cAAcc,4BAA1F,cAAC,GAA6GjE,KAAM/F,EAAMoJ,cAAcA,eAC9J1E,kBAAmB1E,EAAMkJ,cAAcwB,iBACvC3F,uBAAwB,CACtBD,YAAa9E,EAAMkJ,cAAcc,kBACjCvE,QAASiB,EAA2BuD,KAA8BrF,MAAK,SAAAC,GAAG,OAAIA,EAAI2C,WAAaxH,EAAMkJ,cAAcoB,qBAAoBrF,SAEzIK,iBAAkBtF,EAAMsF,8BAwBvBwD,O,sMCjIAgC,EARA/B,aATS,SAAC,GAKwE,IAJ/FC,EAI8F,EAJ9FA,KAI8F,EAH9FC,OAIA,MAAO,CAAED,KAAMA,EAAME,cADyE,EAF9FA,cAGmDC,OAD2C,EAD9FA,UAKsC,CACtC4B,cACAC,mBACAC,uBACAC,uBACA7B,8BALaN,EA7EC,SAAC/I,GACf,IAAMmL,EAAY,SAACrG,GACjB,GAA2C,OAAvC9E,EAAMkJ,cAAcY,eAAyB,CAC/C,IAAK,IAAI9E,EAAY,EAAGA,EAAIhF,EAAMkJ,cAAcY,eAAe3C,UAAU1E,OAAQuC,IAC/E,GAAIhF,EAAMkJ,cAAcY,eAAe3C,UAAUnC,GAAGE,KAAOJ,EACzD,OAAOE,EAGX,OAAO,EAET,OAAO,GAGLoG,EAA0E,OAA1CpL,EAAMkJ,cAAcc,mBAAqE,OAAvChK,EAAMkJ,cAAcY,eAC1GqB,EAAUnL,EAAMkJ,cAAcc,mBAAqB,EACnDmB,EAAUnL,EAAMkJ,cAAcc,mBAAqBhK,EAAMkJ,cAAcY,eAAe3C,UAAU1E,QAAU,EAEtG4I,EAAsE,OAA1CrL,EAAMkJ,cAAcc,mBAAqE,OAAvChK,EAAMkJ,cAAcY,eACtGqB,EAAUnL,EAAMkJ,cAAcc,mBAAqB,GAAKmB,EAAUnL,EAAMkJ,cAAcc,mBAAqBhK,EAAMkJ,cAAcY,eAAe3C,UAAU1E,OAAO,EAC/J0I,EAAUnL,EAAMkJ,cAAcc,mBAA0E,IAArDmB,EAAUnL,EAAMkJ,cAAcc,mBAA2B,GAAK,EAAI,EAE/GsB,EAAsB,SAACC,EAAiBzG,IAC5C9E,EAAMqJ,wBAAwBkC,EAASzG,GACI,OAAvC9E,EAAMkJ,cAAcY,uBAER3I,IADFnB,EAAMkJ,cAAcY,eAAe3C,UAAUvC,MAAK,SAAAJ,GAAI,OAAyI,IAArIgH,YAAiBxL,EAAMkJ,cAAcwB,iBAAkBlG,EAAKU,GAAIuF,YAAiBjG,EAAKuB,KAAM/F,EAAMoJ,cAAcA,oBAEpLpJ,EAAMyL,iBAKZ,OACE,sBAAKvK,UAAU,iGAAf,UACGgB,QAAQyI,IAAI,aAAcU,GAC3B,sBAAKnK,UAAU,6BAAf,UACE,sBAAKD,QAAS,kBAAMjB,EAAM0L,wBAAwB1L,EAAM2L,aAAaC,UACnE1K,UAAS,gFADX,UAEE,sBAAKA,UAAU,+HAAf,UACE,qBAAKA,UAAU,4GAA4GI,MAAO,CAACuK,SAAU,WAAYC,IAAK,QAASC,MAAO,SAA9K,gBACA,cAAC,IAAD,CAAiB7K,UAAU,uBAES,IAArClB,EAAM2L,aAAaK,eACpB,sBAAK9K,UAAU,qEAAf,wBAA+F,uBAA/F,sBAGF,yBACAD,QAAS,kBAAMjB,EAAMkJ,cAAcY,gBAAkB9J,EAAMkJ,cAAc+C,kBAAoBX,EAAoBtL,EAAMkJ,cAAcY,eAAe5E,GAAIlF,EAAMkJ,cAAcY,eAAe3C,UAAUiE,EAAsB,GAAGlG,KAC9NhE,UAAU,gDAAgDI,MAAO,CAACG,OAAQ,eAF1E,UAE0F,cAAC,IAAD,CAAeP,UAAU,YAFnH,IAEgI,sBAAMA,UAAU,kBAAhB,yBAGhI,sBAAKA,UAAU,6CAAf,UACE,uBAAMA,UAAU,YAAhB,sBAAsClB,EAAMkJ,cAAcc,mBAAqBmB,EAAUnL,EAAMkJ,cAAcc,mBAAmB,MAChG,IAA/BhK,EAAMqK,qBACP,sBAAMnJ,UAAU,kDAAhB,uCACA,sBAAMA,UAAU,UAAhB,0CAGJ,qBAAKA,UAAU,sBAAf,SAEE,yBACAD,QAAS,kBAAMjB,EAAMkJ,cAAcY,gBAAkB9J,EAAMkJ,cAAc+C,kBAAoBX,EAAoBtL,EAAMkJ,cAAcY,eAAe5E,GAAIlF,EAAMkJ,cAAcY,eAAe3C,UAAUkE,EAAkB,GAAGnG,KAC1NhE,UAAU,iCAFV,UAE2C,sBAAMA,UAAU,kBAAhB,kBAF3C,IAEyF,cAAC,IAAD,CAAgBA,UAAU,uB,SC3B5GgL,EAJCnD,aAPQ,SAAC,GAIvB,MAAO,CAAEC,KADgD,EAFzDA,KAGqBmD,WADoC,EADzDA,cAKuC,GAAzBpD,EAjDC,SAAC/I,GAChB,OACE,qBAAKkB,UAAU,gDAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,sBAAKA,UAAU,wEAAf,UACE,sBAAKA,UAAU,0EAAf,UACE,sBAAMA,UAAU,+BAAhB,wBACA,qBAAKA,UAAU,gEAAf,SACE,cAAC,IAAD,CAASD,QAAS,kBAAMjB,EAAM0L,wBAAuB,IAAQxK,UAAU,gEAG3E,qBAAKA,UAAU,oFAAoFI,MAAO,CAACC,MAAO,QAASE,OAAQ,SAAnI,SACE,qBAAKgC,IAAK2I,IAAWC,IAAI,OAE3B,uBAAMnL,UAAU,wBAAhB,UAAyClB,EAAMgJ,KAAKsD,KAAKC,MAAzD,IAAiEvM,EAAMgJ,KAAKsD,KAAKE,SACjF,uBAAMtL,UAAU,wBAAhB,iBAA6ClB,EAAMgJ,KAAKsD,KAAKG,aAIjE,sBAAKvL,UAAU,qBAAf,UACE,sBAAKA,UAAU,8EAAf,UACE,0CACA,yCAEF,qBAAKA,UAAU,gEAAgEI,MAAO,CAACoL,cAAe,QAASC,WAAY,QAA3H,SACsC,IAAnC3M,EAAMmM,WAAWS,OAAOnK,OAAe,qBAAKvB,UAAU,uBAAf,8BAA+DlB,EAAMmM,WAAWS,OAAOhH,KAAI,SAACpB,EAAMgG,GAAP,OACjI,sBAAiBtJ,UAAU,+DAA3B,UACE,+BAAOsJ,EAAI,IACX,+BAAOhG,EAAK+F,cACZ,+BAAO/F,EAAKqI,SAHJrC,EAAI,mB,kCCwFbsC,EA5GS,SAAC9M,GACvB,IAAM+M,EAAqC/M,EAAMkJ,cAAcY,eAAiBkD,YAAsBhN,EAAMkJ,cAAcwB,iBAAkB1K,EAAMkJ,cAAcY,eAAe3C,UAAWnH,EAAMoJ,eAAiB,GAC3M6D,EAAoCjN,EAAMkJ,cAAcY,eAAiBoD,YAAqBlN,EAAMkJ,cAAcwB,iBAAkB1K,EAAMkJ,cAAcY,eAAe3C,UAAWnH,EAAMoJ,eAAiB,GAC/M,OAAmC,IAA/BpJ,EAAMqK,qBAEN,sBAAKnJ,UAAU,6BAAf,UACE,qBAAKA,UAAU,qBAAf,4CACA,cAACgJ,EAAA,EAAD,OAKJ,qBAAKhJ,UAAS,wCAA2D,IAAxB+L,EAAaxK,OAAe,cAAgB,YAA7F,SACGzC,EAAMkJ,cAAcY,gBAAkBiD,EAActK,SAAWzC,EAAMkJ,cAAcY,eAAe3C,UAAU1E,QAAkC,IAAxBwK,EAAaxK,OACpI,8BACE,sBAAKvB,UAAU,6BAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,sBAAKA,UAAU,uFAAf,UAEE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,uDAAf,yCACA,qBAAKA,UAAU,uCAAf,wLAEF,qBAAKA,UAAU,OAAf,SACA,qBAAKA,UAAU,2GAAf,SAA0H,cAAC,IAAD,CAASA,UAAU,yCAAyCD,QAAS,kBAAMjB,EAAMmN,gBAAe,eAI9N,qBAAKjM,UAAU,gBAAf,SACE,sBAAKA,UAAU,GAAf,UACE,sBAAKA,UAAU,iEAAf,UAEE,qBAAKA,UAAU,2CAAf,gEACA,qBAAKA,UAAU,+CAAf,SACE,qBAAKA,UAAU,8EAAf,SACGlB,EAAMkJ,cAAcY,eAAe3C,UAAUvB,KAAI,SAACpB,EAAMgG,GAAP,kBACKrJ,KAArD,UAAA8L,EAAarI,MAAK,SAAAC,GAAG,OAAIA,EAAIK,KAAOV,EAAKU,aAAzC,eAA8CA,KAC5C,qBAAKjE,QAAS,WACZjB,EAAMkJ,cAAcY,gBAAkB9J,EAAMqJ,wBAC1CrJ,EAAMkJ,cAAcY,eAAe5E,GACnCV,EAAKU,IAEPlF,EAAMmN,gBAAe,IACRjM,UAAU,yHANzB,SAMmJsJ,EAAI,GAA/IA,EAAI,aAKtB,sBAAKtJ,UAAU,mEAAf,UACE,qBAAKD,QAAS,kBAAMjB,EAAMmN,gBAAe,IAAQjM,UAAU,qHAA3D,0BACA,qBAAKD,QAAS,kBAAMjB,EAAMoN,cAAclM,UAAU,2GAAlD,wCAQV,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,kDAAf,UACE,sBAAKA,UAAU,0BAAf,iBAA6C,4BAAG,4BAAIlB,EAAMgJ,KAAKsD,KAAKC,UAApE,+FACA,qBAAKrL,UAAU,2GAAf,SAA0H,cAAC,IAAD,CAASA,UAAU,yCAAyCD,QAAS,kBAAMjB,EAAMmN,gBAAe,WAE5N,sBAAKjM,UAAU,6CAAf,UACE,qBAAKD,QAAS,kBAAMjB,EAAMmN,gBAAe,IAAQjM,UAAU,qFAA3D,SACE,sBAAMA,UAAU,GAAhB,4BAEF,sBAAKD,QAAS,WAAQjB,EAAMoN,cAAgBlM,UAAU,iIAAtD,UACE,cAAC,IAAD,CAAeA,UAAU,aACzB,sBAAMA,UAAU,GAAhB,+BAIJ,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,iDAAf,iCACA,qBAAKA,UAAU,sCAAsCI,MAAO,CAACE,UAAW,QAAxE,SAC0C,OAAvCxB,EAAMkJ,cAAcY,eAA0B,cAACI,EAAA,EAAD,IAC/C6C,EAActK,OAAS,GAAKsK,EAAcnH,KAAI,SAACpB,EAAMgG,GAAP,OAC5C,qBAAiBtJ,UAAU,iFAA3B,SACE,sBAAKA,UAAU,8BAAf,UACE,sBAAKA,UAAU,+CAAf,UACE,qBAAiBA,UAAU,oHAA3B,SAAgJsJ,EAAI,GAA1IA,EAAI,GACd,sBAAKtJ,UAAU,UAAf,UACE,8BAAMsD,EAAK+C,SAAS,GAAGgD,cACvB,qBAAKrJ,UAAU,kCAAf,oCAKJ,qBAAKA,UAAU,uDAAf,SACE,qBAAKD,QAAS,WACZjB,EAAMkJ,cAAcY,gBAAkB9J,EAAMqJ,wBAC1CrJ,EAAMkJ,cAAcY,eAAe5E,GACnCV,EAAKU,IAEPlF,EAAMmN,gBAAe,IACpBjM,UAAU,6KANb,wBAZIsJ,EAAI,iBC2Cb6C,EALKtE,aARI,SAAC,GAKvB,MAAO,CAAEC,KADoF,EAH7FA,KAIqBE,cADwE,EAF7FA,cAGmDC,OAD0C,EAD7FA,UAK2C,CAC3C+B,uBACA7B,8BAFkBN,EApGC,SAAC/I,GAA+B,IAAD,MAClD,EAAsCwJ,oBAAS,GAA/C,mBAAO8D,EAAP,KAAoBH,EAApB,KAGMI,EAAwBvN,EAAMkJ,cAAcY,eAAiB0D,YAA0BxN,EAAMkJ,cAAcwB,iBAAkB1K,EAAMkJ,cAAcY,eAAe3C,UAAWnH,EAAMoJ,eAAiB,EAClMqE,EAAqBzN,EAAMkJ,cAAcY,eAAgC,IAAdyD,EAAmBvN,EAAMkJ,cAAcY,eAAe3C,UAAU1E,OAAS,EAC1I,OACE,eAAC,WAAD,WACA,qBAAKvB,UAAU,cAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,mGAAf,SACE,sBAAKA,UAAU,iEAAf,UACE,cAAC,IAAD,CAAuBA,UAAU,kBACjC,sBAAKA,UAAU,yCAAf,UACE,sBAAMA,UAAU,mCAAhB,mBAAoDlB,EAAMiH,oBAA1D,aAAoD,EAAoByG,cACxE,uBAAMxM,UAAU,iCAAhB,6BAAwDlB,EAAMiH,oBAA9D,aAAwD,EAAoB0G,uBAIlF,qBAAKzM,UAAU,yCAAyCI,MAAO,CAACsM,UAAW,UAA3E,SACE,sBAAK1M,UAAU,sCAAf,UACE,sBAAKA,UAAU,8EAAf,UACE,sBAAKA,UAAU,+CAAf,uBAAyEqM,EAAzE,OAA4FvN,EAAMkJ,cAAcY,gBAAkB9J,EAAMkJ,cAAcY,eAAe3C,UAAU1E,UAC/K,qBAAKvB,UAAU,gEAAf,SACE,qBAAKA,UAAU,8CAA8CI,MAAO,CAACC,MAAM,GAAD,OAAKkM,EAAL,UAE5E,qBAAKvM,UAAU,kGAAf,SACE,qBAAKA,UAAU,gGAAgGI,MAAO,CAACC,MAAM,GAAD,OAAKkM,EAAL,MAA5H,SACE,sBAAKvM,UAAU,gDAAf,UAAgEuM,EAAhE,cAIN,qBAAKvM,UAAU,oCAAf,SACE,qBAAKA,UAAU,mDAAf,SACE,sBAAKA,UAAU,kEAAf,UACE,+CAAiB,sBAAMA,UAAU,0BAAhB,mBAA2ClB,EAAMkJ,cAAcY,sBAA/D,aAA2C,EAAoC+D,gBAChG,6CAAe,uBAAM3M,UAAU,0BAAhB,UACZlB,EAAMkJ,cAAcY,gBACrB9J,EAAMkJ,cAAcY,eAAegE,SAAS,GAAK,EACjD9N,EAAMkJ,cAAcY,eAAegE,SAAS,GAAK,SACjD9N,EAAMkJ,cAAcY,gBAAkB9J,EAAMkJ,cAAcY,eAAegE,SAAS,GAAK,QACtF9N,EAAMkJ,cAAcY,gBACrB9J,EAAMkJ,cAAcY,eAAegE,SAAW,GAAK,GAAK,KAAO9N,EAAMkJ,cAAcY,eAAegE,SAAW,GAAK,qBAK1H,qBAAK5M,UAAU,yBAAf,SACE,sBAAKA,UAAU,yEAAf,UACE,sBAAKA,UAAU,8EAAf,UACE,iDACA,sBAAMA,UAAU,+BAAhB,0BAE8B,IAA/BlB,EAAMqK,qBACP,qBAAKnJ,UAAU,+DAAf,uBACA,yBAAQD,QAAS,WAAOjB,EAAMyL,eAAgB0B,GAAe,IAAQpH,KAAK,SAAS7E,UAAU,yJAA7F,UACE,cAAC,IAAD,CAAeA,UAAU,uBACzB,6DAQG,IAAhBoM,GACD,cAACvN,EAAA,EAAD,CACEG,MAAO,GACPC,UAAU,EACVC,OAAOJ,EAAMkJ,cAAcwB,iBAAiBjI,OAAe7C,IAAOkC,SAClEzB,MAAO,kBAAM8M,GAAe,IAC5B7M,eAAe,EACfC,eAAgBT,IAAU4B,SAC1BlB,cAAc,EACdC,QAAS,CAACP,OAAO,GACjBkB,UAAWvB,IAAekO,MAT5B,SAUI,cAAC,EAAD,CACA/E,KAAMhJ,EAAMgJ,KACZE,cAAelJ,EAAMkJ,cACrBC,OAAQnJ,EAAMmJ,OACdE,wBAAyBrJ,EAAMqJ,wBAC/BgB,qBAAsBrK,EAAMqK,qBAC5BjB,cAAepJ,EAAMoJ,cACrBG,kBAAmBvJ,EAAMuJ,kBACzB6D,WAAYpN,EAAMoN,WAClBnG,aAAcjH,EAAMiH,aACpBkG,eAAgBA,Y,wBCKTa,EAdOjF,aARE,SAAC,GAKvB,MAAO,CAAEkF,MADiE,EAH1EA,MAIuBjF,KADmD,EAF1EA,KAGmCC,OADuC,EAD1EA,UAK6C,CAC7CiF,gBACAC,gBACAC,eACAC,wBACAC,2BACAC,aACAC,sBACAzD,cACAC,mBACAC,uBACAC,wBAXoBnC,EA1EC,SAAC/I,GACtB,MAAgCwJ,oBAAS,GAAzC,mBAAOiF,EAAP,KAAiBC,EAAjB,KACMC,EAAiB,WAErB,YAAgCxN,IAA5BnB,EAAM4O,mBACJ5O,EAAMiJ,OAAO4F,aACRC,YAAW9O,EAAMiJ,OAAO4F,aAAaE,eAAgB/O,EAAM4O,mBAHlD,GAStB,OAAiB,IAAbH,EACK,cAAC,IAAD,CAAUO,GAAG,eAGpB,qBAAK9N,UAAU,GAAf,cAC+BC,IAA5BnB,EAAM4O,mBACP,sBAAK1N,UAAU,yCAAf,UACA,qBAAKA,UAAU,mCAAf,0BACA,qBAAKA,UAAU,0BACb,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,4CAAf,6BACA,sBAAKA,UAAU,sBAAf,UACG+N,IAA4BrJ,KAAI,SAACpB,EAAMgG,GAAP,mBAC/B,qBAAiBtJ,UAAU,gCAA3B,SACE,sBAAKA,UAAU,8BAAf,UACE,sBAAKA,UAAU,+CAAf,UACE,qBAAiBA,UAAU,oHAA3B,SAAgJsD,EAAKM,aAA3I0F,EAAI,GACd,sBAAKtJ,UAAU,UAAf,UACE,8BAAMsD,EAAK0K,uBACX,sBAAKhO,UAAU,kCAAf,6BAC+BC,IAA5BnB,EAAM4O,oBAAN,UAAyC5O,EAAM4O,kBAAkBhK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBN,EAAKM,sBAAtG,iBAAyC,EAA2EqK,oBAApH,aAAyC,EAAyFlK,sBAI5G9D,IAA5BnB,EAAM4O,oBAAuI,KAApG,UAAA5O,EAAM4O,kBAAkBhK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAAgBN,EAAKM,sBAA7D,mBAA2EqK,oBAA3E,eAAyFhK,QACnI,qBAAKjE,UAAU,wLAAf,mBAGA,qBAAKA,UAAU,8LAAf,uBAfMsJ,EAAI,MAsBhB,sBAAKtJ,UAAS,mBAAcyN,KAAoB,GAAK,4CAA8C,0CAArF,iEAAd,UACE,sBAAKzN,UAAU,GAAf,UACE,qBAAKA,UAAU,oBAAf,yBACA,sBAAKA,UAAU,WAAf,UAA2ByN,IAA3B,UAGa,WAAf3O,EAAMoP,KAAoB,GAAKT,KAAoB,GACnD,wBAAQ1N,QAAS,WAAQjB,EAAMkL,kBAAkBlL,EAAMgJ,KAAKsD,KAAKG,MAAOiC,GAAY,IAAQxN,UAAU,eAAtG,sBAEA,cAAC,IAAD,CAAMA,UAAU,sCAAsC8N,GAAG,aAAzD,2C,yDCORK,E,kDACJ,WAAYrP,GAAqB,IAAD,gCAC9B,cAAMA,IAsBR0J,WAAa,SAACvE,GACZ,EAAKmK,SAAS,CAAE7F,QAAStE,KAxBK,EA0BhCoK,wBAA0B,SAACpK,GACzB,EAAKmK,SAAS,CAAEjF,qBAAsBlF,KA3BR,EA8BhCuG,uBAAyB,SAACvG,GACxB,EAAKmK,SAAS,CACZ3D,aAAc,CACZC,QAASzG,EACT6G,cAAe,EAAKwD,MAAM7D,aAAaK,kBAlCb,EAsChCyD,6BAA+B,SAACtK,GAC9B,EAAKmK,SAAS,CACZ3D,aAAc,CACZC,QAAS,EAAK4D,MAAM7D,aAAaC,QACjCI,cAAe7G,MA1CW,EA+ChCuK,oBAAsB,SAACnI,GACrB,EAAK+H,SAAS,CAAEK,iBAAkBpI,KAhDJ,EAmDhCjC,iBAAmB,SAACL,GAClB,EAAKjF,MAAM4P,sBAAsB3K,GACjC/C,QAAQyI,IAAI,cAAe1F,IArDG,EAwDhC4K,iBAAmB,SAACL,GAClB,EAAKF,SAAS,CAAEQ,cAAeN,KAzDD,EA4DhCO,oBAAsB,WAEpB,IAAIC,EAAcC,aAAaC,QAAQC,IAAYC,YACnD,GAAoB,OAAhBJ,EAAsB,CACxB,IAAIK,EAAUjO,KAAKC,MAAM2N,GAAcM,gBACvC,GAAID,GACEA,EAAQ5N,OAAS,EAAG,CAAC,IAAD,EACtB,IAAK,IAAI+H,KAAK6F,EACZ,EAAKrQ,MAAMgL,cAAcqF,EAAQ7F,IAGjC6F,EAAQ5N,UAAR,UACA,EAAKzC,MAAMiJ,OAAO4F,oBADlB,aACA,EAAgCE,eAAetM,UAE/C,EAAK6M,SAAS,CAAEQ,eAAe,IAC/B,EAAK9P,MAAMkL,kBAAkB,EAAKlL,MAAMgJ,KAAKsD,KAAKG,UA3E5B,EAkFhC8D,YAAc,WACZ,GAA2C,OAAvC,EAAKvQ,MAAMwQ,QAAQC,gBAA0B,CAC/C,IAAI9L,EAAQ,EAAK3E,MAAMkJ,cAAcwH,sBACrC,GAAc,OAAV/L,EACF,OAAOA,EAGX,OAAO,MAzFuB,EA4FhCgM,cAAgB,SAACC,GACgC,OAA3C,EAAK5Q,MAAM6Q,UAAUC,mBAAiF,OAAnD,EAAK9Q,MAAMkJ,cAAcwH,uBAC9E,EAAK1Q,MAAM+Q,uBAAuB,CAChCzE,KAAM,EAAKtM,MAAMgJ,KAAKsD,KAAK0E,QAC3BnF,SAAU,EAAK7L,MAAM6Q,UAAUC,kBAAkBG,YACjDL,KAAMA,GACL,EAAKlH,WAAY,EAAKwH,yBAA0B,EAAKlR,MAAMmR,oBAlGlC,EAsGhCC,kBAAoB,WAAO,IAAD,IAatB,GAZgC,OAA9B,EAAKpR,MAAMqR,OAAOC,SAAyD,IAArC,EAAKtR,MAAMqR,OAAOC,QAAQ7O,QAClE,EAAKzC,MAAMuR,YAAY,EAAK7H,YAEiB,OAA3C,EAAK1J,MAAMoJ,cAAcA,eAA4E,IAAlD,EAAKpJ,MAAMoJ,cAAcA,cAAc3G,QAC5F,EAAKzC,MAAMuJ,kBAAkB,EAAKG,YAEpC,EAAKqG,sBAEuD,KAA1D,YAAK/P,MAAMiJ,OAAO4F,oBAAlB,eAAgCE,eAAetM,SAC/C,EAAKzC,MAAMiJ,OAAO4F,aAAa2C,yBAC/B,YAAKxR,MAAMiJ,OAAO4F,aAAa2C,8BAA/B,eAAuDlB,gBACpD7N,QAAS,IAEZ,EAAK6M,SAAS,CACZmC,YAAW,UACT,EAAKzR,MAAMiJ,OAAO4F,aAAa2C,8BADtB,aACT,EACIlB,mBAvHoB,EA6HhCoB,2BAA6B,SAACC,EAAaxM,IAC1B,IAAXA,GACF,EAAKnF,MAAM4R,eAAe,CACxB1R,MAAO,SACPqK,YAAaoH,EACbvR,MAAOyR,IAAgB/Q,UAlIG,EAuIhCoQ,yBAA2B,SAACS,EAAaxM,IACvC,EAAKnF,MAAM4R,eAAe,CACxB1R,OAAkB,IAAXiF,EAAkB,WAAa,SACtCoF,YAAaoH,EACbvR,OAAkB,IAAX+E,EAAkB0M,IAAgB9Q,QAAU8Q,IAAgB/Q,UAEtD,IAAXqE,GAAgE,OAA5C,EAAKnF,MAAMkJ,cAAcY,kBAC/C,EAAK9J,MAAM8R,mBAAmB,CAC5BC,OAAQ,EAAK/R,MAAMkJ,cAAcY,eAAeiI,OAChDV,OAAQ,EAAKrR,MAAMkJ,cAAcY,eAAeuH,OAChD/E,KAAM,EAAKtM,MAAMgJ,KAAKsD,KAAK0E,SAC1B,EAAKtH,iBAEKvI,IADF,EAAKnB,MAAMkJ,cAAc8I,gBAAgBpN,MAAK,SAAAC,GAAG,aAAIA,EAAIK,MAAJ,UAAW,EAAKlF,MAAMkJ,cAAcY,sBAApC,aAAW,EAAyC5E,QAElH,EAAKlF,MAAMiS,mBAAmB,EAAKjS,MAAMkJ,cAAcY,eAAe5E,MArJ5C,EA0JhCuG,aAAe,WACb,GAAgD,OAA5C,EAAKzL,MAAMkJ,cAAcY,gBAA2B,EAAK9J,MAAMkJ,cAAcwB,iBAAiBjI,OAAS,EAAG,CAAC,IAAD,gBACzF,EAAKzC,MAAMkJ,cAAcwB,kBADgE,IAC5G,2BAA8D,CAAC,IAAtDzF,EAAqD,SACtC,IAAlBA,EAAOE,QACT,EAAKnF,MAAMkS,yBAAyB,CAClCtB,KAAM,EAAK5Q,MAAMkJ,cAAcY,eAAe5E,GAC9CqC,SAAUtC,EAAOH,YACjB0C,SAAU,EAAKxH,MAAMkJ,cAAcoB,kBACnC6H,WAAYlN,EAAOA,QAClB,EAAKsK,wBAAyB,EAAKmC,6BARkE,iCA3JhF,EAyKhCtE,WAzKgC,sBAyKnB,8BAAA1H,EAAA,yDACqC,OAA5C,EAAK1F,MAAMkJ,cAAcY,eADlB,wBAELyB,EAAU,EAAKvL,MAAMkJ,cAAcY,eAAe5E,GACtD,EAAKoK,SAAS,CAAE8C,iBAAiB,IAHxB,kBAKWC,IAAMC,IAAN,UAAaC,IAAIC,QAAjB,wBAAwCjH,IALnD,QAKD9G,EALC,UAOLvC,QAAQyI,IAAI,QAASlG,GACrB,EAAKzE,MAAMiS,mBAAmB1G,GAC9B,EAAKvL,MAAM4R,eAAe,CACxB1R,MAAO,WACPqK,YAAa,+BACbnK,MAAOyR,IAAgB9Q,WAZpB,kDAgBP,EAAKf,MAAM4R,eAAe,CACxB1R,MAAO,iBACPqK,YAAavI,YAAY,EAAD,IACxB5B,MAAOyR,IAAgB/Q,SAnBlB,QAsBT,EAAKwO,SAAS,CAAE8C,iBAAiB,IAtBxB,0DAzKmB,EAmMhCK,UAAY,WACV,EAAKnD,SAAS,CAAEoD,cAAc,KApMA,EAsMhCC,UAAY,WACV,EAAKrD,SAAS,CAAEoD,cAAc,KApM9B,EAAKlD,MAAQ,CACX7D,aAAc,CACZC,SAAS,EACTI,eAAe,GAEjB2D,iBACqC,OAAnC,EAAK3P,MAAMiJ,OAAO4F,aAAlB,UACI,EAAK7O,MAAMiJ,OAAO4F,oBADtB,aACI,EAAgCE,eAAe,GAC/C,KACN0C,YAAa,GACb3B,eAAe,EACf8C,YAAY,EACZnJ,SAAS,EACToJ,gBAAiB,GACjBxI,sBAAsB,EACtB+H,iBAAiB,EACjBM,cAAc,GAnBc,E,0CA0MhC,WAAU,IAAD,6BAEP,OAAkD,OAA9CI,KAAK9S,MAAMkJ,cAAc+C,iBACpB,cAAC,IAAD,CAAU+C,GAAG,mBAGK,IAAvB8D,KAAKtD,MAAM/F,SAAmE,OAA/CqJ,KAAK9S,MAAMkJ,cAAc6J,kBAExD,qBAAK7R,UAAU,kHAAf,SACE,sBAAKA,UAAU,qDAAf,UACE,qBAAKA,UAAU,kCAAf,qCACA,cAACgJ,EAAA,EAAD,UAM2B,IAA/B4I,KAAKtD,MAAM4C,gBAEX,qBAAKlR,UAAU,kHAAf,SACE,sBAAKA,UAAU,qDAAf,UACE,qBAAKA,UAAU,kCAAf,kDACA,cAACgJ,EAAA,EAAD,SAON,qBAAKhJ,UAAU,0BAAf,SACE,eAAC,WAAD,WACgD,OAA/C4R,KAAK9S,MAAMkJ,cAAc8J,kBACxB,qBAAK9R,UAAU,kHAAf,SACE,sBAAKA,UAAU,qDAAf,UACE,qBAAKA,UAAU,kCAAf,+CACA,cAACgJ,EAAA,EAAD,SAGN,cAAC+I,EAAA,EAAD,CACER,UAAW,WACT,EAAKA,aAEPS,YAAa,WACmC,OAA9C,EAAKlT,MAAMkJ,cAAc+C,kBAA6B,EAAKjM,MAAMmT,kBAAkB,EAAKnT,MAAMkJ,cAAc+C,iBAAkB,EAAK0E,cAAe,EAAKjH,aAEzJ0J,SAAU,WACRlR,QAAQyI,IAAI,UAGd0I,QAASP,KAAK9S,MAAMkJ,cAAc6J,kBAAkBM,QACpD9H,QAASuH,KAAK9S,MAAMkJ,cAAc8J,kBAAkBM,OAAO/H,QAC3D0F,YAAa6B,KAAK9S,MAAMkJ,cAAc6J,kBAAkB9B,YACxDsC,uBAAwBT,KAAK9S,MAAMkJ,cAAc6J,kBAAkBS,UACnEC,aAAc,kBAAM,EAAKrG,cAf3B,UAiB+B,IAA5B0F,KAAKtD,MAAMkD,aACZ,qBAAKxR,UAAU,kHAAf,SACE,sBAAKA,UAAU,+FAAf,UACE,cAAC,IAAD,CAAeA,UAAU,2BACzB,qBAAKA,UAAU,yDAAf,4CACA,qBAAKA,UAAU,8CAAf,iIACA,cAACgJ,EAAA,EAAD,SAGwC,OAA5C4I,KAAK9S,MAAMkJ,cAAcY,gBAA0E,OAA/CgJ,KAAK9S,MAAMkJ,cAAc8J,kBAC7E,qBAAK9R,UAAU,kHAAf,SACE,sBAAKA,UAAU,qDAAf,UACE,qBAAKA,UAAU,kCAAf,yCACA,cAACgJ,EAAA,EAAD,SAGJ,+BACgC,IAA7B4I,KAAKtD,MAAMM,eAEY,QADxB,UAAAgD,KAAK9S,MAAMiJ,OAAO4F,oBAAlB,mBAAgC2C,8BAAhC,eACIlB,iBACF,qBAAKpP,UAAU,0CAAf,SACE,cAAC,EAAD,CACEkO,KAAK,SACLR,kBAAiB,UACfkE,KAAK9S,MAAMiJ,OAAO4F,oBADH,iBACf,EAAgC2C,8BADjB,aACf,EACIlB,gBAENmB,iBAEiCtQ,KAD/B,UAAA2R,KAAK9S,MAAMiJ,OAAO4F,oBAAlB,mBAAgC2C,8BAAhC,eACIlB,gBAAgB7N,QAChB,EAFJ,UAGIqQ,KAAK9S,MAAMiJ,OAAO4F,oBAHtB,iBAGI,EAAgC2C,8BAHpC,aAGI,EACIlB,gBAAgB7N,WAK9B,sBAAKvB,UAAU,4DAAf,UACE,sBAAKA,UAAU,8BAAf,WACuC,IAApC4R,KAAKtD,MAAM7D,aAAaC,SACvB,qBACE1K,UAAS,oDADX,SAGE,cAAC,EAAD,CACEwK,uBAAwBoH,KAAKpH,2BAInC,qBACExK,UAAS,oBAC6B,IAApC4R,KAAKtD,MAAM7D,aAAaC,QAAoB,KAAO,KAD5C,iCADX,SAKE,sBAAK1K,UAAU,qCAAf,UACE,qBAAKA,UAAU,SAAf,SAEE,qBAAKA,UAAS,SAAd,SACE,cAACwS,EAAA,EAAD,CACE/H,aAAcmH,KAAKtD,MAAM7D,aACzBD,uBAAwBoH,KAAKpH,uBAC7B+D,6BACEqD,KAAKrD,6BAEPrG,cAAe0J,KAAK9S,MAAMoJ,cAC1BG,kBAAmBuJ,KAAK9S,MAAMuJ,kBAC9BkC,aAAcqH,KAAKrH,mBAIzB,sBAAKvK,UAAU,gBAAf,UAEE,cAAC,EAAD,CACE2O,iBAAkBiD,KAAKjD,iBACvBlE,aAAcmH,KAAKtD,MAAM7D,aACzBD,uBAAwBoH,KAAKpH,uBAC7B+D,6BACEqD,KAAKrD,6BAEPrG,cAAe0J,KAAK9S,MAAMoJ,cAC1BG,kBAAmBuJ,KAAK9S,MAAMuJ,kBAC9Bc,qBAAsByI,KAAKtD,MAAMnF,qBACjC+C,WAAY0F,KAAK1F,WACjBnG,aAAc6L,KAAK9S,MAAMqR,OAAOsC,gBAChClI,aAAcqH,KAAKrH,eAGrB,cAAC3C,EAAA,EAAD,CACEwH,gBAAe,UACbwC,KAAK9S,MAAMiJ,OAAO4F,oBADL,iBACb,EAAgC2C,8BADnB,aACb,EACIlB,gBAENhL,iBAAkBwN,KAAKxN,iBACvBqK,iBAAkBmD,KAAKtD,MAAMG,iBAC7BD,oBAAqBoD,KAAKpD,oBAC1BkE,SAAS,EACTvJ,qBAAsByI,KAAKtD,MAAMnF,kCAM3C,cAAC,EAAD,CACEsB,aAAcmH,KAAKtD,MAAM7D,aACzBD,uBAAwBoH,KAAKpH,uBAC7B+D,6BAA8BqD,KAAKrD,6BACnCrG,cAAe0J,KAAK9S,MAAMoJ,cAC1BG,kBAAmBuJ,KAAK9S,MAAMuJ,kBAC9BkC,aAAcqH,KAAKrH,aACnBpB,qBAAsByI,KAAKtD,MAAMnF,8BAME,OAA5CyI,KAAK9S,MAAMkJ,cAAcY,gBACtB,cAAC/J,EAAA,EAAD,CACEG,MAAM,GACNC,UAAU,EACVC,MAAOR,IAAOkC,QACdzB,MAAO,kBAAM,EAAKL,MAAM6T,yBAAyB,OACjDvT,eAAe,EACfC,eAAgBT,IAAUgU,MAC1BtT,cAAc,EACdC,QAAS,CAACP,OAAO,GARnB,SASI,qBAAKgB,UAAU,8BAAf,SACiC,OAA9B4R,KAAK9S,MAAMqR,OAAOC,QAAmB,cAACpH,EAAA,EAAD,IACtC,gCACE,qBAAKhJ,UAAU,mCAAf,SAIE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,6CAAf,SACG4R,KAAK9S,MAAMqR,OAAOsC,iBACnB,gCACE,iCAAOb,KAAK9S,MAAMqR,OAAOsC,gBAAgBhG,YAAzC,OACA,+BAAOmF,KAAK9S,MAAMqR,OAAOsC,gBAAgBjG,mBAG7C,sBAAKxM,UAAU,8BAAf,UACE,sBAAMA,UAAU,4BAAhB,wBACA,sBAAMA,UAAU,0BAAhB,SAA2CyB,YAAKmQ,KAAKvC,cAAewD,UAAW,mBAEjF,sBAAK7S,UAAU,8BAAf,UACE,sBAAMA,UAAU,4BAAhB,yBACA,sBAAMA,UAAU,0BAAhB,mBAA2C4R,KAAKvC,qBAAhD,aAA2C,EAAoB1C,gBAEjE,sBAAK3M,UAAU,8BAAf,UACE,sBAAMA,UAAU,4BAAhB,4BACwB,OAAvB4R,KAAKvC,eAA0B,uBAAMrP,UAAU,0BAAhB,UAA2C4R,KAAKvC,cAAezC,SAAW,IAAM,GAAKgF,KAAKvC,cAAezC,SAAW,GAAK,OAAzH,IAAkIgF,KAAKvC,cAAezC,SAAW,GAAK,GAAK,iCAAOgF,KAAKvC,cAAezC,SAAW,GAAtC,sBAKjN,qBAAK5M,UAAU,8CAGf,sBAAKA,UAAU,kDAAf,UACE,sBAAKA,UAAU,mEAAf,UACA,qBAAKA,UAAU,sDAAf,+BAC0B,OAAvB4R,KAAKvC,eAA0B,qBAAKyD,wBAAyB,CAACC,OAAQnB,KAAKvC,cAAe2D,aAE7F,sBAAMhT,UAAU,gBAAhB,+GAEF,sBAAKA,UAAU,kDAAf,UACE,wBAAQD,QAAS,kBAAM,EAAKjB,MAAM6T,yBAAyB,OAAO3S,UAAU,sCAA5E,qBACA,wBAAQD,QAAS,kBAAoD,OAA9C,EAAKjB,MAAMkJ,cAAc+C,kBAA6B,EAAKjM,MAAMmT,kBAAkB,EAAKnT,MAAMkJ,cAAc+C,iBAAkB,EAAK0E,cAAe,EAAKjH,aAAaxI,UAAU,6BAArM,qD,GAxaDiT,aAgcRC,EAASrL,aAbE,SAAC,GAUvB,MAAO,CAAEC,KADwQ,EARjRA,KASqBC,OAD4P,EAPjRA,OAQqCC,cAD4O,EANjRA,cAOmEC,OAD8M,EALjRA,OAMmFkI,OAD8L,EAJjRA,OAKmGb,QAD8K,EAHjRA,QAIqHpH,cAD4J,EAFjRA,cAGmJyH,UAD8H,EADjRA,aAK6C,CAC7C9F,cACAC,mBACAC,uBACAC,uBACAmJ,qBACAR,8BACAV,uBACA9J,6BACAkI,iBACA+C,uBACA1E,2BACArG,uBACAwH,4BACAa,oBACAK,uBACAC,8BACAJ,uBACAX,uBAlBoBpI,CAmBnBsG","file":"static/js/29.da84268c.chunk.js","sourcesContent":["/**\n * @description Modal design\n * @done_by Niyongabo\n */\nimport { MdClose } from \"react-icons/md\";\n\nexport enum Themes {\n  default = \"default\",\n  primary = \"primary\",\n  secondary = \"secondary\",\n  danger = \"danger\",\n  success = \"success\",\n  warning = \"warning\",\n}\n\nexport enum ModalMarginTop {\n  none = \"top-0\",\n  small = \"top-28\",\n  medium = \"top-1/3\",\n  large = \"top-1/2\",\n  extra = \"top-2/3\",\n}\n\nexport enum ModalSize {\n  small = \"max-w-sm\",\n  medium = \"max-w-screen-sm\",\n  large = \"max-w-screen-md\",\n  extraLarge = \"max-w-screen-lg\",\n  maxWidth = \"max-w-screen h-full\",\n}\n\ninterface ModalInterface {\n  title?: any;\n  backDrop: boolean;\n  theme: Themes;\n  close: Function;\n  backDropClose: boolean;\n  footer?: any;\n  children: any;\n  widthSizeClass: ModalSize;\n  displayClose: boolean;\n  padding: { title?: boolean; body?: boolean; footer?: boolean };\n  marginTop?: ModalMarginTop;\n}\n\nconst Modal = (props: ModalInterface): JSX.Element => {\n  const {\n    title,\n    backDrop,\n    theme,\n    close,\n    backDropClose,\n    widthSizeClass,\n    displayClose,\n    padding = { title: true, body: true, footer: true },\n  }: ModalInterface = props;\n\n  let themeColor: string;\n\n  switch (theme) {\n    case Themes.primary:\n      themeColor = \"blue-500\";\n      break;\n    case Themes.secondary:\n      themeColor = \"gray-300\";\n      break;\n    case Themes.danger:\n      themeColor = \"red-500\";\n      break;\n    case Themes.success:\n      themeColor = \"green-500\";\n      break;\n    case Themes.warning:\n      themeColor = \"yellow-500\";\n      break;\n    default:\n      themeColor = \"white\";\n      break;\n  }\n  return (\n    <>\n      <div onClick={(): void => backDropClose && close()} className={`animate__animated animate__fadeIn animate__faster modal fixed bg-black bg-opacity-${backDrop === true ? '60' : '0'}`}></div>\n      <div className={`fixed items-center justify-items-center ${props.marginTop === undefined ? ModalMarginTop.none : props.marginTop} left-0 right-0 bottom-0 bg-white rounded shadow-xl self-center ${widthSizeClass} animate__animated ${props.marginTop !== undefined && props.marginTop !== ModalMarginTop.none ? \"animate__fadeInUp\" : \"animate__zoomIn\"} animate__faster`} style={{width: '100%', maxHeight: '99vh', height: `${widthSizeClass === ModalSize.maxWidth ? props.marginTop === undefined ? \"100%\" : \"unset\" : \"fit-content\"}`, overflowY: 'auto', margin: 'auto', zIndex: 99999999}}>\n        <div className={`flex justify-between bg-${themeColor} ${padding.title === true ? \"py-4 px-4\" : \"\" } rounded-t text-${theme === Themes.default || theme === Themes.secondary ? \"black\" : \"white\"}`}>\n          {!title || title === \"\" ? <div></div> : (<h4 className={`text-lg font-bold `}>{title}</h4>)}\n          {displayClose === false ? \"\" : <div className=\"hover:text-red-600 hover:bg-red-100 rounded-full p-1 h-8 w-8\"><MdClose className=\"cursor-pointer font-extrabold text-2xl\" onClick={():void => close()} /></div>}\n        </div>\n        <div\n          className={`space-x-3 ${padding.body === true ? \"py-4 px-4\" : \"\"}`}\n        >\n          <div>{props.children !== \"\" ? props.children : \"\"}</div>\n        </div>\n        {props.footer !== undefined && props.footer !== \"\" ? (\n          <div\n            className={`flex float-right ${\n              padding.footer === true ? \"py-4 px-4\" : \"\"\n            }`}\n          >\n            {props.footer}\n          </div>\n        ) : ( \n          \"\"\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","export const errorToText = (error: any): string => {\n  console.error({ ...error });\n  let error_res = JSON.parse(error?.request?.response);\n  if (error_res.errors.length >= 1) {\n    return error_res.errors[0].message;\n  } else {\n    return \"Something went wrong, please try again later\";\n  }\n};\n\nexport const search = (objList: any, text: string, keys: any = null) => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product: any) => {\n    let flag;\n    let dataKeys = keys === null ? product : keys;\n    for (let prop in dataKeys) {\n      flag = false;\n      if (product[prop] === null || product[prop] === undefined) continue;\n      flag =\n        product[prop].toString().toLowerCase().indexOf(text.toLowerCase()) > -1;\n      if (flag) break;\n    }\n    return flag;\n  });\n};\n\nexport const DATE = (\n  data: string,\n  format: \"DD/MM/YYYY\" | \"YYYY/MM/DD\" = \"DD/MM/YYYY\"\n): string => {\n  const date = new Date(data);\n  if (format === \"YYYY/MM/DD\") {\n    return (\n      date.getFullYear() +\n      \"-\" +\n      (\"0\" + (date.getMonth() + 1)).slice(-2) +\n      \"-\" +\n      date.getDate()\n    );\n  } else {\n    return (\n      date.getDate() +\n      \"/\" +\n      (\"0\" + (date.getMonth() + 1)).slice(-2) +\n      \"/\" +\n      date.getFullYear()\n    );\n  }\n};\n\nexport const checkIfImageExists = (url: string, callback: Function) => {\n  const img = new Image();\n\n  img.src = url;\n\n  if (img.complete) {\n    callback(true);\n  } else {\n    img.onload = () => {\n      callback(true);\n    };\n    img.onerror = () => {\n      callback(false);\n    };\n  }\n};\n\nexport const calculate_age = (dob: string) => {\n  const date = new Date(dob);\n  var diff_ms = Date.now() - date.getTime();\n  var age_dt = new Date(diff_ms);\n\n  return Math.abs(age_dt.getUTCFullYear() - 1970);\n};\n\n// export const Shuffle = (array: any[]) => {\n//   let currentIndex: number = array.length,  randomIndex: number;\n//   while (currentIndex !== 0) {\n//     randomIndex = Math.floor(Math.random() * currentIndex);\n//     currentIndex--;\n//     [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n//   }\n//   return array;\n// }\n\n// export const Shuffle = (array: any[]) => {\n//   let ranNums = array.sort(() => Math.random() - array.length/100)\n//   return ranNums;\n// }\n\nexport const randomIntFromInterval = (min:number, max:number) => { // min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n\nexport const Shuffle = (arr: any[]) => {\n  let temp = arr;\n  let res: any[] = [];\n  for (let i = temp.length - 1; i >= 0; i--) {\n    let j = randomIntFromInterval(0, i);\n    res = [...res, temp[j]];\n    let testing = temp;\n    let newTemp = temp.filter(itm => testing.indexOf(itm) !== j);\n    temp = newTemp;\n  }\n  return res;\n}","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { MultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  \n  const checkAnswer = (item: MultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: MultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: MultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.type === questionTypeElementsType.SingleMultiple ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonUnchecked className=\"text-2xl truncate\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default MultipleChoice\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React, { useEffect } from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { TrueFalseQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: TrueFalseQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n\n  const addAnswer = (item: TrueFalseQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [...temp, {\n          id: t.id,\n          value: t.value,\n          status: false,\n        }]\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  \n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <MdRadioButtonChecked className=\"text-2xl\" />:\n          <MdRadioButtonUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default TrueFalse\n","import React, { useEffect } from 'react'\nimport { MdRadioButtonUnchecked } from 'react-icons/md'\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CandidateExam } from '../../../../interfaces/exam'\nimport { MatchingQuestionAnswerInterface, MatchingStatuses, QuestionInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MatchingQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswer = (item: MatchingQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: item.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  \n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: \"\"\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n\n  const checkAnswerStatus = (selectedQuestionId: string, selectedLang: QuestionLanguage, ans: MatchingQuestionAnswerInterface) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(test => test.id === selectedQuestionId);\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(itm => itm.language === lang.key);\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(it => it.status.toString() === ans.status);\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (temp !== undefined) {\n      let ans = temp.answer.find(itm => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(props.selectedQuestionAnswer.question_id, props.selectedLanguage, ans);\n        }\n      }\n    }\n    return false;\n  }\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined = props.selectedExam?.questions.find(itm => itm.id === props.selectedQuestionAnswer.question_id);\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [...res, {\n            id: ans.id,\n            lang: item.language,\n            status: ans.status.toString()\n          }]\n        }\n      }\n    }\n    return res;\n  }\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find(itm => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(itm => itm.id === item && itm.lang === lang)?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  }\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"} grid grid-cols-2`}>\n          <div className=\"col-span-1 flex flex-row items-center gap-2\">\n            {checkAnswer(item) === true ?\n            <RiCheckboxCircleFill className=\"text-2xl\" />:\n            <MdRadioButtonUnchecked className=\"text-2xl\" />}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n          <div className=\"col-span-1\">\n            <select \n            onChange={(e) => {\n              addAnswer({\n                id: item.id,\n                value: item.value,\n                status: e.target.value\n              }, props.selectedQuestionAnswer.question_id)\n            }}\n            className={`border rounded w-full py-2 px-2 cursor-pointer focus:outline-none focus:border-blue-500 ${checkAnswer(item) === false ? \"border-gray-400 text-gray-600\" : \"border-blue-50 bg-blue-50 text-blue-600 hover:border-blue-600\"}`}>\n              <option value=\"\">Select matching</option>\n              {props.selectedQuestionAnswer !== null &&\n                props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((itm, x) => (\n                  <option selected={itm.status === findWord(props.selectedLanguage, checkIfSelected(item.id)) ? true : false} key={x + 1} value={itm.status}>{itm.status}</option>\n                ))}\n            </select>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Matching\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { SimpleCalculatedQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (item: SimpleCalculatedQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: [newAnswers[0].value],\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0].toString() : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SimpleCalculated\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { ShortAnswerQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: ShortAnswerQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: \"\",\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <textarea \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }} value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} style={{minHeight: '200px'}}></textarea>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ShortAnswer\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { NumericalQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: NumericalQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: {id: string; value: string[]; status: number[]}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: {id: string; value: string; status: number[]}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: [item.value],\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0] : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold border-blue-600\" : \"border text-gray-700 border-gray-500\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Numerical\n","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CalculatedMultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center rounded cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ?\n          <MdRadioButtonUnchecked className=\"text-2xl\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default CalculatedMultipleChoice\n","import React, { useEffect, useState } from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md';\nimport { QuestionInterface, QuestionItemInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../interfaces/index';\nimport { newAnswer } from '../DoExam';\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question';\nimport Loading from '../../../components/Loading/Loading';\nimport { LoadingType } from '../../../components/Loading/LoadingV2';\nimport MultipleChoice from './Answers/MultipleChoice';\nimport { toCalculatedMultipleChoice, toMatching, toMultipleChoice, toNumerical, toShortAnswer, toSimpleCalculated, toTrueFalse } from './ConvertingAnswers';\nimport { findQuestionType } from '../utils/utils';\nimport TrueFalse from './Answers/TrueFalse';\nimport Matching from './Answers/Matching';\nimport SimpleCalculated from './Answers/SimpleCalculated';\nimport ShortAnswer from './Answers/ShortAnswer';\nimport Numerical from './Answers/Numerical';\nimport CalculatedMultipleChoice from './Answers/CalculatedMultipleChoice';\nimport { BiWorld } from 'react-icons/bi';\nimport { AiFillCaretDown } from 'react-icons/ai';\nimport { FaTimes } from 'react-icons/fa';\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) =>void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined = props.candidateExam.candidate_exam.questions.find(itm => props.candidateExam.selected_question && itm.id === props.candidateExam.selected_question);\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  }\n  \n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res:QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(itm => itm.id === props.candidateExam.selected_question);\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  }\n  useEffect(() => {\n    if (props.questionTypes.questionTypes === null || props.questionTypes.questionTypes.length === 0) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props])\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ?\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n        <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n          <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n          <Loading type={LoadingType.white} />\n        </div>\n      </div>:\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          {props.submitQuestionAnswer === true && \n          <div className=\"bg-blue-50 px-3 py-2 rounded text-blue-700 font-bold animate-pulse text-sm\">Saving your answer ...</div>}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              <div className=\"text-md flex flex-col w-full\">\n                <span className=\"text-sm text-gray-600\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.title}\n                </span>\n                <span className=\"text-lg text-gray-800 font-bold\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.description}\n                </span>\n              </div>\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div onClick={() => setSelectLang(!selectLang)} className=\"flex flex-row items-center gap-2\">\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{width: '97px'}}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">Language</span>\n                    <span title={QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value} className=\"text-sm font-bold text-blue-600 truncate\" style={{width: '97px'}}>\n                      {QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value}\n                    </span>\n                  </div>\n                  <div className={`${selectLang === true ? \"bg-yellow-800 text-white\" : \"bg-gray-50 hover:bg-blue-600\"} h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}>\n                    {selectLang === true ? \n                    <FaTimes className=\"text-xl my-2 mx-2\" />:\n                    <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />}\n                  </div>\n                </div>\n                {selectLang === true &&\n                <div className=\"relative rounded overflow-hidden\" style={{width: '182px'}}>\n                  <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                    {QuestionLanguages.map((item, i) => (\n                      <span onClick={() => {props.setQuestionLanguage(item.key); setSelectLang(!selectLang)}} key={i + 1} \n                      className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${props.candidateExam.selected_language === item.key ? \"bg-blue-800 font-extrabold border-blue-800\" : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"}`}>\n                        {props.candidateExam.selected_language === item.key ? <MdRadioButtonChecked className=\"text-xl mr-2\" /> : <MdRadioButtonUnchecked className=\"text-xl mr-2\" />} {item.value}\n                      </span>\n                    ))}\n                  </div>\n                </div>}\n              </div>\n            </div>\n          </div>\n          <div className=\"my-4 py-2 px-2 bg-white rounded\" onClick={() => selectLang === true && setSelectLang(false)}>\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            (findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.MultipleChoice ||\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SingleMultiple) &&\n            <MultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.TrueFalse &&\n            <TrueFalse \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toTrueFalse(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Matching Question */}\n            {console.log(\"Type: \", findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes))}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Matching &&\n            <Matching \n              selectedLanguage={props.candidateExam.selected_language}\n              selectedExam={props.candidateExam.candidate_exam}\n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMatching(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SimpleCalculate &&\n            <SimpleCalculated \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toSimpleCalculated(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.ShortAnswer &&\n            <ShortAnswer \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toShortAnswer(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Numeric &&\n            <Numerical \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toNumerical(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.CalculatedMultipleChoice &&\n            <CalculatedMultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toCalculatedMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n          </div>\n      </div>}\n    </div>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, questionTypes: questionTypes, };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;","import React from 'react'\nimport { BiChat } from 'react-icons/bi'\nimport { IoNotifications } from 'react-icons/io5'\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from '../utils/utils';\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface; \n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (let x: number = 0; x < props.candidateExam.candidate_exam.questions.length; x++) {\n        if (props.candidateExam.candidate_exam.questions[x].id === question_id) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  }\n\n  let selectedIndexPrevious: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 ? \n  findIndex(props.candidateExam.selected_question) : props.candidateExam.candidate_exam.questions.length : -1;\n\n  let selectedIndexNext: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 && findIndex(props.candidateExam.selected_question) < props.candidateExam.candidate_exam.questions.length-1 ? \n  findIndex(props.candidateExam.selected_question) : findIndex(props.candidateExam.selected_question) === 0 ? 0 : -1 : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(item => questionAnswered(props.candidateExam.question_answers, item.id, findQuestionType(item.type, props.questionTypes.questionTypes)!) === true);\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  }\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {console.log(\"Selected: \", selectedIndexNext)}\n      <div className=\"flex flex-row items-center\">\n        <div onClick={() => props.setProfileWindowStatus(!props.windowStatus.profile)} \n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}>\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div className=\"bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\" style={{position: 'relative', top: '-10px', right: '-12px'}}>02</div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && \n          <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">New events <br/>are available</div>}\n        </div>\n\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexPrevious-1].id)}\n        className=\"btn btn-blue flex justify-center items-center\" style={{height: 'fit-content'}}><MdChevronLeft className=\"text-xl\" /> <span className=\"hidden md:block\">Previous</span></button>\n\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">Question {props.candidateExam.selected_question && findIndex(props.candidateExam.selected_question)+1}</span>\n          {props.submitQuestionAnswer === true ? \n          <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">Saving question answer...</span>:\n          <span className=\"text-xs\">Auto save is activated</span>}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div> */}\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexNext+1].id)}\n        className=\"btn btn-blue flex items-center\"><span className=\"hidden md:block\">Next</span> <MdChevronRight className=\"text-xl\" /></button>\n      </div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth;  candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;","import React from 'react'\nimport { IoClose } from 'react-icons/io5';\nimport userImage from '../../../assets/profile.png'\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose onClick={() => props.setProfileWindowStatus(false)} className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\" />\n              </div>\n            </div>\n            <div className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\" style={{width: '200px', height: '200px'}}>\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">{props.auth.user.fname} {props.auth.user.lname}</span>\n            <span className=\"text-gray-400 text-xs\">ID: {props.auth.user.n_id}</span>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>23</span>\n          </div>\n          <div className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\" style={{paddingBottom: '550px', paddingTop: '10px'}}>\n            {props.proctoring.events.length === 0 ? <div className=\"text-white font-blod\">No events found!</div> : props.proctoring.events.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-row justify-between items-center text-red-300 my-1\">\n                <span>{i + 1}</span>\n                <span>{item.description}</span>\n                <span>{item.time}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring; } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {\n\n})(_Profile);\n\nexport default Profile;","import React from 'react'\nimport { MdCheckCircle, MdClose } from 'react-icons/md'\nimport { Auth } from '../../../actions/auth'\nimport { candidateExamStoreInterface } from '../../../actions/candidate_exam'\nimport { questionTypesStoreInterface } from '../../../actions/questionTypes'\nimport { System } from '../../../actions/system'\nimport Loading from '../../../components/Loading/Loading'\nimport { course } from '../../../interfaces/course'\nimport { QuestionInterface } from '../../../interfaces/question'\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from '../utils/utils'\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamPendingQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    )\n  }\n  return (\n    <div className={`pt-4 border-t border-gray-300 ${PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"}`}>\n      {props.candidateExam.candidate_exam && AnsweredQuest.length !== props.candidateExam.candidate_exam.questions.length && PendingQuest.length !== 0 ? \n      <div>\n        <div className=\"grid md:grid-cols-2 h-full\">\n          <div className=\"md:col-span-2 h-full\">\n            <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n              {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n              <div className=\"flex flex-col\">\n                <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">Submit incomplete questions</div>\n                <div className=\"text-gray-700 text-sm text-left pb-2\">Please, make sure to complete the following remaining questions which are not yet answered. Please, if you proceed anyway, for these questions, you will not be marked!</div>\n              </div>\n              <div className=\"mr-4\">\n              <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"md:col-span-2\">\n            <div className=\"\">\n              <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                <div className=\"text-center mb-5 text-gray-600 font-bold\">Pick a question number you want to answer directly</div>\n                <div className=\"flex justify-center items-center text-center\">\n                  <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                    {props.candidateExam.candidate_exam.questions.map((item, i) => (\n                      PendingQuest.find(itm => itm.id === item.id)?.id !== undefined &&\n                        <div onClick={() => { \n                          props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                            props.candidateExam.candidate_exam.id,\n                            item.id\n                          );\n                          props.setSubmitModal(false);\n                        }} key={i + 1} className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\">{i + 1}</div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                <div onClick={() => props.setSubmitModal(false)} className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\">Back to edit</div>\n                <div onClick={() => props.submitExam()} className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\">Submit anyway</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      : \n      <div className=\"px-4 pb-2\">\n        <div className=\"flex flex-row items-center justify-between mb-4\">\n          <div className=\"text-blue-700 font-bold\">Hey <b><u>{props.auth.user.fname}</u></b>, All questions have been answered, are you sure do you want to submit the final answers?</div>\n          <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n        </div>\n        <div className=\"flex flex-row items-center justify-between\">\n          <div onClick={() => props.setSubmitModal(false)} className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\">\n            <span className=\"\">Back to edit</span>\n          </div>\n          <div onClick={() => { props.submitExam() }} className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\">\n            <MdCheckCircle className=\"text-3xl\" />\n            <span className=\"\">Submit exam</span>\n          </div>\n        </div>\n        \n        <div className=\"my-2\">\n          <div className=\"font-extrabold text-xl text-gray-700 my-2 mt-4\">Verify your answers</div>\n          <div className=\"flex flex-col gap-3 overflow-y-auto\" style={{maxHeight: '100%'}}>\n            {props.candidateExam.candidate_exam === null ? <Loading /> :\n            AnsweredQuest.length > 0 && AnsweredQuest.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{i + 1}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question[0].description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        Done\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-span-2 float-right flex items-center justify-end\">\n                    <div onClick={() => { \n                      props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                        props.candidateExam.candidate_exam.id,\n                        item.id\n                      );\n                      props.setSubmitModal(false);\n                    }} className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\">Edit</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nexport default QuestionsReview\n","import React, { Fragment } from 'react'\nimport { useState } from 'react'\nimport { IoDocumentTextOutline } from 'react-icons/io5'\nimport { MdCheckCircle, } from 'react-icons/md'\nimport Modal, { Themes, ModalSize, ModalMarginTop } from '../../../components/Modal/Modal'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from '../utils/utils'\nimport { course } from '../../../interfaces'\nimport QuestionsReview from './QuestionsReview'\n\ninterface TestTitleInterface { \n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n  \n  const TotalAnswered: number = props.candidateExam.candidate_exam ? NumberOfAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam ? (TotalAnswered*100)/props.candidateExam.candidate_exam.questions.length : 0;\n  return (\n    <Fragment>\n    <div className=\"bg-gray-800\">\n      <div className=\"grid grid-cols-6\">\n        <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n          <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n            <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n            <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n              <span className=\"font-bold text-lg truncate -mb-1\">{props.selectedExam?.course_name}</span>\n              <span className=\"text-gray-300 text-xs truncate\">Code: {props.selectedExam?.course_code}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-4\" style={{alignSelf: \"center\"}}>\n          <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n            <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n              <div className=\"text-gray-200 text-sm w-full hidden lg:block\">Completed {TotalAnswered} of {props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.questions.length}</div>\n              <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                <div className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\" style={{width: `${answeredPercentage}%`}}></div>\n              </div>\n              <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                <div className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\" style={{width: `${answeredPercentage}%`}}>\n                  <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">{answeredPercentage}%</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-4 hidden lg:block h-full\">\n              <div className=\"flex flex-row justify-center items-center h-full\">\n                <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                  <div>Start time: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam?.start_time}</span></div>\n                  <div>Duration: <span className=\"font-bold text-gray-200\">\n                    {props.candidateExam.candidate_exam && \n                    props.candidateExam.candidate_exam.duration/60 > 1 ?\n                    props.candidateExam.candidate_exam.duration/60 + \" hours\" : \n                    props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.duration/60 + \" hour\"}\n                    {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.duration % 60 > 0 && \", \" + props.candidateExam.candidate_exam.duration % 60 + \" mins\" }\n                  </span></div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-5 bg-gray-800\">\n              <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                  <span>Counting down</span>\n                  <span className=\"text-lg lg:text-xl font-bold\">00:59:59</span>\n                </div>\n                {props.submitQuestionAnswer === true ? \n                <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 animate-pulse\">Saving...</div> : \n                <button onClick={() => {props.SubmitAnswer(); setSubmitModal(true)}} type=\"button\" className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\">\n                  <MdCheckCircle className=\"text-white text-xl\" />\n                  <span>Submit</span>\n                </button>}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {submitModal === true && \n    <Modal\n      title={\"\"}\n      backDrop={true}\n      theme={props.candidateExam.question_answers.length === 0 ? Themes.default : Themes.default}\n      close={() => setSubmitModal(false)}\n      backDropClose={true}\n      widthSizeClass={ModalSize.maxWidth}\n      displayClose={false}\n      padding={{title: false,}}\n      marginTop={ModalMarginTop.small} >\n        <QuestionsReview \n        auth={props.auth} \n        candidateExam={props.candidateExam} \n        system={props.system} \n        setSelectedExamQuestion={props.setSelectedExamQuestion} \n        submitQuestionAnswer={props.submitQuestionAnswer} \n        questionTypes={props.questionTypes} \n        loadQuestionTypes={props.loadQuestionTypes} \n        submitExam={props.submitExam} \n        selectedExam={props.selectedExam}\n        setSubmitModal={setSubmitModal} />\n    </Modal>}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth; candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { question_answer } from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport { CandidateExam, CandidateExamQuestionAnswer, ExamInterface, ExamResultsDetails, examStatus, userExamDetails } from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\ninterface DoExamProps {\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (exam_id: string, CheckUserExam: (candidateExam: CandidateExam) => void, callback: (loading: boolean) => void) => void;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (userExamDetails: userExamDetails, callback: (loading: boolean) => void, setLoadExamResultMessage: (msg: string, status: boolean) => void, BackToExamination: (exam: ExamResultsDetails) => void) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (answer: CandidateExamQuestionAnswer, callback: (loading: boolean) => void, actionStatus: (msg: string, status: boolean) => void) => void;\n  GetUserExamDetails: (request: RequestUserExamDetailsInterface, callback: (loading: boolean) => void) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  }\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n  \n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check\n      }\n    }\n    return null;\n  }\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (this.props.positions.selected_position !== null && this.props.candidateExam.selected_exam_details !== null) {\n      this.props.RequestUserExamDetails({\n        user: this.props.auth.user.user_id,\n        position: this.props.positions.selected_position.position_id,\n        exam: exam,\n      }, this.setLoading, this.setLoadExamResultMessage, this.props.BackToExamination)\n    }\n  }\n\n  componentDidMount = () => {\n    if (this.props.course.courses === null || this.props.course.courses.length === 0) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.questionTypes.questionTypes === null || this.props.questionTypes.questionTypes.length === 0) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  }\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      this.props.GetUserExamDetails({\n        period: this.props.candidateExam.candidate_exam.period,\n        course: this.props.candidateExam.candidate_exam.course,\n        user: this.props.auth.user.user_id\n      }, this.setLoading);\n      let test = this.props.candidateExam.user_exams_done.find(itm => itm.id === this.props.candidateExam.candidate_exam?.id);\n      if (test === undefined) {\n        this.props.CleanCandidateExam(this.props.candidateExam.candidate_exam.id);\n      }\n    }\n  }\n\n  SubmitAnswer = () => {\n    if (this.props.candidateExam.candidate_exam !== null && this.props.candidateExam.question_answers.length > 0) {\n      for (let answer of this.props.candidateExam.question_answers) {\n        if (answer.status === false) { //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer({\n            exam: this.props.candidateExam.candidate_exam.id,\n            question: answer.question_id,\n            language: this.props.candidateExam.selected_language,\n            userAnswer: answer.answer\n          }, this.setSubmitQuestionAnswer, this.setLoadExamResultNoMessage)\n        }\n      }\n    }\n  }\n\n  submitExam = async () => {\n    if (this.props.candidateExam.candidate_exam !== null) {\n      let exam_id = this.props.candidateExam.candidate_exam.id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(`${API.DO_EXAM}/user/submit/${exam_id}`);\n        if (res) {\n          console.log(\"Put: \", res);\n          this.props.CleanCandidateExam(exam_id);\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success\n          });\n        }\n      } catch (error: any) {\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  }\n\n  startExam = () => {\n    this.setState({ display_exam: true });\n  }\n  pauseExam = () => {\n    this.setState({ display_exam: false });\n  }\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/applications\" />\n    }\n\n    if (this.state.loading === true || this.props.candidateExam.exam_room_details === null) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">Loading, Please wait...</div>\n            <Loading />\n          </div>\n        </div>\n      )\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">Submitting your exam, Please wait...</div>\n            <Loading />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50\">\n        <Fragment>\n        {this.props.candidateExam.user_exam_details === null ?\n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n              <div className=\"text-gray-600 text-lg px-4 mb-4\">Loading questions, Please wait...</div>\n              <Loading />\n            </div>\n          </div> :\n        <ProctoringCandidateOnline\n          startExam={() => {\n            this.startExam()\n          }}\n          restartExam={() => {\n            this.props.candidateExam.selected_exam_id !== null && this.props.loadCandidateExam(this.props.candidateExam.selected_exam_id, this.checkUserExam, this.setLoading)\n          }}\n          stopExam={() => {\n            console.log(\"Pause\");\n            // this.pauseExam()\n          }}\n          room_id={this.props.candidateExam.exam_room_details.room_id}\n          exam_id={this.props.candidateExam.user_exam_details.ExamId.exam_id}\n          position_id={this.props.candidateExam.exam_room_details.position_id}\n          application_session_id={this.props.candidateExam.exam_room_details.period_id}\n          removeClient={() => this.submitExam()}\n        >\n          {this.state.display_exam === false ? \n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n              <MdInfoOutline className=\"text-9xl text-blue-600\" />\n              <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">Please wait for the supervisor</div>\n              <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">The supervisor will allow you to start your exam, please wait or contact him/her when forgot to let you start exam!</div>\n              <Loading />\n            </div>\n          </div> :\n          this.props.candidateExam.candidate_exam === null || this.props.candidateExam.user_exam_details === null ? \n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-2 px-4 py-4 w-full h-full\">\n              <div className=\"text-gray-500 text-lg px-4 mb-4\">Waiting for loading exam...</div>\n              <Loading />\n            </div>\n          </div> :\n          <div>\n            {this.state.completedTest === true &&\n            this.props.doExam.exam_answers?.exam_questions_answers\n              ?.questionAnswers !== null ? (\n              <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                <DoExamResults\n                  page=\"doExam\"\n                  answeredQuestions={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers\n                  }\n                  testAnswers={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers.length === undefined\n                      ? 0\n                      : this.props.doExam.exam_answers?.exam_questions_answers\n                          ?.questionAnswers.length\n                  }\n                />\n              </div>\n            ) : (\n              <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                <div className=\"grid md:grid-cols-12 h-full\">\n                  {this.state.windowStatus.profile === true && (\n                    <div\n                      className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                    >\n                      <Profile\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                      />\n                    </div>\n                  )}\n                  <div\n                    className={`col-span-${\n                      this.state.windowStatus.profile === false ? \"12\" : \"10\"\n                    } bg-gray-800 shadow-lg h-full`}\n                  >\n                    <div className=\"flex flex-row h-screen bg-gray-800\">\n                      <div className=\"h-full\">\n                        {/* Questions list */}\n                        <div className={`h-full`}>\n                          <QuestionsList\n                            windowStatus={this.state.windowStatus}\n                            setProfileWindowStatus={this.setProfileWindowStatus}\n                            setQuestionsListWindowStatus={\n                              this.setQuestionsListWindowStatus\n                            }\n                            questionTypes={this.props.questionTypes}\n                            loadQuestionTypes={this.props.loadQuestionTypes}\n                            SubmitAnswer={this.SubmitAnswer}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"w-full h-full\">\n                        {/* Do exam test title */}\n                        <DoExamTitle\n                          setCompletedTest={this.setCompletedTest}\n                          windowStatus={this.state.windowStatus}\n                          setProfileWindowStatus={this.setProfileWindowStatus}\n                          setQuestionsListWindowStatus={\n                            this.setQuestionsListWindowStatus\n                          }\n                          questionTypes={this.props.questionTypes}\n                          loadQuestionTypes={this.props.loadQuestionTypes}\n                          submitQuestionAnswer={this.state.submitQuestionAnswer}\n                          submitExam={this.submitExam}\n                          selectedExam={this.props.course.selected_course}\n                          SubmitAnswer={this.SubmitAnswer}\n                        />\n                        {/* Question details */}\n                        <QuestionDetails\n                          questionAnswers={\n                            this.props.doExam.exam_answers?.exam_questions_answers\n                              ?.questionAnswers\n                          }\n                          answerQuestionFn={this.answerQuestionFn}\n                          selectedQuestion={this.state.selectedQuestion}\n                          setSelectedQuestion={this.setSelectedQuestion}\n                          preview={false}\n                          submitQuestionAnswer={this.state.submitQuestionAnswer}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Footer\n                  windowStatus={this.state.windowStatus}\n                  setProfileWindowStatus={this.setProfileWindowStatus}\n                  setQuestionsListWindowStatus={this.setQuestionsListWindowStatus}\n                  questionTypes={this.props.questionTypes}\n                  loadQuestionTypes={this.props.loadQuestionTypes}\n                  SubmitAnswer={this.SubmitAnswer}\n                  submitQuestionAnswer={this.state.submitQuestionAnswer}\n                />\n              </div>\n            )}\n          </div>}\n        </ProctoringCandidateOnline>}\n        {this.props.candidateExam.candidate_exam === null &&\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.large}\n              displayClose={false}\n              padding={{title: false,}} >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? <Loading /> :\n                  <div>\n                    <div className=\"flex flex-row items-center gap-2\">\n                      {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                      <div className=\"my-2 w-full\">\n                        <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                          {this.props.course.selected_course && \n                          <div>\n                            <span>{this.props.course.selected_course.course_code}-</span>\n                            <span>{this.props.course.selected_course.course_name}</span>\n                          </div>}\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">Exam date:</span>\n                          <span className=\"text-blue-600 font-bold\">{DATE(this.examDetails()!.exam_date, \"DD/MM/YYYY\")}</span>\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">Start time:</span>\n                          <span className=\"text-blue-600 font-bold\">{this.examDetails()?.start_time}</span>\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">Exam duration:</span>\n                          {this.examDetails() !== null && <span className=\"text-blue-600 font-bold\">{this.examDetails()!.duration / 60 >= 1 && this.examDetails()!.duration / 60 + \" hrs\"} {this.examDetails()!.duration % 60 > 0 && <span>{this.examDetails()!.duration % 60} mins</span>}</span>}\n                        </div>\n                      </div>\n                    </div>\n                    {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                    <div className=\"flex flex-row justify-center items-center\">\n                      {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                    </div>\n                    <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                      <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                      <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">Examination rules</div>\n                        {this.examDetails() !== null && <div dangerouslySetInnerHTML={{__html: this.examDetails()!.termes}}></div>}\n                      </div>\n                      <span className=\"text-blue-700\">If you are ready, start click to start the exam now, The system will start to count your time!</span>\n                    </div>\n                    <div className=\"flex flex-row items-center justify-between mt-2\">\n                      <button onClick={() => this.props.setSelectedCandidateExam(null)} className=\"btn bg-gray-50 text-gray-600 border\">Go Back</button>\n                      <button onClick={() => this.props.candidateExam.selected_exam_id !== null && this.props.loadCandidateExam(this.props.candidateExam.selected_exam_id, this.checkUserExam, this.setLoading)} className=\"btn bg-blue-600 text-white\">I accept, Start exam</button>\n                    </div>\n                  </div>}\n                </div>\n            </Modal>}\n          </Fragment>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; course: courseStoreInterface; periods: applicationPeriodsStoreInterface; questionTypes: questionTypesStoreInterface; positions: positionsStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, course: course, periods: periods, questionTypes: questionTypes, positions: positions, };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n})(_DoEam);\n"],"sourceRoot":""}