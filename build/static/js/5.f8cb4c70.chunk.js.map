{"version":3,"sources":["containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","components/Courses/Courses.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx"],"names":["CoursesAction","Courses","connect","auth","periods","schoolLevels","system","course","loadApplicationPeriods","setSelectedPeriod","loadSchoolLevels","setSelectedEducationCategory","PushPopupAlert","loadCourses","setSelectedCourse","props","useState","loading","setLoading","addNew","setAddNew","search","setSearch","selectedCourse","setSelectedCourseComp","course_selected","deleteCourseFn","a","undefined","course_id","axios","delete","API","APPLICATION","title","theme","PopupAlertTheme","success","warning","console","log","useEffect","school_levels","length","courses","className","onClick","onChange","e","target","value","type","placeholder","searchData","map","item","i","course_name","description","action","View","Update","Delete","backDrop","Themes","default","close","widthSizeClass","ModalSize","extraLarge","displayClose","backDropClose","padding","body","closeModal","state","deleteSelected","chaptersOnly","medium","_UploadQuestion","status","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","filter","find","itm","period","selected_period","_id","filteredCourses","searched","filtered","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","searchCourseInput","this","education_category_title","school_level_name","education_categories","loadEducationCategories","style","minHeight","maxHeight","overflowY","selected_course_id","course_code","educationCategories","Component","UploadQuestion","questionBank","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","id","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","toMatching","selectedQuestionItem","answers","answer","selectedKey","QuestionAnswer","data","check","wholeQuestion","language","selectedLanguage","key","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","parseInt","marks","setSelectedKey","QuestionLanguages","lang","checkAns","uuidv4","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","validateCalculatedFormula","msg","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","toString","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","toNumerical","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","window","confirm","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","questionAnswers","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","chapters","setAddChapter","addedChapters","name","ChangeLanguage","languagesList","visible","setVisible","test","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","selectedQuestion","question","langItem","testLangQ","l","QuestionLang","res","actionStatus","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","getQuestionType","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","question_id","customNumber","is_deleted","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","addNewChapter","questionLangs","testing","Loading","LoadingType","white","onSubmit","Modal","large","selected_course","AddCourse","courseDetail","EditQuestion","prepareExam","setUploadedQuestions","setCourse_id","setCourse_name","setCourse_code","setDescription","setChapters","setSchool_levels","formError","setFormError","openAdd","chapter","addChapter","submitCourse","preventDefault","element","obj","patch","info","post","errors","message","disabled","SchoolLevelSelect","height","x","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter"],"mappings":"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","file":"static/js/5.f8cb4c70.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period === this.props.periods.selected_period?._id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div\n                  className=\"mt-4\"\n                  style={{\n                    minHeight: \"500px\",\n                    maxHeight: \"70vh\",\n                    overflowY: \"auto\",\n                  }}\n                >\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).length === 0 ? (\n                    <div className=\"text-black rounded-lg bg-gray-200 py-5 text-2xl text-center font-light animate__animated animate__shakeX\">\n                      No result found!\n                    </div>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 border border-yellow-600 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    // let wildCards = [\n    //   {\n    //     id: 1,\n    //     value: \"firstnumber\",\n    //   },\n    //   {\n    //     id: 2,\n    //     value: \"secondnumber\",\n    //   },\n    // ];\n    // let defaultNumberOfTests = [\n    //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    // ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCircle, BsSquare } from \"react-icons/bs\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle } from \"react-icons/bs\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle } from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n"],"sourceRoot":""}