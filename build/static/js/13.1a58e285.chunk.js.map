{"version":3,"sources":["assets/profile.png","components/InformationModal/InformationModal.tsx","containers/ProctoringCandidateOnline/ProctoringCandidateOnline.tsx","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","containers/DoExam/DoExam.tsx"],"names":["InformationModal","title","description","close","onClick","className","joined_room","_ProctoringCandidateOnline","props","componentWillUnmount","socket","off","ExamEvents","START_EXAM_CLIENT","STOP_EXAM_CLIENT","CAND_CONTINUE_EXAM_CLIENT","CAND_RESTART_EXAM_CLIENT","CAND_WARNING_EXAM_CLIENT","CAND_STOP_EXAM_CLIENT","examStart","state","setState","request_fullScreen","exit_fullScreen","FC_MeStartStopExam","startExam","stopExam","closeInfoModal","inform_modal","active","requestFullScreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullScreen","exitFullscreen","eventBrodcaster","type","proctoring","exam","start_exam","event","eventDefiner","user_id","auth","user","done_by","room_id","room","event_type","FC_CandidateExamEvent","FC_BlockExam","emit","CAND_EXAM_EVENT_SERVER","warning","this","email","fname","lname","FC_AddMyDataToProctoring","muted","stopped","peer","peer_id","ref","Events","JOIN_ROOM","users_list","on","prevState","msg","me","restartExam","addEventListener","preventDefault","window","lastEvent","events_list","events","length","children","React","Component","ProctoringCandidateOnline","connect","Footer","doExam","candidateExam","system","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","setSelectedExamQuestion","findIndex","question_id","candidate_exam","x","questions","id","selectedIndexPrevious","selected_question","selectedIndexNext","ConfirmSubmitAnswer","exam_id","undefined","find","item","questionAnswered","question_answers","findQuestionType","questionTypes","SubmitAnswer","console","log","setProfileWindowStatus","windowStatus","profile","style","position","top","right","questionsList","selected_exam_id","height","Profile","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","width","src","userImage","alt","n_id","paddingBottom","paddingTop","map","i","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","submitQuestionAnswer","Loading","setSubmitModal","itm","submitExam","maxHeight","question","DoExamTitle","useState","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","selectedExam","course_name","course_code","alignSelf","start_time","duration","Modal","backDrop","theme","Themes","default","backDropClose","widthSizeClass","ModalSize","maxWidth","displayClose","padding","marginTop","ModalMarginTop","small","loadQuestionTypes","DoExamResults","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","answer","status","page","_DoEam","setLoading","loading","setSubmitQuestionAnswer","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","answerQuestionFn","setExamQuestionAnswer","setCompletedTest","completedTest","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","examDetails","periods","selected_period","check","selected_exam_details","checkUserExam","positions","selected_position","RequestUserExamDetails","position_id","setLoadExamResultMessage","componentDidMount","course","courses","loadCourses","exam_questions_answers","testAnswers","setLoadExamResultNoMessage","PushPopupAlert","PopupAlertTheme","danger","success","GetUserExamDetails","period","user_exams_done","CleanCandidateExam","BackToExamination","SubmitExamQuestionAnswer","language","selected_language","userAnswer","a","submitWholeExam","axios","put","API","DO_EXAM","res","errorToText","examStatus","loadUserExamErr","user_exam_details","QuestionsList","selected_course","QuestionDetails","preview","setSelectedCandidateExam","large","DATE","exam_date","termes","loadCandidateExam","DoExam","ChangeExamStatus","InitializeExamDetails","setSelectedPeriod"],"mappings":"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","file":"static/js/13.1a58e285.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React, { FC, ReactElement } from \"react\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\ntype InformationModalProps = {\n  title: string;\n  description: string;\n  close: Function;\n};\n\nconst InformationModal: FC<InformationModalProps> = ({\n  title,\n  description,\n  close,\n}): ReactElement => {\n  // return (\n  //   <div className=\"fixed top-5 w-3/4 right-0 left-0 mx-auto bg-yellow-300 rounded\">\n  //     <div className=\"bg-yellow-200 p-3 rounded-md\">\n  //       <h1 className=\"text-2xl font-bold text-yellow-900\">{title}</h1>\n  //       <p className=\"text-sm mt-1\">{description}</p>\n  //     </div>\n\n  //     <div className=\"p-2 text-right\">\n  //       <button\n  //         onClick={() => close()}\n  //         className=\"py-1 px-3 rounded-md bg-yellow-500 btn-sm hover:bg-red-600 hover:text-white\"\n  //       >\n  //         Close\n  //       </button>\n  //     </div>\n  //   </div>\n  // );\n\n  return (\n    <div\n      onClick={() => close()}\n      className=\"fixed top-3 cursor-pointer bg-opacity-70 bg-yellow-100 hover:bg-opacity-90 w-lg right-0 left-0 mt-6 rounded-md mx-auto  py-5 px-3 max-w-sm animate__bounceIn\"\n    >\n      <div className=\"w-full flex\">\n        <div className=\"\">\n          <MdInfoOutline className=\"text-6xl inline text-yellow-800 opacity-50\" />\n        </div>\n        <div className=\"flex-1 pl-2\">\n          <h1 className=\"text-xl text-yellow-800 font-bold\">{title}</h1>\n          <p className=\"mt-0 text-gray-700\">{description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default InformationModal;\n","import React, { Fragment, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  Events,\n  EventInterface,\n  ExamEvents,\n  CandidateProctoringInterface,\n} from \"../../interfaces\";\nimport { eventDefiner, eventDefinerInterface } from \"../../actions/proctoring\";\nimport InformationModal from \"../../components/InformationModal/InformationModal\";\n\nimport {\n  Auth,\n  Socket,\n  Proctoring,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n} from \"../../actions\";\nimport { MdFullscreen, MdFullscreenExit, MdReport } from \"react-icons/md\";\n\n// props for the component\ninterface ProctoringCandidateOnlineProps {\n  socket: Socket;\n  eventDefiner: Function;\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_AddMyDataToProctoring: Function;\n  FC_MeStartStopExam: Function;\n  FC_CandidateExamEvent: Function;\n  children: ReactNode;\n  startExam: Function;\n  stopExam: Function;\n  restartExam: Function;\n  FC_BlockExam: Function;\n}\n\ninterface AppState {\n  request_fullScreen: boolean;\n  exit_fullScreen: boolean;\n  warning: any;\n  inform_modal: {\n    title: string;\n    description: string;\n    active: boolean;\n  };\n}\n\nlet joined_room = false;\n\nclass _ProctoringCandidateOnline extends React.Component<\n  ProctoringCandidateOnlineProps,\n  AppState\n> {\n  constructor(props: ProctoringCandidateOnlineProps) {\n    super(props);\n\n    this.state = {\n      request_fullScreen: this.props.proctoring.exam.start_exam,\n      exit_fullScreen: false,\n      warning: null,\n      inform_modal: {\n        title: \"\",\n        description: \"\",\n        active: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { email, fname, lname, user_id } = this.props.auth.user;\n    // add the user to the list\n    if (joined_room === false) {\n      this.props.FC_AddMyDataToProctoring({\n        active: true,\n        email: email,\n        fname,\n        lname,\n        user_id,\n        muted: false,\n        stopped: false,\n        peer: \"\",\n        peer_id: \"\",\n        ref: \"\",\n      } as CandidateProctoringInterface);\n      this.props.socket.socket.emit(\n        Events.JOIN_ROOM,\n        {\n          room_id: this.props.proctoring.room.room_id,\n          user_id: this.props.auth.user.user_id,\n          peer_id: \"\",\n        },\n        (users_list: any) => {}\n      );\n      joined_room = true;\n    }\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.START_EXAM_CLIENT, (event: any) =>\n      this.examStart(true)\n    );\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.STOP_EXAM_CLIENT, (event: any) =>\n      this.examStart(false)\n    );\n\n    // * WARNING CANDIDATE\n    this.props.socket.socket.on(\n      ExamEvents.CAND_WARNING_EXAM_CLIENT,\n      (event: any) => {\n        this.setState((prevState: AppState) => ({\n          warning: true,\n          inform_modal: {\n            title: \"WARNING\",\n            description: event.msg,\n            active: true,\n          },\n        }));\n        // Add event to the reducer\n        this.props.FC_CandidateExamEvent(\n          eventDefiner({\n            description: event.msg,\n            event_type: \"WARNING\",\n            done_by: \"Invigirator\",\n            room_id: this.props.proctoring.room.room_id,\n            user_id: event.user_id,\n          } as eventDefinerInterface)\n        );\n      }\n    );\n\n    // * STOP EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_STOP_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"STOP EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(true);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"STOP EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_CONTINUE_EXAM_CLIENT,\n      (event: any) => {\n        if (\n          event.user_id === this.props.auth.user.user_id &&\n          this.props.proctoring.me.stopped === true\n        ) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"CONTINUE EXAM\",\n              description: \"Invigirator allowed you to continue the exam\",\n              active: true,\n            },\n          }));\n\n          this.props.FC_BlockExam(false);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: \"Invigirator allowed you to continue the exam\",\n              event_type: \"CONTINUE EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_RESTART_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"RESTART EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(false);\n\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"RESTART EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n          // * Restart Function\n          this.props.restartExam();\n        }\n      }\n    );\n\n    //** EVENTS BROWSER */\n    // document.addEventListener(\"mouseenter\", (e) => {\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   );\n    // });\n\n    // document.addEventListener(\"mouseleave\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    document.addEventListener(\"copy\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\n        \"COPY TEXT\",\n        \"The candidate is try to copy the text\"\n      );\n    });\n\n    document.addEventListener(\"paste\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\"TEXT PASTE\", \"pasted a text\");\n    });\n\n    document.addEventListener(\"visibilitychange\", (event) =>\n      this.eventBrodcaster(\"ZOOMING OUT\", \"Changing the visibility\")\n    );\n\n    // ! ERROR: causing to stop the candidate once they click on a modal into the browser\n    // document.addEventListener(\"focusout\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    window.addEventListener(\"blur\", () =>\n      this.eventBrodcaster(\n        \"LEAVING BROWSER\",\n        \"The candidate is try to leave the browser\"\n      )\n    );\n\n    // prevent the right-click\n    document.addEventListener(\"contextmenu\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n    });\n  }\n\n  componentWillUnmount = () => {\n    this.props.socket.socket.off(ExamEvents.START_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.STOP_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_CONTINUE_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_RESTART_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_WARNING_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_STOP_EXAM_CLIENT);\n  };\n\n  // ***************************************************************************\n\n  /**\n   * @description define wheter the exam has started or not\n   * @param state boolean\n   */\n  examStart = (state: boolean) => {\n    if (state === true) {\n      // start exam\n      this.setState({\n        request_fullScreen: true,\n        exit_fullScreen: false,\n      });\n\n      this.props.FC_MeStartStopExam(true);\n      this.props.startExam();\n    } else {\n      // stop exam mode\n      this.setState({\n        request_fullScreen: false,\n        exit_fullScreen: true,\n      });\n\n      this.props.FC_MeStartStopExam(false);\n      this.props.stopExam();\n    }\n  };\n\n  closeInfoModal = () =>\n    this.setState({\n      inform_modal: {\n        active: false,\n        description: \"\",\n        title: \"\",\n      },\n    });\n\n  /**\n   * @description Request the fullscreen\n   */\n  requestFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    }\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n  };\n\n  /**\n   * @description Exist the fullscreen\n   */\n  exitFullScreen = () => {\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n    if (document.fullscreenElement) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n\n  /**\n   * @description get all the events and send them to the supervisor\n   * @param event\n   */\n  eventBrodcaster = (type: string, description: string) => {\n    if (this.props.proctoring.exam.start_exam === true) {\n      let event: EventInterface = eventDefiner({\n        description: description,\n        user_id: this.props.auth.user.user_id,\n        done_by: \"System\",\n        room_id: this.props.proctoring.room.room_id,\n        event_type: type,\n      } as eventDefinerInterface);\n\n      // Add event to the reducer\n      this.props.FC_CandidateExamEvent(event);\n      this.props.stopExam();\n\n      this.props.FC_BlockExam(true);\n\n      // send the event on the server\n      this.props.socket.socket.emit(ExamEvents.CAND_EXAM_EVENT_SERVER, event);\n    }\n  };\n\n  render() {\n    //* candidate stopped screen\n    if (\n      this.props.proctoring.me.stopped === true &&\n      this.props.proctoring.exam.start_exam === true\n    ) {\n      let lastEvent: EventInterface | null = null;\n      let events_list = this.props.proctoring.events;\n      if (events_list.length >= 1) {\n        lastEvent = events_list[events_list.length - 1];\n      }\n      return (\n        <div className=\"p-5 mx-auto mt-6 text-center bg-red-100 max-w-lg max-w-2/3 w-full rounded-md animate__bounceIn\">\n          <MdReport className=\"text-9xl text-red-900 inline\" />\n          <h1 className=\"text-2xl text-red-900 font-bold\">\n            You have beed stopped <br /> to continue the exam\n          </h1>\n\n          {lastEvent !== null && (\n            <Fragment>\n              <div className=\"mt-2\">\n                <h5 className=\"text-lg  text-red-800 inline-block\">\n                  You violated the rule of:\n                </h5>\n                <h2 className=\"text-md text-white font-bold bg-red-600 border-4 py-0.5 px-3 rounded-full inline-block ml-2 mx-auto\">\n                  {lastEvent?.event_type}\n                </h2>\n              </div>\n\n              <h3 className=\"text-md text-red-800 mt-3 font-bold\">\n                {lastEvent?.description}\n              </h3>\n            </Fragment>\n          )}\n\n          <div className=\"mt-5 border-t border-red-900 border-opacity-50 text-sm text-red-900 text-opacity-80 pt-3 mx-5\">\n            <b>The exam will be saved from where you left off,</b> <br />\n            You can explain the situation to the supervisor <br /> If your\n            reasons are clear you will be gived another chance\n          </div>\n        </div>\n      );\n    }\n\n    //* Request for the full screen\n    if (this.state.request_fullScreen === true) {\n      return (\n        <div className=\"bg-green-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreenExit className=\"text-9xl inline text-green-600 opacity-50\" />\n            <h1 className=\"text-3xl text-green-500 font-bold\">\n              Go Full-Screen mode{\" \"}\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              You need to go in <b>Full-screen mode</b>, in order to get a good\n              experience (Important)\n            </p>\n            <button\n              className=\" bg-green-600 hover:bg-green-800 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.requestFullScreen()}\n            >\n              Yes, go full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    //* Exit for the full screen\n    if (this.state.exit_fullScreen === true) {\n      return (\n        <div className=\"bg-blue-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreen className=\"text-9xl inline text-blue-600 opacity-50\" />\n            <h1 className=\"text-3xl text-blue-600 font-bold\">\n              Quit Full-Screen mode\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              Exam is completed, you can quit the <b>Fullscreen mode</b>\n              (optional)\n            </p>\n            <button\n              className=\" bg-blue-600 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.exitFullScreen()}\n            >\n              Exit full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Fragment>\n        {this.state.inform_modal.active === true && (\n          <InformationModal\n            title={this.state.inform_modal.title}\n            description={this.state.inform_modal.description}\n            close={this.closeInfoModal}\n          />\n        )}\n\n        {this.props.children}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; proctoring: Proctoring; auth: Auth } => {\n  return { socket: socket, auth, proctoring };\n};\n\nexport const ProctoringCandidateOnline = connect(mapStateToProps, {\n  eventDefiner,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n})(_ProctoringCandidateOnline);\n","import React from 'react'\nimport { BiChat } from 'react-icons/bi'\nimport { IoNotifications } from 'react-icons/io5'\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from '../utils/utils';\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface; \n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (let x: number = 0; x < props.candidateExam.candidate_exam.questions.length; x++) {\n        if (props.candidateExam.candidate_exam.questions[x].id === question_id) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  }\n\n  let selectedIndexPrevious: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 ? \n  findIndex(props.candidateExam.selected_question) : props.candidateExam.candidate_exam.questions.length : -1;\n\n  let selectedIndexNext: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 && findIndex(props.candidateExam.selected_question) < props.candidateExam.candidate_exam.questions.length-1 ? \n  findIndex(props.candidateExam.selected_question) : findIndex(props.candidateExam.selected_question) === 0 ? 0 : -1 : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(item => questionAnswered(props.candidateExam.question_answers, item.id, findQuestionType(item.type, props.questionTypes.questionTypes)!) === true);\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  }\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {console.log(\"Selected: \", selectedIndexNext)}\n      <div className=\"flex flex-row items-center\">\n        <div onClick={() => props.setProfileWindowStatus(!props.windowStatus.profile)} \n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}>\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div className=\"animate-bounce bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\" style={{position: 'relative', top: '-10px', right: '-12px'}}>02</div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && \n          <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">New events <br/>are available</div>}\n        </div>\n\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexPrevious-1].id)}\n        className=\"btn btn-blue flex justify-center items-center\" style={{height: 'fit-content'}}><MdChevronLeft className=\"text-xl\" /> <span className=\"hidden md:block\">Previous</span></button>\n\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">Question {props.candidateExam.selected_question && findIndex(props.candidateExam.selected_question)+1}</span>\n          <span className=\"text-xs\">Auto save is activated</span>\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div>\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexNext+1].id)}\n        className=\"btn btn-blue flex items-center\"><span className=\"hidden md:block\">Next</span> <MdChevronRight className=\"text-xl\" /></button>\n      </div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth;  candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;","import React from 'react'\nimport { IoClose } from 'react-icons/io5';\nimport userImage from '../../../assets/profile.png'\n\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  const Events = [1,2,3,4,5,6,7,8,9,0,3,231,45,534,6,3,534,6,3,12,5,6,7,8,9,0,3,231,45,534,6,3,12,5];\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose onClick={() => props.setProfileWindowStatus(false)} className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\" />\n              </div>\n            </div>\n            <div className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\" style={{width: '200px', height: '200px'}}>\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">{props.auth.user.fname} {props.auth.user.lname}</span>\n            <span className=\"text-gray-400 text-xs\">ID: {props.auth.user.n_id}</span>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>23</span>\n          </div>\n          <div className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\" style={{paddingBottom: '550px', paddingTop: '10px'}}>\n            {Events.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-row justify-between items-center text-red-300 my-1\">\n                <span>{i + 1}</span>\n                <span>Copied from external</span>\n                <span>2min</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n}: StoreState): { todos: Todo[]; auth: Auth; } => {\n  return { todos: todos, auth: auth, };\n};\n\nconst Profile = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n})(_Profile);\n\nexport default Profile;","import React from 'react'\nimport { MdCheckCircle, MdClose } from 'react-icons/md'\nimport { Auth } from '../../../actions/auth'\nimport { candidateExamStoreInterface } from '../../../actions/candidate_exam'\nimport { questionTypesStoreInterface } from '../../../actions/questionTypes'\nimport { System } from '../../../actions/system'\nimport Loading from '../../../components/Loading/Loading'\nimport { course } from '../../../interfaces/course'\nimport { QuestionInterface } from '../../../interfaces/question'\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from '../utils/utils'\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamPendingQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    )\n  }\n  return (\n    <div className={`pt-4 border-t border-gray-300 ${PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"}`}>\n      {props.candidateExam.candidate_exam && AnsweredQuest.length !== props.candidateExam.candidate_exam.questions.length && PendingQuest.length !== 0 ? \n      <div>\n        <div className=\"grid md:grid-cols-2 h-full\">\n          <div className=\"md:col-span-2 h-full\">\n            <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n              {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n              <div className=\"flex flex-col\">\n                <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">Submit incomplete questions</div>\n                <div className=\"text-gray-700 text-sm text-left pb-2\">Please, make sure to complete the following remaining questions which are not yet answered. Please, if you proceed anyway, for these questions, you will not be marked!</div>\n              </div>\n              <div className=\"mr-4\">\n              <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"md:col-span-2\">\n            <div className=\"\">\n              <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                <div className=\"text-center mb-5 text-gray-600 font-bold\">Pick a question number you want to answer directly</div>\n                <div className=\"flex justify-center items-center text-center\">\n                  <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                    {props.candidateExam.candidate_exam.questions.map((item, i) => (\n                      PendingQuest.find(itm => itm.id === item.id)?.id !== undefined &&\n                        <div onClick={() => { \n                          props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                            props.candidateExam.candidate_exam.id,\n                            item.id\n                          );\n                          props.setSubmitModal(false);\n                        }} key={i + 1} className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\">{i + 1}</div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                <div onClick={() => props.setSubmitModal(false)} className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\">Back to edit</div>\n                <div onClick={() => props.submitExam()} className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\">Submit anyway</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      : \n      <div className=\"px-4 pb-2\">\n        <div className=\"flex flex-row items-center justify-between mb-4\">\n          <div className=\"text-blue-700 font-bold\">Hey <b><u>{props.auth.user.fname}</u></b>, All questions have been answered, are you sure do you want to submit the final answers?</div>\n          <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n        </div>\n        <div className=\"flex flex-row items-center justify-between\">\n          <div onClick={() => props.setSubmitModal(false)} className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\">\n            <span className=\"\">Back to edit</span>\n          </div>\n          <div onClick={() => { props.submitExam() }} className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\">\n            <MdCheckCircle className=\"text-3xl\" />\n            <span className=\"\">Submit exam</span>\n          </div>\n        </div>\n        \n        <div className=\"my-2\">\n          <div className=\"font-extrabold text-xl text-gray-700 my-2 mt-4\">Verify your answers</div>\n          <div className=\"flex flex-col gap-3 overflow-y-auto\" style={{maxHeight: '100%'}}>\n            {props.candidateExam.candidate_exam === null ? <Loading /> :\n            AnsweredQuest.length > 0 && AnsweredQuest.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{i + 1}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question[0].description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        Answer here\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-span-2 float-right flex items-center justify-end\">\n                    <div onClick={() => { \n                      props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                        props.candidateExam.candidate_exam.id,\n                        item.id\n                      );\n                      props.setSubmitModal(false);\n                    }} className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\">Edit</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nexport default QuestionsReview\n","import React, { Fragment } from 'react'\nimport { useState } from 'react'\nimport { IoDocumentTextOutline } from 'react-icons/io5'\nimport { MdArrowBack, MdCheckCircle, } from 'react-icons/md'\nimport Modal, { Themes, ModalSize, ModalMarginTop } from '../../../components/Modal/Modal'\nimport { RiErrorWarningFill } from 'react-icons/ri'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question'\nimport Loading from '../../../components/Loading/Loading'\nimport { NumberOfAnsweredQuestions } from '../utils/utils'\nimport { course } from '../../../interfaces'\nimport QuestionsReview from './QuestionsReview'\n\ninterface TestTitleInterface { \n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n  \n  const TotalAnswered: number = props.candidateExam.candidate_exam ? NumberOfAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam ? (TotalAnswered*100)/props.candidateExam.candidate_exam.questions.length : 0;\n  return (\n    <Fragment>\n    <div className=\"bg-gray-800\">\n      <div className=\"grid grid-cols-6\">\n        <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n          <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n            <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n            <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n              <span className=\"font-bold text-lg truncate -mb-1\">{props.selectedExam?.course_name}</span>\n              <span className=\"text-gray-300 text-xs truncate\">Code: {props.selectedExam?.course_code}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-4\" style={{alignSelf: \"center\"}}>\n          <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n            <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n              <div className=\"text-gray-200 text-sm w-full hidden lg:block\">Completed {TotalAnswered} of {props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.questions.length}</div>\n              <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                <div className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\" style={{width: `${answeredPercentage}%`}}></div>\n              </div>\n              <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                <div className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\" style={{width: `${answeredPercentage}%`}}>\n                  <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">{answeredPercentage}%</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-4 hidden lg:block h-full\">\n              <div className=\"flex flex-row justify-center items-center h-full\">\n                <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                  <div>Start time: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam?.start_time}</span></div>\n                  <div>Duration: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.duration > 1 ? props.candidateExam.candidate_exam.duration + \" hours\" : props.candidateExam.candidate_exam?.duration + \" hour\"}</span></div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-5 bg-gray-800\">\n              <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                  <span>Counting down</span>\n                  <span className=\"text-lg lg:text-xl font-bold\">00:59:59</span>\n                </div>\n                {props.submitQuestionAnswer === true ? \n                <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 animate-pulse\">Saving...</div> : \n                <button onClick={() => {props.SubmitAnswer(); setSubmitModal(true)}} type=\"button\" className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\">\n                  <MdCheckCircle className=\"text-white text-xl\" />\n                  <span>Submit</span>\n                </button>}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {submitModal === true && \n    <Modal\n      title={\"\"}\n      backDrop={true}\n      theme={props.candidateExam.question_answers.length === 0 ? Themes.default : Themes.default}\n      close={() => setSubmitModal(false)}\n      backDropClose={true}\n      widthSizeClass={ModalSize.maxWidth}\n      displayClose={false}\n      padding={{title: false,}}\n      marginTop={ModalMarginTop.small} >\n        <QuestionsReview \n        auth={props.auth} \n        candidateExam={props.candidateExam} \n        system={props.system} \n        setSelectedExamQuestion={props.setSelectedExamQuestion} \n        submitQuestionAnswer={props.submitQuestionAnswer} \n        questionTypes={props.questionTypes} \n        loadQuestionTypes={props.loadQuestionTypes} \n        submitExam={props.submitExam} \n        selectedExam={props.selectedExam}\n        setSubmitModal={setSubmitModal} />\n    </Modal>}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth; candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  InitializeExamDetails,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { question_answer } from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport { CandidateExam, CandidateExamQuestionAnswer, ExamInterface, examStatus, userExamDetails } from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\n\ninterface DoExamProps {\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (exam_id: string, CheckUserExam: (candidateExam: CandidateExam) => void, callback: (loading: boolean) => void) => void;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  InitializeExamDetails: (periodId: string, courseId: string, callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (userExamDetails: userExamDetails, callback: (loading: boolean) => void, setLoadExamResultMessage: (msg: string, status: boolean) => void) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (answer: CandidateExamQuestionAnswer, callback: (loading: boolean) => void, actionStatus: (msg: string, status: boolean) => void) => void;\n  GetUserExamDetails: (request: RequestUserExamDetailsInterface, callback: (loading: boolean) => void) => void;\n  BackToExamination: (exam: RequestUserExamDetailsInterface, callback: (loading: boolean) => void) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  }\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n  \n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check\n      }\n    }\n    return null;\n  }\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (this.props.positions.selected_position !== null && this.props.candidateExam.selected_exam_details !== null) {\n      this.props.RequestUserExamDetails({\n        user: this.props.auth.user.user_id,\n        position: this.props.positions.selected_position.position_id,\n        exam: exam,\n      }, this.setLoading, this.setLoadExamResultMessage)\n    }\n  }\n\n  componentDidMount = () => {\n    if (this.props.course.courses === null || this.props.course.courses.length === 0) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.questionTypes.questionTypes === null || this.props.questionTypes.questionTypes.length === 0) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  }\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      this.props.GetUserExamDetails({\n        period: this.props.candidateExam.candidate_exam.period,\n        course: this.props.candidateExam.candidate_exam.course,\n        user: this.props.auth.user.user_id\n      }, this.setLoading);\n      let test = this.props.candidateExam.user_exams_done.find(itm => itm.id === this.props.candidateExam.candidate_exam?.id);\n      if (test === undefined) {\n        this.props.CleanCandidateExam(this.props.candidateExam.candidate_exam.id);\n      } else {\n        this.props.BackToExamination({\n          period: this.props.candidateExam.candidate_exam.period,\n          course: this.props.candidateExam.candidate_exam.course,\n          user: this.props.auth.user.user_id\n        }, this.setLoading);\n      }\n    }\n  }\n\n  SubmitAnswer = () => {\n    if (this.props.candidateExam.candidate_exam !== null && this.props.candidateExam.question_answers.length > 0) {\n      for (let answer of this.props.candidateExam.question_answers) {\n        if (answer.status === false) { //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer({\n            exam: this.props.candidateExam.candidate_exam.id,\n            question: answer.question_id,\n            language: this.props.candidateExam.selected_language,\n            userAnswer: answer.answer\n          }, this.setSubmitQuestionAnswer, this.setLoadExamResultNoMessage)\n        }\n      }\n    }\n  }\n\n  submitExam = async () => {\n    if (this.props.candidateExam.candidate_exam !== null) {\n      let exam_id = this.props.candidateExam.candidate_exam.id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(`${API.DO_EXAM}/user/submit/${exam_id}`);\n        if (res) {\n          console.log(\"Put: \", res);\n          this.props.CleanCandidateExam(exam_id);\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success\n          });\n        }\n      } catch (error: any) {\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  }\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/applications\" />\n    }\n\n    if (this.state.loading === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">Loading, Please wait...</div>\n            <Loading />\n          </div>\n        </div>\n      )\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">Submitting your exam, Please wait...</div>\n            <Loading />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50\">\n      <ProctoringCandidateOnline\n        startExam={() => {\n          // this.props.ChangeExamStatus(this.props.auth.user.user_id, examStatus.Editing)\n        }}\n        restartExam={() => {\n          // this.initializeEmptyList()\n        }}\n        stopExam={() => {\n          // this.props.ChangeExamStatus(this.props.auth.user.user_id, examStatus.Canceled)\n        }}\n      >\n        <Fragment>\n          {this.props.candidateExam.candidate_exam === null || this.props.candidateExam.user_exam_details === null ? \n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-2 px-4 py-4 w-full h-full\">\n              <div className=\"text-gray-500 text-lg px-4 mb-4\">Waiting for loading exam...</div>\n              <Loading />\n            </div>\n          </div> :\n          <div>\n            {this.state.completedTest === true &&\n            this.props.doExam.exam_answers?.exam_questions_answers\n              ?.questionAnswers !== null ? (\n              <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                <DoExamResults\n                  page=\"doExam\"\n                  answeredQuestions={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers\n                  }\n                  testAnswers={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers.length === undefined\n                      ? 0\n                      : this.props.doExam.exam_answers?.exam_questions_answers\n                          ?.questionAnswers.length\n                  }\n                />\n              </div>\n            ) : (\n              <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                <div className=\"grid md:grid-cols-12 h-full\">\n                  {this.state.windowStatus.profile === true && (\n                    <div\n                      className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                    >\n                      <Profile\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                      />\n                    </div>\n                  )}\n                  <div\n                    className={`col-span-${\n                      this.state.windowStatus.profile === false ? \"12\" : \"10\"\n                    } bg-gray-800 shadow-lg h-full`}\n                  >\n                    <div className=\"flex flex-row h-screen bg-gray-800\">\n                      <div className=\"h-full\">\n                        {/* Questions list */}\n                        <div className={`h-full`}>\n                          <QuestionsList\n                            windowStatus={this.state.windowStatus}\n                            setProfileWindowStatus={this.setProfileWindowStatus}\n                            setQuestionsListWindowStatus={\n                              this.setQuestionsListWindowStatus\n                            }\n                            questionTypes={this.props.questionTypes}\n                            loadQuestionTypes={this.props.loadQuestionTypes}\n                            SubmitAnswer={this.SubmitAnswer}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"w-full h-full\">\n                        {/* Do exam test title */}\n                        <DoExamTitle\n                          setCompletedTest={this.setCompletedTest}\n                          windowStatus={this.state.windowStatus}\n                          setProfileWindowStatus={this.setProfileWindowStatus}\n                          setQuestionsListWindowStatus={\n                            this.setQuestionsListWindowStatus\n                          }\n                          questionTypes={this.props.questionTypes}\n                          loadQuestionTypes={this.props.loadQuestionTypes}\n                          submitQuestionAnswer={this.state.submitQuestionAnswer}\n                          submitExam={this.submitExam}\n                          selectedExam={this.props.course.selected_course}\n                          SubmitAnswer={this.SubmitAnswer}\n                        />\n                        {/* Question details */}\n                        <QuestionDetails\n                          questionAnswers={\n                            this.props.doExam.exam_answers?.exam_questions_answers\n                              ?.questionAnswers\n                          }\n                          answerQuestionFn={this.answerQuestionFn}\n                          selectedQuestion={this.state.selectedQuestion}\n                          setSelectedQuestion={this.setSelectedQuestion}\n                          preview={false}\n                          submitQuestionAnswer={this.state.submitQuestionAnswer}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Footer\n                  windowStatus={this.state.windowStatus}\n                  setProfileWindowStatus={this.setProfileWindowStatus}\n                  setQuestionsListWindowStatus={this.setQuestionsListWindowStatus}\n                  questionTypes={this.props.questionTypes}\n                  loadQuestionTypes={this.props.loadQuestionTypes}\n                  SubmitAnswer={this.SubmitAnswer}\n                />\n              </div>\n            )}\n          </div>}\n          {this.props.candidateExam.candidate_exam === null &&\n          <Modal\n            title=\"\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.props.setSelectedCandidateExam(null)}\n            backDropClose={false}\n            widthSizeClass={ModalSize.large}\n            displayClose={false}\n            padding={{title: false,}} >\n              <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                {this.props.course.courses === null ? <Loading /> :\n                <div>\n                  <div className=\"flex flex-row items-center gap-2\">\n                    {/* <div className=\"flex items-center justify-center \">\n                      <IoIosPaper className=\"text-9xl text-blue-600\" />\n                    </div> */}\n                    <div className=\"my-2 w-full\">\n                      <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                        {this.props.course.selected_course && \n                        <div>\n                          <span>{this.props.course.selected_course.course_code}-</span>\n                          <span>{this.props.course.selected_course.course_name}</span>\n                        </div>}\n                      </div>\n                      <div className=\"flex flex-row gap-3 text-sm\">\n                        <span className=\"text-gray-600 font-normal\">Exam date:</span>\n                        <span className=\"text-blue-600 font-bold\">{DATE(this.examDetails()!.exam_date, \"DD/MM/YYYY\")}</span>\n                      </div>\n                      <div className=\"flex flex-row gap-3 text-sm\">\n                        <span className=\"text-gray-600 font-normal\">Start time:</span>\n                        <span className=\"text-blue-600 font-bold\">{this.examDetails()?.start_time}</span>\n                      </div>\n                      <div className=\"flex flex-row gap-3 text-sm\">\n                        <span className=\"text-gray-600 font-normal\">Exam duration:</span>\n                        <span className=\"text-blue-600 font-bold\">{this.examDetails()?.duration} hrs</span>\n                      </div>\n                    </div>\n                  </div>\n                  {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                  <div className=\"flex flex-row justify-center items-center\">\n                    {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                  </div>\n                  <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                    <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                    <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">Examination rules</div>\n                      {this.examDetails()?.termes}\n                    </div>\n                    <span className=\"text-blue-700\">If you are ready, start click to start the exam now, The system will start to count your time!</span>\n                  </div>\n                  <div className=\"flex flex-row items-center justify-between mt-2\">\n                    <button onClick={() => this.props.setSelectedCandidateExam(null)} className=\"btn bg-gray-50 text-gray-600 border\">Go Back</button>\n                    <button onClick={() => this.props.candidateExam.selected_exam_id !== null && this.props.loadCandidateExam(this.props.candidateExam.selected_exam_id, this.checkUserExam, this.setLoading)} className=\"btn bg-blue-600 text-white\">I accept, Start exam</button>\n                  </div>\n                </div>}\n              </div>\n          </Modal>}\n        </Fragment>\n      </ProctoringCandidateOnline>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; course: courseStoreInterface; periods: applicationPeriodsStoreInterface; questionTypes: questionTypesStoreInterface; positions: positionsStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, course: course, periods: periods, questionTypes: questionTypes, positions: positions, };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  InitializeExamDetails,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n})(_DoEam);\n"],"sourceRoot":""}