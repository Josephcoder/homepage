{"version":3,"sources":["containers/AccessManagement/AccessRole.tsx","containers/AccessManagement/StepOne.tsx","containers/AccessManagement/StepTwo.tsx","containers/AccessManagement/index.tsx","actions/settings.ts"],"names":["ModalStateRole","StepOne","handleSubmit","setRoleTitle","roleTitle","roleRequirement","setRequirement","error","setError","className","onSubmit","e","htmlFor","type","element","value","placeholder","onChange","target","msg","name","checked","React","memo","StepTwo","UserAccessList","do_exam","APPLICATION_OVERRIDE","CLAIM_VALIDATION","DOCUMENT_CHECKING","LOCATION_MANAGEMENT","POST_APPROVAL","POST_REQUEST","PREPARE_EXAM","PROCTORING_ROOM","QUESTION_BANK","SCHOOL_MANAGEMENT","SYSTEM_SETTINGS","USER_MANAGEMENT","admin","props","updateFieldChanged","index","newArr","accessToRole","permitted","create","view","update","delete","setAccessToRole","Table","columns","columnTitle","alignText","padding","rows","map","access","task","id","pagination","search","thColor","disabled","loadingRequest","url","API","AUTH","TabTypes","AccessRole","setViewRole","setState","viewRole","setLoadingRequest","setLoading","loading","setRoleId","roleId","setStepStatus","stepsStatus","setOpenModal","openModal","setRoleSelected","roleSelected","whichLevel","row","district_required","room_required","school_required","education_institution_required","userRows","result","loadCurrentRoles","accessRoles","state","system_user_role_id","role","onClick","CustomizeAccess","Update_Role_Access","Close_Modal","length","colSpan","typeRows","roleDetails","filter","userAccess","accessTasks","oneAccess","newArray","forEach","find","item","key","push","componentDidMount","GetTaskAccess","status","isEmptyOrSpaces","PushPopupAlert","title","theme","PopupAlertTheme","danger","handleSteps","step","stepOne","stepTwo","a","preventDefault","some","Add_Role_Access","axios","post","res","createAccessRoles","data","cleanAndCloseModal","success","patch","console","log","updateAccessRoles","info","role_error","errorToText","filterStatus","changeViewRole","role_id","this","Loading","searchBG","Modal","backDrop","Themes","default","close","displayClose","backDropClose","widthSizeClass","ModalSize","extraLarge","body","footer","large","tableId","Component","connect","system_settings","Index","labelCounts","allRole","activeRole","blockedRole","roleStatus","All_Roles","FC_GetAccessRoles","warning","toTwoDigit","Blocked_Roles","Active_Roles","AccessManagement","getSystemSettings","callback","dispatch","setAxiosToken","get","ActionTypes","GET_SYSTEM_SETTINGS","payload","code_error","disableSystemSetting","DISABLE_SYSTEM_SETTINGS","response","GET_TASK_ACCESS","getPositions","APPLICATION","GET_POSTIONS","deletePosition","DELETE_POSITION","publishPosition","PUBLISH_POSITION","FC_GetPositionsByInstitution","institution_id"],"mappings":"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","file":"static/js/46.a81db203.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { MdEdit, MdHighlightOff } from \"react-icons/md\";\nimport { TiInputChecked, TiKey } from \"react-icons/ti\";\nimport { connect } from \"react-redux\";\nimport {\n  createAccessRoles,\n  PushPopupAlert,\n  updateAccessRoles,\n} from \"../../actions\";\nimport { GetTaskAccess } from \"../../actions/settings\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { Themes, ModalSize } from \"../../components/Modal/Modal\";\nimport Table from \"../../components/Table/Table\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { AccessType } from \"../../reducers/access\";\nimport { isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport {\n  AccessTaskInterface,\n  SystemUserRoleInterface,\n} from \"../../shared/interfaces\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport StepOne from \"./StepOne\";\nimport StepTwo from \"./StepTwo\";\n\nconst url = `${API.AUTH}/auth/user/access`;\n\nexport enum ModalStateRole {\n  Add_Role_Access,\n  Update_Role_Access,\n  Close_Modal,\n}\n\ninterface AppProps {\n  access: AccessType;\n  filterStatus: boolean | \"all\";\n  accessTasks: AccessTaskInterface[] | null;\n  GetTaskAccess: Function;\n  createAccessRoles: Function;\n  updateAccessRoles: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\ninterface AppState {\n  roleId: string;\n  roleTitle: string;\n  roleRequirement: \"none\" | \"institute\" | \"district\" | \"school\" | \"room\";\n  stepsStatus: {\n    stepOne: boolean;\n    stepTwo: boolean;\n  };\n  accessToRole: AccessTaskInterface[];\n  openModal: ModalStateRole;\n  error: { element: string; msg: string };\n  loadingRequest: boolean;\n  loading: boolean;\n  viewRole: boolean;\n  roleSelected: SystemUserRoleInterface | null;\n}\n\nexport class AccessRole extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      roleId: \"\",\n      roleTitle: \"\",\n      roleRequirement: \"none\",\n      stepsStatus: {\n        stepOne: false,\n        stepTwo: false,\n      },\n      accessToRole: [],\n      openModal: ModalStateRole.Close_Modal,\n      error: { element: \"\", msg: \"\" },\n      loadingRequest: false,\n      loading: true,\n      viewRole: false,\n      roleSelected: null,\n    };\n  }\n\n  setViewRole = (value: boolean) => {\n    this.setState({ viewRole: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setRoleId = (value: string) => {\n    this.setState({ roleId: value });\n  };\n\n  setRoleTitle = (value: string) => {\n    this.setState({ roleTitle: value });\n  };\n\n  setRequirement = (\n    value: \"none\" | \"institute\" | \"district\" | \"school\" | \"room\"\n  ) => {\n    this.setState({ roleRequirement: value });\n  };\n\n  setStepStatus = (value: { stepOne: boolean; stepTwo: boolean }) => {\n    this.setState({ stepsStatus: value });\n  };\n\n  setAccessToRole = (value: AccessTaskInterface[]) => {\n    this.setState({ accessToRole: value });\n  };\n\n  setOpenModal = (value: ModalStateRole) => {\n    this.setState({ openModal: value });\n  };\n\n  setError = (value: { element: string; msg: string }) => {\n    this.setState({ error: value });\n  };\n\n  setRoleSelected = (value: SystemUserRoleInterface | null) => {\n    this.setState({ roleSelected: value });\n  };\n\n  whichLevel = (row: SystemUserRoleInterface): string => {\n    if (row.district_required) {\n      return \"District\";\n    } else if (row.room_required) {\n      return \"Room\";\n    } else if (row.school_required) {\n      return \"School\";\n    } else if (row.education_institution_required) {\n      return \"Institute\";\n    }\n    return \"None\";\n  };\n\n  userRows = (): JSX.Element | (false | JSX.Element)[] => {\n    const result = this.loadCurrentRoles(this.props.access.accessRoles).map(\n      (row, index) => (\n        <tr\n          key={index}\n          className={`accordion border-b border-grey-light hover:bg-gray-100 group ${\n            this.state.roleId === row.system_user_role_id && \"bg-gray-100\"\n          }`}\n        >\n          <td className=\"px-3 py-3 text-left\">{index + 1}</td>\n          <td className=\"text-gray-800 text-base font-medium text-left px-3\">\n            {row.role}\n          </td>\n          <td className=\"text-gray-800 text-base text-left px-3\">\n            {this.whichLevel(row)}\n          </td>\n          <td className=\"text-right\">\n            <div className=\"inline-flex\">\n              <button\n                className=\"btn bg-gray-300 text-gray-900 group-hover:bg-gray-600 group-hover:text-white inline-flex mr-1 focus:outline-none\"\n                onClick={() => {\n                  this.setViewRole(true);\n                  this.setRoleId(row.system_user_role_id);\n                  this.setRoleSelected(row);\n                  this.setRoleTitle(row.role);\n                  this.setRequirement(\n                    row.district_required\n                      ? \"district\"\n                      : row.school_required\n                      ? \"school\"\n                      : row.room_required\n                      ? \"room\"\n                      : \"none\"\n                  );\n                  this.setAccessToRole(this.CustomizeAccess(row.access));\n                }}\n                disabled={this.state.roleId === row.system_user_role_id}\n              >\n                <TiKey className=\"h-5 w-5 mr-1\" />\n                <span>Access</span>\n              </button>\n              <button\n                className=\"btn bg-blue-500 text-white hover:bg-blue-700 inline-flex mr-1 focus:outline-none\"\n                onClick={() => {\n                  this.setRoleId(row.system_user_role_id);\n                  this.setRoleTitle(row.role);\n                  this.setOpenModal(ModalStateRole.Update_Role_Access);\n                  this.setAccessToRole(this.CustomizeAccess(row.access));\n                }}\n                disabled={\n                  this.state.roleId === row.system_user_role_id &&\n                  this.state.openModal !== ModalStateRole.Close_Modal\n                }\n              >\n                <MdEdit className=\"h-5 w-5 mr-1\" />\n                <span>Edit</span>\n              </button>\n              {/* <button\n              className=\"btn bg-red-300 text-red-900 hover:bg-red-600 hover:text-white inline-flex mr-1\"\n              onClick={() => {\n                setRoleId(row.system_user_role_id);\n                setFeedBack({ type: \"\", message: \"\" });\n                setRoleTitle(row.role);\n              }}\n              disabled={roleId === row.system_user_role_id}\n            >\n              <MdDelete className=\"h-5 w-5 mr-1\" />\n              <span>Delete</span>\n            </button> */}\n            </div>\n          </td>\n        </tr>\n      )\n    );\n\n    if (result.length >= 1) {\n      return result;\n    } else {\n      return (\n        <tr className=\"accordion border-b border-grey-light hover:bg-gray-100\">\n          <td\n            className=\"text-gray-500 text-sm font-medium text-center px-3\"\n            colSpan={3}\n          >\n            No Data Found\n          </td>\n        </tr>\n      );\n    }\n  };\n\n  typeRows = (): JSX.Element | (false | JSX.Element)[] => {\n    const roleDetails = this.props.access.accessRoles\n      .filter((role) => role.system_user_role_id === this.state.roleId)[0]\n      .access.map((access, index) => (\n        <tr\n          key={index}\n          className=\"accordion border-b border-grey-light hover:bg-gray-100\"\n        >\n          <td className=\"text-gray-800 text-xl font-medium text-left px-3 py-2\">\n            {access.task}\n          </td>\n          <td className=\"px-2\">\n            <div\n              className={`inline-flex items-center text-xl ${\n                access.permitted.create ? \"text-green-700\" : \"text-red-700\"\n              }`}\n            >\n              {access.permitted.create ? (\n                <TiInputChecked />\n              ) : (\n                <MdHighlightOff />\n              )}\n              {access.permitted.create ? \" Yes\" : \"No\"}\n            </div>\n          </td>\n          <td className=\"px-2\">\n            <div\n              className={`inline-flex items-center text-xl ${\n                access.permitted.view ? \"text-green-700\" : \"text-red-700\"\n              }`}\n            >\n              {access.permitted.view ? <TiInputChecked /> : <MdHighlightOff />}\n              {access.permitted.view ? \" Yes\" : \"No\"}\n            </div>\n          </td>\n          <td className=\"px-2\">\n            <div\n              className={`inline-flex items-center text-xl ${\n                access.permitted.update ? \"text-green-700\" : \"text-red-700\"\n              }`}\n            >\n              {access.permitted.update ? (\n                <TiInputChecked />\n              ) : (\n                <MdHighlightOff />\n              )}\n              {access.permitted.update ? \" Yes\" : \"No\"}\n            </div>\n          </td>\n          <td className=\"px-2\">\n            <div\n              className={`inline-flex items-center text-xl ${\n                access.permitted.delete ? \"text-green-700\" : \"text-red-700\"\n              }`}\n            >\n              {access.permitted.delete ? (\n                <TiInputChecked />\n              ) : (\n                <MdHighlightOff />\n              )}\n              {access.permitted.delete ? \" Yes\" : \"No\"}\n            </div>\n          </td>\n        </tr>\n      ));\n\n    if (roleDetails.length >= 1) {\n      return roleDetails;\n    } else {\n      return (\n        <tr className=\"accordion border-b border-grey-light hover:bg-gray-100\">\n          <td\n            className=\"text-gray-500 text-sm font-medium text-center px-3\"\n            colSpan={4}\n          >\n            No Tasks assigned to this Role\n          </td>\n        </tr>\n      );\n    }\n  };\n\n  CustomizeAccess = (\n    userAccess: AccessTaskInterface[]\n  ): AccessTaskInterface[] => {\n    if (!this.props.accessTasks) return [];\n    let newArray: AccessTaskInterface[] = [];\n    let oneAccess: AccessTaskInterface | undefined;\n    this.props.accessTasks.forEach((element, index) => {\n      oneAccess = userAccess.find((item) => item.key === element.key);\n      if (oneAccess) {\n        newArray.push(oneAccess);\n      } else {\n        newArray.push(element);\n      }\n    });\n\n    return newArray;\n  };\n\n  componentDidMount = () => {\n    if (this.state.loading || this.props.accessTasks === null) {\n      this.props.GetTaskAccess((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status && !isEmptyOrSpaces(msg)) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    }\n  };\n\n  handleSteps = (step: 1 | 2) => {\n    if (step === 2) {\n      if (!this.state.roleTitle.length) {\n        return this.setError({\n          element: \"role-title\",\n          msg: \"Role Title is required\",\n        });\n      }\n\n      if (!this.state.roleRequirement.length) {\n        this.setRequirement(\"none\");\n      }\n\n      this.setStepStatus({ stepOne: true, stepTwo: false });\n    } else {\n      this.setStepStatus({ stepOne: false, stepTwo: false });\n    }\n  };\n\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>, step: 1 | 2) => {\n    e.preventDefault();\n    this.setError({\n      element: \"\",\n      msg: \"\",\n    });\n    this.setLoadingRequest(true);\n    if (step === 1) {\n      if (!this.state.roleTitle.length) {\n        return this.setError({\n          element: \"role-title\",\n          msg: \"Role Title is required\",\n        });\n      }\n\n      if (!this.state.roleRequirement.length) {\n        this.setRequirement(\"none\");\n      }\n\n      this.setStepStatus({ stepOne: true, stepTwo: false });\n    }\n    if (step === 2) {\n      if (\n        this.state.accessToRole &&\n        !this.state.accessToRole.some(\n          (e) =>\n            e.permitted.create === true ||\n            e.permitted.view === true ||\n            e.permitted.update === true ||\n            e.permitted.delete === true\n        )\n      ) {\n        return this.setError({\n          element: \"role-access\",\n          msg: \"At least one permission is required\",\n        });\n      }\n\n      try {\n        if (this.state.openModal === ModalStateRole.Add_Role_Access) {\n          const res = await axios.post<{ data: SystemUserRoleInterface[] }>(\n            `${url}/role`,\n            {\n              role: this.state.roleTitle,\n              status: true,\n              district_required:\n                this.state.roleRequirement === \"district\" ? true : false,\n              school_required:\n                this.state.roleRequirement === \"school\" ? true : false,\n              room_required:\n                this.state.roleRequirement === \"room\" ? true : false,\n              education_institution_required:\n                this.state.roleRequirement === \"institute\" ? true : false,\n              access: this.state.accessToRole,\n            }\n          );\n          if (res) this.props.createAccessRoles(res.data.data);\n          this.setLoadingRequest(false);\n          this.cleanAndCloseModal();\n          this.props.PushPopupAlert({\n            title: `Role has been successfully created.`,\n            theme: PopupAlertTheme.success,\n          });\n        } else {\n          const res = await axios.patch<{ data: SystemUserRoleInterface[] }>(\n            `${url}/role`,\n            {\n              role: this.state.roleTitle,\n              status: true,\n              district_required:\n                this.state.roleRequirement === \"district\" ? true : false,\n              school_required:\n                this.state.roleRequirement === \"school\" ? true : false,\n              room_required:\n                this.state.roleRequirement === \"room\" ? true : false,\n              education_institution_required:\n                this.state.roleRequirement === \"institute\" ? true : false,\n              access: this.state.accessToRole,\n              system_user_role_id: this.state.roleId,\n            }\n          );\n          console.log(res.data);\n          if (res) this.props.updateAccessRoles(res.data.data);\n          this.setLoadingRequest(false);\n          this.cleanAndCloseModal();\n          this.props.PushPopupAlert({\n            title: `Role has been successfully updated.`,\n            theme: PopupAlertTheme.info,\n          });\n        }\n      } catch (error) {\n        console.log({ role_error: error });\n        this.props.PushPopupAlert({\n          title: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n    }\n    this.setLoadingRequest(false);\n  };\n\n  loadCurrentRoles = (\n    accessRoles: SystemUserRoleInterface[]\n  ): SystemUserRoleInterface[] => {\n    if (this.props.filterStatus !== \"all\")\n      return accessRoles.filter(\n        (role) => role.status === this.props.filterStatus\n      );\n    else return accessRoles;\n  };\n\n  changeViewRole = (role_id: string) => {\n    let result = this.props.access.accessRoles.filter(\n      (role) => role.system_user_role_id === role_id\n    )[0];\n    this.setViewRole(true);\n    this.setRoleId(result.system_user_role_id);\n    this.setRoleSelected(result);\n    this.setRoleTitle(result.role);\n    this.setRequirement(\n      result.district_required\n        ? \"district\"\n        : result.school_required\n        ? \"school\"\n        : result.room_required\n        ? \"room\"\n        : \"none\"\n    );\n    this.setAccessToRole(this.CustomizeAccess(result.access));\n  };\n\n  cleanAndCloseModal = (): void => {\n    this.setStepStatus({ stepOne: false, stepTwo: false });\n    if (this.state.openModal !== ModalStateRole.Update_Role_Access) {\n      this.setRequirement(\"none\");\n      this.setRoleTitle(\"\");\n      this.setRoleId(\"\");\n    }\n\n    this.setLoadingRequest(false);\n    this.props.accessTasks\n      ? this.setAccessToRole([...this.props.accessTasks])\n      : this.setAccessToRole([]);\n    this.setRoleSelected(null);\n\n    this.setError({\n      element: \"\",\n      msg: \"\",\n    });\n    this.state.openModal === ModalStateRole.Update_Role_Access &&\n      this.setOpenModal(ModalStateRole.Close_Modal);\n  };\n\n  // assignAccess = () => {};\n\n  render() {\n    if (this.props.accessTasks === null || this.state.loading) {\n      return <Loading />;\n    }\n\n    return (\n      <div className=\"w-full\">\n        <div\n          className={`w-full bg-white text-right p-2 border border-gray-300 rounded mb-10`}\n        >\n          {/* ------------------------- CREATE NE ROLE BUTTON -------------------------------- */}\n          <button\n            className={`btn btn-blue ${\n              this.state.loadingRequest && \"cursor-wait\"\n            }`}\n            onClick={() => {\n              this.setOpenModal(ModalStateRole.Add_Role_Access);\n              this.props.accessTasks &&\n                this.setAccessToRole([...this.props.accessTasks]);\n              this.setRoleId(\"\");\n              this.setRoleTitle(\"\");\n              this.setRequirement(\"none\");\n            }}\n            disabled={\n              this.state.loadingRequest || this.props.accessTasks === null\n            }\n          >\n            New Role\n          </button>\n          {/* ------------------------- END CREATE NE ROLE BUTTON ---------------------------- */}\n          <div className=\"overflow-x-auto w-full mt-2\">\n            <Table\n              columns={[\n                { columnTitle: \"#\", alignText: \"left\" },\n                { columnTitle: \"User Roles\", alignText: \"left\" },\n                { columnTitle: \"Level\", alignText: \"left\" },\n                { columnTitle: \"\", alignText: \"center\" },\n              ]}\n              rows={this.userRows}\n              pagination={true}\n              search={true}\n              searchBG=\"bg-white\"\n              thColor=\"blue\"\n            />\n          </div>\n        </div>\n\n        {/* -----Modal Management----- */}\n        {this.state.openModal !== ModalStateRole.Close_Modal && (\n          <Modal\n            backDrop={true}\n            theme={Themes.default}\n            close={(): void => {\n              this.cleanAndCloseModal();\n              this.setOpenModal(ModalStateRole.Close_Modal);\n            }}\n            displayClose={true}\n            backDropClose={false}\n            title={\n              <div className=\"bg-white text-gray-500 font-bold text-2xl\">\n                {this.state.openModal === ModalStateRole.Add_Role_Access\n                  ? `Create New `\n                  : `Update `}\n                Role\n              </div>\n            }\n            widthSizeClass={ModalSize.extraLarge}\n            padding={{ title: true, body: false, footer: false }}\n          >\n            {/* User Access Select */}\n            <div className=\"h-full bg-gray-100 py-1\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 justify-between gap-3\">\n                <div className=\"bg-white shadow my-3 ml-3 py-2 rounded\">\n                  <div\n                    className={`flex row items-center p-3 mb-2 gap-2 cursor-pointer ${\n                      !this.state.stepsStatus.stepOne\n                        ? \"text-blue-800 bg-blue-100 border-blue-800 border-l-4\"\n                        : \"text-gray-800 bg-gray-100\"\n                    }`}\n                    onClick={() =>\n                      this.state.stepsStatus.stepOne && this.handleSteps(1)\n                    }\n                  >\n                    <div className=\"w-10 h-10 bg-white border-2 border-gary-200 rounded-full text-lg text-white flex items-center\">\n                      <span className=\"text-grey-darker text-center w-full text-gray-700\">\n                        1\n                      </span>\n                    </div>\n                    <div className=\"flex flex-col font-semibold text-xl\">\n                      Basic Information\n                      <span className=\"font-normal text-sm\">\n                        Input Role Title & a required field\n                      </span>\n                    </div>\n                  </div>\n\n                  <div\n                    className={`flex row items-center p-3 mb-2 gap-2 cursor-pointer ${\n                      this.state.stepsStatus.stepOne &&\n                      !this.state.stepsStatus.stepTwo\n                        ? \"text-blue-800 bg-blue-100 border-blue-800 border-l-4\"\n                        : \"text-gray-800 bg-gray-100\"\n                    }`}\n                    onClick={() =>\n                      !this.state.stepsStatus.stepOne &&\n                      !this.state.stepsStatus.stepTwo &&\n                      this.handleSteps(2)\n                    }\n                  >\n                    <div className=\"w-10 h-10 bg-white border-2 border-gary-200 rounded-full text-lg text-white flex items-center\">\n                      <span className=\"text-grey-darker text-center w-full text-gray-700\">\n                        2\n                      </span>\n                    </div>\n                    <div className=\"flex flex-col font-semibold text-xl\">\n                      Access Permission\n                      <span className=\"font-normal text-sm\">\n                        Give permission to new role\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"md:col-span-2 col-span-1 bg-white shadow my-3 mr-3 py-2 rounded\">\n                  {!this.state.stepsStatus.stepOne ? (\n                    <StepOne\n                      handleSubmit={this.handleSubmit}\n                      setRoleTitle={this.setRoleTitle}\n                      roleTitle={this.state.roleTitle}\n                      setOpenModal={this.setOpenModal}\n                      setRequirement={this.setRequirement}\n                      roleRequirement={this.state.roleRequirement}\n                      error={this.state.error}\n                      setError={this.setError}\n                    />\n                  ) : (\n                    this.state.accessToRole && (\n                      <StepTwo\n                        handleSubmit={this.handleSubmit}\n                        roleTitle={this.state.roleTitle}\n                        setAccessToRole={this.setAccessToRole}\n                        accessToRole={this.state.accessToRole}\n                        error={this.state.error}\n                        setError={this.setError}\n                        loadingRequest={this.state.loadingRequest}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n\n        {/* -----Modal VIEW Management----- */}\n        {this.state.viewRole && (\n          <Modal\n            backDrop={true}\n            theme={Themes.default}\n            close={(): void => {\n              this.setViewRole(false);\n              this.setRoleId(\"\");\n              this.setRoleSelected(null);\n              this.setRoleTitle(\"\");\n              this.setRequirement(\"none\");\n              this.setAccessToRole([]);\n            }}\n            displayClose={true}\n            backDropClose={false}\n            title={\n              <div className=\"bg-white text-gray-500 font-bold text-2xl\">\n                {this.state.roleTitle} Role\n              </div>\n            }\n            widthSizeClass={ModalSize.large}\n            padding={{ title: true, body: false, footer: false }}\n          >\n            {/* User Access Select */}\n            <div className=\"h-full bg-gray-100 py-1 px-2\">\n              <div className=\"my-3 flex justify-between items-start\">\n                <div>\n                  <div className=\"flex flex-col\">\n                    <select\n                      className={`rounded px-2 py-2 w-full bg-white focus:outline-none border-gray-400 border-2`}\n                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                        this.changeViewRole(e.target.value)\n                      }\n                      value={this.state.roleId}\n                      disabled={this.state.loadingRequest}\n                    >\n                      <option value=\"\">Document Category</option>\n                      {this.loadCurrentRoles(this.props.access.accessRoles).map(\n                        (item, index) => (\n                          <option\n                            key={index + item.system_user_role_id}\n                            value={item.system_user_role_id}\n                          >\n                            {item.role}\n                          </option>\n                        )\n                      )}\n                    </select>\n                  </div>\n                  {this.state.roleSelected?.district_required && (\n                    <div className=\"flex items-center text-lg gap-1 mt-1\">\n                      <span className=\"text-gray-600\">Level: </span>\n                      <h1 className=\"font-semibold text-gray-900\">District</h1>\n                    </div>\n                  )}\n                  {this.state.roleSelected?.school_required && (\n                    <div className=\"flex items-center text-lg gap-1 mt-1\">\n                      <span className=\"text-gray-600\">Level: </span>\n                      <h1 className=\"font-semibold text-gray-900\">School</h1>\n                    </div>\n                  )}\n                  {this.state.roleSelected?.room_required && (\n                    <div className=\"flex items-center text-lg gap-1 mt-1\">\n                      <span className=\"text-gray-600\">Level: </span>\n                      <h1 className=\"font-semibold text-gray-900\">Room</h1>\n                    </div>\n                  )}\n                </div>\n                <button\n                  className=\"btn bg-blue-500 text-white hover:bg-blue-700 inline-flex mr-1\"\n                  onClick={() => {\n                    this.setOpenModal(ModalStateRole.Update_Role_Access);\n                    this.setViewRole(false);\n                    this.setStepStatus({ stepOne: true, stepTwo: false });\n                  }}\n                  disabled={this.state.openModal !== ModalStateRole.Close_Modal}\n                >\n                  <MdEdit className=\"h-5 w-5 mr-1\" />\n                  <span>Edit</span>\n                </button>\n              </div>\n\n              <Table\n                columns={[\n                  {\n                    columnTitle: \"Access Name\",\n                    alignText: \"left\",\n                    padding: \"p-3\",\n                  },\n                  { columnTitle: \"Create\", alignText: \"left\" },\n                  { columnTitle: \"View\", alignText: \"left\" },\n                  { columnTitle: \"Update\", alignText: \"left\" },\n                  { columnTitle: \"Delete\", alignText: \"left\" },\n                ]}\n                rows={this.typeRows}\n                pagination={false}\n                search={true}\n                searchBG=\"bg-gray-100\"\n                thColor=\"gray\"\n                tableId=\"tableAccessForm\"\n              />\n            </div>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  access,\n  system_settings,\n}: StoreState): {\n  access: AccessType;\n  accessTasks: AccessTaskInterface[] | null;\n} => {\n  return { access: access, accessTasks: system_settings.accessTasks };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetTaskAccess,\n    createAccessRoles,\n    updateAccessRoles,\n    PushPopupAlert,\n  })(AccessRole)\n);\n","import React from \"react\";\nimport { ModalStateRole } from \"./AccessRole\";\ninterface AppProps {\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>, step: 1 | 2) => void;\n  setRoleTitle: (value: string) => void;\n  roleTitle: string;\n  setOpenModal: (value: ModalStateRole) => void;\n  setRequirement: (\n    value: \"none\" | \"institute\" | \"district\" | \"school\" | \"room\"\n  ) => void;\n  roleRequirement: \"none\" | \"institute\" | \"district\" | \"school\" | \"room\";\n  error: {\n    element: string;\n    msg: string;\n  };\n  setError: (value: { element: string; msg: string }) => void;\n}\nconst StepOne: React.FC<AppProps> = ({\n  handleSubmit,\n  setRoleTitle,\n  roleTitle,\n  roleRequirement,\n  setRequirement,\n  error,\n  setError,\n}) => {\n  return (\n    <div>\n      <form className=\"max-w-xl mx-auto\" onSubmit={(e) => handleSubmit(e, 1)}>\n        <h1 className=\"text-3xl font-semibold mt-3 mb-5 text-center\">\n          Basic Information\n        </h1>\n        <div className=\"-mx-3 md:flex mb-6\">\n          <div className=\"md:w-full px-3\">\n            <label\n              htmlFor=\"role-title\"\n              className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\"\n            >\n              Role\n            </label>\n            <input\n              type=\"text\"\n              className={`text-left input-white w-20 inline-block border-2 ${\n                error.element === \"role-title\"\n                  ? \"border-red-500\"\n                  : \"border-gray-500\"\n              }`}\n              value={roleTitle}\n              placeholder=\"Role title\"\n              onChange={(e) => {\n                setRoleTitle(e.target.value);\n                setError({\n                  element: \"\",\n                  msg: \"\",\n                });\n              }}\n              // disabled={openModal !== ModalStateRole.Update_Role_Access}\n            />\n            <p\n              className={`text-red-700 mt-1 ml-1 text-sm italic ${\n                error.element !== \"role-title\" && \"hidden\"\n              }`}\n            >\n              {error.msg}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col mb-5\">\n          <label>Field</label>\n          <span className=\"text-gray-500 text-sm\">\n            Required Field for this role\n          </span>\n          <div className=\"grid grid-flow-row grid-cols-3 sm:grid-cols-4 md:grid-cols-5 grid-rows- gap-4\">\n            <label className=\"inline-flex items-center mt-3\">\n              <input\n                type=\"radio\"\n                name=\"field\"\n                className=\"form-radio h-5 w-5 text-gray-600\"\n                onChange={() => setRequirement(\"institute\")}\n                checked={roleRequirement === \"institute\"}\n              />\n              <span className=\"ml-2 text-gray-700\">Institute</span>\n            </label>\n            {/* <label className=\"inline-flex items-center mt-3\">\n              <input\n                type=\"radio\"\n                name=\"field\"\n                className=\"form-radio h-5 w-5 text-gray-600\"\n                onChange={() => setRequirement(\"district\")}\n                checked={roleRequirement === \"district\"}\n              />\n              <span className=\"ml-2 text-gray-700\">District</span>\n            </label> */}\n            {/* <label className=\"inline-flex items-center mt-3\">\n              <input\n                type=\"radio\"\n                name=\"field\"\n                className=\"form-radio h-5 w-5 text-gray-600\"\n                onChange={() => setRequirement(\"school\")}\n                checked={roleRequirement === \"school\"}\n              />\n              <span className=\"ml-2 text-gray-700\">School</span>\n            </label> */}\n            <label className=\"inline-flex items-center mt-3\">\n              <input\n                type=\"radio\"\n                name=\"field\"\n                className=\"form-radio h-5 w-5 text-gray-600\"\n                onChange={() => setRequirement(\"room\")}\n                checked={roleRequirement === \"room\"}\n              />\n              <span className=\"ml-2 text-gray-700\">Room</span>\n            </label>\n            <label className=\"inline-flex items-center mt-3\">\n              <input\n                type=\"radio\"\n                name=\"field\"\n                className=\"form-radio h-5 w-5 text-gray-600\"\n                onChange={() => {\n                  setRequirement(\"none\");\n                  setError({\n                    element: \"\",\n                    msg: \"\",\n                  });\n                }}\n                checked={roleRequirement === \"none\"}\n              />\n              <span className=\"ml-2 text-gray-700\">None of the above</span>\n            </label>\n          </div>\n          <p\n            className={`text-red-700 mt-1 ml-1 text-xs italic ${\n              error.element !== \"role-field\" && \"hidden\"\n            }`}\n          >\n            {error.msg}\n          </p>\n        </div>\n        <div className=\"flex justify-end gap-5 mt-4\">\n          <button\n            className=\"btn bg-primary text-white hover:bg-blue-600 focus:outline-none\"\n            type=\"submit\"\n            // disabled\n          >\n            Save & Continue\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default React.memo(StepOne);\n","import React from \"react\";\nimport {\n  MdArrowForward,\n  MdDelete,\n  MdEdit,\n  MdRemoveRedEye,\n} from \"react-icons/md\";\nimport { SiAddthis } from \"react-icons/si\";\nimport Table from \"../../components/Table/Table\";\nimport { AccessTaskInterface } from \"../../shared/interfaces\";\nimport { UserAccessList } from \"../../utils/auth_access\";\n\nexport interface accessNoRelationsInterface {\n  key: UserAccessList;\n  noRelations: UserAccessList[];\n}\nexport const accessNoRelations: accessNoRelationsInterface[] = [\n  {\n    key: UserAccessList.do_exam,\n    noRelations: [\n      UserAccessList.APPLICATION_OVERRIDE,\n      UserAccessList.CLAIM_VALIDATION,\n      UserAccessList.DOCUMENT_CHECKING,\n      UserAccessList.LOCATION_MANAGEMENT,\n      UserAccessList.POST_APPROVAL,\n      UserAccessList.POST_REQUEST,\n      UserAccessList.PREPARE_EXAM,\n      UserAccessList.PROCTORING_ROOM,\n      UserAccessList.QUESTION_BANK,\n      UserAccessList.SCHOOL_MANAGEMENT,\n      UserAccessList.SYSTEM_SETTINGS,\n      UserAccessList.USER_MANAGEMENT,\n      UserAccessList.admin,\n    ],\n  },\n];\n\nexport const getAccessNoRelationsByKey = (\n  keySearch: string,\n  thisKey: string\n): boolean => {\n  let result = accessNoRelations.find(\n    (item) => item.key === (keySearch as UserAccessList)\n  );\n  if (result) {\n  }\n  return true;\n};\n\ninterface AppProps {\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>, step: 1 | 2) => void;\n  roleTitle: string;\n  setAccessToRole: (value: AccessTaskInterface[]) => void;\n  accessToRole: AccessTaskInterface[];\n  error: {\n    element: string;\n    msg: string;\n  };\n  setError: (value: { element: string; msg: string }) => void;\n  loadingRequest: boolean;\n}\n\nconst StepTwo: React.FC<AppProps> = (props) => {\n  const updateFieldChanged = (\n    index: number,\n    target: \"create\" | \"view\" | \"update\" | \"delete\",\n    value: boolean\n  ) => {\n    let newArr: AccessTaskInterface[] = props.accessToRole; // copying the old datas array\n    switch (target) {\n      case \"create\":\n        newArr[index].permitted.create = value;\n        break;\n      case \"view\":\n        newArr[index].permitted.view = value;\n        break;\n      case \"update\":\n        newArr[index].permitted.update = value;\n        break;\n      default:\n        newArr[index].permitted.delete = value;\n        break;\n    }\n\n    props.setAccessToRole(newArr);\n  };\n  const formTasks = (): JSX.Element[] => {\n    return props.accessToRole.map((access, index) => (\n      <tr\n        key={access.id + index}\n        className=\"accordion border-b border-grey-light hover:bg-gray-100\"\n      >\n        <td className=\"text-gray-800 text-base font-medium text-left px-3\">\n          {access.task}\n        </td>\n        <td className=\"py-1 px-3\">\n          <input\n            type=\"checkbox\"\n            className=\"form-checkbox h-5 w-5 text-gray-600\"\n            onChange={() => {\n              updateFieldChanged(index, \"create\", !access.permitted.create);\n              props.setError({ element: \"\", msg: \"\" });\n            }}\n            checked={access.permitted.create}\n            // disabled={}\n          />\n        </td>\n        <td className=\"py-1 px-3\">\n          <input\n            type=\"checkbox\"\n            className=\"form-checkbox h-5 w-5 text-gray-600\"\n            onChange={() => {\n              updateFieldChanged(index, \"view\", !access.permitted.view);\n              props.setError({ element: \"\", msg: \"\" });\n            }}\n            checked={access.permitted.view}\n          />\n        </td>\n        <td className=\"py-1 px-3\">\n          <input\n            type=\"checkbox\"\n            className=\"form-checkbox h-5 w-5 text-gray-600\"\n            onChange={() => {\n              updateFieldChanged(index, \"update\", !access.permitted.update);\n              props.setError({ element: \"\", msg: \"\" });\n            }}\n            checked={access.permitted.update}\n          />\n        </td>\n        <td className=\"py-1 px-3\">\n          <input\n            type=\"checkbox\"\n            className=\"form-checkbox h-5 w-5 text-gray-600\"\n            onChange={() => {\n              updateFieldChanged(index, \"delete\", !access.permitted.delete);\n              props.setError({ element: \"\", msg: \"\" });\n            }}\n            checked={access.permitted.delete}\n          />\n        </td>\n      </tr>\n    ));\n  };\n  return (\n    <div>\n      <form\n        className=\"max-w-xl mx-auto\"\n        onSubmit={(e) => props.handleSubmit(e, 2)}\n      >\n        <div className=\"mb-5\">\n          <div className=\"mb-5 mt-3\">\n            <h1 className=\"text-3xl font-semibold text-center\">\n              Access Permissions Settings\n            </h1>\n            <div className=\"flex items-center gap-2 mt-1 justify-center\">\n              <MdArrowForward className=\"w-6 h-6\" />\n              <h1 className=\"text-xl font-semibold text-gray-600 text-center\">\n                {props.roleTitle}\n              </h1>\n            </div>\n          </div>\n          <div className=\"md:flex mb-3\">\n            <div className=\"grid grid-cols-2 grid-rows-2 gap-4\">\n              <div className=\"inline-flex gap-2 items-center\">\n                <SiAddthis className=\"w-12 h-12 text-gray-600\" />\n                <div className=\"flex flex-col\">\n                  <h3 className=\"font-semibold text-xl\">Create</h3>\n                  <span className=\"text-gray-600 text-sm md:pr-1\">\n                    This permission gives the user the ability to create\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"inline-flex gap-2 items-center\">\n                <MdRemoveRedEye className=\"w-12 h-12 text-gray-600\" />\n                <div className=\"flex flex-col\">\n                  <h3 className=\"font-semibold text-xl\">View</h3>\n                  <span className=\"text-gray-600 text-sm md:pr-1\">\n                    This permission gives the user the ability to view\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"inline-flex gap-2 items-center\">\n                <MdEdit className=\"w-12 h-12 text-gray-600\" />\n                <div className=\"flex flex-col\">\n                  <h3 className=\"font-semibold text-xl\">Update</h3>\n                  <span className=\"text-gray-600 text-sm md:pr-1\">\n                    This permission gives the user the ability to update\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"inline-flex gap-2 items-center\">\n                <MdDelete className=\"w-12 h-12 text-gray-600\" />\n                <div className=\"flex flex-col\">\n                  <h3 className=\"font-semibold text-xl\">Delete</h3>\n                  <span className=\"text-gray-600 text-sm md:pr-1\">\n                    This permission gives the user the ability to delete\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <p\n            className={`text-red-700 mt-1 ml-1 text-base italic ${\n              props.error.element !== \"role-access\" && \"hidden\"\n            }`}\n          >\n            {props.error.msg}\n          </p>\n\n          <Table\n            columns={[\n              {\n                columnTitle: \"Access Name\",\n                alignText: \"left\",\n                padding: \"p-3\",\n              },\n              { columnTitle: \"Create\", alignText: \"left\" },\n              { columnTitle: \"View\", alignText: \"left\" },\n              { columnTitle: \"Update\", alignText: \"left\" },\n              { columnTitle: \"Delete\", alignText: \"left\" },\n            ]}\n            rows={formTasks}\n            pagination={false}\n            search={true}\n            thColor=\"gray\"\n          />\n\n          <div className=\"flex justify-end gap-5 mt-4\">\n            <button\n              className=\"btn bg-primary text-white hover:bg-blue-600 focus:outline-none\"\n              type=\"submit\"\n              disabled={props.loadingRequest}\n            >\n              {props.loadingRequest === true ? \"Saving...\" : \"Complete\"}\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default StepTwo;\n","import React, { Component, Fragment } from \"react\";\nimport { MdLock } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  FC_GetAccessRoles,\n  FT_GetAccessRoles,\n  PushPopupAlert,\n} from \"../../actions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { AccessType } from \"../../reducers/access\";\nimport { isEmptyOrSpaces, toTwoDigit } from \"../../shared/dataTest\";\nimport { SystemUserRoleInterface } from \"../../shared/interfaces\";\nimport AccessRole from \"./AccessRole\";\n\nenum TabTypes {\n  All_Roles = \"All Roles\",\n  Active_Roles = \"Active Roles\",\n  Blocked_Roles = \"Blocked Roles\",\n}\n\ninterface AppProps {\n  access: AccessType;\n  FC_GetAccessRoles: FT_GetAccessRoles;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\ninterface AppStatus {\n  labelCounts: {\n    allRole: number;\n    activeRole: number;\n    blockedRole: number;\n  };\n  roleStatus: TabTypes;\n  // feedBack: {\n  //   type: \"success\" | \"danger\" | \"warning\" | \"main-error\";\n  //   message: string;\n  // } | null;\n  loading: boolean;\n}\n\nclass Index extends Component<AppProps, AppStatus> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      labelCounts: {\n        allRole: 0,\n        activeRole: 0,\n        blockedRole: 0,\n      },\n      roleStatus: TabTypes.All_Roles,\n    };\n  }\n\n  componentDidMount() {\n    // LOADING ACCESS ROLES ===================\n    if (!this.props.access.accessRoles.length)\n      this.props.FC_GetAccessRoles(\n        (status: boolean, msg: string, data: SystemUserRoleInterface[]) => {\n          this.setState({ loading: status });\n          if (!isEmptyOrSpaces(msg) && status === false)\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.warning,\n            });\n          else if (status === false && data.length > 0)\n            this.setState({\n              labelCounts: {\n                allRole: data.length,\n                activeRole: data.filter((role) => role.status).length,\n                blockedRole: data.filter((role) => !role.status).length,\n              },\n            });\n        }\n      );\n    // WHEN ACCESS ROLES ALREADY LOADED ===================\n    else\n      this.setState({\n        loading: false,\n        labelCounts: {\n          allRole: this.props.access.accessRoles.length,\n          activeRole: this.props.access.accessRoles.filter(\n            (role) => role.status\n          ).length,\n          blockedRole: this.props.access.accessRoles.filter(\n            (role) => !role.status\n          ).length,\n        },\n      });\n  }\n\n  render() {\n    // CHECK IF STILL LOADING ROLES ================================\n    if (this.state.loading === true)\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading roles...\n        </div>\n      );\n    return (\n      <Fragment>\n        {/* ========================= Title ============================= */}\n        <div className=\"w-full my-5 px-1\">\n          {/* header title */}\n          <div className=\"flex flex-row items-center\">\n            <MdLock className=\"text-blue-700 w-28 h-28\" />\n            <div className=\"flex flex-col\">\n              <h1 className=\"text-3xl font-semibold\">\n                System Roles Management\n              </h1>\n              <div className=\"flex flex-row items-center mx-2 md:gap-3 gap-2\">\n                <div className=\"flex flex-col mt-1\">\n                  <span className=\"text-gray-600 text-base\">All Role(s)</span>\n                  <span className=\"text-gray-600 text-3xl font-bold\">\n                    {toTwoDigit(this.state.labelCounts.allRole)}\n                  </span>\n                </div>\n                {this.state.roleStatus !== TabTypes.Blocked_Roles && (\n                  <div className=\"flex flex-col mt-1\">\n                    <span className=\"text-gray-600 text-base\">\n                      Active Role(s)\n                    </span>\n                    <span className=\"text-gray-600 text-3xl font-bold\">\n                      {toTwoDigit(this.state.labelCounts.activeRole)}\n                    </span>\n                  </div>\n                )}\n                {this.state.roleStatus !== TabTypes.Active_Roles && (\n                  <div className=\"flex flex-col mt-1\">\n                    <span className=\"text-gray-600 text-base\">\n                      Blocked Role(s)\n                    </span>\n                    <span className=\"text-gray-600 text-3xl font-bold\">\n                      {toTwoDigit(this.state.labelCounts.blockedRole)}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          {/* end header title */}\n        </div>\n        {/* ========================= END Title ============================= */}\n        <div className=\"p-2 overflow-x-auto\">\n          <AccessRole\n            filterStatus={\n              this.state.roleStatus === TabTypes.Blocked_Roles\n                ? false\n                : this.state.roleStatus === TabTypes.Active_Roles\n                ? true\n                : \"all\"\n            }\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ access }: StoreState): { access: AccessType } => {\n  return { access: access };\n};\n\nexport const AccessManagement = connect(mapStateToProps, {\n  FC_GetAccessRoles,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport {\n  AccessTaskInterface,\n  PermissionInterface,\n  SystemSettingsInterface,\n} from \"../shared/interfaces\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport { PositionAPI } from \"../interfaces/position\";\n\nconst url = `${API.AUTH}/auth/user/access`;\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// SYSTEM SETTINGS  ==============\nexport interface GetSystemSettingsAction {\n  type: ActionTypes.GET_SYSTEM_SETTINGS;\n  payload: SystemSettingsInterface[];\n}\n\nexport interface DisableSystemSettingsAction {\n  type: ActionTypes.DISABLE_SYSTEM_SETTINGS;\n  payload: {\n    system_setting_id: string;\n    status: \"enabled\" | \"disabled\";\n  };\n}\n\n// ROLE TASKS ACCESS SETTINGS ===================================\nexport interface GetTaskAccessAction {\n  type: ActionTypes.GET_TASK_ACCESS;\n  payload: AccessTaskInterface[];\n}\n\n// POSITIONS SETTINGS ===================================\nexport interface PositionCreateInterface {\n  position_id?: string;\n  position_title: string;\n  position_code: string;\n  description: string;\n  school_level_id: string;\n  subcategory_id: string;\n  education_institute_id: string;\n  courses: string[];\n  requirements: {\n    user_detail_category_id: string;\n    user_detail_subcategory_id: string;\n    position_requirement: {\n      category_subcategory_data_id: string;\n      required: boolean;\n    }[];\n    required: boolean;\n  }[];\n}\nexport interface GetPositionsAction {\n  type: ActionTypes.GET_POSTIONS;\n  payload: PositionAPI[];\n}\n\nexport interface CreatePositionsAction {\n  type: ActionTypes.CREATE_POSITION;\n  payload: PositionCreateInterface;\n}\n\nexport interface UpdatePositionsAction {\n  type: ActionTypes.UPDATE_POSITION;\n  payload: PositionCreateInterface;\n}\n\nexport interface DeletePositionSettingAction {\n  type: ActionTypes.DELETE_POSITION;\n  payload: string;\n}\n\nexport interface PublishPositionAction {\n  type: ActionTypes.PUBLISH_POSITION;\n  payload: {\n    position_id: string;\n    status: boolean;\n  };\n}\n\nexport type SystemActionType =\n  | GetSystemSettingsAction\n  | DisableSystemSettingsAction\n  | GetTaskAccessAction\n  | GetPositionsAction\n  | CreatePositionsAction\n  | UpdatePositionsAction\n  | DeletePositionSettingAction\n  | PublishPositionAction;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\nexport const getSystemSettings = (callback: Function) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<SystemSettingsInterface[]>(\n        `${API.AUTH}/system/setting`\n      );\n      console.log(\"=================getSystemSettings===================\");\n      console.log(res);\n      console.log(\"=================getSystemSettings===================\");\n      dispatch<GetSystemSettingsAction>({\n        type: ActionTypes.GET_SYSTEM_SETTINGS,\n        payload: res.data,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\nexport const disableSystemSetting = (data: {\n  system_setting_id: string;\n  status: \"enabled\" | \"disabled\";\n}) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DisableSystemSettingsAction>({\n      type: ActionTypes.DISABLE_SYSTEM_SETTINGS,\n      payload: data,\n    });\n  };\n};\n\n// ============================ tasks access =======================\n\nexport const GetTaskAccess = (callback: Function) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<\n        {\n          id: string;\n          title: string;\n          key: string;\n          permitted: PermissionInterface;\n        }[]\n      >(`${url}/roleaccess`);\n      let response: AccessTaskInterface[] = res.data.map((data) => ({\n        id: data.id,\n        task: data.title,\n        key: data.key,\n        permitted: data.permitted,\n      }));\n      dispatch<GetTaskAccessAction>({\n        type: ActionTypes.GET_TASK_ACCESS,\n        payload: response,\n      });\n      callback(false, \"\", response);\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// ============================ positions =======================\n\nexport const getPositions = (callback: Function) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<PositionAPI[]>(`${API.APPLICATION}/position`);\n      dispatch<GetPositionsAction>({\n        type: ActionTypes.GET_POSTIONS,\n        payload: res.data,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\nexport const createPosition = (data: PositionCreateInterface) => {\n  console.log({ createPosition: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<CreatePositionsAction>({\n      type: ActionTypes.CREATE_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const updatePosition = (data: PositionCreateInterface) => {\n  console.log({ updatePosition: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdatePositionsAction>({\n      type: ActionTypes.UPDATE_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const deletePosition = (data: string) => {\n  console.log({ deletePosition: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<DeletePositionSettingAction>({\n      type: ActionTypes.DELETE_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const publishPosition = (data: {\n  position_id: string;\n  status: boolean;\n}) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<PublishPositionAction>({\n      type: ActionTypes.PUBLISH_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_GetPositionsByInstitution = (\n  institution_id: string,\n  callback: (status: boolean, msg: string, data?: PositionAPI[]) => void\n) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<PositionAPI[]>(\n        `${API.APPLICATION}/position/instituteposition/${institution_id}`\n      );\n      dispatch<GetPositionsAction>({\n        type: ActionTypes.GET_POSTIONS,\n        payload: res.data,\n      });\n      callback(false, \"\", res.data);\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n"],"sourceRoot":""}