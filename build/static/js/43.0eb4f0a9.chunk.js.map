{"version":3,"sources":["utils/question_bank.ts","components/Courses/Courses.tsx","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","components/EditorToolbar/EditorToolbar.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","containers/QuestionBank/AddQuestionManually/AddQuestionManually.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","console","log","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","_UploadQuestion","props","setLoading","setState","loading","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedEducationCategory","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","item","period","periods","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","loadCourses","state","searchCourseInput","className","this","education_category_title","school_level_name","onChange","e","target","value","placeholder","onClick","schoolLevels","education_categories","loadEducationCategories","loadSchoolLevels","style","minHeight","searchData","map","setSelectedCourse","selected_course_id","course_name","course_code","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","educationCategories","Component","UploadQuestion","connect","auth","questionBank","toMultipleChoice","answers","answer","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","Matching","MatchingAnswers","selectedQuestionItem","selectedKey","SelectedKeysEdit","QuestionAnswer","wholeQuestion","language","selectedLanguage","editMatchingValue","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","useState","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","marks","setSelectedKey","QuestionLanguages","lang","checkAns","uuidv4","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","modules","toolbar","container","handlers","undo","quill","history","redo","delay","maxStack","userOnly","formats","QuillToolbar","defaultValue","ShortAnswer","EditorToolbar","updateShortAnswer","handleTextChange","dangerouslySetInnerHTML","__html","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","HandleInput","Title","languages","questionItems","handleUpdateQuestionDetails","description","Description","QuestionChapters","selectedCourse","chapters","setAddChapter","addedChapters","name","ChangeLanguage","visible","setVisible","setSelectedLanguage","_EditQuestion","QuestionLang","question","actionStatus","PushPopupAlert","PopupAlertTheme","success","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","window","confirm","ans","chapter_id","submitEditedQuestion","a","addedQuestion","question_id","customNumber","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","selectedQuestion","Loading","LoadingType","white","onSubmit","Modal","large","Courses","selected_course","EditQuestion","system","prepareExam","setUploadedQuestions","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","AddQuestionManually"],"mappings":"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","file":"static/js/43.0eb4f0a9.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport {\n  questionType,\n  questionTypeElements,\n  questionTypeElementsType,\n} from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  console.log(\n    \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  );\n  console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React from 'react'\nimport { LanguageInterface, MatchingQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { toMatching } from '../../../../../DoExam/QuestionDetails/ConvertingAnswers';\nimport { SelectedKeysEdit } from '../EditQuestion';\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: MatchingQuestionAnswerInterface) => void;\n  editMatchingStatus: (answer_id: string, status: string) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(props.selectedQuestionItem.answer)\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"border border-gray-300\" : \"bg-gray-100\"}`}>\n        <div className=\"flex flex-col items-center w-full\">\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n            if (check === undefined) {\n              check = props.wholeQuestion[0];\n            }\n            props.editMatchingValue(\n              check, item.value, {\n                value: e.target.value,\n                status: item.status,\n                id: item.id,\n              }\n            )\n          }}\n          value={`${item.value}`}\n          type=\"text\" \n          className=\"input-gray-lg w-full border-2 border-gray-500\" /> :\n          <div className=\"w-full gap-3 py-2\">\n            {item.value}\n          </div>}\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            <input\n            onChange={(e) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editMatchingStatus(\n                item.id, e.target.value\n              )\n            }}\n            value={`${item.status}`}\n            type=\"text\" \n            className=\"input-gray-lg w-full border-2 border-gray-500 mt-2\" /> :\n            <div className=\"w-full\">\n              <div className={`font-bold rounded w-full text-blue-600`}>\n                {item.status}\n              </div>\n            </div>}\n          </div>\n          <div \n          onClick={() => {\n            props.removeAnswerSingleMultiple(props.wholeQuestion, item)\n          }}\n          className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\">Remove</div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default Matching\n","import React, { useState } from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, MatchingQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface, QuestionLanguages, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { v4 as uuidv4 } from 'uuid';\nimport Matching from '../AnswersQuestionTypes/Matching';\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: MatchingQuestionAnswerInterface) => void;\n  editMatchingStatus: (answer_id: string, status: string) => void;\n  addAnswerMatchingQuestion: (question: QuestionItemInterface, addedAnswer: MatchingQuestionAnswerInterface) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<{lang: LanguageInterface; answer: QuestionAnswerInterface}[]>([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(itm => itm.language === answer.lang.key);\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  }\n  const handleAnswer = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n\n  const handleStatus = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && \n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      }\n      \n      {showAddAnswerStatus === false ?\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div onClick={() => setShowAddAnswer(true)} className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\">\n          Add answer\n        </div>\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answers\" : \"Question answers\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n        <div className=\"flex flex-col gap-2\">\n        {QuestionLanguages.map((item, i) => (\n          <div key={i + 1} className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\">\n            <span className=\"font-bold text-blue-600\">{item.value}</span>\n            <input \n              placeholder=\"Item\"\n              value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\"}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let checkAns = addedAnswer.find(itm => itm.lang.key === item.key);\n                handleAnswer(\n                  item, \n                  { \n                    id: addedAnswer.length > 0 && checkAns !== undefined ? checkAns.answer.id : uuidv4(),\n                    value: e.target.value, \n                    status: addedAnswer.length > 0 && checkAns !== undefined ? checkAns.answer.status : \"\"\n                  })}}\n              type=\"text\" className=\"input-gray-lg\" />\n            <input \n              placeholder=\"Matching\"\n              value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.status : \"\"}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let checkAns = addedAnswer.find(itm => itm.lang.key === item.key);\n                handleStatus(\n                  item, \n                  { \n                    id: addedAnswer.length > 0 && checkAns !== undefined ? checkAns.answer.id : uuidv4(),\n                    value: addedAnswer.length > 0 && checkAns !== undefined ? checkAns.answer.value : \"\",\n                    status: e.target.value, \n                  })}}\n              type=\"text\" className=\"input-gray-lg\" />\n          </div>\n        ))}\n        </div>\n        <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n          <div onClick={() => AddAnswer()} className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\">Add</div>\n          <div onClick={() => setShowAddAnswer(false)} className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\">Cancel</div>\n        </div>\n      </div>}\n      {showAddAnswerStatus === false &&\n      <div className=\"rounded bg-white px-2 py-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.Matching &&\n        <Matching \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          selectedQuestionItem={props.selectedQuestionItem} \n        />\n        }\n      </div>}\n    </div>\n  )\n}\n\nexport default EditMatching\n","import React from 'react'\nimport { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdBookmark } from 'react-icons/md';\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { validateCalculatedFormula } from '../../../../../../utils/question_bank';\nimport { SelectedKeysEdit } from '../EditQuestion';\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType = props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice ? true : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-start justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"border-b border-gray-300\" : \"\"}`}>\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <div className=\"w-full\">\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.updateAnswerSingleMultiple(\n                check, item.value, {\n                  value: e.target.value,\n                  status: item.status,\n                  id: item.id,\n                }\n              )\n            }}\n            value={`${item.value}`}\n            type=\"text\" \n            className={`${checkCalculateType === true ? validateCalculatedFormula(item.value).status === true ? \"input-gray-lg border-gray-500 focus:border-blue-600\" : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\" : \"input-gray-lg\"} w-full border-2 border-gray-500`} /> \n            <span className={`${validateCalculatedFormula(item.value).status === true ? \"text-green-600\" : \"text-yellow-700\"} text-xs font-bold`}>{validateCalculatedFormula(item.value).msg}</span>\n          </div>:\n          <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n            {item.status === true ?\n            <RiShieldCheckFill className=\"text-2xl text-blue-600\" /> :\n            <MdBookmark className=\"text-2xl text-gray-500\" />}\n            {item.value}\n          </div>}\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n          <div \n            onClick={() => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editSingleMultipleStatus(\n                item.id, !item.status\n              )\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${item.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600 w-40 mt-2`}>\n              {item.status === false ?\n              <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n              <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n              <span className=\"font-bold \">{item.status === true ? \"Correct\" : \"Incorrect\"}</span>\n            </div> :\n            <div className=\"w-28 flex justify-end text-center\">\n              <div className={`font-bold px-3 py-2 rounded-full w-28 ${item.status === true ? \"text-green-600 bg-white\" : \"text-gray-600 bg-white\"}`}>\n                {item.status === true ? \n                  <div className=\"flex flex-row gap-2 items-center\">\n                    <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                  </div> : \n                  <div className=\"flex flex-row gap-2 items-center\">\n                    <FaTimesCircle className=\"text-xl\" /> <span>Incorrect</span>\n                  </div>\n                }\n              </div>\n            </div>}\n          <div \n          onClick={() => {\n            props.removeAnswerSingleMultiple(props.wholeQuestion, item)\n          }}\n          className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\">Remove</div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default MultipleChoice\n","import React, { useState } from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, QuestionLanguages, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { v4 as uuidv4 } from 'uuid';\nimport MultipleChoice from '../AnswersQuestionTypes/MultipleChoice';\nimport { validateCalculatedFormula } from '../../../../../../utils/question_bank';\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<{lang: LanguageInterface; answer: QuestionAnswerInterface}[]>([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType = props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice ? true : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(itm => itm.language === answer.lang.key);\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  }\n  const handleAnswer = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: { value: itm.answer.value, status: status, id: itm.answer.id }\n        })\n      }\n      setAddedAnswer(backup);\n    }\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && \n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      }\n      \n      {showAddAnswerStatus === false ?\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div onClick={() => setShowAddAnswer(true)} className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\">\n          Add answer\n        </div>\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answers\" : \"Question answers\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n        <div className=\"flex flex-col gap-2\">\n        {QuestionLanguages.map((item, i) => (\n          <div key={i + 1}className=\"flex flex-col gap-2\">\n            <span className=\"font-bold text-blue-600\">{item.value}</span>\n            <input \n              value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\"}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n                handleAnswer(\n                  item, \n                  { \n                    id: addedAnswer.length > 0 ? addedAnswer[0].answer.id : uuidv4(),\n                    value: e.target.value, \n                    status: addedAnswer.length > 0 ? addedAnswer[0].answer.status : false\n                  })}\n              type=\"text\" className={`${checkCalculateType === true ? validateCalculatedFormula(addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\").status === true ? \"input-gray-lg border-gray-500 focus:border-blue-600\" : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\" : \"input-gray-lg\"}`} />\n              <span className={`${validateCalculatedFormula(addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\").status === true ? \"text-green-600\" : \"text-yellow-700\"} text-xs font-bold`}>{validateCalculatedFormula(addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\").msg}</span>\n          </div>\n        ))}\n        </div>\n        <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n        <div \n        onClick={() => handleStatus(addedAnswer.length > 0 ? !(addedAnswer[0].answer.status) : false)}\n        className={`flex flex-row items-center gap-2 cursor-pointer ${addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600`}>\n          {addedAnswer.length > 0 && addedAnswer[0].answer.status === false ?\n          <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n          <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n          <span className=\"font-bold text-xl\">{addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"True\" : \"False\"}</span>\n        </div>\n        <div onClick={() => AddAnswer()} className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\">Add</div>\n        <div onClick={() => setShowAddAnswer(false)} className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\">Cancel</div>\n      </div>\n      </div>}\n      {showAddAnswerStatus === false &&\n      <div className=\"rounded bg-white px-2 py-2\">{console.log(props.selectedQuestionType)}\n        {(props.selectedQuestionType === questionTypeElementsType.SingleMultiple || \n        props.selectedQuestionType === questionTypeElementsType.MultipleChoice || \n        props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice) && \n        <MultipleChoice \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          selectedQuestionType={props.selectedQuestionType}\n        />\n        }\n      </div>}\n    </div>\n  )\n}\n\nexport default EditMultipleChoice\n","import React, { Component } from 'react'\nimport { IoShieldCheckmarkSharp } from 'react-icons/io5';\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      numberOfTests: 2,\n    }\n  }\n  \n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\"\n      },\n      {\n        id: 2,\n        value: \"secondnumber\"\n      }\n    ]\n    let defaultNumberOfTests = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n    return (\n      <div className=\"mt-2\">\n        <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RunTest\n","import React from 'react'\nimport { MdBookmark } from 'react-icons/md';\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { validateCalculatedFormula } from '../../../../../../utils/question_bank';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport RunTest from '../RunTest/RunTest';\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div className={`${props.selectedKey === SelectedKeysEdit.QuestionAnswer ? \"\" : \"bg-blue-50\"} -mt-3 px-2 pt-2 pb-1 rounded`}>\n        {props.selectedQuestionItem.answer.map((item, i) => (\n        <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"text-blue-600 font-bold\" : \"\"}`}>\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n          <div className=\"flex flex-col w-full\">\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.updateAnswerSimpleCalculate(\n                check, item.value, {\n                  value: e.target.value,\n                  status: item.status,\n                  id: item.id,\n                }\n              )\n            }}\n            value={`${item.value}`}\n            type=\"text\" \n            className={`w-full border-2 ${validateCalculatedFormula(item.value).status === true ? \"input-gray-lg border-gray-500 focus:border-blue-600\" : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"}`} /> \n            <span className={`${validateCalculatedFormula(item.value).status === true ? \"text-green-600\" : \"text-yellow-700\"} text-xs font-bold`}>{validateCalculatedFormula(item.value).msg}</span>\n            </div>\n            :\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ?\n              <RiShieldCheckFill className=\"text-2xl text-blue-600\" /> :\n              <MdBookmark className=\"text-2xl text-gray-500\" />}\n              {item.value}\n            </div>}\n        </div>))}\n      </div>\n      <RunTest />\n    </div>\n  )\n}\n\nexport default SimpleCalculate\n","import React, { useState } from 'react'\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport { LanguageInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { toNumerical } from '../../../../../DoExam/QuestionDetails/ConvertingAnswers';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { MdError } from 'react-icons/md';\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(props.selectedQuestionItem.answer[0].value[0].toString());\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] = useState<string>(props.selectedQuestionItem.answer[0].value[1].toString());\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div className={`${props.selectedKey === SelectedKeysEdit.QuestionAnswer ? \"\" : \"bg-blue-50\"} -mt-3 px-2 pt-2 pb-1 rounded`}>\n      {toNumerical(props.selectedQuestionItem.answer).map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"text-blue-600 font-bold\" : \"\"}`}>\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <>\n          <div className=\"flex flex-col w-full\">\n            <div>Correct answer</div>\n            <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              setEditQuestionAnswer(e.target.value);\n              if (editQuestionAnswer !== \"\" && !isNaN(parseFloat(editQuestionAnswer))) {\n                props.updateAnswerNumericalValue(\n                  check, item.id, {\n                    value: [parseFloat(e.target.value)],\n                    status: item.status,\n                    id: item.id,\n                  }\n                )\n              }\n            }}\n            value={`${editQuestionAnswer}`}\n            type=\"text\" \n            className=\"input-gray-lg w-full border-2 border-gray-500\" />\n          </div>\n        </> :\n        <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n          <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n          <span>Answer: </span>\n          <span>{item.value[0]}</span>\n        </div>}\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <div className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}>\n          <div className=\"flex flex-col w-full\">\n            <div>Error on the answer</div>\n            <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              setEditQuestionAnswerStatus(e.target.value);\n              if (editQuestionAnswerStatus !== \"\" && !isNaN(parseFloat(editQuestionAnswerStatus))) {\n                props.updateAnswerNumericalValue(\n                  check, item.id, {\n                    value: item.value,\n                    status: [parseFloat(e.target.value)],\n                    id: item.id,\n                  }\n                )\n              }\n            }}\n            value={`${editQuestionAnswerStatus}`}\n            type=\"text\" \n            className=\"input-gray-lg w-full border-2 border-gray-500\" />\n          </div>\n        </div> :\n        <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n          <MdError className=\"text-2xl text-gray-500\" />\n          <span className=\"text-gray-500\">Error: </span>\n          <span className=\"text-gray-500\">{item.value[1]}</span>\n        </div>}\n      </div>))}\n    </div>\n  )\n}\n\nexport default Numerical\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\"\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\nexport const modules = {\n  toolbar: {\n    container: \"#toolbar\",\n    handlers: {\n      undo: undoChange,\n      redo: redoChange\n    }\n  },\n  history: {\n    delay: 500,\n    maxStack: 100,\n    userOnly: true\n  }\n};\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\n// Quill Toolbar component\nexport const QuillToolbar = () => (\n  <div id=\"toolbar\">\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answer: QuestionAnswerInterface[];\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answer: this.props.selectedQuestion.answer,\n      selectedLanguage: QuestionLanguages[0],\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n    };\n  }\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.value === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].value === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: res,\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: res,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [editedAnswer.value[0], question.answer[0].value[1]],\n          status: [\n            editedAnswer.value[0] - question.answer[0].value[1],\n            editedAnswer.value[0] + question.answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: newEditedAnswer,\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: newEditedAnswer,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: [editedAnswer],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answer.filter((itm) => itm.status === true).length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    console.log(\"Updated: \", updatedQuestion);\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerInterface\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerInterface[] = current.answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          answer: res,\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (answer_id: string, status: string) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.value === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].value === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: res,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answer: this.state.answer,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({ selectedKey: selectedKey });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n          <ChangeLanguage\n            setSelectedLanguage={this.setSelectedLang}\n            selectedLanguage={this.state.selectedLanguage}\n          />\n        )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col\">\n                  <label className=\"text-gray-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-blue-600 flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() =>\n                      this.setState({ selectedKey: SelectedKeysEdit.Title })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <label className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).description}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setState({\n                        selectedKey: SelectedKeysEdit.Description,\n                      })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course !== null && (\n              <QuestionChapters\n                selectedCourse={\n                  this.props.course.courses &&\n                  this.props.course.courses.find(\n                    (itm) => itm.course_id === this.state.course\n                  )\n                }\n                addedChapters={this.state.chapters}\n                setAddChapter={this.setAddChapter}\n              />\n            )}\n            <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n              <div className=\"\"></div>\n              <div\n                className=\"btn bg-blue-600 text-white cursor-pointer\"\n                onClick={() => this.setState({ showQuestionChapters: false })}\n              >\n                Done\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from 'react'\nimport { MdBookmark } from 'react-icons/md';\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css'; // ES6\nimport EditorToolbar, { modules, formats } from \"../../../../../../components/EditorToolbar/EditorToolbar\";\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(\n      check, item.value, {\n        value: value,\n        status: item.status,\n        id: item.id,\n      }\n    )\n  }\n  return (\n    <div className={`${props.selectedKey === SelectedKeysEdit.QuestionAnswer ? \"\" : \"bg-blue-50 px-2\"} -mt-3 pt-2 pb-1 rounded`}>\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"text-blue-600 font-bold\" : \"\"}`}>\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n          <div className=\"flex flex-col\">\n          <EditorToolbar />\n          <ReactQuill \n            theme=\"snow\"\n            value={`${item.value}`}\n            className=\"rounded mb-10 w-full\"\n            placeholder={\"Write something awesome...\"}\n            modules={modules}\n            formats={formats}\n            onChange={(e) => handleTextChange(e, item)} />\n          </div>\n          :\n          <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n            {item.status === true ?\n            <RiShieldCheckFill className=\"text-2xl text-blue-600\" /> :\n            <MdBookmark className=\"text-2xl text-gray-500\" />}\n            <div dangerouslySetInnerHTML={{__html: item.value}}></div>\n          </div>}\n      </div>))}\n    </div>\n  )\n}\n\nexport default ShortAnswer\n","import React from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport SimpleCalculate from '../AnswersQuestionTypes/SimpleCalculate';\nimport Numerical from '../AnswersQuestionTypes/Numerical';\nimport ShortAnswer from '../AnswersQuestionTypes/ShortAnswer';\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.SimpleCalculate && \n        <SimpleCalculate \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && \n        <Numerical \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.ShortAnswer && \n        <ShortAnswer \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateShortAnswer={props.updateShortAnswer}\n        />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default EditSimpleCalculate\n","import React from 'react'\nimport { RiCheckboxBlankCircleLine } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { MdRadioButtonChecked } from 'react-icons/md';\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"}`}>\n        <div \n          onClick={() => {\n            let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n            if (check === undefined) {\n              check = props.wholeQuestion[0];\n            }\n            props.editTrueFalseStatus(\n              item.id, !item.status\n            )\n          }}\n          className={`flex flex-row items-center gap-2 cursor-pointer ${item.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600 w-40`}>\n            {item.status === false ?\n            <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" /> :\n            <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default TrueFalse\n","import React, { useState } from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, QuestionLanguages, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { v4 as uuidv4 } from 'uuid';\nimport TrueFalse from '../AnswersQuestionTypes/TrueFalse';\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<{lang: LanguageInterface; answer: QuestionAnswerInterface}[]>([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(itm => itm.language === answer.lang.key);\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  }\n  const handleAnswer = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: { value: itm.answer.value, status: status, id: itm.answer.id }\n        })\n      }\n      setAddedAnswer(backup);\n    }\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && \n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      }\n      \n      {showAddAnswerStatus === false ?\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n        <div className=\"flex flex-col gap-2\">\n        {QuestionLanguages.map((item, i) => (\n          <div key={i + 1}className=\"flex flex-col gap-2\">\n            <span className=\"font-bold text-blue-600\">{item.value}</span>\n          <input \n            value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n              handleAnswer(\n                item, \n                { \n                  id: addedAnswer.length > 0 ? addedAnswer[0].answer.id : uuidv4(),\n                  value: e.target.value, \n                  status: addedAnswer.length > 0 ? addedAnswer[0].answer.status : false\n                })}\n            type=\"text\" className=\"input-gray-lg\" />\n          </div>\n        ))}\n        </div>\n        <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n        <div \n        onClick={() => handleStatus(addedAnswer.length > 0 ? !(addedAnswer[0].answer.status) : false)}\n        className={`flex flex-row items-center gap-2 cursor-pointer ${addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600`}>\n          {addedAnswer.length > 0 && addedAnswer[0].answer.status === false ?\n          <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n          <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n          <span className=\"font-bold text-xl\">{addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"True\" : \"False\"}</span>\n        </div>\n        <div onClick={() => AddAnswer()} className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\">Add</div>\n        <div onClick={() => setShowAddAnswer(false)} className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\">Cancel</div>\n      </div>\n      </div>}\n      {showAddAnswerStatus === false &&\n      <div className=\"rounded bg-white px-2 pb-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.TrueFalse && \n        <TrueFalse \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editTrueFalseStatus={props.editTrueFalseStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n        />\n        }\n      </div>}\n    </div>\n  )\n}\n\nexport default EditTrueFalse\n","import React from 'react'\nimport { LanguageInterface, MatchingQuestionAnswerInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../interfaces/question';\nimport { SelectedKeysEdit } from './EditQuestion';\nimport EditMatching from './EditQuestionTypes/EditMatching';\nimport EditMultipleChoice from './EditQuestionTypes/EditMultipleChoice';\nimport EditSimpleCalculate from './EditQuestionTypes/EditSimpleCalculate';\nimport EditTrueFalse from './EditQuestionTypes/EditTrueFalse';\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: MatchingQuestionAnswerInterface) => void;\n  editMatchingStatus: (answer_id: string, status: string) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (question: QuestionItemInterface, addedAnswer: MatchingQuestionAnswerInterface) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>{console.log(props.selectedQuestionType)}\n      {(props.selectedQuestionType === questionTypeElementsType.SingleMultiple || \n        props.selectedQuestionType === questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice) && \n        <EditMultipleChoice \n          selectedQuestionType={props.selectedQuestionType} \n          selectedQuestionItem={props.selectedQuestionItem} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedKey={props.selectedKey}  \n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      }\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse &&\n      <EditTrueFalse\n        selectedQuestionType={props.selectedQuestionType} \n        selectedQuestionItem={props.selectedQuestionItem} \n        wholeQuestion={props.wholeQuestion} \n        selectedLanguage={props.selectedLanguage} \n        updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n        addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n        removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n        selectedKey={props.selectedKey}  \n        setSelectedKey={props.setSelectedKey}\n        editTrueFalseStatus={props.editTrueFalseStatus} \n        marks={props.marks}\n        updateMarks={props.updateMarks}\n      />}\n      {props.selectedQuestionType === questionTypeElementsType.Matching &&\n      <EditMatching\n        selectedQuestionType={props.selectedQuestionType} \n        selectedQuestionItem={props.selectedQuestionItem} \n        wholeQuestion={props.wholeQuestion} \n        selectedLanguage={props.selectedLanguage} \n        updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n        addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n        addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n        removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n        selectedKey={props.selectedKey}  \n        setSelectedKey={props.setSelectedKey}\n        editMatchingValue={props.editMatchingValue}\n        editMatchingStatus={props.editMatchingStatus}\n        marks={props.marks}\n        updateMarks={props.updateMarks}\n      />}\n      {(props.selectedQuestionType === questionTypeElementsType.SimpleCalculate ||\n      props.selectedQuestionType === questionTypeElementsType.Numeric ||\n      props.selectedQuestionType === questionTypeElementsType.ShortAnswer\n      ) &&\n        <EditSimpleCalculate \n          selectedQuestionType={props.selectedQuestionType} \n          selectedQuestionItem={props.selectedQuestionItem} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedKey={props.selectedKey}  \n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      }\n    </div>\n  )\n}\n\nexport default QuestionAnswer\n","import React from 'react'\nimport { LanguageInterface, QuestionItemInterface } from '../../../../../interfaces';\nimport { SelectedKeysEdit } from './EditQuestion';\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n  return (\n    <div>\n      {props.languages.map((item, i) => (\n        <div className=\"flex flex-row items-center animate__animated animate__fadeInDown animate__fast\">\n          <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n            {item.value}\n          </span>\n          <input \n            key={i + 1}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.questionItems.find(itm => itm.language === item.key);\n              if (check === undefined) {\n                check = props.questionItems[0];\n              }\n              props.handleUpdateQuestionDetails({\n                description: check.description,\n                language: check.language,\n                status: check.status,\n                title: e.target.value,\n                answer: check.answer\n              })\n            }}\n            value={props.questionItems.find(itm => itm.language === item.key)?.title}\n            type=\"text\" className=\"input-gray-lg w-full mt-3\" />\n        </div>\n      ))}\n    </div>\n  )} else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-row items-center animate__animated animate__fadeInDown animate__fast\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <textarea \n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(itm => itm.language === item.key);\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer\n                })\n              }}\n              value={props.questionItems.find(itm => itm.language === item.key)?.description}\n              className=\"input-gray-lg w-full mt-3\"></textarea>\n          </div>\n        ))}\n      </div>\n    )} else {\n      return <div></div>\n    }\n}\n\nexport default HandleInput\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { course } from '../../../../../interfaces'\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    )\n  }\n  else if (props.selectedCourse !== undefined && props.selectedCourse !== null && props.selectedCourse.chapters?.length === 0) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} - {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined && props.selectedCourse.chapters.length === 0 ? \n          <div>No chapters found!</div>:\n          props.selectedCourse.chapters && props.selectedCourse.chapters.map((item, i) => (\n            <div \n            onClick={() => props.setAddChapter(item.id)}\n            className={`${props.addedChapters.find(itm => itm === item.id) ? \"text-blue-600\" : \"text-gray-600\"} border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}>\n              {props.addedChapters.find(itm => itm === item.id) ? \n              <ImCheckboxChecked className=\"text-2xl cursor-pointer\" /> :\n              <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />}\n              <span>{item.name}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default QuestionChapters\n","import React, { useState } from 'react'\nimport { MdLanguage } from 'react-icons/md';\nimport { RiCloseCircleFill } from 'react-icons/ri'\nimport { LanguageInterface, QuestionLanguages } from '../../interfaces/question'\nimport { CgMoreO } from 'react-icons/cg';\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(false);\n  // const [minimize, setMinimize] = useState<boolean>(true);\n  return (\n    <div className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${visible === false ? \"text-blue-800\" : \"text-white\"} hover:text-white rounded-t-lg w-auto ${visible === true ? \"animate__animated animate__fadeInUp animate__faster\" : \"animate__animated animate__fadeInDown animate__faster\"} bg-white`}>\n      <div className={`flex flex-col px-3 py-2 rounded-t-lg ${visible === true ? \"bg-blue-700\" : \"bg-white shadow-lg border border-gray-300\"} hover:bg-blue-800 cursor-pointer`}>\n        <div className=\"flex flex-row items-center justify-between\">\n          <div onClick={() => setVisible(!visible)} className=\"font-bold text-lg flex flex-row gap-2 items-center\">\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? \n          <div className=\"flex flex-row items-center\">\n            <CgMoreO onClick={() => setVisible(!visible)} className=\"text-2xl ml-3\" /> \n            {/* <AiOutlineMinusCircle onClick={() => setMinimize(false)} className=\"text-2xl\" /> */}\n          </div>\n          :\n          <RiCloseCircleFill onClick={() => setVisible(!visible)} className=\"text-3xl ml-3 -my-5 text-yellow-300\" />}\n        </div>\n      </div>\n      {visible && <div className={`flex flex-col`}>\n        <div className=\"\">\n          {QuestionLanguages.map((item, i) => (\n            <div onClick={() => props.setSelectedLanguage(item )} key={i + 1}\n            className={`flex flex-row items-center justify-start ${props.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\" : \"rounded m-2 text-white\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n              {item.value}\n            </div>\n          ))}\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nexport default ChangeLanguage\n","import {useState} from 'react'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { FiChevronDown, FiChevronRight } from 'react-icons/fi';\nimport { searchItem } from '../ApplicationPositions';\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void;\n}\n\nconst SchoolLevelsItem = (props: SchoolLevelsItemPropsInterface):JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => { \n    if ((props.searchLevel !== null && props.searchLevel.schoolLevel === null) || (props.searchLevel !== null && props.educationCategoryDetails.education_institute_id !== props.searchLevel.educationCategory.education_institute_id) || props.setSearchLevel === null) {\n      levelsDropDown === false && props.setSearchLevel(null, null); \n      levelsDropDown === false && props.setSearchLevel(props.educationCategoryDetails, null); \n    }\n  }\n  const activateItem = (levelsDropDown: boolean, props: any) => { \n    props.setSearchLevel(null, null); \n    props.setSearchLevel(props.educationCategoryDetails, null); \n  }\n  const activateLevelItem = (educationCate: Interfaces.education_category, item: Interfaces.school_level) => { \n    props.setSearchLevel(null, null); \n    props.setSearchLevel(educationCate, item); \n  }\n  return (\n    <div className=\"flex flex-col\">\n      <div onClick={() => {setLevelsDropDown(!levelsDropDown); initializeItem(levelsDropDown, props)}} className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\">\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">{props.educationCategoryDetails.education_category_title}</span>\n          <span className=\"text-xs\">{props.educationCategoryDetails.description}</span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? <FiChevronRight className=\"text-2xl\" /> : <FiChevronDown className=\"text-2xl\" />}\n        </div>\n      </div>\n      {levelsDropDown === true &&\n      <div className=\"flex flex-col\">\n        <div onClick={() => activateItem(levelsDropDown, props)} className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${props.searchLevel !== null && props.searchLevel.educationCategory !== null && props.searchLevel.educationCategory.education_institute_id === props.educationCategoryDetails.education_institute_id && props.searchLevel.schoolLevel === null ? \"border-blue-500\" : \"border-blue-100\"} hover:border-blue-500`}>\n          <div className=\"flex flex-col pl-1\">\n            <span className=\"text-blue-700 text-sm font-bold\">All levels</span>\n          </div>\n        </div>\n        {console.log(\"Institute: \", props.educationCategoryDetails)}\n        {props.schoolLevels === null ? \"Loading...\" :\n        props.schoolLevels.length === 0 ? \"No levels found\" :\n        props.schoolLevels.map((item, i) => (\n          item.education_institute.find(itm => itm === props.educationCategoryDetails.education_institute_id) && \n          <div onClick={() => activateLevelItem(props.educationCategoryDetails, item)} key={i + 1} className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${props.searchLevel !== null && props.searchLevel.schoolLevel !== null && props.searchLevel.schoolLevel === item && props.searchLevel.educationCategory !== null && props.searchLevel.educationCategory.education_institute_id === props.educationCategoryDetails.education_institute_id ? \"border-blue-500\" : \"border-blue-100\"} hover:border-blue-500`}>\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">{item.school_level_name}</span>\n            </div>\n          </div>\n        ))}\n      </div>}\n    </div>\n  )\n}\n\nexport default SchoolLevelsItem\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { Component } from \"react\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../interfaces/question\";\nimport EditQuestion, {\n  SelectedKeysEdit,\n} from \"../AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddQuestionManuallyProps {}\n\ninterface AddQuestionManuallyState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answer: QuestionAnswerInterface[];\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n}\n\nexport class AddQuestionManually extends Component<\n  AddQuestionManuallyProps,\n  AddQuestionManuallyState\n> {\n  constructor(props: AddQuestionManuallyProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: uuidv4(),\n      course: \"\",\n      question: [],\n      type: \"Invalid\",\n      chapters: [],\n      customNumber: 1,\n      marks: 100,\n      answer: [],\n      selectedLanguage: QuestionLanguages[0],\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n    };\n  }\n\n  unSelectQuestion = () => {\n    alert(\"Hello\");\n  };\n\n  render() {\n    return (\n      <div>\n        Add new question\n        <EditQuestion\n          selectedQuestion={{\n            question_id: this.state.id,\n            course: this.state.course,\n            question: this.state.question,\n            type: this.state.type,\n            chapters: this.state.chapters,\n            customNumber: this.state.customNumber,\n            marks: this.state.marks,\n            answer: this.state.answer,\n          }}\n          unSelectQuestion={this.unSelectQuestion}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AddQuestionManually;\n"],"sourceRoot":""}