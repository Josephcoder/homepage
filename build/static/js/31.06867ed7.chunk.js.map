{"version":3,"sources":["utils/question_bank.ts","components/Courses/Courses.tsx","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","components/EditorToolbar/EditorToolbar.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","components/Questions/QuestionItem.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","containers/PrepareExam/EditExam/EditExam.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","_UploadQuestion","props","setLoading","setState","loading","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedEducationCategory","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","item","period","periods","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","loadCourses","state","searchCourseInput","className","this","education_category_title","school_level_name","onChange","e","target","value","placeholder","onClick","schoolLevels","education_categories","loadEducationCategories","loadSchoolLevels","style","minHeight","searchData","map","setSelectedCourse","selected_course_id","course_name","course_code","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","educationCategories","Component","UploadQuestion","connect","auth","questionBank","toMultipleChoice","answers","answer","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","Matching","MatchingAnswers","selectedQuestionItem","selectedKey","SelectedKeysEdit","QuestionAnswer","wholeQuestion","language","selectedLanguage","editMatchingValue","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","useState","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","marks","setSelectedKey","QuestionLanguages","lang","checkAns","uuidv4","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","console","log","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","modules","toolbar","container","handlers","undo","quill","history","redo","delay","maxStack","userOnly","formats","QuillToolbar","defaultValue","ShortAnswer","EditorToolbar","updateShortAnswer","handleTextChange","dangerouslySetInnerHTML","__html","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","HandleInput","Title","languages","questionItems","handleUpdateQuestionDetails","description","Description","QuestionChapters","selectedCourse","chapters","setAddChapter","addedChapters","name","ChangeLanguage","visible","setVisible","setSelectedLanguage","_EditQuestion","QuestionLang","question","actionStatus","PushPopupAlert","PopupAlertTheme","success","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","window","confirm","ans","chapter_id","submitEditedQuestion","a","addedQuestion","question_id","customNumber","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","selectedQuestion","Loading","LoadingType","white","onSubmit","Modal","large","Courses","selected_course","EditQuestion","system","prepareExam","setUploadedQuestions","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","QuestionItem","editMode","setEditMode","select","callBack","number","extraLarge","questionsList","Questions","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","questions","temp","x","useEffect","to","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","actionType","changeProctoringRule","proctoringRules","newData","selected","addQuestionToPaper","removeToQuestionPaper","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","is_active","formErr","selectCourse","currentStep","StepStatus","Step1","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","validateTwoTime","axios","post","API","QBank","exam_status","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","redirectToExams","data","errors","message","applicationPeriods","loadApplicationPeriods","examsList","loadExamsList","editQuestion","total","handleChangeTermes","setSelectCourse","setSelectPeriod","Prepare","addQuestionModal","submitExam","stepStatus","disabled","NoResultThemes","Dark","AlertInterface","setSelectedPeriod","body","PrepareExam","PrepareExamSteps","Steps","session_plan_name","Switch","_EditExam","selectedExam","put","setLoadingProps","setSelectedExam","findExamDetails","EditExam","DATE_DATA"],"mappings":"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","file":"static/js/31.06867ed7.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport {\n  questionType,\n  questionTypeElements,\n  questionTypeElementsType,\n} from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React from 'react'\nimport { LanguageInterface, MatchingQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { toMatching } from '../../../../../DoExam/QuestionDetails/ConvertingAnswers';\nimport { SelectedKeysEdit } from '../EditQuestion';\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: MatchingQuestionAnswerInterface) => void;\n  editMatchingStatus: (answer_id: string, status: string) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(props.selectedQuestionItem.answer)\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"border border-gray-300\" : \"bg-gray-100\"}`}>\n        <div className=\"flex flex-col items-center w-full\">\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n            if (check === undefined) {\n              check = props.wholeQuestion[0];\n            }\n            props.editMatchingValue(\n              check, item.value, {\n                value: e.target.value,\n                status: item.status,\n                id: item.id,\n              }\n            )\n          }}\n          value={`${item.value}`}\n          type=\"text\" \n          className=\"input-gray-lg w-full border-2 border-gray-500\" /> :\n          <div className=\"w-full gap-3 py-2\">\n            {item.value}\n          </div>}\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            <input\n            onChange={(e) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editMatchingStatus(\n                item.id, e.target.value\n              )\n            }}\n            value={`${item.status}`}\n            type=\"text\" \n            className=\"input-gray-lg w-full border-2 border-gray-500 mt-2\" /> :\n            <div className=\"w-full\">\n              <div className={`font-bold rounded w-full text-blue-600`}>\n                {item.status}\n              </div>\n            </div>}\n          </div>\n          <div \n          onClick={() => {\n            props.removeAnswerSingleMultiple(props.wholeQuestion, item)\n          }}\n          className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\">Remove</div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default Matching\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (answer_id: string, status: string) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerInterface }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  placeholder=\"Item\"\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n                <input\n                  placeholder=\"Matching\"\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: e.target.value,\n                    });\n                  }}\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from 'react'\nimport { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdBookmark } from 'react-icons/md';\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { validateCalculatedFormula } from '../../../../../../utils/question_bank';\nimport { SelectedKeysEdit } from '../EditQuestion';\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType = props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice ? true : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-start justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"border-b border-gray-300\" : \"\"}`}>\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <div className=\"w-full\">\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.updateAnswerSingleMultiple(\n                check, item.value, {\n                  value: e.target.value,\n                  status: item.status,\n                  id: item.id,\n                }\n              )\n            }}\n            value={`${item.value}`}\n            type=\"text\" \n            className={`${checkCalculateType === true ? validateCalculatedFormula(item.value).status === true ? \"input-gray-lg border-gray-500 focus:border-blue-600\" : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\" : \"input-gray-lg\"} w-full border-2 border-gray-500`} /> \n            <span className={`${validateCalculatedFormula(item.value).status === true ? \"text-green-600\" : \"text-yellow-700\"} text-xs font-bold`}>{validateCalculatedFormula(item.value).msg}</span>\n          </div>:\n          <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n            {item.status === true ?\n            <RiShieldCheckFill className=\"text-2xl text-blue-600\" /> :\n            <MdBookmark className=\"text-2xl text-gray-500\" />}\n            {item.value}\n          </div>}\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n          <div \n            onClick={() => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editSingleMultipleStatus(\n                item.id, !item.status\n              )\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${item.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600 w-40 mt-2`}>\n              {item.status === false ?\n              <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n              <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n              <span className=\"font-bold \">{item.status === true ? \"Correct\" : \"Incorrect\"}</span>\n            </div> :\n            <div className=\"w-28 flex justify-end text-center\">\n              <div className={`font-bold px-3 py-2 rounded-full w-28 ${item.status === true ? \"text-green-600 bg-white\" : \"text-gray-600 bg-white\"}`}>\n                {item.status === true ? \n                  <div className=\"flex flex-row gap-2 items-center\">\n                    <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                  </div> : \n                  <div className=\"flex flex-row gap-2 items-center\">\n                    <FaTimesCircle className=\"text-xl\" /> <span>Incorrect</span>\n                  </div>\n                }\n              </div>\n            </div>}\n          <div \n          onClick={() => {\n            props.removeAnswerSingleMultiple(props.wholeQuestion, item)\n          }}\n          className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\">Remove</div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default MultipleChoice\n","import React, { useState } from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, QuestionLanguages, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { v4 as uuidv4 } from 'uuid';\nimport MultipleChoice from '../AnswersQuestionTypes/MultipleChoice';\nimport { validateCalculatedFormula } from '../../../../../../utils/question_bank';\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<{lang: LanguageInterface; answer: QuestionAnswerInterface}[]>([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType = props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice ? true : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(itm => itm.language === answer.lang.key);\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  }\n  const handleAnswer = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: { value: itm.answer.value, status: status, id: itm.answer.id }\n        })\n      }\n      setAddedAnswer(backup);\n    }\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && \n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      }\n      \n      {showAddAnswerStatus === false ?\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div onClick={() => setShowAddAnswer(true)} className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\">\n          Add answer\n        </div>\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answers\" : \"Question answers\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n        <div className=\"flex flex-col gap-2\">\n        {QuestionLanguages.map((item, i) => (\n          <div key={i + 1}className=\"flex flex-col gap-2\">\n            <span className=\"font-bold text-blue-600\">{item.value}</span>\n            <input \n              value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\"}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n                handleAnswer(\n                  item, \n                  { \n                    id: addedAnswer.length > 0 ? addedAnswer[0].answer.id : uuidv4(),\n                    value: e.target.value, \n                    status: addedAnswer.length > 0 ? addedAnswer[0].answer.status : false\n                  })}\n              type=\"text\" className={`${checkCalculateType === true ? validateCalculatedFormula(addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\").status === true ? \"input-gray-lg border-gray-500 focus:border-blue-600\" : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\" : \"input-gray-lg\"}`} />\n              <span className={`${validateCalculatedFormula(addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\").status === true ? \"text-green-600\" : \"text-yellow-700\"} text-xs font-bold`}>{validateCalculatedFormula(addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\").msg}</span>\n          </div>\n        ))}\n        </div>\n        <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n        <div \n        onClick={() => handleStatus(addedAnswer.length > 0 ? !(addedAnswer[0].answer.status) : false)}\n        className={`flex flex-row items-center gap-2 cursor-pointer ${addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600`}>\n          {addedAnswer.length > 0 && addedAnswer[0].answer.status === false ?\n          <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n          <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n          <span className=\"font-bold text-xl\">{addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"True\" : \"False\"}</span>\n        </div>\n        <div onClick={() => AddAnswer()} className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\">Add</div>\n        <div onClick={() => setShowAddAnswer(false)} className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\">Cancel</div>\n      </div>\n      </div>}\n      {showAddAnswerStatus === false &&\n      <div className=\"rounded bg-white px-2 py-2\">{console.log(props.selectedQuestionType)}\n        {(props.selectedQuestionType === questionTypeElementsType.SingleMultiple || \n        props.selectedQuestionType === questionTypeElementsType.MultipleChoice || \n        props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice) && \n        <MultipleChoice \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          selectedQuestionType={props.selectedQuestionType}\n        />\n        }\n      </div>}\n    </div>\n  )\n}\n\nexport default EditMultipleChoice\n","import React, { Component } from 'react'\nimport { IoShieldCheckmarkSharp } from 'react-icons/io5';\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      numberOfTests: 2,\n    }\n  }\n  \n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\"\n      },\n      {\n        id: 2,\n        value: \"secondnumber\"\n      }\n    ]\n    let defaultNumberOfTests = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n    return (\n      <div className=\"mt-2\">\n        <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RunTest\n","import React from 'react'\nimport { MdBookmark } from 'react-icons/md';\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { validateCalculatedFormula } from '../../../../../../utils/question_bank';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport RunTest from '../RunTest/RunTest';\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div className={`${props.selectedKey === SelectedKeysEdit.QuestionAnswer ? \"\" : \"bg-blue-50\"} -mt-3 px-2 pt-2 pb-1 rounded`}>\n        {props.selectedQuestionItem.answer.map((item, i) => (\n        <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"text-blue-600 font-bold\" : \"\"}`}>\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n          <div className=\"flex flex-col w-full\">\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.updateAnswerSimpleCalculate(\n                check, item.value, {\n                  value: e.target.value,\n                  status: item.status,\n                  id: item.id,\n                }\n              )\n            }}\n            value={`${item.value}`}\n            type=\"text\" \n            className={`w-full border-2 ${validateCalculatedFormula(item.value).status === true ? \"input-gray-lg border-gray-500 focus:border-blue-600\" : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"}`} /> \n            <span className={`${validateCalculatedFormula(item.value).status === true ? \"text-green-600\" : \"text-yellow-700\"} text-xs font-bold`}>{validateCalculatedFormula(item.value).msg}</span>\n            </div>\n            :\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ?\n              <RiShieldCheckFill className=\"text-2xl text-blue-600\" /> :\n              <MdBookmark className=\"text-2xl text-gray-500\" />}\n              {item.value}\n            </div>}\n        </div>))}\n      </div>\n      <RunTest />\n    </div>\n  )\n}\n\nexport default SimpleCalculate\n","import React, { useState } from 'react'\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport { LanguageInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { toNumerical } from '../../../../../DoExam/QuestionDetails/ConvertingAnswers';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { MdError } from 'react-icons/md';\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(props.selectedQuestionItem.answer[0].value[0].toString());\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] = useState<string>(props.selectedQuestionItem.answer[0].value[1].toString());\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div className={`${props.selectedKey === SelectedKeysEdit.QuestionAnswer ? \"\" : \"bg-blue-50\"} -mt-3 px-2 pt-2 pb-1 rounded`}>\n      {toNumerical(props.selectedQuestionItem.answer).map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"text-blue-600 font-bold\" : \"\"}`}>\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <>\n          <div className=\"flex flex-col w-full\">\n            <div>Correct answer</div>\n            <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              setEditQuestionAnswer(e.target.value);\n              if (editQuestionAnswer !== \"\" && !isNaN(parseFloat(editQuestionAnswer))) {\n                props.updateAnswerNumericalValue(\n                  check, item.id, {\n                    value: [parseFloat(e.target.value)],\n                    status: item.status,\n                    id: item.id,\n                  }\n                )\n              }\n            }}\n            value={`${editQuestionAnswer}`}\n            type=\"text\" \n            className=\"input-gray-lg w-full border-2 border-gray-500\" />\n          </div>\n        </> :\n        <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n          <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n          <span>Answer: </span>\n          <span>{item.value[0]}</span>\n        </div>}\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n        <div className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}>\n          <div className=\"flex flex-col w-full\">\n            <div>Error on the answer</div>\n            <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              setEditQuestionAnswerStatus(e.target.value);\n              if (editQuestionAnswerStatus !== \"\" && !isNaN(parseFloat(editQuestionAnswerStatus))) {\n                props.updateAnswerNumericalValue(\n                  check, item.id, {\n                    value: item.value,\n                    status: [parseFloat(e.target.value)],\n                    id: item.id,\n                  }\n                )\n              }\n            }}\n            value={`${editQuestionAnswerStatus}`}\n            type=\"text\" \n            className=\"input-gray-lg w-full border-2 border-gray-500\" />\n          </div>\n        </div> :\n        <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n          <MdError className=\"text-2xl text-gray-500\" />\n          <span className=\"text-gray-500\">Error: </span>\n          <span className=\"text-gray-500\">{item.value[1]}</span>\n        </div>}\n      </div>))}\n    </div>\n  )\n}\n\nexport default Numerical\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\"\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\nexport const modules = {\n  toolbar: {\n    container: \"#toolbar\",\n    handlers: {\n      undo: undoChange,\n      redo: redoChange\n    }\n  },\n  history: {\n    delay: 500,\n    maxStack: 100,\n    userOnly: true\n  }\n};\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\n// Quill Toolbar component\nexport const QuillToolbar = () => (\n  <div id=\"toolbar\">\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answer: QuestionAnswerInterface[];\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answer: this.props.selectedQuestion.answer,\n      selectedLanguage: QuestionLanguages[0],\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n    };\n  }\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.value === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].value === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: res,\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: res,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [editedAnswer.value[0], question.answer[0].value[1]],\n          status: [\n            editedAnswer.value[0] - question.answer[0].value[1],\n            editedAnswer.value[0] + question.answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: newEditedAnswer,\n          });\n        } else {\n          updatedQuestion.push({\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: newEditedAnswer,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: [editedAnswer],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answer.filter((itm) => itm.status === true).length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    // console.log(\"Updated: \", updatedQuestion);\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerInterface\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerInterface[] = current.answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          answer: res,\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (answer_id: string, status: string) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.value === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].value === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: res,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answer: this.state.answer,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({ selectedKey: selectedKey });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n          <ChangeLanguage\n            setSelectedLanguage={this.setSelectedLang}\n            selectedLanguage={this.state.selectedLanguage}\n          />\n        )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col\">\n                  <label className=\"text-gray-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-blue-600 flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() =>\n                      this.setState({ selectedKey: SelectedKeysEdit.Title })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <label className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).description}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setState({\n                        selectedKey: SelectedKeysEdit.Description,\n                      })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course !== null && (\n              <QuestionChapters\n                selectedCourse={\n                  this.props.course.courses &&\n                  this.props.course.courses.find(\n                    (itm) => itm.course_id === this.state.course\n                  )\n                }\n                addedChapters={this.state.chapters}\n                setAddChapter={this.setAddChapter}\n              />\n            )}\n            <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n              <div className=\"\"></div>\n              <div\n                className=\"btn bg-blue-600 text-white cursor-pointer\"\n                onClick={() => this.setState({ showQuestionChapters: false })}\n              >\n                Done\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from 'react'\nimport { MdBookmark } from 'react-icons/md';\nimport { RiShieldCheckFill } from 'react-icons/ri';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css'; // ES6\nimport EditorToolbar, { modules, formats } from \"../../../../../../components/EditorToolbar/EditorToolbar\";\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(\n      check, item.value, {\n        value: value,\n        status: item.status,\n        id: item.id,\n      }\n    )\n  }\n  return (\n    <div className={`${props.selectedKey === SelectedKeysEdit.QuestionAnswer ? \"\" : \"bg-blue-50 px-2\"} -mt-3 pt-2 pb-1 rounded`}>\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"text-blue-600 font-bold\" : \"\"}`}>\n        {props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n          <div className=\"flex flex-col\">\n          <EditorToolbar />\n          <ReactQuill \n            theme=\"snow\"\n            value={`${item.value}`}\n            className=\"rounded mb-10 w-full\"\n            placeholder={\"Write something awesome...\"}\n            modules={modules}\n            formats={formats}\n            onChange={(e) => handleTextChange(e, item)} />\n          </div>\n          :\n          <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n            {item.status === true ?\n            <RiShieldCheckFill className=\"text-2xl text-blue-600\" /> :\n            <MdBookmark className=\"text-2xl text-gray-500\" />}\n            <div dangerouslySetInnerHTML={{__html: item.value}}></div>\n          </div>}\n      </div>))}\n    </div>\n  )\n}\n\nexport default ShortAnswer\n","import React from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport SimpleCalculate from '../AnswersQuestionTypes/SimpleCalculate';\nimport Numerical from '../AnswersQuestionTypes/Numerical';\nimport ShortAnswer from '../AnswersQuestionTypes/ShortAnswer';\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.SimpleCalculate && \n        <SimpleCalculate \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && \n        <Numerical \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.ShortAnswer && \n        <ShortAnswer \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateShortAnswer={props.updateShortAnswer}\n        />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default EditSimpleCalculate\n","import React from 'react'\nimport { RiCheckboxBlankCircleLine } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { MdRadioButtonChecked } from 'react-icons/md';\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"}`}>\n        <div \n          onClick={() => {\n            let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n            if (check === undefined) {\n              check = props.wholeQuestion[0];\n            }\n            props.editTrueFalseStatus(\n              item.id, !item.status\n            )\n          }}\n          className={`flex flex-row items-center gap-2 cursor-pointer ${item.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600 w-40`}>\n            {item.status === false ?\n            <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" /> :\n            <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default TrueFalse\n","import React, { useState } from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, QuestionLanguages, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { v4 as uuidv4 } from 'uuid';\nimport TrueFalse from '../AnswersQuestionTypes/TrueFalse';\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<{lang: LanguageInterface; answer: QuestionAnswerInterface}[]>([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(itm => itm.language === answer.lang.key);\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  }\n  const handleAnswer = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: { value: itm.answer.value, status: status, id: itm.answer.id }\n        })\n      }\n      setAddedAnswer(backup);\n    }\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && \n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      }\n      \n      {showAddAnswerStatus === false ?\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n        <div className=\"flex flex-col gap-2\">\n        {QuestionLanguages.map((item, i) => (\n          <div key={i + 1}className=\"flex flex-col gap-2\">\n            <span className=\"font-bold text-blue-600\">{item.value}</span>\n          <input \n            value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n              handleAnswer(\n                item, \n                { \n                  id: addedAnswer.length > 0 ? addedAnswer[0].answer.id : uuidv4(),\n                  value: e.target.value, \n                  status: addedAnswer.length > 0 ? addedAnswer[0].answer.status : false\n                })}\n            type=\"text\" className=\"input-gray-lg\" />\n          </div>\n        ))}\n        </div>\n        <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n        <div \n        onClick={() => handleStatus(addedAnswer.length > 0 ? !(addedAnswer[0].answer.status) : false)}\n        className={`flex flex-row items-center gap-2 cursor-pointer ${addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600`}>\n          {addedAnswer.length > 0 && addedAnswer[0].answer.status === false ?\n          <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n          <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n          <span className=\"font-bold text-xl\">{addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"True\" : \"False\"}</span>\n        </div>\n        <div onClick={() => AddAnswer()} className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\">Add</div>\n        <div onClick={() => setShowAddAnswer(false)} className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\">Cancel</div>\n      </div>\n      </div>}\n      {showAddAnswerStatus === false &&\n      <div className=\"rounded bg-white px-2 pb-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.TrueFalse && \n        <TrueFalse \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editTrueFalseStatus={props.editTrueFalseStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n        />\n        }\n      </div>}\n    </div>\n  )\n}\n\nexport default EditTrueFalse\n","import React from 'react'\nimport { LanguageInterface, MatchingQuestionAnswerInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../interfaces/question';\nimport { SelectedKeysEdit } from './EditQuestion';\nimport EditMatching from './EditQuestionTypes/EditMatching';\nimport EditMultipleChoice from './EditQuestionTypes/EditMultipleChoice';\nimport EditSimpleCalculate from './EditQuestionTypes/EditSimpleCalculate';\nimport EditTrueFalse from './EditQuestionTypes/EditTrueFalse';\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: MatchingQuestionAnswerInterface) => void;\n  editMatchingStatus: (answer_id: string, status: string) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (question: QuestionItemInterface, addedAnswer: MatchingQuestionAnswerInterface) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>{console.log(props.selectedQuestionType)}\n      {(props.selectedQuestionType === questionTypeElementsType.SingleMultiple || \n        props.selectedQuestionType === questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType === questionTypeElementsType.CalculatedMultipleChoice) && \n        <EditMultipleChoice \n          selectedQuestionType={props.selectedQuestionType} \n          selectedQuestionItem={props.selectedQuestionItem} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedKey={props.selectedKey}  \n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      }\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse &&\n      <EditTrueFalse\n        selectedQuestionType={props.selectedQuestionType} \n        selectedQuestionItem={props.selectedQuestionItem} \n        wholeQuestion={props.wholeQuestion} \n        selectedLanguage={props.selectedLanguage} \n        updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n        addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n        removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n        selectedKey={props.selectedKey}  \n        setSelectedKey={props.setSelectedKey}\n        editTrueFalseStatus={props.editTrueFalseStatus} \n        marks={props.marks}\n        updateMarks={props.updateMarks}\n      />}\n      {props.selectedQuestionType === questionTypeElementsType.Matching &&\n      <EditMatching\n        selectedQuestionType={props.selectedQuestionType} \n        selectedQuestionItem={props.selectedQuestionItem} \n        wholeQuestion={props.wholeQuestion} \n        selectedLanguage={props.selectedLanguage} \n        updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n        addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n        addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n        removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n        selectedKey={props.selectedKey}  \n        setSelectedKey={props.setSelectedKey}\n        editMatchingValue={props.editMatchingValue}\n        editMatchingStatus={props.editMatchingStatus}\n        marks={props.marks}\n        updateMarks={props.updateMarks}\n      />}\n      {(props.selectedQuestionType === questionTypeElementsType.SimpleCalculate ||\n      props.selectedQuestionType === questionTypeElementsType.Numeric ||\n      props.selectedQuestionType === questionTypeElementsType.ShortAnswer\n      ) &&\n        <EditSimpleCalculate \n          selectedQuestionType={props.selectedQuestionType} \n          selectedQuestionItem={props.selectedQuestionItem} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedKey={props.selectedKey}  \n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      }\n    </div>\n  )\n}\n\nexport default QuestionAnswer\n","import React from 'react'\nimport { LanguageInterface, QuestionItemInterface } from '../../../../../interfaces';\nimport { SelectedKeysEdit } from './EditQuestion';\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n  return (\n    <div>\n      {props.languages.map((item, i) => (\n        <div className=\"flex flex-row items-center animate__animated animate__fadeInDown animate__fast\">\n          <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n            {item.value}\n          </span>\n          <input \n            key={i + 1}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              let check = props.questionItems.find(itm => itm.language === item.key);\n              if (check === undefined) {\n                check = props.questionItems[0];\n              }\n              props.handleUpdateQuestionDetails({\n                description: check.description,\n                language: check.language,\n                status: check.status,\n                title: e.target.value,\n                answer: check.answer\n              })\n            }}\n            value={props.questionItems.find(itm => itm.language === item.key)?.title}\n            type=\"text\" className=\"input-gray-lg w-full mt-3\" />\n        </div>\n      ))}\n    </div>\n  )} else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-row items-center animate__animated animate__fadeInDown animate__fast\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <textarea \n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(itm => itm.language === item.key);\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer\n                })\n              }}\n              value={props.questionItems.find(itm => itm.language === item.key)?.description}\n              className=\"input-gray-lg w-full mt-3\"></textarea>\n          </div>\n        ))}\n      </div>\n    )} else {\n      return <div></div>\n    }\n}\n\nexport default HandleInput\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { course } from '../../../../../interfaces'\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    )\n  }\n  else if (props.selectedCourse !== undefined && props.selectedCourse !== null && props.selectedCourse.chapters?.length === 0) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} - {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined && props.selectedCourse.chapters.length === 0 ? \n          <div>No chapters found!</div>:\n          props.selectedCourse.chapters && props.selectedCourse.chapters.map((item, i) => (\n            <div \n            onClick={() => props.setAddChapter(item.id)}\n            className={`${props.addedChapters.find(itm => itm === item.id) ? \"text-blue-600\" : \"text-gray-600\"} border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}>\n              {props.addedChapters.find(itm => itm === item.id) ? \n              <ImCheckboxChecked className=\"text-2xl cursor-pointer\" /> :\n              <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />}\n              <span>{item.name}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default QuestionChapters\n","import React, { useState } from 'react'\nimport { MdLanguage } from 'react-icons/md';\nimport { RiCloseCircleFill } from 'react-icons/ri'\nimport { LanguageInterface, QuestionLanguages } from '../../interfaces/question'\nimport { CgMoreO } from 'react-icons/cg';\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(false);\n  // const [minimize, setMinimize] = useState<boolean>(true);\n  return (\n    <div className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${visible === false ? \"text-blue-800\" : \"text-white\"} hover:text-white rounded-t-lg w-auto ${visible === true ? \"animate__animated animate__fadeInUp animate__faster\" : \"animate__animated animate__fadeInDown animate__faster\"} bg-white`}>\n      <div className={`flex flex-col px-3 py-2 rounded-t-lg ${visible === true ? \"bg-blue-700\" : \"bg-white shadow-lg border border-gray-300\"} hover:bg-blue-800 cursor-pointer`}>\n        <div className=\"flex flex-row items-center justify-between\">\n          <div onClick={() => setVisible(!visible)} className=\"font-bold text-lg flex flex-row gap-2 items-center\">\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? \n          <div className=\"flex flex-row items-center\">\n            <CgMoreO onClick={() => setVisible(!visible)} className=\"text-2xl ml-3\" /> \n            {/* <AiOutlineMinusCircle onClick={() => setMinimize(false)} className=\"text-2xl\" /> */}\n          </div>\n          :\n          <RiCloseCircleFill onClick={() => setVisible(!visible)} className=\"text-3xl ml-3 -my-5 text-yellow-300\" />}\n        </div>\n      </div>\n      {visible && <div className={`flex flex-col`}>\n        <div className=\"\">\n          {QuestionLanguages.map((item, i) => (\n            <div onClick={() => props.setSelectedLanguage(item )} key={i + 1}\n            className={`flex flex-row items-center justify-start ${props.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\" : \"rounded m-2 text-white\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n              {item.value}\n            </div>\n          ))}\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nexport default ChangeLanguage\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { Fragment, useState } from 'react'\nimport { CgDetailsMore } from 'react-icons/cg'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { IoMdTrash } from 'react-icons/io'\nimport { MdEdit } from 'react-icons/md'\nimport { questionTypesStoreInterface } from '../../actions/questionTypes'\nimport EditQuestion from '../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion'\nimport { QuestionInterface } from '../../interfaces/question'\nimport Modal, { ModalSize, Themes } from '../Modal/Modal'\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  }\n  return (\n    <Fragment>\n      <div onClick={() => props.select === true && props.callBack(props.question)} className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"} hover:border-blue-600 mb-3`}>\n        <div className=\"flex flex-row items-center justify-between w-full\">\n          <div className=\"flex flex-row items-center gap-3\">\n            <div>\n              {props.select === false ? \n              <div className=\"font-bold text-blue-600\">\n                ({props.number})\n              </div> :\n              props.status === true ?\n              <ImCheckboxChecked className=\"text-xl text-blue-600\" /> :\n              <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />}\n            </div>\n            <div className=\"flex flex-col truncate\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">{props.questionTypes.questionTypes && props.questionTypes.questionTypes.find(itm => itm.id && itm.id === props.question.type)?.title}</span>\n              <span className=\"font-bold\">{props.question.question[0].title}</span>\n              <span className=\"truncate text-xs\">{props.question.question[0].description}</span>\n            </div>\n          </div>\n          {props.select === false &&\n          <div className=\"flex flex-row items-center gap-2\">\n            <div \n            onClick={() => alert(\"Details\")} \n            className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\">\n              <CgDetailsMore className=\"text-3xl text-gray-700\"/>\n            </div>\n            <div \n            onClick={() => setEditMode(true)} \n            className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\">\n              <MdEdit className=\"text-3xl text-blue-700\"/>\n            </div>\n            <div \n            onClick={() => props.select === false && props.callBack(props.question)} \n            className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\">\n              <IoMdTrash className=\"text-3xl text-yellow-700\"/>\n            </div>\n          </div>}\n        </div>\n      </div>\n      {editMode === true &&\n      <Modal\n        title=\"\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => setEditMode(false)}\n        backDropClose={true}\n        widthSizeClass={ModalSize.extraLarge}\n        displayClose={false}\n        padding={{title: false,}}>\n          <div className=\"pt-0\">\n            <EditQuestion \n              selectedQuestion={props.question} \n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion} \n            />\n          </div>\n      </Modal>}\n    </Fragment>\n  )\n}\n\nexport default QuestionItem\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      this.props.loadExamsList(this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Confirm preparation\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.props.setSelectedPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n})(_PrepareExam);\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length !== 0\n    ) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.props.loadExamsList(this.props.setLoadingProps);\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.selectedCourse === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Confirm preparation\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.props.setSelectedPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n})(_EditExam);\n"],"sourceRoot":""}