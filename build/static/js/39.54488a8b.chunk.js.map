{"version":3,"sources":["utils/question_bank.ts","containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","components/Courses/Courses.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","components/Questions/QuestionItem.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","CoursesAction","Courses","connect","auth","periods","schoolLevels","system","loadApplicationPeriods","setSelectedPeriod","loadSchoolLevels","setSelectedEducationCategory","PushPopupAlert","loadCourses","setSelectedCourse","props","useState","loading","setLoading","addNew","setAddNew","search","setSearch","selectedCourse","setSelectedCourseComp","course_selected","deleteCourseFn","a","axios","delete","API","APPLICATION","title","theme","PopupAlertTheme","success","warning","console","log","useEffect","school_levels","className","onClick","onChange","e","target","value","placeholder","searchData","map","item","course_name","description","action","View","Update","Delete","backDrop","Themes","default","close","widthSizeClass","ModalSize","extraLarge","displayClose","backDropClose","padding","body","closeModal","state","deleteSelected","chaptersOnly","medium","_UploadQuestion","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","period","filteredCourses","searched","filtered","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","searchCourseInput","this","education_category_title","school_level_name","education_categories","loadEducationCategories","style","minHeight","selected_course_id","course_code","educationCategories","Component","UploadQuestion","questionBank","AddCourse","setCourse_id","setCourse_name","setCourse_code","setDescription","chapters","setChapters","setSchool_levels","formError","setFormError","openAdd","chapter","addChapter","setAddChapter","submitCourse","preventDefault","obj","patch","info","post","data","errors","message","danger","onSubmit","disabled","name","uuidv4","addNewChapter","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","toMatching","selectedQuestionItem","answers","answer","selectedKey","QuestionAnswer","wholeQuestion","language","selectedLanguage","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","marks","setSelectedKey","QuestionLanguages","lang","checkAns","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","toNumerical","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","_id","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","window","confirm","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","questionAnswers","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","addedChapters","ChangeLanguage","languagesList","visible","setVisible","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","selectedQuestion","question","langItem","testLangQ","l","QuestionLang","actionStatus","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","question_id","customNumber","is_deleted","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","questionLangs","testing","Loading","LoadingType","white","Modal","large","selected_course","courseDetail","EditQuestion","prepareExam","setUploadedQuestions","SchoolLevelSelect","height","x","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","QuestionItem","editMode","setEditMode","setSelectedQuestion","select","callBack","number","questionsList","answerQuestionFn","preview","submitQuestionAnswer","Questions","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","questions","temp","to","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","actionType","changeProctoringRule","proctoringRules","newData","selected","addQuestionToPaper","removeToQuestionPaper","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","is_active","formErr","selectCourse","currentStep","StepStatus","Step1","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","validateTwoTime","QBank","exam_status","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","redirectToExams","applicationPeriods","examsList","loadExamsListByPeriod","application_session","editQuestion","total","handleChangeTermes","setSelectCourse","setSelectPeriod","GetExamsByPeriod","Prepare","addQuestionModal","submitExam","qts","stepStatus","NoResultThemes","Dark","AlertInterface","PrepareExam","loadExamsList","PrepareExamSteps","Steps","session_plan_name","Switch","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/39.54488a8b.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      {\n        editMode === false ? (\n          <div\n            onClick={() =>\n              props.select === true && props.callBack(props.question)\n            }\n            className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n              props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n            } hover:border-blue-600 mb-3`}\n          >\n            <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n              <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n                <div>\n                  {props.select === false ? (\n                    <div className=\"font-bold text-blue-600\">\n                      ({props.number})\n                    </div>\n                  ) : props.status === true ? (\n                    <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n                  ) : (\n                    <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className=\"text-xs text-blue-600 font-bold w-max\">\n                    {props.questionTypes.questionTypes &&\n                      props.questionTypes.questionTypes.find(\n                        (itm) => itm.id && itm.id === props.question.type\n                      )?.title}\n                  </span>\n                  <span className=\"font-bold\">\n                    {props.question.question[0].title}\n                  </span>\n                  <div\n                    className=\"w-full text-xs\"\n                    dangerouslySetInnerHTML={{\n                      __html: props.question.question[0].description,\n                    }}\n                  ></div>\n                </div>\n              </div>\n              {props.select === false && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => setSelectedQuestion(props.question)}\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() => setEditMode(true)}\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.select === false && props.callBack(props.question)\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          // <Modal\n          //   title=\"\"\n          //   backDrop={true}\n          //   theme={Themes.default}\n          //   close={() => setEditMode(false)}\n          //   backDropClose={true}\n          //   widthSizeClass={ModalSize.extraLarge}\n          //   displayClose={false}\n          //   padding={{ title: false }}\n          // >\n          <div className=\"pt-0 fixed top-0 z-50 left-0 h-full overflow-scroll animate__animated animate__zoomIn shadow-xl bg-white w-full\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        )\n        // </Modal>\n      }\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n\nexport interface ExamItemResponseFull {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  course_id: string;\n  course_code: string;\n  course_name: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.setLoading\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) =>\n              itm.period === this.props.periods.selected_period?.session_plan_id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => {\n              if (\n                this.props.periods.selected_period !== null &&\n                this.props.periods.selected_period.is_active === true\n              ) {\n                this.setState({ selectPeriod: false });\n              } else {\n                alert(\"Please choose active session\");\n              }\n            }}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n})(_PrepareExam);\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}