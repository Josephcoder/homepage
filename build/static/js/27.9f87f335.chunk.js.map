{"version":3,"sources":["containers/PrepareExam/ExamsList/ExamDetails.tsx","containers/PrepareExam/ExamsList/ExamsList.tsx","utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","components/Courses/Courses.tsx","components/QuestionPreview/QuestionPreview.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/Essay.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","components/Questions/QuestionItem.tsx","containers/DoExam/QuestionDetails/Answers/AnswersTypesCollection.tsx","containers/DoExam/QuestionDetails/Answers/HybridAnswers.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/PrepareExam/EditExam/EditExam.tsx"],"names":["ExamDetails","props","className","course","courses","find","itm","course_id","exam","course_code","course_name","onClick","setSelectedExam","style","height","exam_total_marks","DATE","exam_date","start_time","end_time","duration","questions","length","periods","applicationPeriods","session_plan_id","period","session_plan_name","discription","dangerouslySetInnerHTML","__html","termes","rules","allow_to_leave_browser","copy_enabled","paste_enabled","right_click_enabled","stop_candidate_when_comeback","validateExamDate","ExamTimeStatus","Online","createdAt","setSelectedExamEdit","Waiting","alert","_ExamsList","setLoading","status","setState","loading","addQuestionToPaper","question","addExamQuestion","removeToQuestionPaper","window","confirm","showPeriodFilter","selectPeriod","chooseCourse","myCourse","conf","prepareExam","x","setSelectedCourse","selectCourse","examQuestionsIds","ids","question_id","examsByPeriod","Exam","temp","filter","item","selected_period","newRes","push","undefined","exam_status","questions_per_page","number_format","updatedAt","id","componentDidMount","questionTypes","loadQuestionTypes","loadApplicationPeriods","loadCourses","questionBank","selected_course","loadQuestionBank","loadExamsListByPeriod","auth","application_session","setSelectedExamItem","selectedExam","examToEdit","setUploadingStatus","GetExamsByPeriod","setSelectedPeriod","state","addQuestionModal","formErr","element","msg","QuestionNumberFormat","NUMBER","search","this","is_active","to","Loading","colSpan","onChange","e","target","value","type","placeholder","examsList","searchData","map","i","title","EditExam","selectedCourse","loadExamsList","setLoadingProps","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","large","displayClose","padding","Courses","selected_course_id","Questions","callBack","questionsList","questionPaper","ApplicationPeriods","Component","ExamsList","connect","schoolLevels","system","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","PushPopupAlert","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","check","check_type","questionTypeElements","key","findTotalMarks","results","sum","test","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","el","nextCharacter","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","getTime","InitializeExamsDone","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","toMultipleChoice","answers","answer","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","_UploadQuestion","setSearchLevel","educationCategory","schoolLevel","searchLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","uploadingStatus","searchCourseInput","education_category_title","school_level_name","education_categories","minHeight","medium","educationCategories","UploadQuestion","EmbeddedQuestion","selectedQuestion","language","questionAnswers","addAnswer","newTextResult","findQuestionType","questionTypeElementsType","Embedded","answeredQuestions","userQuestionAnswers","originalText","description","reference","sub_question","data","answerCheck","answered","QuestionForEmbedded","SingleMultiple","select","_id","ShortAnswer","returnSelect","typeShort","QuestionPreview","doExam","setSelectedExamQuestion","setQuestionLanguage","useState","selectLang","setSelectLang","selectedLanguage","setSelectedLanguage","filterLanguages","langs","langItem","testLangQ","QuestionLanguages","l","useEffect","LoadingType","white","marks","width","question_answers","Hybrid","MultipleChoice","available_answers","selectedQuestionAnswer","selectedAns","answerQuestionFn","TrueFalse","candidate_exam","Matching","shuffledAnswers","Shuffle","SimpleCalculate","Numeric","CalculatedMultipleChoice","Essay","wholeQuestion","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","MatchingAnswers","selectedQuestionItem","selectedKey","QuestionAnswer","editMatchingValue","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","setSelectedKey","lang","checkAns","uuidv4","selectedQL","addAnswerMatchingQuestion","AddAnswer","console","log","selectedQuestionType","updateAnswerSingleMultiple","checkCalculateType","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","handleStatus","addAnswerSingleMultiple","RunTest","numberOfTests","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","updateShortAnswer","handleTextChange","rows","updateEssayAnswer","EditSimpleCalculate","updateAnswerNumerical","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","setShowLanguages","newSubQuestion","newSubQuestions","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","chapters","setAddChapter","addedChapters","name","ChangeLanguage","languagesList","visible","setVisible","_EditQuestion","showLanguages","QuestionLang","actionStatus","PopupAlertTheme","success","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","a","addedQuestion","customNumber","is_deleted","UpdateQuestion","unSelectQuestion","showQuestionChapters","setSelectedLang","questionLangs","testing","onSubmit","EditQuestion","checkAnswer","checkA","tes","addAnswerItemFn","newAnswers","questionAnswer","oldAnswers","selAns","tester","newAnswersMultiple","xItem","SimpleCalculated","answeredValue","checkB","getRandomArbitrary","MatchingSelect","closeWindow","findWord","checkIfSelected","displayWindow","setDisplayWindow","setSelectedAnswer","selectedQuestionId","selectedLang","ansi","testLang","checkE","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","QuestionItem","editMode","setEditMode","setSelectedQuestion","number","extraLarge","preview","submitQuestionAnswer","AnswersTypesCollection","HybridAnswers","stri","String","fromCharCode","charCodeAt","hybrid","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","actionType","changeProctoringRule","proctoringRules","newData","selected","setStep","step","PrepareExamStepsEnum","Step2","currentStep","StepStatus","Step1","duration_hours","duration_minutes","submitExamPreparation","validateTwoTime","axios","post","API","QBank","Created","redirectToExams","errors","message","editQuestion","total","handleChangeTermes","setSelectCourse","setSelectPeriod","Prepare","submitExam","qts","stepStatus","disabled","NoResultThemes","Dark","AlertInterface","body","PrepareExam","PrepareExamSteps","Steps","Switch","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random","_EditExam","addEditExamQuestion","put","findExamDetails","DATE_DATA"],"mappings":"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","file":"static/js/27.9f87f335.chunk.js","sourcesContent":["import React from \"react\";\nimport { GoTrashcan } from \"react-icons/go\";\nimport { MdClose, MdEdit } from \"react-icons/md\";\nimport {\n  applicationPeriodsStoreInterface,\n  courseStoreInterface,\n} from \"../../../actions\";\nimport { ExamItemResponse } from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\ninterface ExamDetailsProps {\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  exam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  setSelectedExamEdit: (exam: ExamItemResponse | null) => void;\n}\n\nconst ExamDetails = (props: ExamDetailsProps) => {\n  return (\n    <div className=\"fixed h-full w-full bg-black bg-opacity-50 top-0 left-0 flex items-center justify-center z-50 animate__animated animate__fadeIn animate__faster overflow-y-auto\">\n      <div className=\"group absolute right-0 bg-white shadow-xl w-3/4 md:w-2/4 border z-50 h-full animate__animated animate__fadeInRight animate__faster\">\n        <div className=\"bg-white text-blue-700 font-bold text-2xl flex flex-row justify-between gap-3 items-center px-3 py-3\">\n          <div>\n            <span className=\"font-bold\">\n              {props.course.courses &&\n                props.course.courses.find(\n                  (itm) => itm.course_id === props.exam.course\n                )?.course_code}\n            </span>\n            -\n            {props.course.courses &&\n              props.course.courses.find(\n                (itm) => itm.course_id === props.exam.course\n              )?.course_name}\n          </div>\n          <div\n            onClick={() => props.setSelectedExam(null)}\n            className=\"text-2xl text-red-600 bg-red-50 group-hover:bg-red-100 rounded-full p-1 cursor-pointer\"\n          >\n            <MdClose />\n          </div>\n        </div>\n        <div\n          className=\"px-3 py-6 text-sm overflow-y-auto bg-gray-100\"\n          style={{ height: \"80vh\" }}\n        >\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam total marks</span>\n            <span className=\"text-blue-800 font-bold bg-blue-100 rounded-full px-2\">\n              {props.exam.exam_total_marks}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam date</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.exam_date)}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam start time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.start_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam ending time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.end_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam duration</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.duration}mins\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam number of questions</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.questions.length}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam period</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.periods.applicationPeriods &&\n                props.periods.applicationPeriods.find(\n                  (itm) => itm.session_plan_id === props.exam.period\n                )?.session_plan_name}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam description</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.discription}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam terms and conitions</span>\n            <div\n              dangerouslySetInnerHTML={{ __html: props.exam.termes }}\n              className=\"text-blue-600 font-bold\"\n            ></div>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600 mb-2\">Exam rules</span>\n            <div className=\"text-blue-600 font-bold bg-white rounded\">\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Leave browser</span>\n                <span\n                  className={`${\n                    props.exam.rules.allow_to_leave_browser === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.allow_to_leave_browser === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Copy</span>\n                <span\n                  className={`${\n                    props.exam.rules.copy_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.copy_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Paste</span>\n                <span\n                  className={`${\n                    props.exam.rules.paste_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.paste_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Right click</span>\n                <span\n                  className={`${\n                    props.exam.rules.right_click_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.right_click_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Come back after leaving room</span>\n                <span\n                  className={`${\n                    props.exam.rules.stop_candidate_when_comeback === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.stop_candidate_when_comeback === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam status</span>\n            <span\n              className={`${\n                validateExamDate(\n                  props.exam.exam_date,\n                  props.exam.start_time,\n                  props.exam.end_time\n                ) === ExamTimeStatus.Online\n                  ? \"text-green-600 font-bold bg-green-100\"\n                  : \"text-yellow-600 font-bold bg-yellow-100\"\n              } rounded-full px-3 py-1`}\n            >\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              )}\n            </span>\n          </div>\n\n          <div className=\"flex flex-row items-center justify-between py-3\">\n            <span className=\"text-gray-600\">Exam created at</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.createdAt)}\n            </span>\n          </div>\n        </div>\n        <div className=\"bg-white p-3 pt-0 rounded-b mt-5 absolute bottom-0 w-full\">\n          {\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 my-2\">\n              <div\n                onClick={() => props.setSelectedExamEdit(props.exam)}\n                className=\"bg-blue-100 hover:bg-blue-600 hover:text-white rounded p-3 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-blue-800\"\n              >\n                <div>\n                  <MdEdit className=\"text-2xl\" />\n                </div>\n                <span className=\"text-base\">Edit</span>\n              </div>\n              <div></div>\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              ) === ExamTimeStatus.Waiting ? (\n                <div\n                  onClick={() => alert(\"Deleted\")}\n                  className=\"bg-red-50 hover:bg-red-600 hover:text-white rounded p-3 border border-red-50 group-hover:border-red-100 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-red-800\"\n                >\n                  <div>\n                    <GoTrashcan className=\"text-2xl\" />\n                  </div>\n                  <span className=\"text-base\">Remove</span>\n                </div>\n              ) : (\n                <div></div>\n              )}\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExamDetails;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport {\n  ExamItemResponse,\n  ExamItemResponseFull,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { Link } from \"react-router-dom\";\nimport ExamDetails from \"./ExamDetails\";\nimport { EditExam } from \"../EditExam/EditExam\";\nimport { validateExamDate } from \"../../../utils/question_bank\";\nimport searchData from \"../../../utils/search\";\n\ninterface ExamsListProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedExam: (exam: ExamItemResponse) => void;\n}\ninterface ExamsListState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  selectedExam: ExamItemResponse | null;\n  examToEdit: ExamItemResponse | null;\n  search: string;\n}\n\nclass _ExamsList extends Component<ExamsListProps, ExamsListState> {\n  constructor(props: ExamsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      duration: 1,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      selectedExam: null,\n      examToEdit: null,\n      search: \"\",\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  examsByPeriod = (Exam: ExamItemResponse[]): ExamItemResponseFull[] => {\n    let temp = Exam.filter(\n      (item) =>\n        item.period === this.props.periods.selected_period?.session_plan_id\n    );\n    let newRes: ExamItemResponseFull[] = [];\n    for (let item of temp) {\n      newRes.push({\n        questions: item.questions,\n        exam_total_marks: item.exam_total_marks,\n        status: item.status,\n        period: item.period,\n        course: item.course,\n        course_id: item.course,\n        course_code:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_code,\n        course_name:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_name,\n        exam_status: item.exam_status,\n        termes: item.termes,\n        questions_per_page: item.questions_per_page,\n        exam_date: item.exam_date,\n        start_time: item.start_time,\n        end_time: item.end_time,\n        duration: item.duration,\n        number_format: item.number_format,\n        discription: item.discription,\n        createdAt: item.createdAt,\n        updatedAt: item.updatedAt,\n        id: item.id,\n        rules: item.rules,\n      });\n    }\n    return newRes;\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    // if (this.props.course.selected_course === null) {\n    //   this.setState({ selectCourse: true });\n    // }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n    // if (this.props.prepareExam.examsList === null || this.props.prepareExam.examsList.length === 0) {\n    if (this.props.periods.selected_period !== null) {\n      this.props.loadExamsListByPeriod(\n        this.props.periods.selected_period.session_plan_id,\n        this.setLoading\n      );\n    } else {\n      this.props.auth.application_session &&\n        this.props.loadExamsListByPeriod(\n          this.props.auth.application_session.session_plan_id,\n          this.setLoading\n        );\n    }\n    // }\n  };\n  setSelectedExamItem = (exam: ExamItemResponse | null) => {\n    this.setState({ selectedExam: exam });\n  };\n  setSelectedExamEdit = (exam: ExamItemResponse | null) => {\n    this.setState({ examToEdit: exam });\n    if (exam === null) {\n      this.setState({ selectedExam: null });\n    }\n  };\n  setUploadingStatus = (status: boolean) => {\n    alert(\"Hello\");\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n  };\n  render() {\n    return (\n      <Fragment>\n        {this.state.examToEdit === null ? (\n          <div>\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-row items-center\">\n                  {/* <RiFilePaperFill className=\"text-7xl text-blue-600\" /> */}\n                  <div className=\"flex flex-col px-2\">\n                    <span className=\"text-gray-600 text-2xl font-bold\">\n                      List of exams\n                    </span>\n                    <span className=\"text-blue-600 text-sm font-bold mt-1\">\n                      Period:{\" \"}\n                      {this.props.periods.selected_period === null ? (\n                        <span className=\"text-yellow-700 italic\">\n                          Not selected!\n                        </span>\n                      ) : (\n                        `${\n                          this.props.periods.selected_period.session_plan_name\n                        } - ${\n                          this.props.periods.selected_period.is_active === true\n                            ? \"Active\"\n                            : \"Not valid!\"\n                        }`\n                      )}\n                    </span>\n                    {/* <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span> */}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.setState({ selectPeriod: true })}\n                    className={`btn ${\n                      this.props.periods.selected_period === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 border border-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    {this.props.periods.selected_period === null\n                      ? \"Choose period\"\n                      : \"Change period\"}\n                  </div>\n                  <Link\n                    to=\"prepare-exam\"\n                    className={`btn bg-blue-600 text-white h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    Prepare exam\n                  </Link>\n                </div>\n              </div>\n            </div>\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Loading exams list, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                <div className=\"w-full overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-blue-50 font-bold text-gray-800\">\n                      <tr>\n                        <td className=\"py-2 pl-2 font-bold\">#</td>\n                        <td className=\"py-2\">Course</td>\n                        <td className=\"py-2\">Exam date</td>\n                        <td className=\"py-2\">Start time</td>\n                        <td className=\"py-2\">End time</td>\n                        <td className=\"py-2\">Exam duration</td>\n                        <td className=\"py-2\">Exam</td>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td colSpan={7}>\n                          <input\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => this.setState({ search: e.target.value })}\n                            type=\"text\"\n                            className=\"input-white border border-gray-500 my-2\"\n                            placeholder=\"Search\"\n                            value={this.state.search}\n                          />\n                        </td>\n                      </tr>\n                      {this.props.prepareExam.examsList === null ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).length === 0 ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <div className=\"rounded bg-gray-100 px-3 py-3 flex items-center justify-center\">\n                              No exams found!\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).map((item, i) => (\n                          <tr\n                            title=\"Click to view details\"\n                            onClick={() =>\n                              this.setState({ selectedExam: item })\n                            }\n                            key={i + 1}\n                            className={`border-b border-gray-300 text-sm hover:bg-blue-50 cursor-pointer hover:border-blue-300`}\n                          >\n                            <td className=\"pl-2 px-2 font-bold\">{i + 1}</td>\n                            <td className=\"py-2\">\n                              <span className=\"font-bold\">\n                                {item.course_code}\n                              </span>\n                              -{item.course_name}\n                            </td>\n                            <td className=\"py-2\">\n                              {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                            </td>\n                            <td className=\"py-2\">{item.start_time}</td>\n                            <td className=\"py-2\">{item.end_time}</td>\n                            <td className=\"py-2 font-bold text-blue-600\">\n                              {item.duration}mins\n                            </td>\n                            <td className=\"py-2\">\n                              {validateExamDate(\n                                item.exam_date,\n                                item.start_time,\n                                item.end_time\n                              )}\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                  {this.state.selectedExam !== null && (\n                    <ExamDetails\n                      course={this.props.course}\n                      periods={this.props.periods}\n                      exam={this.state.selectedExam}\n                      setSelectedExam={this.setSelectedExamItem}\n                      setSelectedExamEdit={this.setSelectedExamEdit}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          this.props.course.courses &&\n          this.props.course.courses.find(\n            (itm) =>\n              this.state.examToEdit &&\n              itm.course_id === this.state.examToEdit.course\n          ) !== undefined && (\n            <EditExam\n              selectedCourse={\n                this.props.course.courses.find(\n                  (itm) =>\n                    this.state.examToEdit &&\n                    itm.course_id === this.state.examToEdit.course\n                )!\n              }\n              selectedExam={this.state.examToEdit}\n              setSelectedExam={this.setSelectedExamEdit}\n              setUploadingStatus={this.setUploadingStatus}\n              loadExamsList={this.props.loadExamsList}\n              setLoadingProps={this.setLoading}\n            />\n          )\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const ExamsList = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n})(_ExamsList);\n","import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toEmbedded,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\nimport Essay from \"../../containers/DoExam/QuestionDetails/Answers/Essay\";\nimport {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n  regExEmbedded,\n} from \"@mastrecruit/common\";\nimport Embedded from \"../../containers/DoExam/QuestionDetails/Answers/Embedded\";\nimport Hybrid from \"../../containers/DoExam/QuestionDetails/Answers/Hybrid\";\nimport HybridAnswers from \"../../containers/DoExam/QuestionDetails/Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst returnSelect = (\n  data: QuestionAnswerInterface,\n  type: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid,\n  questionAnswers: QuestionAnswerInterface[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let answers: QuestionAnswerFormat[] = [];\n  for (let answer of data.answer) {\n    answers.push({\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    });\n  }\n  let answerCheck: QuestionAnswerInterface | undefined = questionAnswers.find(\n    (itm) => itm.reference === data.reference\n  );\n  let answered: QuestionAnswerFormat[] = [];\n  if (answerCheck !== undefined) {\n    answered = answerCheck.answer;\n  }\n  if (answers.length > 0) {\n    if (type === QuestionForEmbedded.SingleMultiple) {\n      return (\n        <span className=\"w-max\">\n          <select\n            className={`px-3 py-2 rounded text-base max-w-full border border-gray-300 ${\n              answered.length !== 0 &&\n              answers.find((itm) => itm.id === answered[0].id) !== undefined\n                ? \"text-blue-600 font-bold\"\n                : \"text-gray-700 font-bold\" //Example of condition of changing color\n            }`}\n            value={answered.length === 0 ? \"\" : answered[0].id}\n            onChange={(e) => {\n              let select = answers.find((itm) => itm.id === e.target.value);\n              if (select !== undefined) {\n                addAnswer({\n                  _id: data._id,\n                  reference: data.reference,\n                  answer: [\n                    {\n                      id: select.id,\n                      value: select.value,\n                      status: select.status,\n                    },\n                  ],\n                });\n              } else {\n                alert(\"Invalid choice!\");\n              }\n            }}\n          >\n            <option value={\"\"}>Choose correct answer</option>\n            {answers.map((item, i) => (\n              <option value={item.id} key={i + 1}>\n                {item.value}\n              </option>\n            ))}\n          </select>\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"w-max bg-green-100\">\n          <input\n            value={\n              answered.length === 0\n                ? \"\"\n                : type === QuestionForEmbedded.ShortAnswer\n                ? answered[0].value\n                : answered[0].value[0]\n            }\n            onChange={(e) => {\n              addAnswer({\n                _id: data._id,\n                reference: data.reference,\n                answer: [\n                  {\n                    id: answers[0].id,\n                    value:\n                      type === QuestionForEmbedded.ShortAnswer\n                        ? e.target.value\n                        : [e.target.value],\n                    status: answers[0].status,\n                  },\n                ],\n              });\n            }}\n            type=\"text\"\n            className=\"bg-white px-3 py-1 rounded text-base text-blue-600 font-bold border border-gray-300\"\n          />\n        </span>\n      );\n    }\n  } else {\n    return <div>Question not valid!</div>;\n  }\n};\n\nexport const EmbeddedQuestion = (\n  selectedQuestion: QuestionInterface,\n  questionTypes: questionType[] | null,\n  language: QuestionLanguage,\n  questionAnswers: QuestionAnswersStore[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let newTextResult = [];\n  // Testing Question\n  let question = selectedQuestion.question.find(\n    (itm) => itm.language === language\n  );\n  if (\n    findQuestionType(selectedQuestion.type, questionTypes) !== null &&\n    findQuestionType(selectedQuestion.type, questionTypes) ===\n      questionTypeElementsType.Embedded\n  ) {\n    let answeredQuestions: QuestionAnswerInterface[] = [];\n    if (question !== undefined) {\n      let userQuestionAnswers = questionAnswers.find(\n        (itm) => itm.question_id === selectedQuestion.question_id\n      );\n      if (userQuestionAnswers !== undefined) {\n        answeredQuestions = userQuestionAnswers.answers;\n      }\n\n      var answers = question.answers;\n      var originalText = question.description.split(\" \");\n      // var newTexts = question.description.match(regExEmbedded);\n\n      for (let check of originalText) {\n        let test = answers.find((itm) => itm.reference === parseInt(check[1]));\n        if (test !== undefined) {\n          // Find type of subQuestion\n          let type = question.sub_question.find(\n            (itm) => itm.reference === parseInt(check[1])\n          );\n          if (type !== undefined) {\n            newTextResult.push(\n              returnSelect(test, type.typeShort, answeredQuestions, addAnswer)\n            );\n          }\n        } else {\n          newTextResult.push(check);\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"w-full text-base font-semibold mt-2\">\n      {newTextResult.map((item, i) => (\n        <span key={i + 1} className=\"mr-1\">\n          {item}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-40 md:pb-10\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div className=\"flex flex-row justify-between w-full\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.title,\n                      }}\n                      className=\"text-sm text-gray-600 mb-2\"\n                    ></div>\n\n                    {/* Languages */}\n                    <div className=\"flex flex-row gap-2\">\n                      <div className=\"px-3 py-1 rounded-full flex items-center justify-center text-base font-bold bg-white text-blue-800\">\n                        {props.selectedQuestion.marks} marks\n                      </div>\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                    setSelectedLanguage(item.key);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    selectedLanguage === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {selectedLanguage === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {props.selectedQuestion.question_id !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) === questionTypeElementsType.Embedded ? (\n                    EmbeddedQuestion(\n                      props.selectedQuestion,\n                      props.questionTypes.questionTypes,\n                      selectedLanguage,\n                      props.candidateExam.question_answers,\n                      () => {}\n                    )\n                  ) : (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold mt-2\"\n                    ></div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.Hybrid)\n                ? \"\"\n                : \"bg-white\"\n            } rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n\n            {/* Numerical */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Essay answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toEssay(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers,\n                  }}\n                  wholeQuestion={props.selectedQuestion.question.find(\n                    (itm) => itm.language === selectedLanguage\n                  )}\n                  answerQuestionFn={props.answerQuestionFn}\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course !== null && (\n              <QuestionChapters\n                selectedCourse={\n                  this.props.course.courses &&\n                  this.props.course.courses.find(\n                    (itm) => itm.course_id === this.state.course\n                  )\n                }\n                addedChapters={this.state.chapters}\n                setAddChapter={this.setAddChapter}\n              />\n            )}\n            <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n              <div className=\"\"></div>\n              <div\n                className=\"btn bg-blue-600 text-white cursor-pointer\"\n                onClick={() => this.setState({ showQuestionChapters: false })}\n              >\n                Done\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    // Problem here!\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        // Check type of question\n        let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n        if (props.type === questionTypeElementsType.SingleMultiple) {\n          for (let t of selAns.answer) {\n            temp = [\n              ...temp,\n              {\n                id: t.id,\n                value: t.value,\n                status: false,\n              },\n            ];\n          }\n          addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n        }\n        let newAnswersMultiple: MultipleChoiceQuestionAnswerInterface[] = [];\n\n        for (let xItem of temp.length === 0 ? selAns.answer : temp) {\n          if (xItem.id === item.id) {\n            newAnswersMultiple = [\n              ...newAnswersMultiple,\n              {\n                id: xItem.id,\n                value: xItem.value,\n                status:\n                  props.type === questionTypeElementsType.SingleMultiple\n                    ? true\n                    : !xItem.status,\n              },\n            ];\n          } else {\n            newAnswersMultiple = [...newAnswersMultiple, xItem];\n          }\n\n          addAnswerItemFn(\n            newAnswersMultiple,\n            props.selectedQuestionAnswer.selectedAns\n          );\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: TrueFalseQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n\n  const addAnswer = (\n    //This has a problem\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let temp: TrueFalseQuestionAnswerInterface[] = [];\n        for (let t of selAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, selAns);\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let x of temp.length === 0 ? selAns.answer : temp) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: !x.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: [\n              {\n                id: newAnswers[0].id,\n                value: [newAnswers[0].value],\n                status: newAnswers[0].status,\n              },\n            ],\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  ShortAnswerQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: ShortAnswerQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer === undefined ? (\n        <div\n          className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n        >\n          <textarea\n            value={\"\"}\n            className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 bg-gray-50`}\n            style={{ minHeight: \"80px\" }}\n          ></textarea>\n        </div>\n      ) : (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"80px\" }}\n            ></textarea>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: [item.value],\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        // props.answerQuestionFn({\n        //   question_id: props.selectedQuestionAnswer.question_id,\n        //   status: true,\n        //   answer: [\n        //     {\n        //       id: props.selectedQuestionAnswer.answers[0].id,\n        //       value: [\"\"],\n        //       status: props.selectedQuestionAnswer.answers[0].status,\n        //     },\n        //   ],\n        // });\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of props.selectedQuestionAnswer.selectedAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0\n        ? props.selectedQuestionAnswer.selectedAns.answer\n        : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers, props.selectedQuestionAnswer.selectedAns);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EssayQuestionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: EssayQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Essay = (props: EssayQuestionProps) => {\n  const checkAnswer = (item: EssayQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        addAnswerItemFn(\n          [\n            {\n              id: selAns.answer[0].id,\n              value: item.value,\n              status: selAns.answer[0].status,\n            },\n          ],\n          selAns\n        );\n      }\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"300px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (\n    newAnswers: MatchingQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let x of selAns.answer) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: item.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ansi: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let checkE = testLang.answers.find(\n              (tes) =>\n                tes.reference ===\n                props.selectedQuestionAnswer.selectedAns.reference\n            );\n            if (checkE !== undefined) {\n              let testAnswerLang = checkE.answer.find(\n                (it) => it.status.toString() === ansi.status\n              );\n              if (testAnswerLang !== undefined) {\n                return testAnswerLang.status.toString();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let selAns = temp.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let ans = selAns.answer.find((itm) => itm.id === x);\n        if (ans !== undefined && ans.status !== \"\") {\n          if (props.selectedQuestionAnswer.question_id !== null) {\n            return checkAnswerStatus(\n              props.selectedQuestionAnswer.question_id,\n              props.selectedLanguage,\n              ans\n            );\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        let selAns = item.answers.find(\n          (tester) =>\n            tester.reference ===\n            props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (selAns !== undefined) {\n          for (let ans of selAns.answer) {\n            res = [\n              ...res,\n              {\n                id: ans.id,\n                lang: item.language,\n                status: ans.status.toString(),\n              },\n            ];\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      <div\n        onClick={() => props.select === true && props.callBack(props.question)}\n        className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n          props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n        } hover:border-blue-600 mb-3`}\n      >\n        <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n          <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n            <div>\n              {props.select === false ? (\n                <div className=\"font-bold text-blue-600\">({props.number})</div>\n              ) : props.status === true ? (\n                <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n              ) : (\n                <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n              )}\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">\n                {props.questionTypes.questionTypes &&\n                  props.questionTypes.questionTypes.find(\n                    (itm) => itm.id && itm.id === props.question.type\n                  )?.title}\n              </span>\n              <span className=\"font-bold\">\n                {props.question.question[0].title}\n              </span>\n              <div\n                className=\"w-full text-xs\"\n                dangerouslySetInnerHTML={{\n                  __html: props.question.question[0].description,\n                }}\n              ></div>\n            </div>\n          </div>\n          {props.select === false && (\n            <div className=\"flex flex-row items-center gap-2\">\n              <div\n                onClick={() => setSelectedQuestion(props.question)}\n                className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <CgDetailsMore className=\"text-3xl text-gray-700\" />\n              </div>\n              <div\n                onClick={() => setEditMode(true)}\n                className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <MdEdit className=\"text-3xl text-blue-700\" />\n              </div>\n              <div\n                onClick={() =>\n                  props.select === false && props.callBack(props.question)\n                }\n                className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <IoMdTrash className=\"text-3xl text-yellow-700\" />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      {editMode === true && (\n        <Modal\n          title=\"\"\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setEditMode(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={false}\n          padding={{ title: false }}\n        >\n          <div className=\"pt-0\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        </Modal>\n      )}\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  SubQuestionInterface,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\n\n// All question types except Embedded and Hybrid\n\ninterface AnswersTypesCollectionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  item: SubQuestionInterface;\n  hybrid: boolean;\n}\n\nconst AnswersTypesCollection = (props: AnswersTypesCollectionProps) => {\n  return (\n    <div>\n      {/* TrueFalse */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.TrueFalse &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <TrueFalse\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toTrueFalse(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.Calculated ||\n          props.item.typeShort === QuestionForHybrid.SimpleCalculate) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <SimpleCalculated\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toSimpleCalculated(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.SingleMultiple ||\n          props.item.typeShort === QuestionForHybrid.MultipleChoice) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <MultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.CalculatedMultipleChoice &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <CalculatedMultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toCalculatedMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n\n      {/* Matching */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Matching &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Matching\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMatching(itm.answer),\n                shuffledAnswers: Shuffle(toMatching(itm.answer)),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n              selectedExam={props.selectedExam}\n              selectedLanguage={props.selectedLanguage}\n            />\n          ))}\n      {/* Esssay */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Essay &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Essay\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toEssay(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Numerical */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Numeric &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Numerical\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toNumerical(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* ShortAnswer */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.ShortAnswer &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <ShortAnswer\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toShortAnswer(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n    </div>\n  );\n};\n\nexport default AnswersTypesCollection;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\nimport AnswersTypesCollection from \"./AnswersTypesCollection\";\n\ninterface HybridProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst HybridAnswers = (props: HybridProps) => {\n  let str = \"a\";\n  // useEffect(() => {\n  //   if (props.selectedQuestionAnswer.question_id !== null) {\n  //     // Check if question is already there in answersList\n  //     let checkAnswerAvail = props.available_answers.find(\n  //       (item) => item.question_id === props.selectedQuestionAnswer.question_id\n  //     );\n  //     if (props.wholeQuestion !== undefined) {\n  //       let answersRes: QuestionAnswerInterface[] = [];\n  //       if (checkAnswerAvail === undefined) {\n  //         answersRes = props.wholeQuestion.answers;\n  //       } else {\n  //         for (let newAns of props.wholeQuestion.answers) {\n  //           if (\n  //             checkAnswerAvail.answers.find(\n  //               (item) => item._id === newAns._id\n  //             ) === undefined\n  //           ) {\n  //             console.log(\"Ans not duplicted: \", newAns);\n  //             answersRes = [\n  //               ...answersRes,\n  //               {\n  //                 _id: newAns._id,\n  //                 reference: newAns.reference,\n  //                 answer: [],\n  //               },\n  //             ];\n  //           }\n  //         }\n  //       }\n  //       props.answerQuestionFn({\n  //         question_id: props.selectedQuestionAnswer.question_id,\n  //         status: false, //Check if submitted online\n  //         answers: answersRes,\n  //       });\n  //     }\n  //   }\n  // }, [props]);\n  return (\n    <div>\n      {props.wholeQuestion !== undefined &&\n        props.wholeQuestion.sub_question.length > 0 &&\n        props.wholeQuestion.sub_question.map((item, i) => {\n          let stri = String.fromCharCode(str.charCodeAt(str.length - 1) + i);\n          return (\n            <div\n              title=\"Click to choose this option\"\n              key={i + 1}\n              className={`px-2 py-2\n             bg-white\n            rounded mb-2`}\n            >\n              <div className=\"flex flex-row items-center w-full gap-2 mb-2\">\n                <div>\n                  <div className=\"flex items-center justify-center h-8 w-8 rounded-full bg-gray-100 border border-gray-400 font-bold\">\n                    {stri}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between w-full gap-2\">\n                  <div className=\"font-bold\">{item.description}</div>\n                  <div>\n                    <div className=\"bg-blue-100 text-blue-600 px-3 py-1 rounded-full font-bold\">\n                      {item.marks} marks\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"border-t px-2 py-2\">\n                <AnswersTypesCollection\n                  type={props.type}\n                  available_answers={props.available_answers}\n                  selectedQuestionAnswer={props.selectedQuestionAnswer}\n                  answerQuestionFn={props.answerQuestionFn}\n                  wholeQuestion={props.wholeQuestion}\n                  selectedExam={props.selectedExam}\n                  selectedLanguage={props.selectedLanguage}\n                  item={item}\n                  hybrid={true}\n                />\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default HybridAnswers;\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n\nexport interface ExamItemResponseFull {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  course_id: string;\n  course_code: string;\n  course_name: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.setLoading\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) =>\n              itm.period === this.props.periods.selected_period?.session_plan_id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => {\n              if (\n                this.props.periods.selected_period !== null &&\n                this.props.periods.selected_period.is_active === true\n              ) {\n                this.setState({ selectPeriod: false });\n              } else {\n                alert(\"Please choose active session\");\n              }\n            }}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n})(_PrepareExam);\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addEditExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addEditExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      this.props.addEditExamQuestion(question);\n    } else {\n      alert(\n        \"You can not add questions while its time has ended or being done!\"\n      );\n    }\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      if (\n        window.confirm(\n          \"Are you sure do you want to remove question from the exam questions paper?\"\n        ) === true\n      ) {\n        this.props.addEditExamQuestion(question);\n      }\n    } else {\n      alert(\n        \"You can not remove questions while its time has ended or being done!\"\n      );\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = true;\n    // if (\n    //   this.props.prepareExam.selectedExam === null ||\n    //   this.props.prepareExam.selectedExam.questions.length !== 0\n    // ) {\n    //   conf = window.confirm(\n    //     \"Are you sure do you want to change course? You will loose your selected questions\"\n    //   );\n    // }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0 ||\n      this.props.course.selected_course === null\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.props.setLoadingProps\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.props.setLoadingProps\n          );\n      }\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (\n      this.props.course.courses !== null &&\n      this.props.course.selected_course === null\n    ) {\n      let myCourse = this.props.course.courses.find(\n        (itm) => itm.course_id === this.props.selectedExam.course\n      );\n      if (myCourse !== undefined) {\n        this.props.setSelectedCourse(myCourse);\n        this.chooseCourse(myCourse);\n      }\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        {validateExamDate(\n                          this.props.selectedExam.exam_date,\n                          this.props.selectedExam.start_time,\n                          this.props.selectedExam.end_time\n                        ) === ExamTimeStatus.Waiting && (\n                          <div\n                            onClick={() =>\n                              this.props.selectedCourse === null\n                                ? this.setState({ selectCourse: true })\n                                : this.setState({ addQuestionModal: true })\n                            }\n                            className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                          >\n                            <MdAdd className=\"text-2xl\" /> Add question\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Editing Exam\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                {this.props.prepareExam.selectedExam &&\n                validateExamDate(\n                  this.props.prepareExam.selectedExam!.exam_date,\n                  this.props.prepareExam.selectedExam!.start_time,\n                  this.props.prepareExam.selectedExam!.end_time\n                ) === ExamTimeStatus.Waiting ? (\n                  <div\n                    onClick={() => this.submitExamPreparation()}\n                    className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  >\n                    Confirm edit exam\n                  </div>\n                ) : (\n                  <div>Can not edit</div>\n                )}\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addEditExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n})(_EditExam);\n"],"sourceRoot":""}