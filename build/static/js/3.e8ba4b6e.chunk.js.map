{"version":3,"sources":["interfaces/events.ts","components/InformationModal/InformationModal.tsx","containers/ProctoringCandidateOnline/ProctoringCandidateOnline.tsx","containers/ProctoringCandidateOnline/Container_ProctoringCandidateOnline.tsx"],"names":["Events","ExamEvents","ExamEventTypes","InformationModal","title","description","close","onClick","className","joined_room","_ProctoringCandidateOnline","props","componentWillUnmount","socket","off","START_EXAM_CLIENT","STOP_EXAM_CLIENT","CAND_CONTINUE_EXAM_CLIENT","CAND_RESTART_EXAM_CLIENT","CAND_WARNING_EXAM_CLIENT","CAND_STOP_EXAM_CLIENT","examStart","state","setState","request_fullScreen","exit_fullScreen","FC_MeStartStopExam","startExam","stopExam","closeInfoModal","inform_modal","active","requestFullScreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullScreen","exitFullscreen","eventBrodcaster","type","proctoring","room","start_exam","event","eventDefiner","user_id","auth","user","done_by","room_id","event_type","FC_CandidateExamEvent","FC_BlockExam","emit","CAND_EXAM_EVENT_SERVER","warning","this","email","fname","lname","FC_AddMyDataToProctoring","muted","stopped","peer","peer_id","ref","JOIN_ROOM","users_list","on","prevState","msg","me","restartExam","addEventListener","preventDefault","window","lastEvent","events_list","events","length","children","React","Component","ProctoringCandidateOnline","connect","Container_ProctoringCandidateOnline","startExamHandler","console","log","stopExamHandler","reStartExamHandler"],"mappings":"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","file":"static/js/3.e8ba4b6e.chunk.js","sourcesContent":["export enum Events {\n  USER_CONNECTED = \"user-connected\",\n  USER_DISCONNECTED = \"user-disconnected\",\n  JOIN_ROOM = \"join-room\",\n}\n\nexport enum ExamEvents {\n  START_EXAM_CLIENT = \"START_EXAM_CLIENT\",\n  START_EXAM_SERVER = \"START_EXAM_SERVER\",\n\n  STOP_EXAM_CLIENT = \"STOP_EXAM_CLIENT\",\n  STOP_EXAM_SERVER = \"STOP_EXAM_SERVER\",\n\n  CAND_EVENT_CLIENT = \"CAND_EVENT_CLIENT\",\n  CAND_EVENT_SERVER = \"CAND_EVENT_SERVER\",\n\n  CAND_CONTINUE_EXAM_SERVER = \"CAND_CONTINUE_EXAM_SERVER\",\n  CAND_CONTINUE_EXAM_CLIENT = \"CAND_CONTINUE_EXAM_CLIENT\",\n\n  CAND_STOP_EXAM_CLIENT = \"CAND_STOP_EXAM_CLIENT\",\n  CAND_STOP_EXAM_SERVER = \"CAND_STOP_EXAM_SERVER\",\n\n  CAND_RESTART_EXAM_CLIENT = \"CAND_RESTART_EXAM_CLIENT\",\n  CAND_RESTART_EXAM_SERVER = \"CAND_RESTART_EXAM_SERVER\",\n\n  ALL_CAND_RESTART_EXAM_CLIENT = \"ALL_CAND_RESTART_EXAM_CLIENT\",\n  ALL_CAND_RESTART_EXAM_SERVER = \"ALL_CAND_RESTART_EXAM_SERVER\",\n\n  CAND_WARNING_EXAM_CLIENT = \"CAND_WARNING_EXAM_CLIENT\",\n  CAND_WARNING_EXAM_SERVER = \"CAND_WARNING_EXAM_SERVER\",\n\n  CAND_BRODCAST_MSG_CLIENT = \"CAND_BRODCAST_MSG_CLIENT\",\n  CAND_BRODCAST_MSG_SERVER = \"CAND_BRODCAST_MSG_SERVER\",\n\n  CAND_PRIVATE_MSG_CLIENT = \"CAND_PRIVATE_MSG_CLIENT\",\n  CAND_PRIVATE_MSG_SERVER = \"CAND_PRIVATE_MSG_SERVER\",\n\n  CAND_EXAM_EVENT_CLIENT = \"CAND_EXAM_EVENT_CLIENT\",\n  CAND_EXAM_EVENT_SERVER = \"CAND_EXAM_EVENT_SERVER\",\n}\n\nexport enum ExamEventTypes {\n  PASTE_A_TEXT = \"PASTE A TEXT\",\n  MOVE_MOUSE_OUT = \"MOVE MOUSE OUT WINDOW\",\n}\n\nexport interface EventInterface {\n  event_id: string;\n  user_id: string;\n  event_type: string;\n  description: string;\n  room_id: string;\n  done_by?: string;\n  time: string;\n}\n","import React, { FC, ReactElement } from \"react\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\ntype InformationModalProps = {\n  title: string;\n  description: string;\n  close: Function;\n};\n\nconst InformationModal: FC<InformationModalProps> = ({\n  title,\n  description,\n  close,\n}): ReactElement => {\n  // return (\n  //   <div className=\"fixed top-5 w-3/4 right-0 left-0 mx-auto bg-yellow-300 rounded\">\n  //     <div className=\"bg-yellow-200 p-3 rounded-md\">\n  //       <h1 className=\"text-2xl font-bold text-yellow-900\">{title}</h1>\n  //       <p className=\"text-sm mt-1\">{description}</p>\n  //     </div>\n\n  //     <div className=\"p-2 text-right\">\n  //       <button\n  //         onClick={() => close()}\n  //         className=\"py-1 px-3 rounded-md bg-yellow-500 btn-sm hover:bg-red-600 hover:text-white\"\n  //       >\n  //         Close\n  //       </button>\n  //     </div>\n  //   </div>\n  // );\n\n  return (\n    <div\n      onClick={() => close()}\n      className=\"fixed top-3 cursor-pointer bg-opacity-70 bg-yellow-100 hover:bg-opacity-90 w-lg right-0 left-0 mt-6 rounded-md mx-auto  py-5 px-3 max-w-sm animate__bounceIn\"\n    >\n      <div className=\"w-full flex\">\n        <div className=\"\">\n          <MdInfoOutline className=\"text-6xl inline text-yellow-800 opacity-50\" />\n        </div>\n        <div className=\"flex-1 pl-2\">\n          <h1 className=\"text-xl text-yellow-800 font-bold\">{title}</h1>\n          <p className=\"mt-0 text-gray-700\">{description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default InformationModal;\n","import React, { Fragment, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  Events,\n  EventInterface,\n  ExamEvents,\n  CandidateProctoringInterface,\n} from \"../../interfaces\";\nimport { eventDefiner, eventDefinerInterface } from \"../../actions/proctoring\";\nimport InformationModal from \"../../components/InformationModal/InformationModal\";\n\nimport {\n  Auth,\n  Socket,\n  Proctoring,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n} from \"../../actions\";\nimport { MdFullscreen, MdFullscreenExit, MdReport } from \"react-icons/md\";\n\n// props for the component\ninterface ProctoringCandidateOnlineProps {\n  socket: Socket;\n  eventDefiner: Function;\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_AddMyDataToProctoring: Function;\n  FC_MeStartStopExam: Function;\n  FC_CandidateExamEvent: Function;\n  children: ReactNode;\n  startExam: Function;\n  stopExam: Function;\n  restartExam: Function;\n  FC_BlockExam: Function;\n}\n\ninterface AppState {\n  request_fullScreen: boolean;\n  exit_fullScreen: boolean;\n  warning: any;\n  inform_modal: {\n    title: string;\n    description: string;\n    active: boolean;\n  };\n}\n\nlet joined_room = false;\n\nclass _ProctoringCandidateOnline extends React.Component<\n  ProctoringCandidateOnlineProps,\n  AppState\n> {\n  constructor(props: ProctoringCandidateOnlineProps) {\n    super(props);\n\n    this.state = {\n      request_fullScreen: this.props.proctoring.room.start_exam,\n      exit_fullScreen: false,\n      warning: null,\n      inform_modal: {\n        title: \"\",\n        description: \"\",\n        active: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { email, fname, lname, user_id } = this.props.auth.user;\n    // add the user to the list\n    if (joined_room === false) {\n      this.props.FC_AddMyDataToProctoring({\n        active: true,\n        email: email,\n        fname,\n        lname,\n        user_id,\n        muted: false,\n        stopped: false,\n        peer: \"\",\n        peer_id: \"\",\n        ref: \"\",\n      } as CandidateProctoringInterface);\n      this.props.socket.socket.emit(\n        Events.JOIN_ROOM,\n        {\n          room_id: this.props.proctoring.room.room_id,\n          user_id: this.props.auth.user.user_id,\n          peer_id: \"\",\n        },\n        (users_list: any) => {}\n      );\n      joined_room = true;\n    }\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.START_EXAM_CLIENT, (event: any) =>\n      this.examStart(true)\n    );\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.STOP_EXAM_CLIENT, (event: any) =>\n      this.examStart(false)\n    );\n\n    // * WARNING CANDIDATE\n    this.props.socket.socket.on(\n      ExamEvents.CAND_WARNING_EXAM_CLIENT,\n      (event: any) => {\n        this.setState((prevState: AppState) => ({\n          warning: true,\n          inform_modal: {\n            title: \"WARNING\",\n            description: event.msg,\n            active: true,\n          },\n        }));\n        // Add event to the reducer\n        this.props.FC_CandidateExamEvent(\n          eventDefiner({\n            description: event.msg,\n            event_type: \"WARNING\",\n            done_by: \"Invigirator\",\n            room_id: this.props.proctoring.room.room_id,\n            user_id: event.user_id,\n          } as eventDefinerInterface)\n        );\n      }\n    );\n\n    // * STOP EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_STOP_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"STOP EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(true);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"STOP EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_CONTINUE_EXAM_CLIENT,\n      (event: any) => {\n        if (\n          event.user_id === this.props.auth.user.user_id &&\n          this.props.proctoring.me.stopped === true\n        ) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"CONTINUE EXAM\",\n              description: \"Invigirator allowed you to continue the exam\",\n              active: true,\n            },\n          }));\n\n          this.props.FC_BlockExam(false);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: \"Invigirator allowed you to continue the exam\",\n              event_type: \"CONTINUE EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_RESTART_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"RESTART EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(false);\n\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"RESTART EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n          // * Restart Function\n          this.props.restartExam();\n        }\n      }\n    );\n\n    //** EVENTS BROWSER */\n    // document.addEventListener(\"mouseenter\", (e) => {\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   );\n    // });\n\n    // document.addEventListener(\"mouseleave\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    document.addEventListener(\"copy\", (event) => {\n      if (this.props.proctoring.room.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\n        \"COPY TEXT\",\n        \"The candidate is try to copy the text\"\n      );\n    });\n\n    document.addEventListener(\"paste\", (event) => {\n      if (this.props.proctoring.room.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\"TEXT PASTE\", \"pasted a text\");\n    });\n\n    document.addEventListener(\"visibilitychange\", (event) =>\n      this.eventBrodcaster(\"ZOOMING OUT\", \"Changing the visibility\")\n    );\n\n    // ! ERROR: causing to stop the candidate once they click on a modal into the browser\n    // document.addEventListener(\"focusout\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    window.addEventListener(\"blur\", () =>\n      this.eventBrodcaster(\n        \"LEAVING BROWSER\",\n        \"The candidate is try to leave the browser\"\n      )\n    );\n\n    // prevent the right-click\n    document.addEventListener(\"contextmenu\", (event) => {\n      if (this.props.proctoring.room.start_exam === true) {\n        event.preventDefault();\n      }\n    });\n  }\n\n  componentWillUnmount = () => {\n    this.props.socket.socket.off(ExamEvents.START_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.STOP_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_CONTINUE_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_RESTART_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_WARNING_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_STOP_EXAM_CLIENT);\n  };\n\n  // ***************************************************************************\n\n  /**\n   * @description define wheter the exam has started or not\n   * @param state boolean\n   */\n  examStart = (state: boolean) => {\n    if (state === true) {\n      // start exam\n      this.setState({\n        request_fullScreen: true,\n        exit_fullScreen: false,\n      });\n\n      this.props.FC_MeStartStopExam(true);\n      this.props.startExam();\n    } else {\n      // stop exam mode\n      this.setState({\n        request_fullScreen: false,\n        exit_fullScreen: true,\n      });\n\n      this.props.FC_MeStartStopExam(false);\n      this.props.stopExam();\n    }\n  };\n\n  closeInfoModal = () =>\n    this.setState({\n      inform_modal: {\n        active: false,\n        description: \"\",\n        title: \"\",\n      },\n    });\n\n  /**\n   * @description Request the fullscreen\n   */\n  requestFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    }\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n  };\n\n  /**\n   * @description Exist the fullscreen\n   */\n  exitFullScreen = () => {\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n    if (document.fullscreenElement) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n\n  /**\n   * @description get all the events and send them to the supervisor\n   * @param event\n   */\n  eventBrodcaster = (type: string, description: string) => {\n    if (this.props.proctoring.room.start_exam === true) {\n      let event: EventInterface = eventDefiner({\n        description: description,\n        user_id: this.props.auth.user.user_id,\n        done_by: \"System\",\n        room_id: this.props.proctoring.room.room_id,\n        event_type: type,\n      } as eventDefinerInterface);\n\n      // Add event to the reducer\n      this.props.FC_CandidateExamEvent(event);\n      this.props.stopExam();\n\n      this.props.FC_BlockExam(true);\n\n      // send the event on the server\n      this.props.socket.socket.emit(ExamEvents.CAND_EXAM_EVENT_SERVER, event);\n    }\n  };\n\n  render() {\n    //* candidate stopped screen\n    if (\n      this.props.proctoring.me.stopped === true &&\n      this.props.proctoring.room.start_exam === true\n    ) {\n      let lastEvent: EventInterface | null = null;\n      let events_list = this.props.proctoring.events;\n      if (events_list.length >= 1) {\n        lastEvent = events_list[events_list.length - 1];\n      }\n      return (\n        <div className=\"p-5 mx-auto mt-6 text-center bg-red-100 max-w-lg max-w-2/3 w-full rounded-md animate__bounceIn\">\n          <MdReport className=\"text-9xl text-red-900 inline\" />\n          <h1 className=\"text-2xl text-red-900 font-bold\">\n            You have beed stopped <br /> to continue the exam\n          </h1>\n\n          {lastEvent !== null && (\n            <Fragment>\n              <div className=\"mt-2\">\n                <h5 className=\"text-lg  text-red-800 inline-block\">\n                  You violated the rule of:\n                </h5>\n                <h2 className=\"text-md text-white font-bold bg-red-600 border-4 py-0.5 px-3 rounded-full inline-block ml-2 mx-auto\">\n                  {lastEvent?.event_type}\n                </h2>\n              </div>\n\n              <h3 className=\"text-md text-red-800 mt-3 font-bold\">\n                {lastEvent?.description}\n              </h3>\n            </Fragment>\n          )}\n\n          <div className=\"mt-5 border-t border-red-900 border-opacity-50 text-sm text-red-900 text-opacity-80 pt-3 mx-5\">\n            <b>The exam will be saved from where you left off,</b> <br />\n            You can explain the situation to the supervisor <br /> If your\n            reasons are clear you will be gived another chance\n          </div>\n        </div>\n      );\n    }\n\n    //* Request for the full screen\n    if (this.state.request_fullScreen === true) {\n      return (\n        <div className=\"bg-green-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreenExit className=\"text-9xl inline text-green-600 opacity-50\" />\n            <h1 className=\"text-3xl text-green-500 font-bold\">\n              Go Full-Screen mode{\" \"}\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              You need to go in <b>Full-screen mode</b>, in order to get a good\n              experience (Important)\n            </p>\n            <button\n              className=\" bg-green-600 hover:bg-green-800 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.requestFullScreen()}\n            >\n              Yes, go full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    //* Exit for the full screen\n    if (this.state.exit_fullScreen === true) {\n      return (\n        <div className=\"bg-blue-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreen className=\"text-9xl inline text-blue-600 opacity-50\" />\n            <h1 className=\"text-3xl text-blue-600 font-bold\">\n              Quit Full-Screen mode\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              Exam is completed, you can quit the <b>Fullscreen mode</b>\n              (optional)\n            </p>\n            <button\n              className=\" bg-blue-600 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.exitFullScreen()}\n            >\n              Exit full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Fragment>\n        {this.state.inform_modal.active === true && (\n          <InformationModal\n            title={this.state.inform_modal.title}\n            description={this.state.inform_modal.description}\n            close={this.closeInfoModal}\n          />\n        )}\n\n        {this.props.children}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; proctoring: Proctoring; auth: Auth } => {\n  return { socket: socket, auth, proctoring };\n};\n\nexport const ProctoringCandidateOnline = connect(mapStateToProps, {\n  eventDefiner,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n})(_ProctoringCandidateOnline);\n","import React from \"react\";\nimport { ProctoringCandidateOnline } from \"./ProctoringCandidateOnline\";\n\ninterface Container_ProctoringCandidateOnlineProps {}\n\ninterface AppState {}\n\nclass Container_ProctoringCandidateOnline extends React.Component<\n  Container_ProctoringCandidateOnlineProps,\n  AppState\n> {\n  constructor(props: Container_ProctoringCandidateOnlineProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  startExamHandler = () => console.log(\"START EXAM HANDLER\");\n  stopExamHandler = () => console.log(\"STOP EXAM HANDLER\");\n  reStartExamHandler = () => console.log(\"RESTART EXAM HANDLER\");\n\n  render() {\n    return (\n      <ProctoringCandidateOnline\n        startExam={this.startExamHandler}\n        restartExam={this.reStartExamHandler}\n        stopExam={this.stopExamHandler}\n      >\n        <div className=\"container px-4 mx-auto\">\n          <div>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloribus\n            quo praesentium rerum maxime facilis, deserunt, tempore atque,\n            expedita ab distinctio odit numquam? Impedit corporis dignissimos\n            reprehenderit fuga optio incidunt. Odio.\n          </div>\n        </div>\n      </ProctoringCandidateOnline>\n    );\n  }\n}\n\nexport { Container_ProctoringCandidateOnline };\n"],"sourceRoot":""}