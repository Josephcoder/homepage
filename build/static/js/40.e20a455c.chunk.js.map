{"version":3,"sources":["containers/DoExam/QuestionDetails/ConvertingAnswers.ts","assets/profile.png","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","components/ProctoringRuleItem/ProctoringRuleItem.tsx","containers/DoExam/DoExam.tsx"],"names":["toMultipleChoice","answers","res","answer","id","value","status","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","MultipleChoice","props","checkAnswer","item","available_answers","length","check","find","itm","question_id","selectedQuestionAnswer","undefined","x","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","test","a","map","onClick","oldAnswers","temp","type","questionTypeElementsType","SingleMultiple","t","addAnswer","className","TrueFalse","i","Matching","checkIfSelected","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","question","language","key","testAnswerLang","it","toString","checkAnswerStatus","selectedLanguage","findWord","arr","ReturnMatchingStatus","newItem","onChange","e","target","selected","SimpleCalculated","answeredValue","ShortAnswer","style","minHeight","Numerical","CalculatedMultipleChoice","filter","QuestionDetails","connect","auth","doExam","candidateExam","system","questionTypes","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","useState","loading","setLoading","selectLang","setSelectLang","QuestionData","candidate_exam","q","selected_question","findSelectedQuestionDetails","Loading","LoadingType","white","submitQuestionAnswer","selected_language","title","description","width","findQuestionType","question_answers","console","log","SimpleCalculate","Numeric","Footer","proctoring","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","findIndex","selectedIndexPrevious","selectedIndexNext","ConfirmSubmitAnswer","exam_id","questionAnswered","SubmitAnswer","setProfileWindowStatus","windowStatus","profile","position","top","right","events","questionsList","selected_exam_id","height","Profile","src","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","event_type_id","DATE","time","Date","getHours","getMinutes","getSeconds","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","setSubmitModal","submitExam","maxHeight","DoExamTitle","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","course_name","course_code","alignSelf","start_time","duration","CountDown","duration_min","timeout","returnString","labels","days","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","maxWidth","displayClose","padding","marginTop","ModalMarginTop","small","DoExamResults","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","page","ProctoringRuleItem","getDetails","examDetails","rule_key","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","_DoEam","setState","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","setExamQuestionAnswer","setCompletedTest","completedTest","changingExamStatusLoading","changingExamStatus","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","periods","selected_period","selected_exam_details","checkUserExam","exam","positions","selected_position","exam_room_details","RequestUserExamDetails","user_id","position_id","userExamLocation","district_id","center_id","room_id","setLoadExamResultMessage","BackToExamination","componentDidMount","course","courses","loadCourses","exam_questions_answers","testAnswers","componentWillUnmount","socket","emit","Events","USER_DISCONNECTED_ONLINE_SERVER","setLoadExamResultNoMessage","msg","PushPopupAlert","PopupAlertTheme","danger","success","GetUserExamDetails","period","user_exams_done","CleanCandidateExam","SubmitExamQuestionAnswer","userAnswer","submitWholeExam","axios","put","API","DO_EXAM","doneExam","errorToText","startExam","display_exam","start_exam","loadCandidateExam","pauseExam","inExam","user_exam_details","data","application_session_id","application_session","_id","done_by","EventsLabels","DONE_EXAM","ExamId","exam_old_id","FC_SaveEvent","error","EXAM_DONE_SERVER","timeOutExam","TIME_OUT","TIME_OUT_SERVER","examStatus","loadUserExamErr","added_minutes","group_id","this","ProctoringCandidateOnline","restartExam","CleanCandidateExamAnswers","setExamStatus","UserExamActions","Restart","stopExam","Done","period_id","removeClient","Removed","examAlreadyDone","candidateStopExam","reason","Paused","candidateContinueExam","Continue","joinedRoom","changeTime","timer","QuestionsList","selected_course","preview","setSelectedCandidateExam","extraLarge","exam_date","dangerouslySetInnerHTML","__html","termes","Component","DoExam","ChangeExamStatus","setSelectedPeriod","FC_AddRules"],"mappings":"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","file":"static/js/40.e20a455c.chunk.js","sourcesContent":["import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { MultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  \n  const checkAnswer = (item: MultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: MultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: MultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.type === questionTypeElementsType.SingleMultiple ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonUnchecked className=\"text-2xl truncate\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default MultipleChoice\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  TrueFalseQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n\n  const addAnswer = (\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [\n          ...temp,\n          {\n            id: t.id,\n            value: t.value,\n            status: false,\n          },\n        ];\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from 'react'\nimport { MdRadioButtonUnchecked } from 'react-icons/md'\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CandidateExam } from '../../../../interfaces/exam'\nimport { MatchingQuestionAnswerInterface, MatchingStatuses, QuestionInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MatchingQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswer = (item: MatchingQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: item.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  \n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: \"\"\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n\n  const checkAnswerStatus = (selectedQuestionId: string, selectedLang: QuestionLanguage, ans: MatchingQuestionAnswerInterface) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(test => test.id === selectedQuestionId);\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(itm => itm.language === lang.key);\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(it => it.status.toString() === ans.status);\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (temp !== undefined) {\n      let ans = temp.answer.find(itm => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(props.selectedQuestionAnswer.question_id, props.selectedLanguage, ans);\n        }\n      }\n    }\n    return false;\n  }\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined = props.selectedExam?.questions.find(itm => itm.id === props.selectedQuestionAnswer.question_id);\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [...res, {\n            id: ans.id,\n            lang: item.language,\n            status: ans.status.toString()\n          }]\n        }\n      }\n    }\n    return res;\n  }\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find(itm => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(itm => itm.id === item && itm.lang === lang)?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  }\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"} grid grid-cols-2`}>\n          <div className=\"col-span-1 flex flex-row items-center gap-2\">\n            {checkAnswer(item) === true ?\n            <RiCheckboxCircleFill className=\"text-2xl\" />:\n            <MdRadioButtonUnchecked className=\"text-2xl\" />}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n          <div className=\"col-span-1\">\n            <select \n            onChange={(e) => {\n              addAnswer({\n                id: item.id,\n                value: item.value,\n                status: e.target.value\n              }, props.selectedQuestionAnswer.question_id)\n            }}\n            className={`border rounded w-full py-2 px-2 cursor-pointer focus:outline-none focus:border-blue-500 ${checkAnswer(item) === false ? \"border-gray-400 text-gray-600\" : \"border-blue-50 bg-blue-50 text-blue-600 hover:border-blue-600\"}`}>\n              <option value=\"\">Select matching</option>\n              {props.selectedQuestionAnswer !== null &&\n                props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((itm, x) => (\n                  <option selected={itm.status === findWord(props.selectedLanguage, checkIfSelected(item.id)) ? true : false} key={x + 1} value={itm.status}>{itm.status}</option>\n                ))}\n            </select>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Matching\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { SimpleCalculatedQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (item: SimpleCalculatedQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: [newAnswers[0].value],\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0].toString() : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SimpleCalculated\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { ShortAnswerQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: ShortAnswerQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: \"\",\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <textarea \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }} value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} style={{minHeight: '200px'}}></textarea>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ShortAnswer\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { NumericalQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: NumericalQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: {id: string; value: string[]; status: number[]}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: {id: string; value: string; status: number[]}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: [item.value],\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0] : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold border-blue-600\" : \"border text-gray-700 border-gray-500\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Numerical\n","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CalculatedMultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center rounded cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ?\n          <MdRadioButtonUnchecked className=\"text-2xl\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default CalculatedMultipleChoice\n","import React, { useEffect, useState } from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md';\nimport { QuestionInterface, QuestionItemInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../interfaces/index';\nimport { newAnswer } from '../DoExam';\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question';\nimport Loading from '../../../components/Loading/Loading';\nimport { LoadingType } from '../../../components/Loading/LoadingV2';\nimport MultipleChoice from './Answers/MultipleChoice';\nimport { toCalculatedMultipleChoice, toMatching, toMultipleChoice, toNumerical, toShortAnswer, toSimpleCalculated, toTrueFalse } from './ConvertingAnswers';\nimport { findQuestionType } from '../utils/utils';\nimport TrueFalse from './Answers/TrueFalse';\nimport Matching from './Answers/Matching';\nimport SimpleCalculated from './Answers/SimpleCalculated';\nimport ShortAnswer from './Answers/ShortAnswer';\nimport Numerical from './Answers/Numerical';\nimport CalculatedMultipleChoice from './Answers/CalculatedMultipleChoice';\nimport { BiWorld } from 'react-icons/bi';\nimport { AiFillCaretDown } from 'react-icons/ai';\nimport { FaTimes } from 'react-icons/fa';\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) =>void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined = props.candidateExam.candidate_exam.questions.find(itm => props.candidateExam.selected_question && itm.id === props.candidateExam.selected_question);\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  }\n  \n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res:QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(itm => itm.id === props.candidateExam.selected_question);\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  }\n  useEffect(() => {\n    if (props.questionTypes.questionTypes === null || props.questionTypes.questionTypes.length === 0) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props])\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ?\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n        <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n          <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n          <Loading type={LoadingType.white} />\n        </div>\n      </div>:\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          {props.submitQuestionAnswer === true && \n          <div className=\"bg-blue-50 px-3 py-2 rounded text-blue-700 font-bold animate-pulse text-sm\">Saving your answer ...</div>}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              <div className=\"text-md flex flex-col w-full\">\n                <span className=\"text-sm text-gray-600\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.title}\n                </span>\n                <span className=\"text-lg text-gray-800 font-bold\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.description}\n                </span>\n              </div>\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div onClick={() => setSelectLang(!selectLang)} className=\"flex flex-row items-center gap-2\">\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{width: '97px'}}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">Language</span>\n                    <span title={QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value} className=\"text-sm font-bold text-blue-600 truncate\" style={{width: '97px'}}>\n                      {QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value}\n                    </span>\n                  </div>\n                  <div className={`${selectLang === true ? \"bg-yellow-800 text-white\" : \"bg-gray-50 hover:bg-blue-600\"} h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}>\n                    {selectLang === true ? \n                    <FaTimes className=\"text-xl my-2 mx-2\" />:\n                    <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />}\n                  </div>\n                </div>\n                {selectLang === true &&\n                <div className=\"relative rounded overflow-hidden\" style={{width: '182px'}}>\n                  <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                    {QuestionLanguages.map((item, i) => (\n                      <span onClick={() => {props.setQuestionLanguage(item.key); setSelectLang(!selectLang)}} key={i + 1} \n                      className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${props.candidateExam.selected_language === item.key ? \"bg-blue-800 font-extrabold border-blue-800\" : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"}`}>\n                        {props.candidateExam.selected_language === item.key ? <MdRadioButtonChecked className=\"text-xl mr-2\" /> : <MdRadioButtonUnchecked className=\"text-xl mr-2\" />} {item.value}\n                      </span>\n                    ))}\n                  </div>\n                </div>}\n              </div>\n            </div>\n          </div>\n          <div className=\"my-4 py-2 px-2 bg-white rounded\" onClick={() => selectLang === true && setSelectLang(false)}>\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            (findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.MultipleChoice ||\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SingleMultiple) &&\n            <MultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.TrueFalse &&\n            <TrueFalse \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toTrueFalse(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Matching Question */}\n            {console.log(\"Type: \", findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes))}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Matching &&\n            <Matching \n              selectedLanguage={props.candidateExam.selected_language}\n              selectedExam={props.candidateExam.candidate_exam}\n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMatching(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SimpleCalculate &&\n            <SimpleCalculated \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toSimpleCalculated(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.ShortAnswer &&\n            <ShortAnswer \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toShortAnswer(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Numeric &&\n            <Numerical \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toNumerical(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.CalculatedMultipleChoice &&\n            <CalculatedMultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toCalculatedMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n          </div>\n      </div>}\n    </div>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, questionTypes: questionTypes, };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;","import React from \"react\";\nimport { IoNotifications } from \"react-icons/io5\";\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from \"../utils/utils\";\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n  proctoring: Proctoring;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (\n        let x: number = 0;\n        x < props.candidateExam.candidate_exam.questions.length;\n        x++\n      ) {\n        if (\n          props.candidateExam.candidate_exam.questions[x].id === question_id\n        ) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  };\n\n  let selectedIndexPrevious: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0\n        ? findIndex(props.candidateExam.selected_question)\n        : props.candidateExam.candidate_exam.questions.length\n      : -1;\n\n  let selectedIndexNext: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0 &&\n        findIndex(props.candidateExam.selected_question) <\n          props.candidateExam.candidate_exam.questions.length - 1\n        ? findIndex(props.candidateExam.selected_question)\n        : findIndex(props.candidateExam.selected_question) === 0\n        ? 0\n        : -1\n      : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(\n        (item) =>\n          questionAnswered(\n            props.candidateExam.question_answers,\n            item.id,\n            findQuestionType(item.type, props.questionTypes.questionTypes)!\n          ) === true\n      );\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {console.log(\"Selected: \", selectedIndexNext)}\n      <div className=\"flex flex-row items-center\">\n        <div\n          onClick={() =>\n            props.setProfileWindowStatus(!props.windowStatus.profile)\n          }\n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}\n        >\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div\n              className=\"bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\"\n              style={{ position: \"relative\", top: \"-10px\", right: \"-12px\" }}\n            >\n              {props.proctoring.events.length}\n            </div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && (\n            <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">\n              New events <br />\n              are available\n            </div>\n          )}\n        </div>\n\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexPrevious - 1\n              ].id\n            )\n          }\n          className=\"btn btn-blue flex justify-center items-center\"\n          style={{ height: \"fit-content\" }}\n        >\n          <MdChevronLeft className=\"text-xl\" />{\" \"}\n          <span className=\"hidden md:block\">Previous</span>\n        </button>\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">\n            Question{\" \"}\n            {props.candidateExam.selected_question &&\n              findIndex(props.candidateExam.selected_question) + 1}\n          </span>\n          {props.submitQuestionAnswer === true ? (\n            <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">\n              Saving question answer...\n            </span>\n          ) : (\n            <span className=\"text-xs\">Auto save is activated</span>\n          )}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div> */}\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexNext + 1\n              ].id\n            )\n          }\n          className=\"btn btn-blue flex items-center\"\n        >\n          <span className=\"hidden md:block\">Next</span>{\" \"}\n          <MdChevronRight className=\"text-xl\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    system: system,\n    proctoring: proctoring,\n  };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;\n","import React from \"react\";\nimport { IoClose } from \"react-icons/io5\";\nimport userImage from \"../../../assets/profile.png\";\n\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring } from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { DATE } from \"../../../utils/functions\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose\n                  onClick={() => props.setProfileWindowStatus(false)}\n                  className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\"\n                />\n              </div>\n            </div>\n            <div\n              className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            >\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">\n              {props.auth.user.fname} {props.auth.user.lname}\n            </span>\n            <span className=\"text-gray-400 text-xs\">\n              ID: {props.auth.user.n_id}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>{props.proctoring.events.length}</span>\n          </div>\n          <div\n            className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\"\n            style={{ paddingBottom: \"550px\", paddingTop: \"10px\" }}\n          >\n            {props.proctoring.events.length === 0 ? (\n              <div className=\"text-white font-bold\">No events found!</div>\n            ) : (\n              props.proctoring.events.map((item, i) => (\n                <div className=\"flex flex-col text-gray-300 border-b py-2 border-gray-700\">\n                  <div\n                    key={i + 1}\n                    className=\"flex flex-row items-center my-1 gap-2\"\n                  >\n                    <div className=\"bg-gray-600 text-white h-6 w-6 px-3 rounded-full flex items-center justify-center\">\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span>{item.event_type_id}</span>\n                      <span className=\"font-bold\">{item.description}</span>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row justify-between items-center\">\n                    <span className=\"text-gray-500\">\n                      {DATE(item.time, \"DD/MM/YYYY\")}\n                    </span>\n                    <span className=\"bg-gray-600 px-2 rounded-full text-xs font-bold text-yellow-300\">\n                      {new Date(item.time).getHours()} :\n                      {new Date(item.time).getMinutes()} :\n                      {new Date(item.time).getSeconds()}\n                    </span>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {})(_Profile);\n\nexport default Profile;\n","import React from 'react'\nimport { MdCheckCircle, MdClose } from 'react-icons/md'\nimport { Auth } from '../../../actions/auth'\nimport { candidateExamStoreInterface } from '../../../actions/candidate_exam'\nimport { questionTypesStoreInterface } from '../../../actions/questionTypes'\nimport { System } from '../../../actions/system'\nimport Loading from '../../../components/Loading/Loading'\nimport { course } from '../../../interfaces/course'\nimport { QuestionInterface } from '../../../interfaces/question'\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from '../utils/utils'\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamPendingQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    )\n  }\n  return (\n    <div className={`pt-4 border-t border-gray-300 ${PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"}`}>\n      {props.candidateExam.candidate_exam && AnsweredQuest.length !== props.candidateExam.candidate_exam.questions.length && PendingQuest.length !== 0 ? \n      <div>\n        <div className=\"grid md:grid-cols-2 h-full\">\n          <div className=\"md:col-span-2 h-full\">\n            <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n              {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n              <div className=\"flex flex-col\">\n                <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">Submit incomplete questions</div>\n                <div className=\"text-gray-700 text-sm text-left pb-2\">Please, make sure to complete the following remaining questions which are not yet answered. Please, if you proceed anyway, for these questions, you will not be marked!</div>\n              </div>\n              <div className=\"mr-4\">\n              <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"md:col-span-2\">\n            <div className=\"\">\n              <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                <div className=\"text-center mb-5 text-gray-600 font-bold\">Pick a question number you want to answer directly</div>\n                <div className=\"flex justify-center items-center text-center\">\n                  <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                    {props.candidateExam.candidate_exam.questions.map((item, i) => (\n                      PendingQuest.find(itm => itm.id === item.id)?.id !== undefined &&\n                        <div onClick={() => { \n                          props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                            props.candidateExam.candidate_exam.id,\n                            item.id\n                          );\n                          props.setSubmitModal(false);\n                        }} key={i + 1} className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\">{i + 1}</div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                <div onClick={() => props.setSubmitModal(false)} className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\">Back to edit</div>\n                <div onClick={() => props.submitExam()} className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\">Submit anyway</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      : \n      <div className=\"px-4 pb-2\">\n        <div className=\"flex flex-row items-center justify-between mb-4\">\n          <div className=\"text-blue-700 font-bold\">Hey <b><u>{props.auth.user.fname}</u></b>, All questions have been answered, are you sure do you want to submit the final answers?</div>\n          <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n        </div>\n        <div className=\"flex flex-row items-center justify-between\">\n          <div onClick={() => props.setSubmitModal(false)} className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\">\n            <span className=\"\">Back to edit</span>\n          </div>\n          <div onClick={() => { props.submitExam() }} className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\">\n            <MdCheckCircle className=\"text-3xl\" />\n            <span className=\"\">Submit exam</span>\n          </div>\n        </div>\n        \n        <div className=\"my-2\">\n          <div className=\"font-extrabold text-xl text-gray-700 my-2 mt-4\">Verify your answers</div>\n          <div className=\"flex flex-col gap-3 overflow-y-auto\" style={{maxHeight: '100%'}}>\n            {props.candidateExam.candidate_exam === null ? <Loading /> :\n            AnsweredQuest.length > 0 && AnsweredQuest.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{i + 1}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question[0].description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        Done\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-span-2 float-right flex items-center justify-end\">\n                    <div onClick={() => { \n                      props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                        props.candidateExam.candidate_exam.id,\n                        item.id\n                      );\n                      props.setSubmitModal(false);\n                    }} className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\">Edit</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nexport default QuestionsReview\n","import React, { Fragment } from 'react'\nimport { useState } from 'react'\nimport { IoDocumentTextOutline } from 'react-icons/io5'\nimport { MdCheckCircle, } from 'react-icons/md'\nimport Modal, { Themes, ModalSize, ModalMarginTop } from '../../../components/Modal/Modal'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from '../utils/utils'\nimport { course } from '../../../interfaces'\nimport QuestionsReview from './QuestionsReview'\nimport { CountDown } from '../../../components/CountDown/CountDown'\n\ninterface TestTitleInterface { \n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n  start_time: string;\n  duration_min: number;\n  timeout: () => void;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n  \n  const TotalAnswered: number = props.candidateExam.candidate_exam ? NumberOfAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam ? (TotalAnswered*100)/props.candidateExam.candidate_exam.questions.length : 0;\n  return (\n    <Fragment>\n    <div className=\"bg-gray-800\">\n      <div className=\"grid grid-cols-6\">\n        <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n          <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n            <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n            <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n              <span className=\"font-bold text-lg truncate -mb-1\">{props.selectedExam?.course_name}</span>\n              <span className=\"text-gray-300 text-xs truncate\">Code: {props.selectedExam?.course_code}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-4\" style={{alignSelf: \"center\"}}>\n          <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n            <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n              <div className=\"text-gray-200 text-sm w-full hidden lg:block\">Completed {TotalAnswered} of {props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.questions.length}</div>\n              <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                <div className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\" style={{width: `${answeredPercentage}%`}}></div>\n              </div>\n              <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                <div className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\" style={{width: `${answeredPercentage}%`}}>\n                  <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">{answeredPercentage}%</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-4 hidden lg:block h-full\">\n              <div className=\"flex flex-row justify-center items-center h-full\">\n                <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                  <div>Start time: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam?.start_time}</span></div>\n                  <div>Duration: <span className=\"font-bold text-gray-200\">\n                    {props.candidateExam.candidate_exam && \n                    props.candidateExam.candidate_exam.duration/60 > 1 ?\n                    props.candidateExam.candidate_exam.duration/60 + \" hours\" : \n                    props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.duration/60 + \" hour\"}\n                    {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.duration % 60 > 0 && \", \" + props.candidateExam.candidate_exam.duration % 60 + \" mins\" }\n                  </span></div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-5 bg-gray-800\">\n              <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                  <span>Counting down</span>\n                  <div className=\"text-lg lg:text-xl font-bold\">\n                    <CountDown\n                      start_time={props.start_time}\n                      duration_min={props.duration_min}\n                      timeout={() => props.timeout()}\n                      returnString={true}\n                      labels\n                      days\n                    />\n                  </div>\n                </div>\n                {props.submitQuestionAnswer === true ? \n                <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 animate-pulse\">Saving...</div> : \n                <button onClick={() => {props.SubmitAnswer(); setSubmitModal(true)}} type=\"button\" className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\">\n                  <MdCheckCircle className=\"text-white text-xl\" />\n                  <span>Submit</span>\n                </button>}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {submitModal === true && \n    <Modal\n      title={\"\"}\n      backDrop={true}\n      theme={props.candidateExam.question_answers.length === 0 ? Themes.default : Themes.default}\n      close={() => setSubmitModal(false)}\n      backDropClose={true}\n      widthSizeClass={ModalSize.maxWidth}\n      displayClose={false}\n      padding={{title: false,}}\n      marginTop={ModalMarginTop.small} >\n        <QuestionsReview \n        auth={props.auth} \n        candidateExam={props.candidateExam} \n        system={props.system} \n        setSelectedExamQuestion={props.setSelectedExamQuestion} \n        submitQuestionAnswer={props.submitQuestionAnswer} \n        questionTypes={props.questionTypes} \n        loadQuestionTypes={props.loadQuestionTypes} \n        submitExam={props.submitExam} \n        selectedExam={props.selectedExam}\n        setSubmitModal={setSubmitModal} />\n    </Modal>}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth; candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React from \"react\";\nimport { MdCheckCircleOutline, MdHighlightOff } from \"react-icons/md\";\nimport { InitialExamDetails } from \"../../actions/candidate_exam\";\n\ninterface ProctoringRuleItemProps {\n  examDetails: () => InitialExamDetails | null;\n  rule_key: string;\n}\n\nconst ProctoringRuleItem = (props: ProctoringRuleItemProps) => {\n  const getDetails = () => {\n    let res: {\n      value: string;\n      status: boolean;\n    } | null = null;\n    if (props.examDetails() !== null) {\n      switch (props.rule_key) {\n        case \"right_click_enabled\":\n          res = {\n            value: \"Right click\",\n            status: props.examDetails()!.rules.right_click_enabled,\n          };\n          break;\n        case \"copy_enabled\":\n          res = {\n            value: \"Copy text\",\n            status: props.examDetails()!.rules.copy_enabled,\n          };\n          break;\n        case \"paste_enabled\":\n          res = {\n            value: \"Paste item or text\",\n            status: props.examDetails()!.rules.paste_enabled,\n          };\n          break;\n        case \"stop_candidate_when_comeback\":\n          res = {\n            value: \"Coming back after leaving\",\n            status: props.examDetails()!.rules.stop_candidate_when_comeback,\n          };\n          break;\n        case \"allow_to_leave_browser\":\n          res = {\n            value: \"Leave browser\",\n            status: props.examDetails()!.rules.allow_to_leave_browser,\n          };\n          break;\n      }\n    }\n    return res;\n  };\n  return (\n    <div className=\"flex flex-row items-center justify-between w-full border-b py-2\">\n      <div\n        className={`flex flex-row items-center ${\n          getDetails()?.status === true\n            ? \"text-blue-600 font-bold\"\n            : \"text-yellow-800 font-bold\"\n        }`}\n      >\n        {getDetails()?.status === true ? (\n          <MdCheckCircleOutline className=\"text-2xl mr-3\" />\n        ) : (\n          <MdHighlightOff className=\"text-2xl mr-3\" />\n        )}\n        <span>{getDetails()?.value}</span>\n      </div>\n      <span\n        className={`rounded-full px-3 py-1 border font-bold ${\n          getDetails()?.status === true\n            ? \"bg-white text-blue-800 border-blue-100\"\n            : \"bg-yellow-50 text-yellow-800 border-yellow-100\"\n        }`}\n      >\n        {getDetails()?.status === true ? \"Allowed\" : \"Prohibited\"}\n      </span>\n    </div>\n  );\n};\n\nexport default ProctoringRuleItem;\n","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  Socket,\n  FC_AddRules,\n  FT_AddRules,\n  CleanCandidateExamAnswers,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  EventInterface,\n  Events,\n  EventsLabels,\n  LiveServer__Room,\n  question_answer,\n} from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport {\n  CandidateExam,\n  CandidateExamQuestionAnswer,\n  ExamInterface,\n  ExamResultsDetails,\n  examStatus,\n  UserExamActions,\n  userExamDetails,\n} from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport ProctoringRuleItem from \"../../components/ProctoringRuleItem/ProctoringRuleItem\";\n\ninterface DoExamProps {\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (\n    exam_id: string,\n    CheckUserExam: (candidateExam: CandidateExam) => void,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (\n    userExamDetails: userExamDetails,\n    callback: (loading: boolean) => void,\n    setLoadExamResultMessage: (msg: string, status: boolean) => void,\n    BackToExamination: (exam: ExamResultsDetails) => void\n  ) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  CleanCandidateExamAnswers: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (\n    answer: CandidateExamQuestionAnswer,\n    callback: (loading: boolean) => void,\n    actionStatus: (msg: string, status: boolean) => void\n  ) => void;\n  GetUserExamDetails: (\n    request: RequestUserExamDetailsInterface,\n    callback: (loading: boolean) => void\n  ) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n  setExamStatus: (\n    exam_id: string,\n    action: UserExamActions,\n    reason: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_SaveEvent: Function;\n  socket: Socket;\n  FC_AddRules: FT_AddRules;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n  changingExamStatus: boolean;\n  inExam: boolean;\n\n  // Exam counter\n  start_exam: boolean;\n  start_time: string;\n  duration: number;\n  added_minutes: number;\n  group_id: string;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n      changingExamStatus: false,\n      // timer\n      start_exam: false,\n      start_time: \"\",\n      duration: 0,\n      added_minutes: 0,\n      group_id: \"\",\n      inExam: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  };\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  changingExamStatusLoading = (status: boolean) => {\n    this.setState({ changingExamStatus: status });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check;\n      }\n    }\n    return null;\n  };\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (\n      this.props.positions.selected_position !== null &&\n      this.props.candidateExam.selected_exam_details !== null\n    ) {\n      if (this.props.candidateExam.exam_room_details !== null) {\n        // alert(this.props.candidateExam.exam_room_details.district_id)\n        this.props.RequestUserExamDetails(\n          {\n            user: this.props.auth.user.user_id,\n            position: this.props.positions.selected_position.position_id,\n            exam: exam,\n            userExamLocation: {\n              district_id:\n                this.props.candidateExam.exam_room_details.district_id,\n              center_id: this.props.candidateExam.exam_room_details.center_id,\n              room_id: this.props.candidateExam.exam_room_details.room_id,\n            },\n          },\n          this.setLoading,\n          this.setLoadExamResultMessage,\n          this.props.BackToExamination\n        );\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  componentWillUnmount = () => {\n    if (this.props.candidateExam.exam_room_details) {\n      this.props.socket.socket.emit(Events.USER_DISCONNECTED_ONLINE_SERVER, {\n        room_id: this.props.candidateExam.exam_room_details.room_id,\n        user_id: this.props.auth.user.user_id,\n      });\n    }\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      this.props.GetUserExamDetails(\n        {\n          period: this.props.candidateExam.candidate_exam.period,\n          course: this.props.candidateExam.candidate_exam.course,\n          user: this.props.auth.user.user_id,\n        },\n        this.setLoading\n      );\n      let test = this.props.candidateExam.user_exams_done.find(\n        (itm) => itm.id === this.props.candidateExam.candidate_exam?.id\n      );\n      if (test === undefined) {\n        this.props.CleanCandidateExam(\n          this.props.candidateExam.candidate_exam.id\n        );\n      }\n    }\n  };\n\n  SubmitAnswer = () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.question_answers.length > 0\n    ) {\n      for (let answer of this.props.candidateExam.question_answers) {\n        if (answer.status === false) {\n          //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer(\n            {\n              exam: this.props.candidateExam.candidate_exam.id,\n              question: answer.question_id,\n              language: this.props.candidateExam.selected_language,\n              userAnswer: answer.answer,\n            },\n            this.setSubmitQuestionAnswer,\n            this.setLoadExamResultNoMessage\n          );\n        }\n      }\n    }\n  };\n\n  submitExam = async () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.exam_room_details !== null\n    ) {\n      let exam_id = this.props.candidateExam.candidate_exam.id;\n      let position_id = this.props.candidateExam.exam_room_details.position_id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(\n          `${API.DO_EXAM}/user/submit/${exam_id}/${position_id}`\n        );\n        if (res) {\n          console.log(\"Put: \", res);\n          this.doneExam();\n          console.log(\"this.doneExam() => submitExam()\");\n\n          this.props.CleanCandidateExam(exam_id);\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success,\n          });\n        }\n      } catch (error: any) {\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  };\n\n  startExam = () => {\n    this.setState({ display_exam: true, start_exam: true });\n    this.props.candidateExam.selected_exam_id !== null &&\n      this.props.loadCandidateExam(\n        this.props.candidateExam.selected_exam_id,\n        this.checkUserExam,\n        this.setLoading\n      );\n  };\n  pauseExam = () => {\n    this.setState({ display_exam: false, start_exam: false, inExam: false });\n  };\n\n  doneExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.user_exam_details !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id: this.props.auth.application_session?._id,\n        description: \"Done the exam\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.DONE_EXAM,\n        exam_id: this.props.candidateExam.user_exam_details.ExamId.exam_old_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.EXAM_DONE_SERVER, data);\n    }\n  };\n\n  timeOutExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.user_exam_details !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id: this.props.auth.application_session?._id,\n        description: \"Time out\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.TIME_OUT,\n        exam_id: this.props.candidateExam.user_exam_details.ExamId.exam_old_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.TIME_OUT_SERVER, data);\n      this.submitExam();\n      console.log(\"this.submitExam(); ==> timeOutExam()\");\n    }\n  };\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/applications\" />;\n    }\n\n    if (\n      this.state.loading === true ||\n      this.props.candidateExam.exam_room_details === null\n    ) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Loading, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Submitting your exam, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50 w-full\">\n        <Fragment>\n          {console.log(\"Rules: \")}\n          {this.state.inExam === false ? (\n            <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n              <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n                <div className=\"text-gray-600 text-lg px-4 mb-4\">Confirm</div>\n                <Loading />\n              </div>\n            </div>\n          ) : (\n            <ProctoringCandidateOnline\n              startExam={() => {\n                this.startExam();\n                this.setState({ start_exam: true });\n              }}\n              restartExam={() => {\n                if (this.props.candidateExam.candidate_exam !== null) {\n                  let id = this.props.candidateExam.candidate_exam.id;\n                  this.props.CleanCandidateExamAnswers(id);\n\n                  this.props.setExamStatus(\n                    id,\n                    UserExamActions.Restart,\n                    \"Exam restarted\",\n                    this.changingExamStatusLoading\n                  );\n\n                  this.props.loadCandidateExam(\n                    id,\n                    this.checkUserExam,\n                    this.setLoading\n                  );\n                }\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              stopExam={() => {\n                // EXAM DONE ON WHOLE ROOM\n                // Stop all the room\n                // this.setState({ start_exam: false });\n                console.log(\"DONE whole room\");\n                this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.candidateExam.candidate_exam.id,\n                    UserExamActions.Done,\n                    \"Exam ended by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.id\n                  );\n              }}\n              room_id={this.props.candidateExam.exam_room_details.room_id}\n              exam_id={\n                this.props.candidateExam.user_exam_details === null\n                  ? this.props.candidateExam.selected_exam_id\n                  : this.props.candidateExam.user_exam_details.ExamId\n                      .exam_old_id\n              }\n              position_id={\n                this.props.candidateExam.exam_room_details.position_id\n              }\n              application_session_id={\n                this.props.candidateExam.exam_room_details.period_id\n              }\n              removeClient={() => {\n                // REMOVE INDIVIDUAL\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.candidateExam.candidate_exam.id,\n                    UserExamActions.Removed,\n                    \"Exam stopped\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.id\n                  );\n              }}\n              examAlreadyDone={() => console.log(\"Exam already done\")}\n              candidateStopExam={(reason: string) => {\n                // PAUSE\n                console.log(`candidateStopExam: ${reason}`);\n                // this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.candidateExam.candidate_exam.id,\n                    UserExamActions.Paused,\n                    reason,\n                    this.changingExamStatusLoading\n                  );\n              }}\n              candidateContinueExam={(reason: string) => {\n                console.log(`candidateContinueExam: ${reason}`);\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.candidateExam.candidate_exam.id,\n                    UserExamActions.Continue,\n                    reason,\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.selected_exam_id !== null &&\n                  this.props.loadCandidateExam(\n                    this.props.candidateExam.selected_exam_id,\n                    this.checkUserExam,\n                    this.setLoading\n                  );\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              joinedRoom={(data: LiveServer__Room) => {\n                console.log(\"Joined room: \", data);\n                this.setState({\n                  group_id: data.group_id,\n                });\n              }}\n              changeTime={(timer: {\n                duration: number;\n                start_time: string;\n                added_minutes: string;\n              }) => {\n                this.setState({\n                  duration: timer.duration,\n                  start_time: timer.start_time,\n                });\n              }}\n            >\n              {this.state.start_exam === false ||\n              (this.props.candidateExam.candidate_exam === null &&\n                this.state.inExam === true) ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    <MdInfoOutline className=\"text-9xl text-blue-600\" />\n                    <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">\n                      Please wait for the supervisor\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The supervisor will allow you to start your exam, please\n                      wait or contact him/her when forgot to let you start exam!\n                    </div>\n                    <Loading />\n                  </div>\n                </div>\n              ) : this.props.candidateExam.candidate_exam === null ||\n                this.props.candidateExam.user_exam_details === null ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-2 px-4 py-4 w-full h-full\">\n                    <div className=\"text-gray-500 text-lg px-4 mb-4\">\n                      Waiting for loading exam...\n                    </div>\n                    <Loading />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  {this.state.completedTest === true &&\n                  this.props.doExam.exam_answers?.exam_questions_answers\n                    ?.questionAnswers !== null ? (\n                    <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                      <DoExamResults\n                        page=\"doExam\"\n                        answeredQuestions={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers\n                        }\n                        testAnswers={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers.length === undefined\n                            ? 0\n                            : this.props.doExam.exam_answers\n                                ?.exam_questions_answers?.questionAnswers.length\n                        }\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                      <div className=\"grid md:grid-cols-12 h-full\">\n                        {this.state.windowStatus.profile === true && (\n                          <div\n                            className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                          >\n                            <Profile\n                              setProfileWindowStatus={\n                                this.setProfileWindowStatus\n                              }\n                            />\n                          </div>\n                        )}\n                        <div\n                          className={`col-span-${\n                            this.state.windowStatus.profile === false\n                              ? \"12\"\n                              : \"10\"\n                          } bg-gray-800 shadow-lg h-full`}\n                        >\n                          <div className=\"flex flex-row h-screen bg-gray-800\">\n                            <div className=\"h-full\">\n                              {/* Questions list */}\n                              <div className={`h-full`}>\n                                <QuestionsList\n                                  windowStatus={this.state.windowStatus}\n                                  setProfileWindowStatus={\n                                    this.setProfileWindowStatus\n                                  }\n                                  setQuestionsListWindowStatus={\n                                    this.setQuestionsListWindowStatus\n                                  }\n                                  questionTypes={this.props.questionTypes}\n                                  loadQuestionTypes={\n                                    this.props.loadQuestionTypes\n                                  }\n                                  SubmitAnswer={this.SubmitAnswer}\n                                />\n                              </div>\n                            </div>\n                            <div className=\"w-full h-full\">\n                              {/* Do exam test title */}\n                              <DoExamTitle\n                                setCompletedTest={this.setCompletedTest}\n                                windowStatus={this.state.windowStatus}\n                                setProfileWindowStatus={\n                                  this.setProfileWindowStatus\n                                }\n                                setQuestionsListWindowStatus={\n                                  this.setQuestionsListWindowStatus\n                                }\n                                questionTypes={this.props.questionTypes}\n                                loadQuestionTypes={this.props.loadQuestionTypes}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                                submitExam={() => {\n                                  this.submitExam();\n                                  console.log(\n                                    \"this.submitExam() ===> <DoExamTitle />\"\n                                  );\n                                }}\n                                selectedExam={this.props.course.selected_course}\n                                SubmitAnswer={this.SubmitAnswer}\n                                start_time={this.state.start_time}\n                                duration_min={this.state.duration}\n                                timeout={() => this.timeOutExam()}\n                              />\n                              {/* Question details */}\n                              <QuestionDetails\n                                questionAnswers={\n                                  this.props.doExam.exam_answers\n                                    ?.exam_questions_answers?.questionAnswers\n                                }\n                                answerQuestionFn={this.answerQuestionFn}\n                                selectedQuestion={this.state.selectedQuestion}\n                                setSelectedQuestion={this.setSelectedQuestion}\n                                preview={false}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <Footer\n                        windowStatus={this.state.windowStatus}\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                        setQuestionsListWindowStatus={\n                          this.setQuestionsListWindowStatus\n                        }\n                        questionTypes={this.props.questionTypes}\n                        loadQuestionTypes={this.props.loadQuestionTypes}\n                        SubmitAnswer={this.SubmitAnswer}\n                        submitQuestionAnswer={this.state.submitQuestionAnswer}\n                      />\n                    </div>\n                  )}\n                </div>\n              )}\n            </ProctoringCandidateOnline>\n          )}\n          {this.props.candidateExam.candidate_exam === null &&\n            this.state.inExam === false && (\n              <Modal\n                title=\"\"\n                backDrop={true}\n                theme={Themes.default}\n                close={() => this.props.setSelectedCandidateExam(null)}\n                backDropClose={false}\n                widthSizeClass={ModalSize.extraLarge}\n                displayClose={false}\n                padding={{ title: false }}\n              >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? (\n                    <Loading />\n                  ) : (\n                    <div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                        <div className=\"my-2 w-full\">\n                          <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                            {this.props.course.selected_course && (\n                              <div>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_code\n                                  }\n                                  -\n                                </span>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_name\n                                  }\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam date:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {DATE(\n                                this.examDetails()!.exam_date,\n                                \"DD/MM/YYYY\"\n                              )}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Start time:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails()?.start_time}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam duration:\n                            </span>\n                            {this.examDetails() !== null && (\n                              <span className=\"text-blue-600 font-bold\">\n                                {this.examDetails()!.duration / 60 >= 1 &&\n                                  this.examDetails()!.duration / 60 +\n                                    \" hrs\"}{\" \"}\n                                {this.examDetails()!.duration % 60 > 0 && (\n                                  <span>\n                                    {this.examDetails()!.duration % 60} mins\n                                  </span>\n                                )}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                      <div className=\"flex flex-row justify-center items-center\">\n                        {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                      </div>\n                      <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Examination rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: this.examDetails()!.termes,\n                              }}\n                            ></div>\n                          )}\n                        </div>\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Exam Proctoring rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <>\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"right_click_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"copy_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"paste_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"stop_candidate_when_comeback\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"allow_to_leave_browser\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        <span className=\"text-blue-700\">\n                          If you are ready, click to start the exam now, The\n                          system will start to count your time!\n                        </span>\n                      </div>\n                      <div className=\"flex flex-row items-center justify-between mt-2\">\n                        <button\n                          onClick={() =>\n                            this.props.setSelectedCandidateExam(null)\n                          }\n                          className=\"btn bg-gray-50 text-gray-600 border\"\n                        >\n                          Go Back\n                        </button>\n                        <button\n                          onClick={() =>\n                            // this.props.candidateExam.selected_exam_id !== null &&\n                            // this.props.loadCandidateExam(\n                            //   this.props.candidateExam.selected_exam_id,\n                            //   this.checkUserExam,\n                            //   this.setLoading\n                            // )\n                            this.setState({ inExam: true })\n                          }\n                          className=\"btn bg-blue-600 text-white\"\n                        >\n                          I accept, Start exam\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </Modal>\n            )}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n  socket,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  positions: positionsStoreInterface;\n  socket: Socket;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    course: course,\n    periods: periods,\n    questionTypes: questionTypes,\n    positions: positions,\n    socket,\n  };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  FC_AddRules,\n  CleanCandidateExamAnswers,\n})(_DoEam);\n"],"sourceRoot":""}