{"version":3,"sources":["containers/SystemSettings/index.tsx","containers/SystemSettings/SystemSettings.tsx","actions/settings.ts","components/ActionConfirm/ActionConfirm.tsx"],"names":["SettingsType","SystemSettings","React","memo","connect","auth","system_settings","systemSettings","getSystemSettings","disableSystemSetting","PushPopupAlert","props","useState","loading","setLoading","loadingRequest","setLoadingRequest","settingId","setSettingId","settingName","setSettingName","settingStatus","setSettingStatus","disableSettings","system_setting_id","status","name","a","axios","patch","API","AUTH","setting_id","res","title","theme","PopupAlertTheme","success","console","log","error","errorToText","danger","useEffect","length","msg","className","Loading","map","item","i","key","capitalizeFirstLetter","onClick","isEmptyOrSpaces","ActionConfirm","modalType","ActionConfirmEnum","OTHER","confirmFun","setModalAction","description","Index","settings","settingType","caption","selectedSetting","setSelectedSetting","url","callback","dispatch","setAxiosToken","get","type","ActionTypes","GET_SYSTEM_SETTINGS","payload","data","code_error","DISABLE_SYSTEM_SETTINGS","GetTaskAccess","response","id","task","permitted","GET_TASK_ACCESS","getPositions","APPLICATION","GET_POSTIONS","deletePosition","DELETE_POSITION","publishPosition","PUBLISH_POSITION","FC_GetPositionsByInstitution","institution_id","DELETE","RESTORE_DELETE","INFO"],"mappings":"2MAIKA,E,wKC0MUC,EARQC,IAAMC,KAC3BC,aAdsB,SAAC,GAOvB,MAAO,CACLC,KAFC,EALHA,KAQEC,gBAHC,EAJHA,gBAOmCC,kBAKV,CACvBC,sBACAC,yBACAC,qBAHFN,EA1KsB,SAACO,GACvB,MAA8BC,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4CF,mBAAiB,IAA7D,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAkCJ,mBAAiB,IAAnD,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAsCN,mBAAiB,IAAvD,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0CR,mBACxC,WADF,mBAAOS,EAAP,KAAsBC,EAAtB,KAIMC,EAAe,uCAAG,WACtBC,EACAC,EACAC,GAHsB,eAAAC,EAAA,6DAKtBX,EAAkBQ,GALI,kBAOFI,IAAMC,MAAN,UAAeC,IAAIC,KAAnB,aAAoC,CACpDC,WAAYR,EACZC,OAAQA,IATU,OAOdQ,EAPc,OAWpBtB,EAAMF,qBAAqB,CAAEe,oBAAmBC,WAChDd,EAAMD,eAAe,CACnBwB,MAAM,GAAD,OAAKR,EAAL,YAAaD,EAAb,iBACLU,MAAOC,IAAgBC,UAEzBC,QAAQC,IAAI,YAAaN,GAhBL,kDAkBpBK,QAAQE,MAAM,QAAd,MACA7B,EAAMD,eAAe,CACnBwB,MAAOO,YAAY,EAAD,IAClBN,MAAOC,IAAgBM,SArBL,QAwBtB1B,EAAkB,IAxBI,0DAAH,0DAyCrB,OAdA2B,qBAAU,WACsB,OAA1BhC,EAAML,iBAA6D,IAAjCK,EAAML,gBAAgBsC,QAC1DjC,EAAMH,mBAAkB,SAACiB,EAAiBoB,GACxC/B,EAAWW,GACPoB,EAAID,QACNjC,EAAMD,eAAe,CACnBwB,MAAOW,EACPV,MAAOC,IAAgBM,cAK9B,CAAC/B,EAAOG,IAGT,eAAC,WAAD,WACE,sBAAKgC,UAAU,OAAf,UACE,qBAAKA,UAAU,8DAAf,SACE,qBAAKA,UAAU,4CAAf,+BAYF,qBAAKA,UAAU,gBAAf,SAC6B,OAA1BnC,EAAML,kBAAwC,IAAZO,EACjC,cAACkC,EAAA,EAAD,IACmC,IAAjCpC,EAAML,gBAAgBsC,OACxB,sBAAKE,UAAU,2HAAf,UACE,cAAC,IAAD,CAAyBA,UAAU,6DACnC,4DAGFnC,EAAML,gBAAgB0C,KAAI,SAACC,EAAMC,GAAP,OACxB,sBAEEJ,UAAS,0EAFX,UAIE,sBAAKA,UAAU,gBAAf,UACE,sBAAMA,UAAU,0BAAhB,SAA2CG,EAAKvB,OAChD,sBAAMoB,UAAS,6BAAf,SACGG,EAAKE,MAER,sBACEL,UAAS,uBACS,aAAhBG,EAAKxB,OACD,eACA,kBAJR,SAOG2B,YAAsBH,EAAKxB,aAGhC,qBAAKqB,UAAU,mCAAf,SACE,sBACEA,UAAS,mBACP/B,EAAe6B,OAAS,EACpB,qBACA,iBAHG,4BAKTS,QAAS,YACNtC,EAAe6B,QACd1B,EAAa+B,EAAKzB,oBACnBT,EAAe6B,QAAUxB,EAAe6B,EAAKvB,OAC7CX,EAAe6B,QACdtB,EACkB,aAAhB2B,EAAKxB,OAAwB,UAAY,aAZjD,UAgBE,sBAAMqB,UAAU,yDAChB,sBACEA,UAAS,0JACS,aAAhBG,EAAKxB,OACD,aACA,6CAGPV,IAAmBkC,EAAKzB,kBACvB,cAAC,IAAD,CAAYsB,UAAU,0DAEtB,sBAAMA,UAAU,oBAAhB,SACmB,aAAhBG,EAAKxB,OAAwB,OAAS,cA/C1CyB,EAAID,EAAKzB,4BA2DtB8B,YAAgBrC,IAChB,cAACsC,EAAA,EAAD,CACEC,UAAWC,IAAkBC,MAC7BC,WAAY,kBACVpC,EAAgBN,EAAWI,EAAeF,IAE5CyC,eAAgB,SAACnC,IACdA,GAAUP,EAAa,KACvBO,GAAUL,EAAe,KACzBK,GAAUH,EAAiB,YAE9BuC,YAAW,gCACS,YAAlBxC,EAA8B,SAAW,UADhC,4B,SD5KhBrB,K,iCAAAA,M,KAIE,IAAM8D,EAAQ,WACnB,IAAMC,EAA6D,CACjE,CACEC,YAAahE,EAAaO,eAC1B0D,QAAS,oBAGb,EAA8CrD,mBAC5CZ,EAAaO,gBADf,mBAAO2D,EAAP,KAAwBC,EAAxB,KAGA,OACE,sBAAKrB,UAAU,GAAf,UACE,qBAAKA,UAAU,0DAAf,SACE,sBAAKA,UAAU,mCAAf,UACE,cAAC,IAAD,CAAsBA,UAAU,2BAChC,qBAAKA,UAAU,gBAAf,SACE,sBAAMA,UAAU,mCAAhB,6BAIN,qBAAKA,UAAU,qBAAf,SACE,sBAAKA,UAAU,8CAAf,UACE,qBAAKA,UAAU,6BAAf,SACGiB,EAASf,KAAI,SAACC,EAAMC,GAAP,OACZ,qBAEEG,QAAS,kBAAMc,EAAmBlB,EAAKe,cACvClB,UAAS,4BACPoB,IAAoBjB,EAAKe,YACrB,4DACA,sCAHG,kIAHX,SASGf,EAAKgB,SARDf,QAYX,qBAAKJ,UAAU,qBAAf,SACGoB,IAAoBlE,EAAaO,gBAChC,cAAC,EAAD,gB,yVElCR6D,EAAG,UAAMtC,IAAIC,KAAV,qBAwFIvB,EAAoB,SAAC6D,GAChC,8CAAO,WAAOC,GAAP,eAAA3C,EAAA,6DACL0C,GAAS,EAAM,IADV,SAGHE,cAHG,SAIe3C,IAAM4C,IAAN,UACb1C,IAAIC,KADS,oBAJf,OAIGE,EAJH,OAOHK,QAAQC,IAAI,yDACZD,QAAQC,IAAIN,GACZK,QAAQC,IAAI,yDACZ+B,EAAkC,CAChCG,KAAMC,IAAYC,oBAClBC,QAAS3C,EAAI4C,OAEfR,GAAS,EAAO,IAdb,kDAgBH/B,QAAQC,IAAI,CAAEuC,WAAW,EAAD,KACxBT,GAAS,EAAO5B,YAAY,EAAD,KAjBxB,0DAAP,uDAsBWhC,EAAuB,SAACoE,GAInC,8CAAO,WAAOP,GAAP,SAAA3C,EAAA,sDACL2C,EAAsC,CACpCG,KAAMC,IAAYK,wBAClBH,QAASC,IAHN,2CAAP,uDAUWG,EAAgB,SAACX,GAC5B,8CAAO,WAAOC,GAAP,iBAAA3C,EAAA,6DACL0C,GAAS,EAAM,IADV,SAGHE,cAHG,SAIe3C,IAAM4C,IAAN,UAObJ,EAPa,gBAJf,OAIGnC,EAJH,OAYCgD,EAAkChD,EAAI4C,KAAK7B,KAAI,SAAC6B,GAAD,MAAW,CAC5DK,GAAIL,EAAKK,GACTC,KAAMN,EAAK3C,MACXiB,IAAK0B,EAAK1B,IACViC,UAAWP,EAAKO,cAElBd,EAA8B,CAC5BG,KAAMC,IAAYW,gBAClBT,QAASK,IAEXZ,GAAS,EAAO,GAAIY,GAtBjB,kDAwBH3C,QAAQC,IAAI,CAAEuC,WAAW,EAAD,KACxBT,GAAS,EAAO5B,YAAY,EAAD,KAzBxB,0DAAP,uDAgCW6C,EAAe,SAACjB,GAC3B,8CAAO,WAAOC,GAAP,eAAA3C,EAAA,6DACL0C,GAAS,EAAM,IADV,SAGHE,cAHG,SAIe3C,IAAM4C,IAAN,UAA4B1C,IAAIyD,YAAhC,cAJf,OAIGtD,EAJH,OAKHqC,EAA6B,CAC3BG,KAAMC,IAAYc,aAClBZ,QAAS3C,EAAI4C,OAEfR,GAAS,EAAO,IATb,kDAWH/B,QAAQC,IAAI,CAAEuC,WAAW,EAAD,KACxBT,GAAS,EAAO5B,YAAY,EAAD,KAZxB,0DAAP,uDAqCWgD,EAAiB,SAACZ,GAE7B,OADAvC,QAAQC,IAAI,CAAEkD,eAAgBZ,IAC9B,uCAAO,WAAOP,GAAP,SAAA3C,EAAA,sDACL2C,EAAsC,CACpCG,KAAMC,IAAYgB,gBAClBd,QAASC,IAHN,2CAAP,uDAQWc,EAAkB,SAACd,GAI9B,8CAAO,WAAOP,GAAP,SAAA3C,EAAA,sDACL2C,EAAgC,CAC9BG,KAAMC,IAAYkB,iBAClBhB,QAASC,IAHN,2CAAP,uDAQWgB,EAA+B,SAC1CC,EACAzB,GAEA,8CAAO,WAAOC,GAAP,eAAA3C,EAAA,6DACL0C,GAAS,EAAM,IADV,SAGHE,cAHG,SAIe3C,IAAM4C,IAAN,UACb1C,IAAIyD,YADS,uCACiCO,IALhD,OAIG7D,EAJH,OAOHqC,EAA6B,CAC3BG,KAAMC,IAAYc,aAClBZ,QAAS3C,EAAI4C,OAEfR,GAAS,EAAO,GAAIpC,EAAI4C,MAXrB,kDAaHvC,QAAQC,IAAI,CAAEuC,WAAW,EAAD,KACxBT,GAAS,EAAO5B,YAAY,EAAD,KAdxB,0DAAP,wD,iCC3OF,sCAIYgB,EAJZ,kC,SAIYA,K,gCAAAA,E,gBAAAA,E,YAAAA,E,eAAAA,M,KA0EGF,IA5DqC,SAAC5C,GACnD,OACE,sBACEmC,UAAU,kLACVoC,GAAG,WAFL,UAIE,qBAAKpC,UAAU,6CACf,qBAAKA,UAAU,gIAAf,SAEE,sBAAKA,UAAU,GAAf,UAEE,sBAAKA,UAAU,2CAAf,UACGnC,EAAM6C,YAAcC,EAAkBsC,QACpCpF,EAAM6C,YAAcC,EAAkBuC,gBACrC,cAAC,IAAD,CAAelD,UAAU,wDAE5BnC,EAAM6C,YAAcC,EAAkBsC,OACrC,cAAC,IAAD,CAAiBjD,UAAU,qDACzBnC,EAAM6C,YAAcC,EAAkBuC,eACxC,cAAC,KAAD,CAAoBlD,UAAU,wDAC5BnC,EAAM6C,YAAcC,EAAkBwC,KACxC,cAAC,IAAD,CAASnD,UAAU,sDAEnB,cAAC,IAAD,CAASA,UAAU,wDAErB,oBAAIA,UAAU,0BAAd,2BACA,mBAAGA,UAAU,6BAAb,SAA2CnC,EAAMkD,iBAGnD,sBAAKf,UAAU,2CAAf,UACE,wBACEA,UAAU,mJACVO,QAAS,kBAAM1C,EAAMiD,gBAAe,IAFtC,oBAMA,wBACEd,UAAS,6HACPnC,EAAM6C,YAAcC,EAAkBsC,OAClC,6CACApF,EAAM6C,YAAcC,EAAkBuC,eACtC,sDACArF,EAAM6C,YAAcC,EAAkBwC,KACtC,gDACA,uDAEN5C,QAAS,WACP1C,EAAMgD,aACNhD,EAAMiD,gBAAe,IAZzB","file":"static/js/40.820b2538.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { RiFolderSettingsFill } from \"react-icons/ri\";\nimport SystemSettings from \"./SystemSettings\";\n\nenum SettingsType {\n  systemSettings = \"systemSettings\",\n}\n\nexport const Index = () => {\n  const settings: { settingType: SettingsType; caption: string }[] = [\n    {\n      settingType: SettingsType.systemSettings,\n      caption: \"System Settings\",\n    },\n  ];\n  const [selectedSetting, setSelectedSetting] = useState<SettingsType | null>(\n    SettingsType.systemSettings\n  );\n  return (\n    <div className=\"\">\n      <div className=\"mt-3 rounded flex flex-row justify-between items-center\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <RiFolderSettingsFill className=\"text-6xl text-blue-600\" />\n          <div className=\"flex flex-col\">\n            <span className=\"text-blue-600 text-2xl font-bold\">Settings</span>\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-3 mb-6 flex-col\">\n        <div className=\"bg-white w-full border border-white rounded\">\n          <div className=\"flex flex-row items-center\">\n            {settings.map((item, i) => (\n              <div\n                key={i}\n                onClick={() => setSelectedSetting(item.settingType)}\n                className={`animate__animated ${\n                  selectedSetting === item.settingType\n                    ? \"bg-blue-100 border-blue-600 text-blue-600 animate__zoomIn\"\n                    : \"bg-white border-white text-gray-600\"\n                } hover:bg-blue-100 px-4 py-2 cursor-pointer font-bold border-b-4 hover:border-blue-600 hover:text-blue-600 rounded-t mt-1 mx-1`}\n              >\n                {item.caption}\n              </div>\n            ))}\n          </div>\n          <div className=\"=rounded mx-1 mb-1\">\n            {selectedSetting === SettingsType.systemSettings && (\n              <SystemSettings />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../actions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { StoreState } from \"../../reducers\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport {\n  disableSystemSetting,\n  getSystemSettings,\n} from \"../../actions/settings\";\nimport { SystemSettingsInterface } from \"../../shared/interfaces\";\nimport { errorToText } from \"../../utils/errors\";\nimport { VscLoading } from \"react-icons/vsc\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport ActionConfirm, {\n  ActionConfirmEnum,\n} from \"../../components/ActionConfirm/ActionConfirm\";\n\ninterface AppPropsInterface {\n  system_settings: SystemSettingsInterface[];\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  getSystemSettings: Function;\n  disableSystemSetting: Function;\n}\n\nconst _SystemSettings = (props: AppPropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [loadingRequest, setLoadingRequest] = useState<string>(\"\");\n  const [settingId, setSettingId] = useState<string>(\"\");\n  const [settingName, setSettingName] = useState<string>(\"\");\n  const [settingStatus, setSettingStatus] = useState<\"enabled\" | \"disabled\">(\n    \"enabled\"\n  );\n\n  const disableSettings = async (\n    system_setting_id: string,\n    status: \"enabled\" | \"disabled\",\n    name: string\n  ) => {\n    setLoadingRequest(system_setting_id);\n    try {\n      const res = await axios.patch(`${API.AUTH}/settings`, {\n        setting_id: system_setting_id,\n        status: status,\n      });\n      props.disableSystemSetting({ system_setting_id, status });\n      props.PushPopupAlert({\n        title: `${name} ${status} successfully`,\n        theme: PopupAlertTheme.success,\n      });\n      console.log(\"Deleted: \", res);\n    } catch (error) {\n      console.error(\"err: \", error);\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    setLoadingRequest(\"\");\n  };\n\n  useEffect(() => {\n    if (props.system_settings === null || props.system_settings.length === 0) {\n      props.getSystemSettings((status: boolean, msg: string) => {\n        setLoading(status);\n        if (msg.length) {\n          props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    }\n  }, [props, setLoading]);\n\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            System Settings\n          </div>\n          {/* {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )} */}\n        </div>\n        <div className=\"flex flex-col\">\n          {props.system_settings === null || loading === true ? (\n            <Loading />\n          ) : props.system_settings.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No settings available</span>\n            </div>\n          ) : (\n            props.system_settings.map((item, i) => (\n              <div\n                key={i + item.system_setting_id}\n                className={`border flex flex-row px-3 py-2 rounded items-start my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-bold\">{item.name}</span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.key}\n                  </span>\n                  <span\n                    className={`text-xs pr-5 ${\n                      item.status === \"disabled\"\n                        ? \"text-red-700\"\n                        : \"text-green-700\"\n                    }`}\n                  >\n                    {capitalizeFirstLetter(item.status)}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    className={`relative ${\n                      loadingRequest.length > 0\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } flex items-center gap-1`}\n                    onClick={() => {\n                      !loadingRequest.length &&\n                        setSettingId(item.system_setting_id);\n                      !loadingRequest.length && setSettingName(item.name);\n                      !loadingRequest.length &&\n                        setSettingStatus(\n                          item.status === \"disabled\" ? \"enabled\" : \"disabled\"\n                        );\n                    }}\n                  >\n                    <span className=\"block w-14 h-8 bg-gray-100 rounded-full shadow-inner\"></span>\n                    <span\n                      className={`absolute block w-6 h-6 mt-1 ml-1 rounded-full shadow inset-y-0 left-0 focus-within:shadow-outline transition-transform duration-500 ease-in-out ${\n                        item.status === \"disabled\"\n                          ? \"bg-red-500\"\n                          : \"bg-green-500 transform translate-x-full\"\n                      }`}\n                    ></span>\n                    {loadingRequest === item.system_setting_id ? (\n                      <VscLoading className=\"animate__animated animate__rotateIn animate__infinite\" />\n                    ) : (\n                      <span className=\"text-lg font-mono\">\n                        {item.status === \"disabled\" ? \"Off \" : \"On\"}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* ------------------------------------------------------------------------ */}\n      {!isEmptyOrSpaces(settingId) && (\n        <ActionConfirm\n          modalType={ActionConfirmEnum.OTHER}\n          confirmFun={() =>\n            disableSettings(settingId, settingStatus, settingName)\n          }\n          setModalAction={(status: boolean) => {\n            !status && setSettingId(\"\");\n            !status && setSettingName(\"\");\n            !status && setSettingStatus(\"enabled\");\n          }}\n          description={`Do you really want to ${\n            settingStatus === \"enabled\" ? \"enable\" : \"disable\"\n          } this setting?`}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  system_settings,\n}: StoreState): {\n  auth: Auth;\n  system_settings: SystemSettingsInterface[];\n} => {\n  return {\n    auth: auth,\n    system_settings: system_settings.systemSettings,\n  };\n};\n\nconst SystemSettings = React.memo(\n  connect(mapStateToProps, {\n    getSystemSettings,\n    disableSystemSetting,\n    PushPopupAlert,\n  })(_SystemSettings)\n);\n\nexport default SystemSettings;\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport {\n  AccessTaskInterface,\n  PermissionInterface,\n  SystemSettingsInterface,\n} from \"../shared/interfaces\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport { PositionAPI } from \"../interfaces/position\";\n\nconst url = `${API.AUTH}/auth/user/access`;\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// SYSTEM SETTINGS  ==============\nexport interface GetSystemSettingsAction {\n  type: ActionTypes.GET_SYSTEM_SETTINGS;\n  payload: SystemSettingsInterface[];\n}\n\nexport interface DisableSystemSettingsAction {\n  type: ActionTypes.DISABLE_SYSTEM_SETTINGS;\n  payload: {\n    system_setting_id: string;\n    status: \"enabled\" | \"disabled\";\n  };\n}\n\n// ROLE TASKS ACCESS SETTINGS ===================================\nexport interface GetTaskAccessAction {\n  type: ActionTypes.GET_TASK_ACCESS;\n  payload: AccessTaskInterface[];\n}\n\n// POSITIONS SETTINGS ===================================\nexport interface PositionCreateInterface {\n  position_id?: string;\n  position_title: string;\n  position_code: string;\n  description: string;\n  school_level_id: string;\n  subcategory_id: string;\n  education_institute_id: string;\n  courses: string[];\n  requirements: {\n    user_detail_category_id: string;\n    user_detail_subcategory_id: string;\n    position_requirement: {\n      category_subcategory_data_id: string;\n      required: boolean;\n    }[];\n    required: boolean;\n  }[];\n}\nexport interface GetPositionsAction {\n  type: ActionTypes.GET_POSTIONS;\n  payload: PositionAPI[];\n}\n\nexport interface CreatePositionsAction {\n  type: ActionTypes.CREATE_POSITION;\n  payload: PositionCreateInterface;\n}\n\nexport interface UpdatePositionsAction {\n  type: ActionTypes.UPDATE_POSITION;\n  payload: PositionCreateInterface;\n}\n\nexport interface DeletePositionSettingAction {\n  type: ActionTypes.DELETE_POSITION;\n  payload: string;\n}\n\nexport interface PublishPositionAction {\n  type: ActionTypes.PUBLISH_POSITION;\n  payload: {\n    position_id: string;\n    status: boolean;\n  };\n}\n\nexport type SystemActionType =\n  | GetSystemSettingsAction\n  | DisableSystemSettingsAction\n  | GetTaskAccessAction\n  | GetPositionsAction\n  | CreatePositionsAction\n  | UpdatePositionsAction\n  | DeletePositionSettingAction\n  | PublishPositionAction;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\nexport const getSystemSettings = (callback: Function) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<SystemSettingsInterface[]>(\n        `${API.AUTH}/system/setting`\n      );\n      console.log(\"=================getSystemSettings===================\");\n      console.log(res);\n      console.log(\"=================getSystemSettings===================\");\n      dispatch<GetSystemSettingsAction>({\n        type: ActionTypes.GET_SYSTEM_SETTINGS,\n        payload: res.data,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\nexport const disableSystemSetting = (data: {\n  system_setting_id: string;\n  status: \"enabled\" | \"disabled\";\n}) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DisableSystemSettingsAction>({\n      type: ActionTypes.DISABLE_SYSTEM_SETTINGS,\n      payload: data,\n    });\n  };\n};\n\n// ============================ tasks access =======================\n\nexport const GetTaskAccess = (callback: Function) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<\n        {\n          id: string;\n          title: string;\n          key: string;\n          permitted: PermissionInterface;\n        }[]\n      >(`${url}/roleaccess`);\n      let response: AccessTaskInterface[] = res.data.map((data) => ({\n        id: data.id,\n        task: data.title,\n        key: data.key,\n        permitted: data.permitted,\n      }));\n      dispatch<GetTaskAccessAction>({\n        type: ActionTypes.GET_TASK_ACCESS,\n        payload: response,\n      });\n      callback(false, \"\", response);\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// ============================ positions =======================\n\nexport const getPositions = (callback: Function) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<PositionAPI[]>(`${API.APPLICATION}/position`);\n      dispatch<GetPositionsAction>({\n        type: ActionTypes.GET_POSTIONS,\n        payload: res.data,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\nexport const createPosition = (data: PositionCreateInterface) => {\n  console.log({ createPosition: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<CreatePositionsAction>({\n      type: ActionTypes.CREATE_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const updatePosition = (data: PositionCreateInterface) => {\n  console.log({ updatePosition: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdatePositionsAction>({\n      type: ActionTypes.UPDATE_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const deletePosition = (data: string) => {\n  console.log({ deletePosition: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<DeletePositionSettingAction>({\n      type: ActionTypes.DELETE_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const publishPosition = (data: {\n  position_id: string;\n  status: boolean;\n}) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<PublishPositionAction>({\n      type: ActionTypes.PUBLISH_POSITION,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_GetPositionsByInstitution = (\n  institution_id: string,\n  callback: (status: boolean, msg: string, data?: PositionAPI[]) => void\n) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      setAxiosToken();\n      const res = await axios.get<PositionAPI[]>(\n        `${API.APPLICATION}/position/instituteposition/${institution_id}`\n      );\n      dispatch<GetPositionsAction>({\n        type: ActionTypes.GET_POSTIONS,\n        payload: res.data,\n      });\n      callback(false, \"\", res.data);\n    } catch (error) {\n      console.log({ code_error: error });\n      callback(false, errorToText(error));\n    }\n  };\n};\n","import { FiAlertCircle } from \"react-icons/fi\";\nimport { GoAlert } from \"react-icons/go\";\nimport { MdDeleteForever, MdRestoreFromTrash } from \"react-icons/md\";\n\nexport enum ActionConfirmEnum {\n  RESTORE_DELETE = \"restore_delete\",\n  DELETE = \"delete\",\n  INFO = \"info\",\n  OTHER = \"other\",\n}\n\ninterface ActionConfirmProps {\n  confirmFun: Function;\n  setModalAction: (value: boolean) => void;\n  description: string;\n  modalType: ActionConfirmEnum;\n}\n\nconst ActionConfirm: React.FC<ActionConfirmProps> = (props) => {\n  return (\n    <div\n      className=\"min-w-screen h-screen animated fadeIn faster  fixed  left-0 top-0 flex justify-center items-center inset-0 z-50 outline-none focus:outline-none bg-no-repeat bg-center bg-cover\"\n      id=\"modal-id\"\n    >\n      <div className=\"absolute bg-black opacity-80 inset-0 z-0\"></div>\n      <div className=\"w-full  max-w-lg p-5 relative mx-auto my-auto rounded-xl shadow-lg bg-white animate__animated animate__zoomIn animate__faster\">\n        {/* <!--content--> */}\n        <div className=\"\">\n          {/* <!--body--> */}\n          <div className=\"text-center p-5 flex-auto justify-center\">\n            {props.modalType === ActionConfirmEnum.DELETE ||\n              (props.modalType === ActionConfirmEnum.RESTORE_DELETE && (\n                <FiAlertCircle className=\"w-4 h-4 -m-1 flex items-center text-red-500 mx-auto\" />\n              ))}\n            {props.modalType === ActionConfirmEnum.DELETE ? (\n              <MdDeleteForever className=\"w-16 h-16 flex items-center text-red-500 mx-auto\" />\n            ) : props.modalType === ActionConfirmEnum.RESTORE_DELETE ? (\n              <MdRestoreFromTrash className=\"w-16 h-16 flex items-center text-yellow-800 mx-auto\" />\n            ) : props.modalType === ActionConfirmEnum.INFO ? (\n              <GoAlert className=\"w-16 h-16 flex items-center text-blue-500 mx-auto\" />\n            ) : (\n              <GoAlert className=\"w-16 h-16 flex items-center text-yellow-500 mx-auto\" />\n            )}\n            <h2 className=\"text-xl font-bold py-4 \">Are you sure?</h2>\n            <p className=\"text-sm text-gray-500 px-8\">{props.description}</p>\n          </div>\n          {/* <!--footer--> */}\n          <div className=\"p-3  mt-2 text-center space-x-4 md:block\">\n            <button\n              className=\"mb-2 md:mb-0 bg-white px-5 py-2 text-sm shadow-sm font-medium tracking-wider border text-gray-600 rounded-full hover:shadow-lg hover:bg-gray-100\"\n              onClick={() => props.setModalAction(false)}\n            >\n              Cancel\n            </button>\n            <button\n              className={`mb-2 md:mb-0 border px-5 py-2 text-sm shadow-sm font-medium tracking-wider text-white rounded-full hover:shadow-lg ${\n                props.modalType === ActionConfirmEnum.DELETE\n                  ? \"border-red-500 hover:bg-red-600 bg-red-500\"\n                  : props.modalType === ActionConfirmEnum.RESTORE_DELETE\n                  ? \"border-yellow-700 hover:bg-yellow-800 bg-yellow-700\"\n                  : props.modalType === ActionConfirmEnum.INFO\n                  ? \"border-blue-500 hover:bg-blue-600 bg-blue-500\"\n                  : \"border-yellow-500 hover:bg-yellow-600 bg-yellow-500\"\n              }`}\n              onClick={() => {\n                props.confirmFun();\n                props.setModalAction(false);\n              }}\n            >\n              Confirm\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ActionConfirm;\n"],"sourceRoot":""}