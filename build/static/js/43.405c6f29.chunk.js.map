{"version":3,"sources":["utils/question_bank.ts","components/Courses/Courses.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","components/Questions/QuestionItem.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","_UploadQuestion","props","setLoading","setState","loading","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedEducationCategory","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","item","period","periods","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","loadCourses","state","searchCourseInput","className","this","education_category_title","school_level_name","onChange","e","target","value","placeholder","onClick","schoolLevels","education_categories","loadEducationCategories","loadSchoolLevels","style","minHeight","searchData","map","setSelectedCourse","selected_course_id","course_name","course_code","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","educationCategories","Component","UploadQuestion","connect","auth","questionBank","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","toMatching","selectedQuestionItem","answers","answer","selectedKey","QuestionAnswer","data","wholeQuestion","language","selectedLanguage","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","useState","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","marks","setSelectedKey","QuestionLanguages","lang","checkAns","uuidv4","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","console","log","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","toNumerical","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","_id","description","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","window","confirm","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","questionAnswers","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","selectedCourse","chapters","setAddChapter","addedChapters","name","ChangeLanguage","languagesList","visible","setVisible","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","selectedQuestion","question","langItem","testLangQ","l","QuestionLang","actionStatus","PushPopupAlert","PopupAlertTheme","success","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","a","addedQuestion","question_id","customNumber","is_deleted","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","questionLangs","testing","Loading","LoadingType","white","onSubmit","Modal","large","Courses","selected_course","EditQuestion","system","prepareExam","setUploadedQuestions","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","QuestionItem","editMode","setEditMode","setSelectedQuestion","select","callBack","number","extraLarge","questionsList","answerQuestionFn","preview","submitQuestionAnswer","Questions","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","questions","temp","x","useEffect","to","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","actionType","changeProctoringRule","proctoringRules","newData","selected","addQuestionToPaper","removeToQuestionPaper","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","is_active","formErr","selectCourse","currentStep","StepStatus","Step1","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","validateTwoTime","axios","post","API","QBank","exam_status","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","redirectToExams","errors","message","applicationPeriods","loadApplicationPeriods","examsList","loadExamsListByPeriod","application_session","editQuestion","total","handleChangeTermes","setSelectCourse","setSelectPeriod","GetExamsByPeriod","setSelectedPeriod","Prepare","addQuestionModal","submitExam","qts","stepStatus","disabled","NoResultThemes","Dark","AlertInterface","body","PrepareExam","loadExamsList","PrepareExamSteps","Steps","session_plan_name","Switch","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/43.405c6f29.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course !== null && (\n              <QuestionChapters\n                selectedCourse={\n                  this.props.course.courses &&\n                  this.props.course.courses.find(\n                    (itm) => itm.course_id === this.state.course\n                  )\n                }\n                addedChapters={this.state.chapters}\n                setAddChapter={this.setAddChapter}\n              />\n            )}\n            <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n              <div className=\"\"></div>\n              <div\n                className=\"btn bg-blue-600 text-white cursor-pointer\"\n                onClick={() => this.setState({ showQuestionChapters: false })}\n              >\n                Done\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      <div\n        onClick={() => props.select === true && props.callBack(props.question)}\n        className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n          props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n        } hover:border-blue-600 mb-3`}\n      >\n        <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n          <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n            <div>\n              {props.select === false ? (\n                <div className=\"font-bold text-blue-600\">({props.number})</div>\n              ) : props.status === true ? (\n                <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n              ) : (\n                <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n              )}\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">\n                {props.questionTypes.questionTypes &&\n                  props.questionTypes.questionTypes.find(\n                    (itm) => itm.id && itm.id === props.question.type\n                  )?.title}\n              </span>\n              <span className=\"font-bold\">\n                {props.question.question[0].title}\n              </span>\n              <div\n                className=\"w-full text-xs\"\n                dangerouslySetInnerHTML={{\n                  __html: props.question.question[0].description,\n                }}\n              ></div>\n            </div>\n          </div>\n          {props.select === false && (\n            <div className=\"flex flex-row items-center gap-2\">\n              <div\n                onClick={() => setSelectedQuestion(props.question)}\n                className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <CgDetailsMore className=\"text-3xl text-gray-700\" />\n              </div>\n              <div\n                onClick={() => setEditMode(true)}\n                className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <MdEdit className=\"text-3xl text-blue-700\" />\n              </div>\n              <div\n                onClick={() =>\n                  props.select === false && props.callBack(props.question)\n                }\n                className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <IoMdTrash className=\"text-3xl text-yellow-700\" />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      {editMode === true && (\n        <Modal\n          title=\"\"\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setEditMode(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={false}\n          padding={{ title: false }}\n        >\n          <div className=\"pt-0\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        </Modal>\n      )}\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n\nexport interface ExamItemResponseFull {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  course_id: string;\n  course_code: string;\n  course_name: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.setLoading\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) =>\n              itm.period === this.props.periods.selected_period?.session_plan_id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => {\n              if (\n                this.props.periods.selected_period !== null &&\n                this.props.periods.selected_period.is_active === true\n              ) {\n                this.setState({ selectPeriod: false });\n              } else {\n                alert(\"Please choose active session\");\n              }\n            }}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n})(_PrepareExam);\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}