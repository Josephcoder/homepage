{"version":3,"sources":["containers/DoExam/QuestionDetails/ConvertingAnswers.ts","components/QuestionPreview/QuestionPreview.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/Essay.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/AnswersTypesCollection.tsx","containers/DoExam/QuestionDetails/Answers/HybridAnswers.tsx"],"names":["toMultipleChoice","answers","res","answer","id","value","status","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","EmbeddedQuestion","selectedQuestion","questionTypes","language","questionAnswers","addAnswer","newTextResult","question","find","itm","findQuestionType","type","questionTypeElementsType","Embedded","answeredQuestions","undefined","userQuestionAnswers","question_id","originalText","description","split","check","test","reference","parseInt","sub_question","push","data","answerCheck","answered","length","QuestionForEmbedded","SingleMultiple","className","onChange","e","select","target","_id","alert","map","item","i","ShortAnswer","returnSelect","typeShort","QuestionPreview","connect","auth","doExam","candidateExam","system","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","props","useState","loading","setLoading","selectLang","setSelectLang","selectedLanguage","setSelectedLanguage","filterLanguages","langs","langItem","testLangQ","QuestionLanguages","l","key","useEffect","LoadingType","white","dangerouslySetInnerHTML","__html","title","marks","onClick","style","width","question_answers","Hybrid","MultipleChoice","available_answers","selectedQuestionAnswer","selectedAns","answerQuestionFn","TrueFalse","candidate_exam","questions","Matching","selectedExam","shuffledAnswers","Shuffle","SimpleCalculate","Numeric","CalculatedMultipleChoice","Essay","wholeQuestion","checkAnswer","checkA","tes","x","addAnswerItemFn","newAnswers","questionAnswer","a","oldAnswers","selAns","tester","temp","t","newAnswersMultiple","xItem","SimpleCalculated","answeredValue","checkB","minHeight","Numerical","filter","getRandomArbitrary","toFixed","toString","MatchingSelect","closeWindow","selectedAnswer","findWord","checkIfSelected","displayWindow","setDisplayWindow","setSelectedAnswer","ans","selectedQuestionId","selectedLang","ansi","testing","lang","testLang","checkE","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","AnswersTypesCollection","QuestionForHybrid","Calculated","HybridAnswers","stri","String","fromCharCode","charCodeAt","hybrid"],"mappings":"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","file":"static/js/8.04ade837.chunk.js","sourcesContent":["import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toEmbedded,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\nimport Essay from \"../../containers/DoExam/QuestionDetails/Answers/Essay\";\nimport {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n  regExEmbedded,\n} from \"@mastrecruit/common\";\nimport Embedded from \"../../containers/DoExam/QuestionDetails/Answers/Embedded\";\nimport Hybrid from \"../../containers/DoExam/QuestionDetails/Answers/Hybrid\";\nimport HybridAnswers from \"../../containers/DoExam/QuestionDetails/Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst returnSelect = (\n  data: QuestionAnswerInterface,\n  type: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid,\n  questionAnswers: QuestionAnswerInterface[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let answers: QuestionAnswerFormat[] = [];\n  for (let answer of data.answer) {\n    answers.push({\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    });\n  }\n  let answerCheck: QuestionAnswerInterface | undefined = questionAnswers.find(\n    (itm) => itm.reference === data.reference\n  );\n  let answered: QuestionAnswerFormat[] = [];\n  if (answerCheck !== undefined) {\n    answered = answerCheck.answer;\n  }\n  if (answers.length > 0) {\n    if (type === QuestionForEmbedded.SingleMultiple) {\n      return (\n        <span className=\"w-max\">\n          <select\n            className={`px-3 py-2 rounded text-base max-w-full border border-gray-300 ${\n              answered.length !== 0 &&\n              answers.find((itm) => itm.id === answered[0].id) !== undefined\n                ? \"text-blue-600 font-bold\"\n                : \"text-gray-700 font-bold\" //Example of condition of changing color\n            }`}\n            value={answered.length === 0 ? \"\" : answered[0].id}\n            onChange={(e) => {\n              let select = answers.find((itm) => itm.id === e.target.value);\n              if (select !== undefined) {\n                addAnswer({\n                  _id: data._id,\n                  reference: data.reference,\n                  answer: [\n                    {\n                      id: select.id,\n                      value: select.value,\n                      status: select.status,\n                    },\n                  ],\n                });\n              } else {\n                alert(\"Invalid choice!\");\n              }\n            }}\n          >\n            <option value={\"\"}>Choose correct answer</option>\n            {answers.map((item, i) => (\n              <option value={item.id} key={i + 1}>\n                {item.value}\n              </option>\n            ))}\n          </select>\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"w-max bg-green-100\">\n          <input\n            value={\n              answered.length === 0\n                ? \"\"\n                : type === QuestionForEmbedded.ShortAnswer\n                ? answered[0].value\n                : answered[0].value[0]\n            }\n            onChange={(e) => {\n              addAnswer({\n                _id: data._id,\n                reference: data.reference,\n                answer: [\n                  {\n                    id: answers[0].id,\n                    value:\n                      type === QuestionForEmbedded.ShortAnswer\n                        ? e.target.value\n                        : [e.target.value],\n                    status: answers[0].status,\n                  },\n                ],\n              });\n            }}\n            type=\"text\"\n            className=\"bg-white px-3 py-1 rounded text-base text-blue-600 font-bold border border-gray-300\"\n          />\n        </span>\n      );\n    }\n  } else {\n    return <div>Question not valid!</div>;\n  }\n};\n\nexport const EmbeddedQuestion = (\n  selectedQuestion: QuestionInterface,\n  questionTypes: questionType[] | null,\n  language: QuestionLanguage,\n  questionAnswers: QuestionAnswersStore[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let newTextResult = [];\n  // Testing Question\n  let question = selectedQuestion.question.find(\n    (itm) => itm.language === language\n  );\n  if (\n    findQuestionType(selectedQuestion.type, questionTypes) !== null &&\n    findQuestionType(selectedQuestion.type, questionTypes) ===\n      questionTypeElementsType.Embedded\n  ) {\n    let answeredQuestions: QuestionAnswerInterface[] = [];\n    if (question !== undefined) {\n      let userQuestionAnswers = questionAnswers.find(\n        (itm) => itm.question_id === selectedQuestion.question_id\n      );\n      if (userQuestionAnswers !== undefined) {\n        answeredQuestions = userQuestionAnswers.answers;\n      }\n\n      var answers = question.answers;\n      var originalText = question.description.split(\" \");\n      // var newTexts = question.description.match(regExEmbedded);\n\n      for (let check of originalText) {\n        let test = answers.find((itm) => itm.reference === parseInt(check[1]));\n        if (test !== undefined) {\n          // Find type of subQuestion\n          let type = question.sub_question.find(\n            (itm) => itm.reference === parseInt(check[1])\n          );\n          if (type !== undefined) {\n            newTextResult.push(\n              returnSelect(test, type.typeShort, answeredQuestions, addAnswer)\n            );\n          }\n        } else {\n          newTextResult.push(check);\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"w-full text-base font-semibold mt-2\">\n      {newTextResult.map((item, i) => (\n        <span key={i + 1} className=\"mr-1\">\n          {item}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-40 md:pb-10\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div className=\"flex flex-row justify-between w-full\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.title,\n                      }}\n                      className=\"text-sm text-gray-600 mb-2\"\n                    ></div>\n\n                    {/* Languages */}\n                    <div className=\"flex flex-row gap-2\">\n                      <div className=\"px-3 py-1 rounded-full flex items-center justify-center text-base font-bold bg-white text-blue-800\">\n                        {props.selectedQuestion.marks} marks\n                      </div>\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                    setSelectedLanguage(item.key);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    selectedLanguage === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {selectedLanguage === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {props.selectedQuestion.question_id !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) === questionTypeElementsType.Embedded ? (\n                    EmbeddedQuestion(\n                      props.selectedQuestion,\n                      props.questionTypes.questionTypes,\n                      selectedLanguage,\n                      props.candidateExam.question_answers,\n                      () => {}\n                    )\n                  ) : (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold mt-2\"\n                    ></div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.Hybrid)\n                ? \"\"\n                : \"bg-white\"\n            } rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n\n            {/* Numerical */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Essay answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toEssay(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers,\n                  }}\n                  wholeQuestion={props.selectedQuestion.question.find(\n                    (itm) => itm.language === selectedLanguage\n                  )}\n                  answerQuestionFn={props.answerQuestionFn}\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    // Problem here!\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        // Check type of question\n        let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n        if (props.type === questionTypeElementsType.SingleMultiple) {\n          for (let t of selAns.answer) {\n            temp = [\n              ...temp,\n              {\n                id: t.id,\n                value: t.value,\n                status: false,\n              },\n            ];\n          }\n          addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n        }\n        let newAnswersMultiple: MultipleChoiceQuestionAnswerInterface[] = [];\n\n        for (let xItem of temp.length === 0 ? selAns.answer : temp) {\n          if (xItem.id === item.id) {\n            newAnswersMultiple = [\n              ...newAnswersMultiple,\n              {\n                id: xItem.id,\n                value: xItem.value,\n                status:\n                  props.type === questionTypeElementsType.SingleMultiple\n                    ? true\n                    : !xItem.status,\n              },\n            ];\n          } else {\n            newAnswersMultiple = [...newAnswersMultiple, xItem];\n          }\n\n          addAnswerItemFn(\n            newAnswersMultiple,\n            props.selectedQuestionAnswer.selectedAns\n          );\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: TrueFalseQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n\n  const addAnswer = (\n    //This has a problem\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let temp: TrueFalseQuestionAnswerInterface[] = [];\n        for (let t of selAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, selAns);\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let x of temp.length === 0 ? selAns.answer : temp) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: !x.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: [\n              {\n                id: newAnswers[0].id,\n                value: [newAnswers[0].value],\n                status: newAnswers[0].status,\n              },\n            ],\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  ShortAnswerQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: ShortAnswerQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer === undefined ? (\n        <div\n          className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n        >\n          <textarea\n            value={\"\"}\n            className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 bg-gray-50`}\n            style={{ minHeight: \"80px\" }}\n          ></textarea>\n        </div>\n      ) : (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"80px\" }}\n            ></textarea>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: [item.value],\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        // props.answerQuestionFn({\n        //   question_id: props.selectedQuestionAnswer.question_id,\n        //   status: true,\n        //   answer: [\n        //     {\n        //       id: props.selectedQuestionAnswer.answers[0].id,\n        //       value: [\"\"],\n        //       status: props.selectedQuestionAnswer.answers[0].status,\n        //     },\n        //   ],\n        // });\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of props.selectedQuestionAnswer.selectedAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0\n        ? props.selectedQuestionAnswer.selectedAns.answer\n        : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers, props.selectedQuestionAnswer.selectedAns);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EssayQuestionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: EssayQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Essay = (props: EssayQuestionProps) => {\n  const checkAnswer = (item: EssayQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        addAnswerItemFn(\n          [\n            {\n              id: selAns.answer[0].id,\n              value: item.value,\n              status: selAns.answer[0].status,\n            },\n          ],\n          selAns\n        );\n      }\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"300px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (\n    newAnswers: MatchingQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let x of selAns.answer) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: item.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ansi: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let checkE = testLang.answers.find(\n              (tes) =>\n                tes.reference ===\n                props.selectedQuestionAnswer.selectedAns.reference\n            );\n            if (checkE !== undefined) {\n              let testAnswerLang = checkE.answer.find(\n                (it) => it.status.toString() === ansi.status\n              );\n              if (testAnswerLang !== undefined) {\n                return testAnswerLang.status.toString();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let selAns = temp.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let ans = selAns.answer.find((itm) => itm.id === x);\n        if (ans !== undefined && ans.status !== \"\") {\n          if (props.selectedQuestionAnswer.question_id !== null) {\n            return checkAnswerStatus(\n              props.selectedQuestionAnswer.question_id,\n              props.selectedLanguage,\n              ans\n            );\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        let selAns = item.answers.find(\n          (tester) =>\n            tester.reference ===\n            props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (selAns !== undefined) {\n          for (let ans of selAns.answer) {\n            res = [\n              ...res,\n              {\n                id: ans.id,\n                lang: item.language,\n                status: ans.status.toString(),\n              },\n            ];\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  SubQuestionInterface,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\n\n// All question types except Embedded and Hybrid\n\ninterface AnswersTypesCollectionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  item: SubQuestionInterface;\n  hybrid: boolean;\n}\n\nconst AnswersTypesCollection = (props: AnswersTypesCollectionProps) => {\n  return (\n    <div>\n      {/* TrueFalse */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.TrueFalse &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <TrueFalse\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toTrueFalse(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.Calculated ||\n          props.item.typeShort === QuestionForHybrid.SimpleCalculate) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <SimpleCalculated\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toSimpleCalculated(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.SingleMultiple ||\n          props.item.typeShort === QuestionForHybrid.MultipleChoice) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <MultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.CalculatedMultipleChoice &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <CalculatedMultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toCalculatedMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n\n      {/* Matching */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Matching &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Matching\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMatching(itm.answer),\n                shuffledAnswers: Shuffle(toMatching(itm.answer)),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n              selectedExam={props.selectedExam}\n              selectedLanguage={props.selectedLanguage}\n            />\n          ))}\n      {/* Esssay */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Essay &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Essay\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toEssay(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Numerical */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Numeric &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Numerical\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toNumerical(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* ShortAnswer */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.ShortAnswer &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <ShortAnswer\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toShortAnswer(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n    </div>\n  );\n};\n\nexport default AnswersTypesCollection;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\nimport AnswersTypesCollection from \"./AnswersTypesCollection\";\n\ninterface HybridProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst HybridAnswers = (props: HybridProps) => {\n  let str = \"a\";\n  // useEffect(() => {\n  //   if (props.selectedQuestionAnswer.question_id !== null) {\n  //     // Check if question is already there in answersList\n  //     let checkAnswerAvail = props.available_answers.find(\n  //       (item) => item.question_id === props.selectedQuestionAnswer.question_id\n  //     );\n  //     if (props.wholeQuestion !== undefined) {\n  //       let answersRes: QuestionAnswerInterface[] = [];\n  //       if (checkAnswerAvail === undefined) {\n  //         answersRes = props.wholeQuestion.answers;\n  //       } else {\n  //         for (let newAns of props.wholeQuestion.answers) {\n  //           if (\n  //             checkAnswerAvail.answers.find(\n  //               (item) => item._id === newAns._id\n  //             ) === undefined\n  //           ) {\n  //             console.log(\"Ans not duplicted: \", newAns);\n  //             answersRes = [\n  //               ...answersRes,\n  //               {\n  //                 _id: newAns._id,\n  //                 reference: newAns.reference,\n  //                 answer: [],\n  //               },\n  //             ];\n  //           }\n  //         }\n  //       }\n  //       props.answerQuestionFn({\n  //         question_id: props.selectedQuestionAnswer.question_id,\n  //         status: false, //Check if submitted online\n  //         answers: answersRes,\n  //       });\n  //     }\n  //   }\n  // }, [props]);\n  return (\n    <div>\n      {props.wholeQuestion !== undefined &&\n        props.wholeQuestion.sub_question.length > 0 &&\n        props.wholeQuestion.sub_question.map((item, i) => {\n          let stri = String.fromCharCode(str.charCodeAt(str.length - 1) + i);\n          return (\n            <div\n              title=\"Click to choose this option\"\n              key={i + 1}\n              className={`px-2 py-2\n             bg-white\n            rounded mb-2`}\n            >\n              <div className=\"flex flex-row items-center w-full gap-2 mb-2\">\n                <div>\n                  <div className=\"flex items-center justify-center h-8 w-8 rounded-full bg-gray-100 border border-gray-400 font-bold\">\n                    {stri}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between w-full gap-2\">\n                  <div className=\"font-bold\">{item.description}</div>\n                  <div>\n                    <div className=\"bg-blue-100 text-blue-600 px-3 py-1 rounded-full font-bold\">\n                      {item.marks} marks\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"border-t px-2 py-2\">\n                <AnswersTypesCollection\n                  type={props.type}\n                  available_answers={props.available_answers}\n                  selectedQuestionAnswer={props.selectedQuestionAnswer}\n                  answerQuestionFn={props.answerQuestionFn}\n                  wholeQuestion={props.wholeQuestion}\n                  selectedExam={props.selectedExam}\n                  selectedLanguage={props.selectedLanguage}\n                  item={item}\n                  hybrid={true}\n                />\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default HybridAnswers;\n"],"sourceRoot":""}