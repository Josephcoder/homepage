{"version":3,"sources":["components/ProctoringCandidateDetails/ProctoringCandidateDetails.tsx","components/ProctoringMainTopBar/RoomDetailsModal.tsx","components/ProctoringMainTopBar/ProctoringMainTopBar.tsx","components/ProctoringStatistics/ProctoringStatistics.tsx","components/ProctoringEvents/ProctoringEvents.tsx","components/ProctoringCandidates/ProctoringCandidates.tsx","containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor.tsx","components/CenterCardSupervisor/CenterCardSupervisor.tsx","components/Attendance/Attendance.tsx","components/AddTimeToCandidateModal/AddTimeToCandidateModal.tsx","containers/ProctoringCenter/ProctoringCenter.tsx"],"names":["ActiveTap","RoomDetailsModal","close","active_candidate","room","exam_start","leaveRoomHandler","deleteRoomHandler","exam_rules","addMinutesToRoom","exam_done","className","onClick","title","value","province_name","district_name","center_name","room_number","map","i","allow_to_leave_browser","copy_enabled","paste_enabled","right_click_enabled","stop_candidate_when_comeback","ProctoringMainTopBar","course_title","post_title","duration","started_at","startExamHandler","stopExamHandler","focus_mode","focusToggle","leaveRoom","deleteRoom","ExamDone","useState","info_modal","setInfo_modal","htmlFor","moment","format","CountDown","start_time","duration_min","timeout","returnString","labels","ProctoringStatistics","candidates","total_candidates","length","active_candidates","filter","itm","active","done_candidates","done","remain_candidate","stopped","removed","removed_candidate","stopped_candidate","left_candidates","joined","non_joined_candidates","label","ProctoringEvents","events","clickOpen","clickHandler","loading","selected","setSelected","colSpan","evnt","findUser","find","cand","user_id","event_id","event_type_id","createdAt","description","undefined","fname","lname","email","ProctoringCandidateDetails","candidate","chatHandler","micHandler","focusHandler","stopHandler","restartHandler","warnHandler","closeHandler","home_proctoring","exam_started","removeInExam","Details","setActive","bind","Events","position_title","course_name","ProctoringCandidates","show_title","large","defaultProps","ActiveSideTap","CenterCardSupervisor","warningHandler","detailsHandler","continueHandler","addMinutes","candidate_done","setCandidate_done","FC_CardStyle","seat_number","added_minutes","start_added_time","_Attendance","props","componentDidMount","group_list","candidates_in_with_groups","proctoring","room_groups","forEach","group","push","group_id","toLowerCase","x","all_candidates","candidate_exist","el","setState","candidates_in_groups","candidate_non_done_exam","submitHandler","e","preventDefault","state","group_name","error","target","msg","selected_list","includes","createAttendance","list","name","FC_CloseProctoringRoomHandler","id","window","confirm","disabling_room","FC_CloseProctoringRoom","status","create_attendance","selected_candidate","search","created_groups","expiredRooms","this","data","isExpired","exam_id","exam","_id","resultCandidates","Modal","footer","widthSizeClass","ModalSize","theme","Themes","default","displayClose","padding","body","backDrop","backDropClose","n_id","district","phone_number","course_code","onSubmit","type","placeholder","maxLength","required","onChange","toUpperCase","indexOf","candidateFind","React","Component","Attendance","connect","auth","AddTimeToCandidateModal","addMinutesHandler","reset_added_minutes","minutes","setMinutes","reason","setReason","setError","min","max","rows","_ProctoringOnlineSupervisor","myPeer","room_id","course_id","position_id","FC_GetProctoringRoom","session_id","application_session","loading_room","socket","emit","GET_ROOM_INFO_SERVER","FC_RoomNotFoundOnline","console","log","online_exam","redux_exam","FC_RoomDetailsOnline","startListeningToEvents","JOIN_ROOM","user","peer_id","supper","on","NEW_USER_JOINED_CLIENT","FC_SetOneActiveCandidate","TIME_OUT_CLIENT","event","FC_CandidateTimeOut","USER_DISCONNECTED","userId","FC_CandidateOffline","FC_SaveEvent","application_session_id","done_by","CANDIDATE_LEFT_EXAM_EVENT","time","Date","toString","EXAM_DONE_CLIENT","FC_CandidateDoneExamCenter","CAND_EXAM_EVENT_CLIENT","FC_CandidateExamEvent","FC_LoadRoomEvents","events_loading","off","USER_CONNECTED","FC_ClearExamToRoomProctoring","startCenterProctoring","blank","ActiveSIdeTabHandler","active_side_tab","SelectCandidateHandler","alert","START_EXAM_SERVER","FC_ExamStartStop","STOP_EXAM_SERVER","FC_ContinueExam","CAND_CONTINUE_EXAM_SERVER","CAND_CONTINUE_EXAM_CLIENT","stopCandidateHandler","prompt","CAND_STOP_EXAM_SERVER","CAND_STOP_EXAM_CLIENT","FC_StopCandidate","ejectCandidateHandler","CAND_REMOVE_EXAM_SERVER","CAND_REMOVE_EXAM_CLIENT","FC_CandidateRemoveExam","warnCandidateHandler","CAND_WARNING_EXAM_SERVER","restartCandidateHandler","CAND_RESTART_EXAM_SERVER","prevState","CREATE_ROOM_SERVER","FC_CreateProctoringRoom","DELETE_ROOM_SERVER","addMinutesModal","add_minutes","addMinutesToTheRoom","addMinutesToCandidate","event_data","EventsLabels","ADD_TIME","ADD_TIME_TO_CANDIDATE_SERVER","FC_AddMinutesToCandidate","addMinutesToRoomModal","reset_added_minutesHandler","backToProctoringCenter","FC_ClearProctoring","room_found","online_room","online_candidates","start_exam","activeCandidates","nonActiveCandidates","room_not_found","FC_ExamDone","candidate_loaded","Spinner","Fragment","Candidates","ProctoringOnlineSupervisor","FC_SetActiveCandidates","_ProctoringCenter","user_access","loading_room_details","FC_RoomDetails","errorMsg","get_exams_list","FC_ExamsDetailsData","exams_error","exams_error_msg","search_text","loaded","courses_results","room_exams","key","examFound","exams_list","exams","exm","course","exam_date","FC_LoadExamToRoomProctoring","video_support","end_time","period_id","exam_status","FC_AddRules","rules","ProctoringCenter"],"mappings":"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","file":"static/js/44.fdf1f6d2.chunk.js","sourcesContent":["import React, { FC, ReactElement, useState } from \"react\";\nimport { CandidateProctoringInterface, EventInterface } from \"../../interfaces\";\nimport ProctoringEvents from \"../ProctoringEvents/ProctoringEvents\";\nimport {\n  MdAccountCircle,\n  MdArrowBack,\n  MdVolumeUp,\n  MdChat,\n  MdFullscreen,\n  MdNotInterested,\n  MdReplay,\n  MdWarning,\n} from \"react-icons/md\";\n\ntype ProctoringCandidateDetailsProps = {\n  candidate: CandidateProctoringInterface | undefined;\n  chatHandler: Function;\n  micHandler: Function;\n  focusHandler: Function;\n  stopHandler: Function;\n  restartHandler: Function;\n  warnHandler: Function;\n  closeHandler: Function;\n  removeInExam: Function;\n  events: EventInterface[];\n  home_proctoring: boolean;\n  exam_started: boolean;\n  focus_mode: boolean;\n};\n\nenum ActiveTap {\n  Details,\n  Events,\n}\n\nconst ProctoringCandidateDetails: FC<ProctoringCandidateDetailsProps> = ({\n  candidate,\n  chatHandler,\n  micHandler,\n  focusHandler,\n  stopHandler,\n  restartHandler,\n  warnHandler,\n  closeHandler,\n  events,\n  home_proctoring,\n  exam_started,\n  focus_mode,\n  removeInExam,\n}): ReactElement => {\n  const [active, setActive] = useState(ActiveTap.Details);\n\n  if (candidate === undefined) {\n    return (\n      <div className=\"p-4 text-center bg-white\">\n        <h1 className=\"text-3xl text-gray-800\">Oops!!</h1>\n        <p className=\"text-3xl text-gray-700\">\n          The selected candidate can't be found{\" \"}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-1\">\n      <div\n        className={`p-2 border-rounded ${\n          focus_mode === true\n            ? \"bg-blue-900 text-white\"\n            : \"bg-gray-500 text-white\"\n        }  rounded-md flex items-baseline `}\n      >\n        <button\n          onClick={() => closeHandler()}\n          className=\"p-1 block bg-blue-900 bg-opacity-70 rounded-md mr-2 font-bold text-1xl\"\n        >\n          <MdArrowBack />\n        </button>\n        <h3 className=\"text-center -mt-1 mb-0 pb-0 text-1xl font-bold block text-blue-500--\">\n          User details\n        </h3>\n      </div>\n      <div className=\"p-2 text-center\">\n        <MdAccountCircle className=\"text-9xl text-center mx-auto\" />\n\n        <h1\n          className={`text-xl  ${\n            focus_mode === true ? \"text-white\" : \"text-gray-800\"\n          } font-bold`}\n        >\n          {candidate.fname} {candidate.lname}\n        </h1>\n        <h2\n          className={` ${\n            focus_mode === true ? \"text-gray-400\" : \"text-gray-800\"\n          }  text-md`}\n        >\n          {candidate.email}\n        </h2>\n        <div className=\"p-1\">\n          {candidate.joined === true && (\n            <span className=\"inline-block text-sm bg-blue-500 text-white px-1 rounded-md m-0.5\">\n              #Joined\n            </span>\n          )}\n          {candidate.active === true && (\n            <span className=\"inline-block text-sm bg-green-500 text-white px-1 rounded-md m-0.5\">\n              #Active\n            </span>\n          )}\n          {candidate.removed === true && (\n            <span className=\"inline-block text-sm bg-red-500 text-white  px-1 rounded-md m-0.5\">\n              #Removed\n            </span>\n          )}\n          {candidate.done === true && (\n            <span className=\"inline-block text-sm bg-yellow-500 text-white px-1 rounded-md m-0.5\">\n              #Done\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"my-2 py-1 rounded grid grid-cols-2 gap-1\">\n        {/* buttons start here */}\n\n        {exam_started === true && candidate.active === true && (\n          <>\n            {home_proctoring === true && (\n              <>\n                <button\n                  onClick={micHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdVolumeUp className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Mic</span>\n                </button>\n\n                <button\n                  onClick={chatHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdChat className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Chat</span>\n                </button>\n\n                <button\n                  onClick={focusHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdFullscreen className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Focus</span>\n                </button>\n              </>\n            )}\n\n            {candidate.done === false && (\n              <button\n                onClick={stopHandler.bind(this, candidate.user_id)}\n                className=\"proctoring-action-button\"\n              >\n                <MdNotInterested className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-md p-0 block -mt-0\">Stop</span>\n              </button>\n            )}\n\n            <button\n              onClick={restartHandler.bind(this, candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdReplay className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-md p-0 block -mt-0\">Restart</span>\n            </button>\n\n            {candidate.done === false && (\n              <button\n                title=\"give a warning\"\n                onClick={() => warnHandler(candidate.user_id)}\n                className=\"proctoring-action-button\"\n              >\n                <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-md p-0 block -mt-0\">Warn</span>\n              </button>\n            )}\n\n            {candidate.done === false && (\n              <button\n                title=\"Remove into in exam\"\n                onClick={() => removeInExam(candidate.user_id)}\n                className=\"text-center rounded-md p-1 border-2 border-red-600 hover:bg-red-600 text-white  hover:text-white bg-red-500\"\n              >\n                <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-md p-0 block -mt-0\">\n                  Remove into exam\n                </span>\n              </button>\n            )}\n          </>\n        )}\n      </div>\n\n      <div className=\"my-1 bg-blue-900 bg-opacity-40 rounded-md p-1 mt-2 grid grid-cols-2 gap-2 text-sm\">\n        <button\n          onClick={() => setActive(ActiveTap.Details)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Details\n              ? \"bg-blue-600 border-2 border-blue-300\"\n              : \"bg-blue-300\"\n          }`}\n        >\n          candidate\n        </button>\n\n        <button\n          onClick={() => setActive(ActiveTap.Events)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Events\n              ? \"bg-blue-600 border-2 border-blue-300\"\n              : \"bg-blue-300\"\n          }`}\n        >\n          Events\n        </button>\n      </div>\n\n      {active === ActiveTap.Details ? (\n        <div\n          className={`mt-2 ${\n            focus_mode === true ? \"text-white\" : \"text-gray-900\"\n          } border-blue-400`}\n        >\n          <h2 className=\" font-bold text-2xl mb-1 opacity-70 text-center border-b\">\n            User information\n          </h2>\n          <div className=\"p-2 rounded-md border   border-opacity-20\">\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Username:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">First name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.fname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Last name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.lname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">email:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Position:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.position_title}\n              </h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Course name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.course_name}\n              </h4>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ProctoringEvents\n          candidates={[candidate]}\n          events={events}\n          focus_mode={focus_mode}\n          loading={false}\n        />\n      )}\n    </div>\n  );\n};\nexport default ProctoringCandidateDetails;\n","import React, { FC, Fragment, ReactElement } from \"react\";\nimport { MdClose, MdDeleteForever, MdLogout, MdMoreTime } from \"react-icons/md\";\nimport { ExamRules } from \"../../actions\";\nimport { RoomServer } from \"../../interfaces\";\n\ntype RoomDetailsModalProps = {\n  close: Function;\n  active_candidate: number;\n  room: RoomServer;\n  exam_start: boolean;\n  leaveRoomHandler: Function;\n  deleteRoomHandler: Function;\n  exam_rules: ExamRules;\n  addMinutesToRoom: () => void;\n  exam_done: boolean;\n};\n\nconst RoomDetailsModal: FC<RoomDetailsModalProps> = ({\n  close,\n  active_candidate,\n  room,\n  exam_start,\n  leaveRoomHandler,\n  deleteRoomHandler,\n  exam_rules,\n  addMinutesToRoom,\n  exam_done,\n}): ReactElement => {\n  return (\n    <Fragment>\n      <div\n        className=\"fixed bg-black bg-opacity-10  top-0 bottom-0 right-0 left-0 animate__animated animate__fadeIn\"\n        onClick={() => close(false)}\n      ></div>\n      <div className=\"fixed w-80 z-50 shadow-lg bg-white rounded top-16 mt-2 right-2 animate__animated animate__zoomIn animate__faster\">\n        <div className=\"flex items-center border-b\">\n          <div className=\"flex-1 pl-2 text-xl font-bold text-gray-400\">\n            <h4>Room details</h4>\n          </div>\n\n          <div className=\"\">\n            <button\n              onClick={() => close(false)}\n              className=\"p-2 hover:bg-red-700 hover:text-white rounded text-2xl\"\n            >\n              <MdClose />\n            </button>\n          </div>\n        </div>\n        <div className=\"p-2 \">\n          <div className=\"border-separate p-2\">\n            {[\n              { title: \"Province\", value: room.province_name },\n              { title: \"District\", value: room.district_name },\n              { title: \"Center name\", value: room.center_name },\n              { title: \"Group\", value: room.room_number },\n              { title: \"Joined candidates\", value: active_candidate },\n            ].map(({ title, value }, i) => (\n              <div key={i} className=\"flex\">\n                <span className=\"text-gray-500\">{title}: </span>\n                <b className=\"text-right inline-block\"> {value}</b>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"border-separate px-2 pt-2 mt-2 bg-gray-50 border rounded\">\n            <h2 className=\"text-xl font-bold border-b\">Exam rules</h2>\n            {[\n              {\n                title: \"Leave the browser\",\n                value: exam_rules.allow_to_leave_browser,\n              },\n              { title: \"Copy contents\", value: exam_rules.copy_enabled },\n              { title: \"Paste contents\", value: exam_rules.paste_enabled },\n              {\n                title: \"Right click\",\n                value: exam_rules.right_click_enabled,\n              },\n              {\n                title: \"Refresh browser\",\n                value: exam_rules.stop_candidate_when_comeback,\n              },\n            ].map(({ title, value }, i) => (\n              <div key={i} className=\"flex items-center border-b p-1\">\n                <div className=\"flex-1 text-sm\">\n                  <span className=\"\">{title}: </span>\n                </div>\n\n                <div className=\"text-right inline-block\">\n                  {\" \"}\n                  {value === true ? (\n                    <span className=\"p-0.5 px-1 text-xs rounded bg-green-100 text-green-700\">\n                      Enabled\n                    </span>\n                  ) : (\n                    <span className=\"p-0.5 px-1 text-xs rounded bg-red-200 text-red-700\">\n                      Disabled\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"p-2 flex\">\n            <button\n              onClick={() => leaveRoomHandler()}\n              className=\"btn bg-red-700 hover:bg-red-800 text-white w-full mr-2\"\n              title=\"Leave room\"\n            >\n              <MdLogout className=\"inline-block\" /> Leave\n            </button>\n            {exam_start === false && active_candidate <= 1 && (\n              <button\n                onClick={() => deleteRoomHandler()}\n                className=\"btn bg-gray-500 hover:bg-red-500 text-white w-full\"\n                title=\"Delete room\"\n              >\n                <MdDeleteForever className=\"inline-block\" /> Delete\n              </button>\n            )}\n            {(exam_start === true || exam_done === true) && (\n              <button\n                onClick={() => addMinutesToRoom()}\n                className=\"btn bg-yellow-700 hover:bg-yellow-600 text-white w-full\"\n                title=\"Add minutes to the room\"\n              >\n                <MdMoreTime className=\"inline-block\" /> Add minutes\n              </button>\n            )}\n          </div>\n        </div>\n      </div>{\" \"}\n    </Fragment>\n  );\n};\nexport default RoomDetailsModal;\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdFullscreen, MdFullscreenExit } from \"react-icons/md\";\nimport { CountDown } from \"../CountDown/CountDown\";\nimport { RoomServer } from \"../../interfaces\";\nimport RoomDetailsModal from \"./RoomDetailsModal\";\nimport { ExamRules } from \"../../actions\";\nimport moment from \"moment\";\n// import { Link } from \"react-router-dom\";\ntype ProctoringMainTopBarProps = {\n  course_title: string;\n  post_title: string;\n  duration: number;\n  started_at: string | null;\n  exam_start: boolean;\n  focus_mode: boolean;\n  room: RoomServer;\n  active_candidate: number;\n  exam_rules: ExamRules;\n  exam_done: boolean;\n  // data\n  startExamHandler: Function;\n  stopExamHandler: Function;\n  focusToggle: Function;\n  leaveRoom: Function;\n  deleteRoom: Function;\n  ExamDone: Function;\n  addMinutesToRoom: () => void;\n};\n\nconst ProctoringMainTopBar: FC<ProctoringMainTopBarProps> = ({\n  course_title,\n  post_title,\n  duration,\n  started_at,\n  exam_start,\n  startExamHandler,\n  stopExamHandler,\n  focus_mode,\n  focusToggle,\n  leaveRoom,\n  room,\n  active_candidate,\n  deleteRoom,\n  ExamDone,\n  exam_rules,\n  exam_done,\n  addMinutesToRoom,\n}): ReactElement => {\n  const [info_modal, setInfo_modal] = useState(false);\n  return (\n    <Fragment>\n      <div\n        className={`${\n          focus_mode === true\n            ? \"border-blue-500 border-opacity-30 text-white proctoring-evaluator-navigation\"\n            : \"bg-white rounded-t-sm  rounded-md\"\n        } py-2 px-3 border-b z-50 grid grid-flow-row md:grid-cols-1 lg:grid-cols-2 transition-all ease-in-out`}\n      >\n        <div className=\"flex\">\n          <button\n            onClick={() => focusToggle()}\n            className={`px-2 ${\n              focus_mode === true\n                ? \"bg-blue-900 hover:bg-blue-500 \"\n                : \"bg-blue-100 hover:bg-blue-500 \"\n            } mr-2  rounded-md  hover:text-white`}\n          >\n            {focus_mode === true ? (\n              <Fragment>\n                <MdFullscreenExit className=\"text-3xl mx-auto -mb-2\" />\n                <span className=\"text-xs inline-block pt-1\">Un-Focus</span>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <MdFullscreen className=\"text-3xl mx-auto -mb-2\" />\n                <span className=\"text-xs inline-block pt-1\">Focus</span>\n              </Fragment>\n            )}\n          </button>\n          <div className=\"flex items-center\">\n            <div className=\"\">\n              <label\n                htmlFor=\"\"\n                className={`${\n                  focus_mode === true ? \"text-gray-200\" : \"\"\n                } text-sm m-0`}\n              >\n                {post_title}\n              </label>\n              <h3 className=\"text-white- text-lg -mt-2 font-bold\">\n                {course_title}\n              </h3>\n            </div>\n          </div>\n        </div>\n        <div className=\"text-red lg:pt-0 sm:pt-3 text-right md:text-left lg:text-right\">\n          <div className=\"grid grid-cols-5 gap-4 text-left\">\n            <div>\n              {exam_start === true && (\n                <>\n                  <label className=\"text-gray-400 text-sm\">Duration</label>\n                  <h2 className=\"text-xl font-bold\">{duration}M</h2>\n                </>\n              )}\n            </div>\n            <div>\n              {exam_start === true && (\n                <>\n                  <label className=\"text-gray-400 text-sm\">Started at:</label>\n                  {exam_start === true && (\n                    <h2 className=\"text-xl font-bold\">\n                      {moment(started_at).format(\"LT\")}\n                    </h2>\n                  )}\n                </>\n              )}\n            </div>\n\n            <div className=\"text-3xl -mt-3 \">\n              {exam_start === true &&\n                started_at !== null &&\n                started_at !== \"\" && (\n                  <CountDown\n                    start_time={started_at}\n                    duration_min={duration}\n                    timeout={() => ExamDone(true)}\n                    returnString={false}\n                    labels\n                  />\n                )}\n            </div>\n            <div className=\"flex items-center pl-2\">\n              <button\n                onClick={() => setInfo_modal(true)}\n                className=\"btn bg-gray-100 text-gray-900 w-full hover:bg-gray-500 hover:text-white\"\n                title=\"Room details\"\n              >\n                {/* <MdInfoOutline className=\"inline-block\" />  */}\n                Room\n              </button>\n            </div>\n\n            <div className=\"flex items-center\">\n              {exam_start === false ? (\n                <button\n                  onClick={() => startExamHandler()}\n                  className=\"btn bg-green-500 text-white w-full\"\n                  title=\"Start Exam\"\n                >\n                  Start\n                </button>\n              ) : (\n                <button\n                  onClick={() => stopExamHandler()}\n                  className=\"btn bg-red-600 text-white w-full\"\n                  title=\"stop Exam\"\n                >\n                  Stop\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {info_modal && (\n        <RoomDetailsModal\n          close={setInfo_modal}\n          active_candidate={active_candidate}\n          room={room}\n          exam_start={exam_start}\n          leaveRoomHandler={leaveRoom}\n          deleteRoomHandler={deleteRoom}\n          exam_rules={exam_rules}\n          addMinutesToRoom={() => {\n            addMinutesToRoom();\n            setInfo_modal(false);\n          }}\n          exam_done={exam_done}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default ProctoringMainTopBar;\n","import React, { FC, ReactElement } from \"react\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringStatisticsProps = {\n  focus_mode: boolean;\n  candidates: CandidateProctoringInterface[];\n};\n\nconst ProctoringStatistics: FC<ProctoringStatisticsProps> = ({\n  focus_mode,\n  candidates,\n}): ReactElement => {\n  let total_candidates = candidates.length;\n  let active_candidates = candidates.filter(\n    (itm) => itm.active === true\n  ).length;\n  let done_candidates = candidates.filter((itm) => itm.done === true).length;\n  let remain_candidate = candidates.filter(\n    (itm) =>\n      itm.done === false &&\n      itm.active === true &&\n      itm.stopped === false &&\n      itm.removed === false\n  ).length;\n  let removed_candidate = candidates.filter(\n    (itm) => itm.removed === true\n  ).length;\n  let stopped_candidate = candidates.filter(\n    (itm) => itm.stopped === true && itm.done === false\n  ).length;\n  let left_candidates = candidates.filter(\n    (itm) => itm.active === false && itm.done === false && itm.joined === true\n  ).length;\n  let non_joined_candidates = candidates.filter(\n    (itm) => itm.joined === false\n  ).length;\n\n  /* function body */\n  return (\n    <div\n      className={`grid grid-cols-4 gap-2 p-3 border-separate ${\n        focus_mode === true\n          ? \"bg-blue-900 text-gray-300\"\n          : \"bg-white  shadow-lg border \"\n      } rounded-md my-2 text-center w-90`}\n    >\n      {[\n        {\n          title: \"Total\",\n          label: \"Total candidates\",\n          value: total_candidates,\n        },\n        {\n          title: \"Active\",\n          label: \"Active candidate(s)\",\n          value: active_candidates,\n        },\n        {\n          title: \"Done\",\n          label: \"Candidate(s) who done exam\",\n          value: done_candidates,\n        },\n        {\n          title: \"Left\",\n          label: \"Candidate(s) who left unfinished\",\n          value: left_candidates,\n        },\n        {\n          title: \"Removed\",\n          label: \"Removed candidate(s)\",\n          value: removed_candidate,\n        },\n        {\n          title: \"Stopped\",\n          label: \"Stopped candidate(s)\",\n          value: stopped_candidate,\n        },\n        {\n          title: \"Remain\",\n          label: \"Remain candidate(s)\",\n          value: remain_candidate,\n        },\n        {\n          title: \"Non Joined\",\n          label: \"Non joined exam(s)\",\n          value: non_joined_candidates,\n        },\n      ].map(\n        (\n          {\n            title,\n            label,\n            value,\n          }: { title: string; label: string; value: number },\n          i\n        ) => (\n          <div key={i} title={label} className=\"border rounded-md py-1\">\n            <h1 className=\"text-2xl font-bold -mb-1 p-0 \">{value}</h1>\n            <label htmlFor=\"\" className=\"text-sm -mt-2\">\n              {title}\n            </label>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\nexport default ProctoringStatistics;\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdClose } from \"react-icons/md\";\nimport { EventInterface, CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringEventsProps = {\n  events: EventInterface[];\n  clickOpen?: boolean;\n  clickHandler?: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  loading: boolean;\n};\n\nconst ProctoringEvents: FC<ProctoringEventsProps> = ({\n  events,\n  clickOpen = true,\n  clickHandler,\n  candidates,\n  focus_mode,\n  loading,\n}): ReactElement => {\n  /* function body */\n  const [selected, setSelected] = useState(\"\");\n\n  return (\n    <div\n      className={`mt-2 p-2 ${\n        focus_mode === true\n          ? \"bg-gray-900 text-white\"\n          : \"bg-gray-50 shadow-sm border\"\n      } rounded-md `}\n    >\n      <h1 className=\"text-xl\">Events</h1>\n      {loading === true ? (\n        <div className=\"p-2\">\n          <h4 className=\"block animate__animated animate__fadeIn animate__infinite p-3 text-center\">\n            Loading events...\n          </h4>\n        </div>\n      ) : (\n        <table className=\"w-full text-left\">\n          <thead className=\"text-sm text-gray-500\">\n            <tr>\n              <th>#</th>\n              <th>username</th>\n              <th>Event type</th>\n              <th>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {events.length === 0 ? (\n              <tr>\n                <td className=\"p-3 py-8 text-center\" colSpan={4}>\n                  <h2 className=\"font-bold text-2xl\">No events found</h2>\n                  <h2 className=\"\">No event has been committed yet</h2>\n                </td>\n              </tr>\n            ) : (\n              events.map((evnt: EventInterface, i: number) => {\n                let findUser = candidates.find(\n                  (cand: CandidateProctoringInterface) =>\n                    cand.user_id === evnt.user_id\n                );\n\n                return (\n                  <Fragment key={i}>\n                    {selected === evnt.event_id ? (\n                      <tr>\n                        <td\n                          colSpan={4}\n                          className=\"animate__animated animate__zoomIn animate__faster\"\n                        >\n                          <div className=\"overflow-hidden my-1 rounded border bg-blue-900 bg-opacity-30 border-blue-500\">\n                            <div className=\"px-3  flex items-center bg-blue-900 bg-opacity-30\">\n                              <h2 className=\"flex-1 m-0 text-xl py-2 opacity-70\">\n                                Event <b>{i + 1}</b> details\n                              </h2>\n                              <button\n                                onClick={() => setSelected(\"\")}\n                                className=\"hover:bg-red-600 text-2xl p-1.5 rounded-md\"\n                              >\n                                <MdClose />\n                              </button>\n                            </div>\n                            <div className=\"p-2\">\n                              <p>\n                                <span className=\"opacity-70\">Event type: </span>\n                                <b>{evnt.event_type_id}</b>\n                              </p>\n                              <p>\n                                <span className=\"opacity-70\">Time: </span>\n                                <b>{evnt.createdAt}</b>\n                              </p>\n                              <p className=\"p-1 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                                <span className=\"opacity-70 block\">\n                                  Description:{\" \"}\n                                </span>\n                                <b>{evnt.description}</b>\n                              </p>\n                              {findUser !== undefined && (\n                                <div className=\"p-1 mt-2 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                                  <p>\n                                    <span className=\"opacity-70\">Names: </span>\n                                    <b>\n                                      {findUser.fname} {findUser.lname}\n                                    </b>\n                                  </p>\n                                  <p>\n                                    <span className=\"opacity-70\">Email: </span>\n                                    <b>{findUser.email}</b>\n                                  </p>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                    ) : (\n                      <tr\n                        onClick={() => setSelected(evnt.event_id)}\n                        className=\"p-2 rounded-md hover:bg-blue-900 bg-opacity-30 cursor-pointer\"\n                      >\n                        <td className=\"px-1 opacity-95\">{i + 1}</td>\n                        <td className=\"text-blue-500 font-bold\">\n                          {findUser !== undefined ? (\n                            <span\n                              title={findUser?.fname + \" \" + findUser?.lname}\n                            >\n                              {findUser?.lname}\n                            </span>\n                          ) : (\n                            <span className=\"opacity-50\">System/Admin</span>\n                          )}\n                        </td>\n\n                        <td className=\"text-red-400 text-sm pl-1\">\n                          {evnt.event_type_id}\n                        </td>\n\n                        <td className=\"text-gray-400 pl-1\">2min</td>\n                      </tr>\n                    )}\n                  </Fragment>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default ProctoringEvents;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdAccountCircle } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringCandidatesProps = {\n  clickHandler: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  show_title: boolean;\n  large: boolean;\n};\n\nconst ProctoringCandidates: FC<ProctoringCandidatesProps> = ({\n  clickHandler,\n  candidates,\n  focus_mode,\n  show_title,\n  large,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className={`mt-2 ${focus_mode === true ? \"text-white p-2 \" : \"\"}`}>\n      {show_title === true && (\n        <h1 className=\"text-3xl font-bold text-center pb-2 border-b mb-1 border-gray-100\">\n          Candidates\n        </h1>\n      )}\n      <table\n        className={`w-full text-left ${\n          focus_mode === true ? \"\" : \"bg-white rounded-md\"\n        }  p-2\"`}\n      >\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th></th>\n            <th></th>\n            {large === true && <th></th>}\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {candidates.map((cand: CandidateProctoringInterface, i: number) => (\n            <tr\n              key={i}\n              className={`group border-b mb-1 ${\n                focus_mode === true\n                  ? \"border-blue-800 border-opacity-60 hover:bg-blue-900\"\n                  : \"border-gray-200 border-opacity-60 hover:bg-blue-100\"\n              }  cursor-pointer`}\n              onClick={clickHandler.bind(this, cand.user_id)}\n            >\n              <td\n                className={`${\n                  focus_mode === true ? \"text-blue-500\" : \"text-gray-400\"\n                }  w-5 text-left`}\n              >\n                <MdAccountCircle\n                  className={large === true ? \"text-3xl\" : \"text-5xl\"}\n                />\n              </td>\n\n              <td className=\"text-gray-400 pl-1 py-1\">\n                <h4\n                  className={`font-bold ${\n                    large === true ? \"text-md\" : \"text-lg\"\n                  }  p-0 m-0 ${\n                    focus_mode === true ? \"text-white\" : \"text-gray-900\"\n                  }`}\n                >\n                  {cand.fname} {cand.lname}\n                </h4>\n                {large === false && (\n                  <p className=\"text-sm p-0 m-0 -mt-1\">{cand.email}</p>\n                )}\n              </td>\n              {large === true && (\n                <td className=\"\">\n                  <span className=\"text-sm p-0 m-0 -mt-1\">{cand.email}</span>\n                </td>\n              )}\n              <td\n                className={`text-right group-hover:opacity-100 opacity-40 ${\n                  large === false\n                    ? \"grid grid-cols-2 text-center w-10 pt-2\"\n                    : \"\"\n                } md:w-auto`}\n              >\n                {cand.joined === true && (\n                  <span className=\"inline-block text-xs bg-blue-300 px-1 rounded-md m-0.5\">\n                    #Joined\n                  </span>\n                )}\n                {cand.active === true && (\n                  <span className=\"inline-block text-xs bg-green-300 px-1 rounded-md m-0.5\">\n                    #Active\n                  </span>\n                )}\n                {cand.removed === true && (\n                  <span className=\"inline-block text-xs bg-red-300 text-white px-1 rounded-md m-0.5\">\n                    #Removed\n                  </span>\n                )}\n                {cand.done === true && (\n                  <span className=\"inline-block text-xs bg-yellow-300 px-1 rounded-md m-0.5\">\n                    #Done\n                  </span>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nProctoringCandidates.defaultProps = {\n  large: false,\n};\n\nexport default ProctoringCandidates;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../reducers\";\nimport ProctoringMainTopBar from \"../../components/ProctoringMainTopBar/ProctoringMainTopBar\";\nimport ProctoringStatistics from \"../../components/ProctoringStatistics/ProctoringStatistics\";\nimport ProctoringCandidateDetails from \"../../components/ProctoringCandidateDetails/ProctoringCandidateDetails\";\nimport ProctoringEvents from \"../../components/ProctoringEvents/ProctoringEvents\";\nimport ProctoringCandidates from \"../../components/ProctoringCandidates/ProctoringCandidates\";\nimport CenterCardSupervisor from \"../../components/CenterCardSupervisor/CenterCardSupervisor\";\nimport {\n  EventInterface,\n  OnlineCandidates,\n  Events,\n  CandidateProctoringInterface,\n  LiveServer__Room,\n  EventsLabels,\n} from \"../../interfaces\";\nimport {\n  Socket,\n  FC_GetProctoringRoom,\n  Auth,\n  Proctoring,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_CandidateRemoveExam,\n  FC_RoomDetailsOnline,\n  FC_RoomNotFoundOnline,\n  FC_CandidateDoneExamCenter,\n  FC_ExamDone,\n  FC_CandidateTimeOut,\n  FT_LoadRoomEvents,\n  FT_AddMinutesToCandidate,\n  FC_AddMinutesToCandidate,\n  FT_GetProctoringRoom,\n  FT_SetActiveCandidates,\n  FT_SetOneActiveCandidate,\n  FT_CandidateDoneExamCenter,\n  FT_CandidateExamEvent,\n  FT_CandidateOffline,\n  FT_CandidateRemoveExam,\n  FT_CandidateTimeOut,\n  FT_ClearExamToRoomProctoring,\n  FT_ContinueExam,\n  FT_ExamDone,\n  FT_ExamStartStop,\n  FT_RoomDetailsOnline,\n  FT_RoomNotFoundOnline,\n  FT_SaveEvent,\n  FT_StopCandidate,\n  FC_CreateProctoringRoom,\n  FT_CreateProctoringRoom,\n  candidateProctoringRoom,\n  FC_ClearProctoring,\n  FT_LoadExamToRoomProctoring,\n  FT_ClearProctoring,\n} from \"../../actions\";\nimport Spinner from \"../../components/Loading/Spinner\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { Attendance } from \"../../components/Attendance/Attendance\";\nimport AddTimeToCandidateModal from \"../../components/AddTimeToCandidateModal/AddTimeToCandidateModal\";\n// props for the component\n\nexport interface ProctoringOnlineSupervisorProps {\n  socket: Socket;\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_GetProctoringRoom: FT_GetProctoringRoom;\n  FC_SetActiveCandidates: FT_SetActiveCandidates;\n  FC_SetOneActiveCandidate: FT_SetOneActiveCandidate;\n  FC_CandidateOffline: FT_CandidateOffline;\n  FC_ExamStartStop: FT_ExamStartStop;\n  FC_ContinueExam: FT_ContinueExam;\n  FC_StopCandidate: FT_StopCandidate;\n  FC_CandidateExamEvent: FT_CandidateExamEvent;\n  FC_ClearExamToRoomProctoring: FT_ClearExamToRoomProctoring;\n  FC_SaveEvent: FT_SaveEvent;\n  FC_LoadRoomEvents: FT_LoadRoomEvents;\n  FC_CandidateRemoveExam: FT_CandidateRemoveExam;\n  FC_RoomNotFoundOnline: FT_RoomNotFoundOnline;\n  FC_RoomDetailsOnline: FT_RoomDetailsOnline;\n  FC_CandidateDoneExamCenter: FT_CandidateDoneExamCenter;\n  FC_ExamDone: FT_ExamDone;\n  FC_CandidateTimeOut: FT_CandidateTimeOut;\n  FC_AddMinutesToCandidate: FT_AddMinutesToCandidate;\n  FC_CreateProctoringRoom: FT_CreateProctoringRoom;\n  FC_ClearProctoring: FT_ClearProctoring;\n}\n\nenum ActiveSideTap {\n  Candidates,\n  Events,\n}\n\ninterface AppState {\n  focus_mode: boolean;\n  loading: boolean;\n  loading_room: boolean;\n  events: EventInterface[];\n  active_side_tab: ActiveSideTap;\n  selected_candidate: string | null;\n  online_room: boolean;\n  online_candidates: OnlineCandidates[];\n  start_exam: boolean;\n  error: {\n    target: string;\n    msg: string;\n  };\n  events_loading: boolean;\n  room_found: boolean;\n  start_time: string;\n  duration: number;\n  add_minutes: {\n    candidate: CandidateProctoringInterface | null;\n    minutes: number;\n    room: boolean;\n    reset_added_minutes: boolean;\n  };\n}\n\nclass _ProctoringOnlineSupervisor extends React.Component<\n  ProctoringOnlineSupervisorProps,\n  AppState\n> {\n  private myPeer: any;\n\n  constructor(props: ProctoringOnlineSupervisorProps) {\n    super(props);\n\n    this.state = {\n      room_found: false,\n      focus_mode: false,\n      loading_room: true,\n      loading: false,\n      events: [],\n      active_side_tab: ActiveSideTap.Events,\n      selected_candidate: null,\n      online_room: false,\n      online_candidates: [],\n      start_exam: false,\n      error: {\n        msg: \"\",\n        target: \"\",\n      },\n      events_loading: true,\n      start_time: \"\",\n      duration: 0,\n      add_minutes: {\n        candidate: null,\n        minutes: 0,\n        room: false,\n        reset_added_minutes: true,\n      },\n    };\n  }\n\n  componentDidMount = () => {\n    const { room_id, course_id, position_id, exam_id } =\n      this.props.proctoring.exam;\n\n    // check if the user have already joined the room\n    if (this.props.proctoring.candidates.length <= 0) {\n      //* Load candidates on the room\n      this.props.FC_GetProctoringRoom(\n        {\n          room_id,\n          course_id,\n          position_id,\n          session_id: this.props.auth.application_session._id,\n        },\n        (status, msg) => {\n          if (status === true) {\n            this.setState({\n              loading_room: false,\n            });\n\n            // *********************************************************************\n\n            this.props.socket.socket.emit(\n              Events.GET_ROOM_INFO_SERVER,\n              this.props.proctoring.room.room_id,\n              (data: {\n                data: LiveServer__Room;\n                error: boolean;\n                msg: string;\n              }) => {\n                if (data.error === true) {\n                  this.props.FC_RoomNotFoundOnline(data.msg);\n                } else {\n                  console.log(\n                    \"*********************************************************************\"\n                  );\n\n                  console.log({\n                    online_exam: data.data.exam_id,\n                    redux_exam: exam_id,\n                  });\n\n                  if (data.data.exam_id === exam_id) {\n                    this.props.FC_RoomDetailsOnline(data.data);\n                    this.startListeningToEvents(); // Start events\n                  } else {\n                    this.setState({\n                      loading_room: false,\n                      error: {\n                        target: \"wrong-room\",\n                        msg: \"Exams does not match the active group\",\n                      },\n                    });\n                  }\n                }\n              }\n            );\n          } else {\n            this.setState({\n              loading_room: false,\n              error: {\n                target: \"all\",\n                msg: msg,\n              },\n            });\n          }\n        }\n      );\n    }\n  };\n\n  startListeningToEvents = () => {\n    this.props.socket.socket.emit(\n      Events.JOIN_ROOM,\n      {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: this.props.auth.user.user_id,\n        peer_id: \"\",\n        supper: true,\n        exam_id: this.props.proctoring.exam.exam_id,\n      },\n      (data: {\n        data: { user_id: string; room_id: string; supper: boolean };\n        error: boolean;\n        msg: string;\n      }) => {\n        //* New user connected\n        this.props.socket.socket.on(\n          Events.NEW_USER_JOINED_CLIENT,\n          (user: any) => {\n            this.props.FC_SetOneActiveCandidate({\n              user_id: user.user_id,\n              stopped: user.stopped,\n              done: user.done,\n            });\n          }\n        );\n\n        this.props.socket.socket.on(\n          Events.TIME_OUT_CLIENT,\n          (event: EventInterface) => {\n            this.props.FC_CandidateTimeOut(event);\n          }\n        );\n\n        //* remove the candidate online\n        this.props.socket.socket.on(Events.USER_DISCONNECTED, (userId: any) => {\n          this.props.FC_CandidateOffline(userId);\n\n          this.props.FC_SaveEvent(\n            {\n              application_session_id: this.props.auth.application_session?._id,\n              description: \"Leave the room\",\n              done_by: \"System\",\n              event_type_id: Events.CANDIDATE_LEFT_EXAM_EVENT,\n              exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n              position_id: this.props.proctoring.exam.position_id,\n              room_id: this.props.proctoring.room.room_id,\n              time: new Date().toString(),\n              user_id: userId,\n              group_id: this.props.proctoring.room.group_id,\n            } as EventInterface,\n            (status: boolean, error: string) => {\n              if (status === false)\n                this.setState({ error: { target: \"main\", msg: error } });\n            }\n          );\n        });\n\n        //* candidate done exam\n        this.props.socket.socket.on(\n          Events.EXAM_DONE_CLIENT,\n          (event: EventInterface) =>\n            this.props.FC_CandidateDoneExamCenter(event)\n        );\n\n        /**\n         * @description Exam events\n         */\n        this.props.socket.socket.on(\n          Events.CAND_EXAM_EVENT_CLIENT,\n          (event: EventInterface) => this.props.FC_CandidateExamEvent(event)\n        );\n      }\n    );\n\n    // *********************** ALL THE PROCESS CONTINUES HERE *********\n    // load events\n    this.props.FC_LoadRoomEvents(\n      {\n        application_session_id: this.props.auth.application_session?._id,\n        exam_id: this.props.proctoring.exam.exam_id,\n        room_id: this.props.proctoring.room.room_id,\n        group_id: this.props.proctoring.room.group_id,\n      },\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            events_loading: false,\n          });\n        } else {\n          this.setState({\n            events_loading: false,\n            error: {\n              target: \"main\",\n              msg: msg,\n            },\n          });\n        }\n      }\n    );\n  };\n\n  leaveRoom = () => {\n    // this.props.socket.socket.off(Events.START_EXAM_CLIENT);\n    this.props.socket.socket.off(Events.USER_CONNECTED);\n    this.props.socket.socket.off(Events.USER_DISCONNECTED);\n    this.props.socket.socket.off(Events.CAND_EXAM_EVENT_CLIENT);\n\n    this.props.FC_ClearExamToRoomProctoring();\n  };\n\n  startCenterProctoring = () => {};\n\n  // ***************************************************************************\n\n  blank = (e: any) => console.log(\"clicked\");\n\n  /**\n   * chand the active tab on the side\n   * @param itm\n   * @returns\n   */\n  ActiveSIdeTabHandler = (itm: ActiveSideTap) =>\n    this.setState({ active_side_tab: itm });\n\n  SelectCandidateHandler = (value: string | null) =>\n    this.setState({ selected_candidate: value });\n\n  startExamHandler = () => {\n    if (\n      this.props.proctoring.candidates.filter((cand) => cand.active === true)\n        .length <= 0\n    ) {\n      return window.alert(\"You can't start exam without any active candidate\");\n    }\n    if (window.confirm(\"Are you sure you want to start the exam??\")) {\n      this.props.socket.socket.emit(\n        Events.START_EXAM_SERVER,\n        {\n          room_id: this.props.proctoring.room.room_id,\n          data: \"start exam\",\n          description: \"The exam started on this room\",\n          msg: \"The exam started on this room\",\n          duration: this.props.proctoring.exam.duration,\n        },\n        ({\n          start_time,\n          duration,\n        }: {\n          start_time: string;\n          duration: number;\n        }) => {\n          this.props.FC_ExamStartStop(true, start_time, duration);\n        }\n      );\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"The exam started on this room\",\n          done_by: \"Administrator\",\n          event_type_id: \"EXAM STARTED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  stopExamHandler = () => {\n    if (window.confirm(\"Are you sure you want to stop the exam??\")) {\n      this.props.socket.socket.emit(Events.STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        description: \"Exam stopped on this room\",\n      });\n      this.props.FC_ExamStartStop(false);\n      // Save event\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Exam stopped on this room\",\n          done_by: \"Supervisor\",\n          event_type_id: \"EXAM_STOPPED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  continueHandler = (user_id: string) => {\n    if (\n      window.confirm(\n        \"Alre you sure you want to give this candidate the permition to continue the exam??\"\n      )\n    ) {\n      this.props.FC_ContinueExam(user_id);\n      this.props.socket.socket.emit(Events.CAND_CONTINUE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        description: \"Allowed a candidate to continue exam\",\n      });\n\n      // Save the contitue action\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Allowed a candidate to continue exam\",\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_CONTINUE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string, event: EventInterface | null) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  stopCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"If you want to stop the candidate add the reason\");\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `STOP: ${msg}`,\n        done_by: \"Supervisor\",\n        event_type_id: Events.CAND_STOP_EXAM_CLIENT,\n      });\n\n      this.props.FC_StopCandidate(user_id);\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `STOP: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_STOP_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  ejectCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to remove the candidate add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_REMOVE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `REMOVED: ${msg}`,\n        done_by: \"Supervisor\",\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `REMOVED: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_REMOVE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false) {\n            this.setState({ error: { target: \"main\", msg: error } });\n          } else {\n            this.props.FC_CandidateRemoveExam(user_id);\n          }\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n\n  warnCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to warn this candidate, add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_WARNING_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `WARNING: ${msg}`,\n        description: `WARNING: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `WARNING: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_WARNING_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  restartCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"Restart this candidate's exam, reason\");\n    if (msg !== null) {\n      console.log(\"RESTART EXAM CANDIDATE\");\n      this.props.socket.socket.emit(Events.CAND_RESTART_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `RESTART: ${msg}`,\n        description: `RESTART: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `RESTART: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_RESTART_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  focusToggle = () =>\n    this.setState((prevState) => ({\n      focus_mode: !prevState.focus_mode,\n    }));\n\n  createAttendance = ({ name, list }: { name: string; list: string[] }) => {\n    this.props.socket.socket.emit(\n      Events.CREATE_ROOM_SERVER,\n      {\n        candidates: list,\n        room_id: this.props.proctoring.room.room_id,\n        user_id: this.props.auth.user.user_id,\n        group_id: name,\n        stop_candidate_when_comeback:\n          this.props.proctoring.exam_rules.stop_candidate_when_comeback,\n        exam_id: this.props.proctoring.exam.exam_id,\n      },\n      (data: { data: LiveServer__Room; error: boolean; msg: string }) => {\n        if (data.error === false) {\n          this.props.FC_RoomDetailsOnline(data.data);\n          this.startListeningToEvents();\n          //! this is where the attendance will happening\n          this.props.FC_CreateProctoringRoom(\n            {\n              candidates: data.data.candidates\n                .filter((itm) => itm.user_id !== this.props.auth.user.user_id)\n                .map((candidate) => ({\n                  user_id: candidate.user_id,\n                  seat_number: candidate.seat_number,\n                })) as candidateProctoringRoom[],\n              application_session_id: this.props.auth.application_session._id,\n              exam_id: data.data.exam_id,\n              group_id: data.data.group_id,\n              room_id: data.data.room_id,\n              course_id: this.props.proctoring.exam.course_id,\n            },\n            (type, msg) => {\n              if (type === false)\n                this.setState({\n                  error: {\n                    msg: msg,\n                    target: \"main\",\n                  },\n                });\n            }\n          );\n          // console.log({ CREATED_GROUP: data });\n        } else {\n          this.props.FC_RoomNotFoundOnline(data.msg);\n        }\n      }\n    );\n  };\n\n  deleteRoomHandler = () => {\n    if (\n      this.props.proctoring.candidates.filter((cand) => cand.active === true)\n        .length >= 1\n    ) {\n      return window.alert(\n        \"You can't delete the group while some candidates are already joined.\"\n      );\n    }\n\n    let msg = window.prompt(\"Are you sure you want to delete this group??\");\n    if (msg !== null) {\n      this.props.socket.socket.emit(\n        Events.DELETE_ROOM_SERVER,\n        {\n          room_id: this.props.proctoring.room.room_id,\n        },\n        (status: boolean) => {\n          if (status === true) {\n            this.leaveRoom();\n            // Save the event\n            this.props.FC_SaveEvent(\n              {\n                application_session_id:\n                  this.props.auth.application_session?._id,\n                description: `ROOM DELETED: ${msg}`,\n                done_by: \"Supervisor\",\n                event_type_id: `DELETE GROUP ${this.props.proctoring.room.room_number}`,\n                exam_id: this.props.proctoring.exam.exam_id,\n                position_id: this.props.proctoring.exam.position_id,\n                room_id: this.props.proctoring.room.room_id,\n                time: new Date().toString(),\n                user_id: this.props.auth.user.user_id,\n                group_id: this.props.proctoring.room.group_id,\n              } as EventInterface,\n              (status: boolean, error: string) => {\n                if (status === false) {\n                  this.setState({ error: { target: \"main\", msg: error } });\n                }\n              }\n            );\n          } else {\n            this.setState({\n              error: { target: \"main\", msg: \"Failed to delete the group\" },\n            });\n          }\n        }\n      );\n    }\n  };\n\n  addMinutesModal = (candidate: CandidateProctoringInterface) =>\n    this.setState({\n      add_minutes: {\n        ...this.state.add_minutes,\n        candidate: candidate,\n        minutes: 0,\n        room: false,\n      },\n    });\n\n  addMinutesHandler = (minutes: number, reason: string) => {\n    if (\n      this.state.add_minutes.room === true &&\n      this.state.add_minutes.candidate === null\n    ) {\n      this.addMinutesToTheRoom(minutes, reason);\n    } else {\n      this.addMinutesToCandidate(minutes, reason);\n    }\n  };\n\n  // addMinutes to the candidate\n  addMinutesToCandidate = (minutes: number, reason: string) => {\n    if (\n      window.confirm(\n        `Are you sure you want to add ${minutes} to ${this.state.add_minutes.candidate?.fname}?`\n      )\n    ) {\n      if (this.state.add_minutes.candidate?.user_id === undefined) return;\n\n      let duration: number;\n      let start_time: string;\n      // calculate the timeout\n      if (this.props.proctoring.exam.exam_done === true) {\n        start_time = new Date().toString();\n        duration = minutes;\n      } else {\n        start_time =\n          this.props.proctoring.exam.start_time === null\n            ? \"\"\n            : this.props.proctoring.exam.start_time;\n        duration = this.props.proctoring.exam.duration + minutes;\n      }\n\n      let event_data = {\n        application_session_id: this.props.auth.application_session?._id,\n        description: `Added ${minutes}min`,\n        done_by: \"Supervisor\",\n        event_type_id: EventsLabels.ADD_TIME,\n        exam_id: this.props.proctoring.exam.exam_id,\n        position_id: this.props.proctoring.exam.position_id,\n        room_id: this.props.proctoring.room.room_id,\n        time: new Date().toString(),\n        user_id: this.state.add_minutes.candidate?.user_id,\n        group_id: this.props.proctoring.room.group_id,\n      } as EventInterface;\n\n      //* add minutes to the candidate\n      this.props.socket.socket.emit(\n        Events.ADD_TIME_TO_CANDIDATE_SERVER,\n        {\n          start_time,\n          duration,\n          minutes,\n        },\n        event_data\n      );\n\n      // Add minutes to the candidate\n      this.props.FC_AddMinutesToCandidate({\n        user_id: this.state.add_minutes.candidate?.user_id,\n        duration: duration,\n        start_time,\n      });\n\n      // Save the event\n      this.props.FC_SaveEvent(event_data, (status: boolean, error: string) => {\n        if (status === false) {\n          this.setState({ error: { target: \"main\", msg: error } });\n        }\n      });\n    }\n  };\n\n  // Add minutes to the candidate\n  addMinutesToTheRoom = (minutes: number, reason: string) => {\n    if (\n      window.confirm(\n        `Are you sure you want to add ${minutes} to the whole room ${\n          this.state.add_minutes.reset_added_minutes === true &&\n          \"And ignore the minutes you added to some candidates?\"\n        }?`\n      )\n    ) {\n      this.props.proctoring.candidates.forEach((candidate) => {\n        let duration: number;\n        let start_time: string;\n        // calculate the timeout\n        if (this.props.proctoring.exam.exam_done === true) {\n          start_time = new Date().toString();\n          if (this.state.add_minutes.reset_added_minutes === true) {\n            duration = minutes;\n          } else {\n            duration = minutes + candidate.added_minutes;\n          }\n        } else {\n          start_time =\n            this.props.proctoring.exam.start_time === null\n              ? \"\"\n              : this.props.proctoring.exam.start_time;\n          if (this.state.add_minutes.reset_added_minutes === true) {\n            duration = this.props.proctoring.exam.duration + minutes;\n          } else {\n            duration =\n              this.props.proctoring.exam.duration +\n              minutes +\n              candidate.added_minutes;\n          }\n        }\n\n        let event_data = {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `Added ${minutes}min`,\n          done_by: \"Supervisor\",\n          event_type_id: EventsLabels.ADD_TIME,\n          exam_id: this.props.proctoring.exam.exam_id,\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: candidate?.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface;\n\n        //* add minutes to the candidate\n        this.props.socket.socket.emit(\n          Events.ADD_TIME_TO_CANDIDATE_SERVER,\n          {\n            start_time,\n            duration,\n            minutes,\n          },\n          event_data\n        );\n\n        // Add minutes to the candidate\n        // this.props.FC_AddMinutesToCandidate({\n        //   user_id: this.state.add_minutes.candidate?.user_id,\n        //   duration: duration,\n        //   start_time,\n        // });\n\n        // Save the event\n        this.props.FC_SaveEvent(\n          event_data,\n          (status: boolean, error: string) => {\n            if (status === false) {\n              this.setState({ error: { target: \"main\", msg: error } });\n            }\n          }\n        );\n      });\n    }\n  };\n\n  addMinutesToRoomModal = () =>\n    this.setState({\n      add_minutes: {\n        ...this.state.add_minutes,\n        candidate: null,\n        minutes: 0,\n        room: true,\n      },\n    });\n\n  reset_added_minutesHandler = () => {\n    this.setState({\n      add_minutes: {\n        ...this.state.add_minutes,\n        reset_added_minutes: !this.state.add_minutes.reset_added_minutes,\n      },\n    });\n  };\n\n  backToProctoringCenter = () => this.props.FC_ClearProctoring();\n\n  render() {\n    if (this.state.error.target === \"wrong-room\") {\n      return (\n        <div className=\"text-center p-8 mx-2 rounded bg-white m-6 animate__animated animate__zoomIn animate__faster\">\n          <h1 className=\"font-bold text-3xl text-red-800\">\n            {this.state.error.msg}\n          </h1>\n          <p className=\"text-gray-600\">\n            The you created a group which is doing another exam <br /> Please go\n            back the the created room\n          </p>\n          <button\n            className=\"btn bg-blue-500 p-2 px-3 text-white rounded hover:bg-blue-600 mt-3\"\n            onClick={this.backToProctoringCenter.bind(this)}\n          >\n            Back to exams list\n          </button>\n        </div>\n      );\n    }\n\n    let activeCandidates = this.props.proctoring.candidates.filter(\n      (itm: CandidateProctoringInterface) =>\n        itm.active === true && itm.done === false\n    );\n\n    let nonActiveCandidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === false || itm.done === true\n    );\n\n    if (this.props.proctoring.room_not_found === true) {\n      return <Attendance createAttendance={this.createAttendance} />;\n    }\n\n    let active_candidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === true\n    ).length;\n\n    return (\n      <div\n        className={`${\n          this.state.focus_mode === false\n            ? \" p-1 \"\n            : \"fixed right-0 left-0 bottom-0 top-0 z-50 overflow-y-auto\"\n        } transition-all ease-in-out`}\n      >\n        {((this.state.add_minutes.candidate !== null &&\n          this.state.add_minutes.room === false) ||\n          (this.state.add_minutes.room === true &&\n            this.state.add_minutes.candidate === null)) &&\n          this.state.add_minutes.minutes === 0 && (\n            <AddTimeToCandidateModal\n              candidate={this.state.add_minutes.candidate}\n              close={() =>\n                this.setState({\n                  add_minutes: {\n                    ...this.state.add_minutes,\n                    candidate: null,\n                    minutes: 0,\n                    room: false,\n                  },\n                })\n              }\n              addMinutesHandler={this.addMinutesHandler}\n              reset_added_minutes={this.state.add_minutes.reset_added_minutes}\n              reset_added_minutesHandler={this.reset_added_minutesHandler}\n            />\n          )}\n\n        {this.state.error.target === \"main\" && (\n          <div\n            className=\"animate__animated animate__slideInDown p-2 rounded-md animate__faster text-center text-sm bg-red-200 text-red-900\"\n            onClick={() => this.setState({ error: { target: \"\", msg: \"\" } })}\n          >\n            {this.state.error.msg}\n          </div>\n        )}\n\n        <ProctoringMainTopBar\n          focusToggle={this.focusToggle}\n          focus_mode={this.state.focus_mode}\n          course_title={this.props.proctoring.exam.course_name}\n          post_title={this.props.proctoring.exam.position_title}\n          duration={this.props.proctoring.exam.duration}\n          started_at={this.props.proctoring.exam.start_time}\n          exam_start={this.props.proctoring.exam.start_exam}\n          startExamHandler={this.startExamHandler}\n          stopExamHandler={this.stopExamHandler}\n          leaveRoom={this.leaveRoom}\n          room={this.props.proctoring.room}\n          active_candidate={active_candidates}\n          deleteRoom={this.deleteRoomHandler}\n          ExamDone={this.props.FC_ExamDone}\n          exam_rules={this.props.proctoring.exam_rules}\n          exam_done={this.props.proctoring.exam.exam_done}\n          addMinutesToRoom={this.addMinutesToRoomModal}\n        />\n\n        {/* this is the body */}\n        <div\n          className={`${\n            this.state.focus_mode === true\n              ? \"proctoring-body-contents text-white\"\n              : \"\"\n          }  h-screen`}\n        >\n          {/* <div className=\"lg:grid lg:grid-flow-col gap-4\"> */}\n          <div className=\"lg:flex\">\n            {/* <div className=\"lg:col-span-4 p-2 pt-3 lg:h-screen overflow-y-auto\"> */}\n            <div className=\"flex-1 pt-3 lg:h-screen overflow-y-auto\">\n              {/* pictures or images */}\n              {this.props.proctoring.candidate_loaded === false ? (\n                <div className=\"p-8 text-center animate__animated animate__zoomIn\">\n                  <Spinner />\n                  <h2 className=\"text-xl font-bold text-gray-400\">\n                    Loading room details...\n                  </h2>\n                </div>\n              ) : (\n                <div className=\"animate__animated animate__zoomI\">\n                  <div\n                    className={`${\n                      this.state.focus_mode === true\n                        ? \"bg-blue-900 bg-opacity-30\"\n                        : \"bg-gray-100\"\n                    } rounded-md mb-4`}\n                  >\n                    <h3\n                      className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                        this.state.focus_mode === true\n                          ? \"text-blue-100 bg-blue-900\"\n                          : \"text-white bg-gray-500\"\n                      } pb-1 mb-1`}\n                    >\n                      <span className=\"flex-1\">Active candidates </span>\n\n                      <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                        {activeCandidates.length}\n                      </span>\n                    </h3>\n                    {activeCandidates.length === 0 ? (\n                      <div className=\"py-8 text-center w-full\">\n                        <MdInfoOutline className=\"inline-block text-6xl\" />\n                        <h3 className=\"text-center text-2xl font-bold\">\n                          No active candidates\n                        </h3>\n                        <h3 className=\"text-center text-gray-500\">\n                          Active candidate is any candidate who is online and\n                          still doing the exam\n                        </h3>\n                      </div>\n                    ) : (\n                      <div className=\"grid grid-flow-row sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-5 gap-4 p-2\">\n                        {activeCandidates.map(\n                          (\n                            candidate: CandidateProctoringInterface,\n                            i: number\n                          ) => {\n                            return (\n                              <CenterCardSupervisor\n                                focus_mode={this.state.focus_mode}\n                                key={i}\n                                candidate={candidate}\n                                stopHandler={this.stopCandidateHandler}\n                                warningHandler={this.warnCandidateHandler}\n                                detailsHandler={this.SelectCandidateHandler}\n                                continueHandler={this.continueHandler}\n                                exam_started={\n                                  this.props.proctoring.exam.start_exam\n                                }\n                                exam_done={this.props.proctoring.exam.exam_done}\n                                addMinutes={this.addMinutesModal}\n                                duration={this.props.proctoring.exam.duration}\n                              />\n                            );\n                          }\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {nonActiveCandidates.length !== 0 && (\n                    <div\n                      className={`${\n                        this.state.focus_mode === true\n                          ? \"bg-blue-900 bg-opacity-30\"\n                          : \"bg-gray-100\"\n                      } rounded-md`}\n                    >\n                      <h3\n                        className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                          this.state.focus_mode === true\n                            ? \"text-blue-100 bg-blue-900\"\n                            : \"text-white bg-gray-500\"\n                        } pb-1 mb-1`}\n                      >\n                        <span className=\"flex-1\">Others candidates </span>\n                        <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                          {nonActiveCandidates.length}\n                        </span>\n                      </h3>\n                      <div className=\"mt-3 mx-2 pb-2\">\n                        <ProctoringCandidates\n                          candidates={nonActiveCandidates}\n                          clickHandler={this.SelectCandidateHandler}\n                          show_title={false}\n                          focus_mode={this.state.focus_mode}\n                          large={true}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            <div\n              className={`${\n                this.state.focus_mode === true\n                  ? \"proctoring-side-section border-blue-500  border-opacity-30\"\n                  : \"lg:bg-gray-100 \"\n              } p-2  lg:w-2/6 transition-all ease-in-out  lg:h-screen overflow-y-auto lg:ml-2 lg:border-l `}\n            >\n              {/* statistics */}{\" \"}\n              {(this.props.proctoring.exam.start_exam === true ||\n                this.props.proctoring.exam.exam_done === true) && (\n                <ProctoringStatistics\n                  focus_mode={this.state.focus_mode}\n                  candidates={this.props.proctoring.candidates}\n                />\n              )}\n              {this.state.selected_candidate === null ? (\n                <React.Fragment>\n                  {/* {this.state.online_room === true && ( */}\n                  <div className=\"my-2 p-1 rounded-md bg-blue-800 bg-opacity-60 grid grid-col-2 grid-flow-col gap-1\">\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Events\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Events\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Event list\n                    </button>\n\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Candidates\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Candidates\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Candidates\n                    </button>\n                  </div>\n                  {/* )} */}\n\n                  {/* events */}\n                  {this.state.active_side_tab === ActiveSideTap.Events ? (\n                    <ProctoringEvents\n                      candidates={this.props.proctoring.candidates}\n                      events={this.props.proctoring.events}\n                      focus_mode={this.state.focus_mode}\n                      loading={false}\n                    />\n                  ) : (\n                    <ProctoringCandidates\n                      candidates={this.props.proctoring.candidates}\n                      clickHandler={this.SelectCandidateHandler}\n                      focus_mode={this.state.focus_mode}\n                      show_title={false}\n                      large={false}\n                    />\n                  )}\n                </React.Fragment>\n              ) : (\n                <ProctoringCandidateDetails\n                  candidate={this.props.proctoring.candidates.find(\n                    (itm) => itm.user_id === this.state.selected_candidate\n                  )}\n                  events={this.props.proctoring.events.filter(\n                    (evnt: EventInterface) =>\n                      evnt.user_id === this.state.selected_candidate\n                  )}\n                  removeInExam={this.ejectCandidateHandler}\n                  chatHandler={this.blank}\n                  micHandler={this.blank}\n                  focusHandler={this.blank}\n                  stopHandler={this.stopCandidateHandler}\n                  restartHandler={this.restartCandidateHandler}\n                  warnHandler={this.warnCandidateHandler}\n                  closeHandler={() => this.SelectCandidateHandler(null)}\n                  home_proctoring={false}\n                  exam_started={this.props.proctoring.exam.start_exam}\n                  focus_mode={this.state.focus_mode}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; auth: Auth; proctoring: Proctoring } => {\n  return { socket: socket, auth: auth, proctoring: proctoring };\n};\n\nexport const ProctoringOnlineSupervisor = connect(mapStateToProps, {\n  FC_GetProctoringRoom,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_CandidateRemoveExam,\n  FC_RoomNotFoundOnline,\n  FC_RoomDetailsOnline,\n  FC_CandidateDoneExamCenter,\n  FC_ExamDone,\n  FC_CandidateTimeOut,\n  FC_AddMinutesToCandidate,\n  FC_CreateProctoringRoom,\n  FC_ClearProctoring,\n})(_ProctoringOnlineSupervisor);\n\n//* Interfaces Export */\nexport type FT_createAttendance = (data: {\n  name: string;\n  list: string[];\n}) => void;\nexport type warnCandidateHandler = (user_id: string) => void;\nexport type stopCandidateHandler = (user_id: string) => void;\nexport type SelectCandidateHandler = (value: string | null) => void;\nexport type continueHandler = (user_id: string) => void;\nexport type addMinutesModal = (candidate: CandidateProctoringInterface) => void;\n","import React, { FC, ReactElement, useState } from \"react\";\nimport { MdNotInterested, MdOutlineTimer, MdWarning } from \"react-icons/md\";\nimport { FC_CardStyle } from \"../../actions\";\nimport {\n  addMinutesModal,\n  continueHandler,\n  SelectCandidateHandler,\n  stopCandidateHandler,\n  warnCandidateHandler,\n} from \"../../containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\nimport { CountDown } from \"../CountDown/CountDown\";\n\ntype CenterCardSupervisorProps = {\n  candidate: CandidateProctoringInterface;\n  exam_started: boolean;\n  focus_mode: boolean;\n  exam_done: boolean;\n  duration: number;\n  warningHandler: warnCandidateHandler;\n  stopHandler: stopCandidateHandler;\n  detailsHandler: SelectCandidateHandler;\n  continueHandler: continueHandler;\n  addMinutes: addMinutesModal;\n};\n\nconst CenterCardSupervisor: FC<CenterCardSupervisorProps> = ({\n  candidate,\n  warningHandler,\n  stopHandler,\n  detailsHandler,\n  continueHandler,\n  exam_started,\n  focus_mode,\n  exam_done,\n  addMinutes,\n  // duration,\n}): ReactElement => {\n  // let color = candidate?.stopped === true ? \"red\" : focus_mode === true ? \"blue\" : \"gray\";\n  const [candidate_done, setCandidate_done] = useState(true);\n  return (\n    <div\n      // className={`bg-${color}-900 bg-opacity-50 hover:bg-opacity-100 border-${color}-400 border text-white    cursor-pointer  p-2 rounded-md transition-all ease-in-out`}\n      className={`${FC_CardStyle(\n        candidate?.stopped,\n        focus_mode,\n        candidate.done\n      )} text-white    cursor-pointer  p-2 rounded-md transition-all ease-in-out`}\n      onClick={detailsHandler.bind(this, candidate.user_id)}\n    >\n      <div className=\"text-center\">\n        <span className={`text-gray-200`}>Seat number</span>\n        <h1 className=\"text-5xl font-bold\">{candidate.seat_number}</h1>\n      </div>\n\n      {candidate.added_minutes !== 0 && (\n        <div className=\"flex items-center text-sm\">\n          <div className=\"\">\n            <section className=\"p-0.5 bg-blue-500 rounded w-\">\n              {candidate.added_minutes}m\n            </section>\n          </div>\n          <div className=\"flex-1\"></div>\n          <div className=\" pl-2 font-bold text-center\">\n            {exam_done === true && (\n              <section className=\"p-0.5 bg-blue-500 rounded w-auto px-1\">\n                <CountDown\n                  start_time={candidate.start_added_time}\n                  duration_min={candidate.added_minutes}\n                  timeout={() => setCandidate_done(false)}\n                  returnString={true}\n                  labels\n                />\n              </section>\n            )}\n          </div>\n        </div>\n      )}\n\n      <div className={`mt-1 border-t border-gray-200 pt-2`}>\n        <h4 className={`text-xs text-gray-200`}>Full names</h4>\n        <h4 className=\"text-sm font-bold\">\n          {candidate.fname} {candidate.lname}\n        </h4>\n      </div>\n\n      {((exam_started === true && exam_done === false) ||\n        (candidate.added_minutes !== 0 && candidate_done !== false)) && (\n        <div className=\"mt-2 flex\">\n          {candidate.stopped === false ? (\n            <button\n              onClick={warningHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-yellow-300 flex-1 border border-white\"\n              title=\"Send a warning\"\n            >\n              <MdWarning className=\"inline\" /> Warn\n            </button>\n          ) : (\n            <button\n              onClick={continueHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-green-400 flex-1\"\n              title=\"Allow to continue exam\"\n            >\n              <MdWarning className=\"inline\" /> Continue\n            </button>\n          )}\n          <button\n            onClick={stopHandler.bind(this, candidate.user_id)}\n            className=\"px-2 text-sm py-1 rounded-md text-white- bg-red-700 ml-1 flex-1\"\n            title=\"Stop candidate\"\n          >\n            <MdNotInterested className=\"inline\" /> Stop\n          </button>\n        </div>\n      )}\n\n      {(exam_done === true || exam_started === true) && (\n        <div className=\"mr-2 mt-2\">\n          <button\n            onClick={() => {\n              addMinutes(candidate);\n              setCandidate_done(true);\n            }}\n            className=\"px-2 py-1 rounded-md text-sm w-full bg-blue-700 ml-1\"\n            title=\"Add minutes\"\n          >\n            <MdOutlineTimer className=\"inline\" /> Add minutes\n          </button>{\" \"}\n        </div>\n      )}\n      {/* {exam_done === true &&\n        candidate.added_minutes !== 0 &&\n        candidate.stopped !== true && <div> Time out dom </div>} */}\n    </div>\n  );\n};\nexport default CenterCardSupervisor;\n","import moment from \"moment\";\nimport React, { Fragment } from \"react\";\nimport { MdAddCircle, MdError, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Proctoring,\n  createCandidateRoomAPI,\n  FT_CloseProctoringRoom,\n  FC_CloseProctoringRoom,\n} from \"../../actions\";\nimport { FT_createAttendance } from \"../../containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\nimport { CandidateProctoringInterfaceAPI } from \"../../interfaces\";\nimport { StoreState } from \"../../reducers\";\nimport search from \"../../utils/search\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  createAttendance: FT_createAttendance;\n  FC_CloseProctoringRoom: FT_CloseProctoringRoom;\n}\n\ninterface AppState {\n  loading: boolean;\n  create_attendance: boolean;\n  search: string;\n  selected_list: string[];\n  selected_candidate: CandidateProctoringInterfaceAPI | null;\n  group_name: string;\n  error: {\n    target: string;\n    msg: string;\n  };\n  created_groups: string[];\n  candidates_in_groups: CandidateProctoringInterfaceAPI[];\n  candidate_non_done_exam: CandidateProctoringInterfaceAPI[];\n  disabling_room: boolean;\n  group_list: string[];\n}\n\nclass _Attendance extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      create_attendance: false,\n      selected_list: [],\n      selected_candidate: null,\n      search: \"\",\n      group_name: \"\",\n      error: {\n        target: \"\",\n        msg: \"\",\n      },\n      created_groups: [],\n      candidates_in_groups: [],\n      candidate_non_done_exam: [],\n      disabling_room: false,\n      group_list: [],\n    };\n  }\n\n  componentDidMount = () => {\n    let group_list: string[] = [];\n    let done_candidates: {\n      user_id: string;\n      seat_number: number;\n      group_id: string;\n    }[] = [];\n    let candidates_in_with_groups: CandidateProctoringInterfaceAPI[] = [];\n    // let candidate_non_done_exam: CandidateProctoringInterfaceAPI[] = [];\n\n    this.props.proctoring.room_groups?.forEach((group) => {\n      group_list.push(group.group_id.toLowerCase());\n      done_candidates = [\n        ...done_candidates,\n        ...group.candidates.map((x) => ({ ...x, group_id: group.group_id })),\n      ];\n    });\n\n    candidates_in_with_groups = this.props.proctoring.all_candidates.map(\n      (itm) => {\n        // check if the candidate exists\n        let candidate_exist = done_candidates.find(\n          (el) => el.user_id === itm.user_id\n        );\n        if (candidate_exist === undefined) {\n          return { ...itm, group_id: \"\" };\n        } else {\n          return { ...itm, group_id: candidate_exist.group_id };\n        }\n      }\n    );\n\n    this.setState({\n      candidates_in_groups: candidates_in_with_groups.filter(\n        (cand) => cand.group_id !== \"\"\n      ),\n      candidate_non_done_exam: candidates_in_with_groups.filter(\n        (cand) => cand.group_id === \"\"\n      ),\n      group_list: group_list,\n    });\n  };\n\n  submitHandler = (e: any) => {\n    e.preventDefault();\n\n    if (this.state.group_name.length === 0) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"Please add the group name\",\n        },\n      });\n    }\n\n    if (this.state.selected_list.length === 0) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"You can't create an empty group\",\n        },\n      });\n    }\n\n    if (\n      this.state.group_list.includes(this.state.group_name.toLowerCase()) ===\n      true\n    ) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"This name already used on previous group\",\n        },\n      });\n    }\n\n    this.props.createAttendance({\n      list: this.state.selected_list,\n      name: this.state.group_name,\n    });\n  };\n\n  FC_CloseProctoringRoomHandler = (id: string | undefined) => {\n    if (id === undefined) return;\n    if (\n      window.confirm(\n        \"Are you sure you want to set this room to finished status??\"\n      ) === false\n    )\n      return;\n\n    this.setState({ disabling_room: true });\n    this.props.FC_CloseProctoringRoom(id, (status, msg) => {\n      if (status === false) {\n        this.setState({\n          error: { target: \"main\", msg: msg },\n          disabling_room: false,\n        });\n      } else {\n        this.setState({ disabling_room: false });\n      }\n    });\n  };\n\n  render() {\n    let expiredRooms: createCandidateRoomAPI[] = [];\n\n    // check if there is a room which is not yet closed\n    if (this.props.proctoring.room_groups !== null) {\n      expiredRooms = this.props.proctoring.room_groups?.filter(\n        (data) =>\n          data.isExpired === false &&\n          data.exam_id === this.props.proctoring.exam.exam_id\n      );\n    }\n\n    if (expiredRooms.length >= 1) {\n      return (\n        <div className=\"p-4 bg-white rounded mt-3 mr-2\">\n          <div className=\" p-2 text-center\">\n            <h1 className=\"text-4xl\">Some previous room are not closed yet</h1>\n            <h3 className=\"text-lg text-gray-700\">\n              If you want to create another room, please close all the rooms\n              first\n            </h3>\n          </div>\n\n          {this.state.disabling_room === true && (\n            <div className=\"my-2 bg-green-500 text-white px-2 text-center rounded animate__animated animate__fadeIn animate_infinite cursor-pointer\">\n              Updating groups...\n            </div>\n          )}\n\n          {this.state.error.target === \"main\" && (\n            <div\n              className=\"my-2 bg-red-500 text-white px-2 text-center rounded animate__animated animate__zoomIn cursor-pointer\"\n              onClick={() => this.setState({ error: { target: \"\", msg: \"\" } })}\n            >\n              {this.state.error.msg}\n            </div>\n          )}\n\n          <div className=\"mt-3\">\n            <table className=\"w-full table table-auto\">\n              <thead className=\"text-left bg-gray-100 text-gray-600\">\n                <tr>\n                  <th>#</th>\n                  <th>Group name</th>\n                  <th>Created time</th>\n                  <th>Total candidates</th>\n                  <th>Course</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {expiredRooms.map((itm, i) => (\n                  <tr key={itm._id} className=\"border-b\">\n                    <td className=\"p-3\">{i + 1}</td>\n                    <td>\n                      <b>{itm.group_id}</b>\n                    </td>\n                    <td>{moment(itm.createdAt).format(\"LLLL\")}</td>\n                    <td>{itm.candidates.length}</td>\n                    <td>{this.props.proctoring.exam.course_name}</td>\n                    <td className=\"text-right\">\n                      <button\n                        onClick={this.FC_CloseProctoringRoomHandler.bind(\n                          this,\n                          itm._id\n                        )}\n                        className=\"p-1 rounded bg-red-400 text-white px-3\"\n                      >\n                        Set room to finish\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      );\n    }\n\n    let resultCandidates: CandidateProctoringInterfaceAPI[] = search(\n      this.state.candidate_non_done_exam,\n      this.state.search,\n      {\n        email: true,\n        fname: true,\n        lname: true,\n      }\n    );\n\n    if (\n      this.props.proctoring.candidates.length === 0 &&\n      this.state.create_attendance === false\n    ) {\n      return (\n        <div className=\"mt-4 mx-4\">\n          {this.props.proctoring.error !== \"\" && (\n            <div className=\"p-2 mb-3 bg-red-200 animate__zoomIn animate__faster animate__animated text-red-600 rounded-md flex items-center\">\n              <MdError className=\"text-2xl\" />\n              <p className=\"m-0 text-xl ml-1.5\">\n                {this.props.proctoring.error}\n              </p>\n            </div>\n          )}\n\n          <div className=\"p-6 bg-white animate__fadeIn animate__animated mt-4 rounded shadow-md\">\n            <h2 className=\"text-3xl font-bold mb-2\">Create a group</h2>\n            <p className=\"text-md text-gray-700 \">\n              To create a group click on <b>create group</b> button and check\n              list of all the candidates and add them to the attendance with the\n              room name\n            </p>\n\n            <div className=\"my-2 border-- w-4/5 py-2\">\n              {[\n                {\n                  title: \"Province\",\n                  value: this.props.proctoring.room.province_name,\n                },\n                {\n                  title: \"District\",\n                  value: this.props.proctoring.room.district_name,\n                },\n                {\n                  title: \"Center name\",\n                  value: this.props.proctoring.room.center_name,\n                },\n                {\n                  title: \"Room number\",\n                  value: this.props.proctoring.room.room_number,\n                },\n              ].map((itm) => (\n                <section key={itm.title} className=\"border-t py-1\">\n                  <span>{itm.title}: </span>\n                  <b>{itm.value}</b>\n                </section>\n              ))}\n            </div>\n            <button\n              className=\"p-2 px-3 rounded text-lg mt-2 bg-blue-500 text-white hover:bg-600\"\n              onClick={() => this.setState({ create_attendance: true })}\n            >\n              Create group\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Fragment>\n        {this.state.selected_candidate !== null && (\n          <Modal\n            footer={false}\n            widthSizeClass={ModalSize.large}\n            title=\"User info\"\n            theme={Themes.default}\n            displayClose={true}\n            padding={{ title: true, body: true, footer: false }}\n            backDrop={true}\n            backDropClose={true}\n            close={() => this.setState({ selected_candidate: null })}\n          >\n            <div className=\"p-2\">\n              {[\n                {\n                  title: \"National Id\",\n                  value: this.state.selected_candidate.n_id,\n                },\n                {\n                  title: \"First name\",\n                  value: this.state.selected_candidate.fname,\n                },\n                {\n                  title: \"Last name\",\n                  value: this.state.selected_candidate.lname,\n                },\n                {\n                  title: \"District\",\n                  value: this.state.selected_candidate.district,\n                },\n                {\n                  title: \"Phone number\",\n                  value: this.state.selected_candidate.phone_number,\n                },\n                {\n                  title: \"Course\",\n                  value:\n                    this.state.selected_candidate.course_code +\n                    \" \" +\n                    this.state.selected_candidate.course_name,\n                },\n                { title: \"Email\", value: this.state.selected_candidate.email },\n                {\n                  title: \"Position\",\n                  value: this.state.selected_candidate.position_title,\n                },\n              ].map((itm) => (\n                <section key={itm.title} className=\"border-t py-1\">\n                  <span>{itm.title}: </span>\n                  <b>{itm.value}</b>\n                </section>\n              ))}\n            </div>\n          </Modal>\n        )}\n\n        <form onSubmit={this.submitHandler}>\n          <div className=\"bg-white p-2 mr-2 mt-3 rounded-md animate__animated animate__fadeIn\">\n            <div className=\" px-2 pb-3 flex items-center\">\n              <div className=\"flex-1\">\n                <h2 className=\"font-bold text-xl\">Create a group</h2>\n                <p className=\"text-gray-400 m-0 mt- text-sm\">\n                  Please create a room by adding the list of the users to the\n                  attendee list\n                </p>\n              </div>\n              <div className=\"\">\n                <div className=\"flex items-end\">\n                  <div className=\"\">\n                    <label htmlFor=\"input-group-name\" className=\"block text-xs\">\n                      Group name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"input-group-name\"\n                      className={`p-1 px-2 bg-gray-50 rounded-md ${\n                        this.state.error.target === \"form\"\n                          ? \"border-red-600\"\n                          : \"\"\n                      }  border`}\n                      placeholder=\"A\"\n                      maxLength={2}\n                      required\n                      value={this.state.group_name}\n                      onChange={(e) =>\n                        this.setState({\n                          group_name: e.target.value.toUpperCase(),\n                        })\n                      }\n                    />\n                  </div>\n                  <div className=\"flex-1 pl-1\">\n                    <button\n                      type=\"submit\"\n                      className=\"py-1 px-3 text-md hover:bg-green-600 rounded-md bg-green-500 text-white block\"\n                    >\n                      Create group\n                    </button>\n                  </div>\n                </div>\n                {this.state.error.target === \"form\" && (\n                  <span className=\"text-red-500 text-sm\">\n                    {this.state.error.msg}\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"md:flex\">\n              {this.state.selected_list.length !== 0 &&\n              this.state.selected_list.length ===\n                this.props.proctoring.all_candidates.length ? null : (\n                <div className=\"flex-1 mr-2 mb-8 md:mb-2\">\n                  <div className=\"p-2 flex bg-gray-200 items-center\">\n                    <h4 className=\"text-xl font-light text-gray-700\">\n                      All candidates\n                    </h4>\n                    <input\n                      type=\"search\"\n                      name=\"search\"\n                      id=\"\"\n                      placeholder=\"search name\"\n                      className=\"py-1 px-2 flex-1 ml-3 bg-gray-50 border rounded\"\n                      value={this.state.search}\n                      onChange={(e) =>\n                        this.setState({ search: e.target.value })\n                      }\n                    />\n                  </div>\n                  <div className=\" shadow\">\n                    <table className=\"w-full\">\n                      <thead className=\"text-left bg-gray-400\">\n                        <tr>\n                          <th className=\"text-center\">#</th>\n                          <th>Names</th>\n                          <th>Email</th>\n                          <th className=\"text-right\">\n                            <button\n                              type=\"button\"\n                              className=\"p-0.5 px-2 rounded-md hover:bg-blue-700 m-1 inline-block bg-blue-600 text-white text-sm\"\n                              onClick={() =>\n                                this.setState({\n                                  selected_list:\n                                    this.state.candidate_non_done_exam.map(\n                                      (itm) => itm.user_id\n                                    ),\n                                })\n                              }\n                            >\n                              Select all\n                            </button>\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultCandidates.length === 0 ? (\n                          <tr>\n                            <td colSpan={4}>\n                              <div className=\"p-2 text-center py-4\">\n                                <MdInfoOutline className=\"text-6xl text-gray-500 mx-auto my-1\" />\n                                <h2>\n                                  <b>{this.state.search}</b> can't be found in\n                                  waiting candidates\n                                </h2>\n                              </div>\n                            </td>\n                          </tr>\n                        ) : (\n                          <>\n                            {resultCandidates.map(\n                              (itm: CandidateProctoringInterfaceAPI, i) =>\n                                this.state.selected_list.indexOf(itm.user_id) >\n                                -1 ? null : (\n                                  <tr\n                                    key={i}\n                                    className=\"border-b group hover:bg-green-50\"\n                                  >\n                                    <td className=\"text-gray-400 px-1 text-sm text-center\">\n                                      {\" \"}\n                                      {i + 1}\n                                    </td>\n                                    <td\n                                      title=\"Click to see details\"\n                                      className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                      onClick={() =>\n                                        this.setState({\n                                          selected_candidate: itm,\n                                        })\n                                      }\n                                    >\n                                      {itm.fname} {itm.lname}\n                                    </td>\n                                    <td className=\"text-sm\">{itm.email}</td>\n                                    <td className=\"text-right\">\n                                      <button\n                                        type=\"button\"\n                                        onClick={() =>\n                                          this.setState({\n                                            selected_list: [\n                                              ...this.state.selected_list,\n                                              itm.user_id,\n                                            ],\n                                            error: {\n                                              target: \"\",\n                                              msg: \"\",\n                                            },\n                                          })\n                                        }\n                                        className=\"my-1 p-1 px-2 rounded-md group-hover:opacity-95 opacity-5 bg-green-500 text-white text-sm\"\n                                      >\n                                        <MdAddCircle className=\"inline-block mr-1\" />\n                                        Add\n                                      </button>\n                                    </td>\n                                  </tr>\n                                )\n                            )}\n\n                            {this.state.search === \"\" && (\n                              <>\n                                <tr>\n                                  <td colSpan={5}>\n                                    <h4 className=\"text-center text-2xl text-gray-400 p-2 border-b\">\n                                      Candidates who are done the exam\n                                    </h4>\n                                  </td>\n                                </tr>\n                                {this.state.candidates_in_groups.map(\n                                  (itm: CandidateProctoringInterfaceAPI, i) =>\n                                    this.state.selected_list.indexOf(\n                                      itm.user_id\n                                    ) > -1 ? null : (\n                                      <tr\n                                        key={i}\n                                        className=\"border-b group  opacity-70\n                                    \"\n                                      >\n                                        <td className=\"text-gray-400 px-1 text-sm text-center\">\n                                          {\" \"}\n                                          {i + 1}\n                                        </td>\n                                        <td\n                                          title=\"Click to see details\"\n                                          className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                          onClick={() =>\n                                            this.setState({\n                                              selected_candidate: itm,\n                                            })\n                                          }\n                                        >\n                                          {itm.fname} {itm.lname}\n                                        </td>\n                                        <td className=\"text-sm\">{itm.email}</td>\n                                        <td className=\"\">\n                                          Group: <b>{itm.group_id}</b>\n                                        </td>\n                                      </tr>\n                                    )\n                                )}\n                              </>\n                            )}\n                          </>\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n              <div className=\"flex-1 ml-1 shadow border\">\n                <div className=\"p-1 bg-green-100 py-1 px-2 flex items-center\">\n                  <div className=\"flex-1\">\n                    <h2 className=\"font-bold text-green-900 text-2xl\">Group</h2>\n                    <p className=\"text-green-800 m-0 mt- text-sm\">\n                      This is the list of the candidate who are allowed to do\n                      the exam\n                    </p>\n                  </div>\n                  <div className=\"\">\n                    <h2 className=\"text-xl font-bold -mb-2\">\n                      <b>{this.state.selected_list.length}</b> of{\" \"}\n                      <b>{this.props.proctoring.all_candidates.length}</b>\n                    </h2>\n                    <p className=\"text-sm\">Selected</p>\n                  </div>\n                </div>\n                <div className=\"\">\n                  <table className=\"w-full\">\n                    <thead className=\"text-left bg-green-800 text-white\">\n                      <tr>\n                        <th className=\"px-2\">#</th>\n                        <th>Names</th>\n                        <th>Email</th>\n                        <th className=\"text-right\">\n                          {this.state.selected_list.length >= 2 && (\n                            <button\n                              type=\"button\"\n                              className=\"p-0.5 px-2 rounded-md hover:bg-red-700 hover:text-red-100 m-1 inline-block bg-red-200 text-red-800 text-sm\"\n                              onClick={() =>\n                                this.setState({\n                                  selected_list: [],\n                                })\n                              }\n                            >\n                              Remove all\n                            </button>\n                          )}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.selected_list.length === 0 ? (\n                        <tr>\n                          <td colSpan={4}>\n                            <div className=\"p-2 text-center py-4\">\n                              <MdInfoOutline className=\"text-6xl text-gray-500 mx-auto my-1\" />\n                              <h2>No candidate found on the attendance</h2>\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        this.state.selected_list.map(\n                          (user_id: string, i: number) => {\n                            let candidateFind =\n                              this.props.proctoring.all_candidates.find(\n                                (cand) => cand.user_id === user_id\n                              );\n                            if (candidateFind === undefined) {\n                              return null;\n                            }\n                            return (\n                              <tr\n                                key={i}\n                                className=\"border-b group hover:bg-green-50 animate__animated animate__zoomIn animate__faster\"\n                              >\n                                <td className=\"text-gray-400 pr-1 text-center\">\n                                  {i + 1}\n                                </td>\n                                <td\n                                  title=\"Click to see details\"\n                                  className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                  onClick={() =>\n                                    candidateFind !== undefined &&\n                                    this.setState({\n                                      selected_candidate: candidateFind,\n                                    })\n                                  }\n                                >\n                                  {candidateFind.fname} {candidateFind.lname}\n                                </td>\n                                <td>{candidateFind.email}</td>\n                                <td className=\"text-right\">\n                                  <button\n                                    type=\"button\"\n                                    onClick={() =>\n                                      this.setState({\n                                        selected_list:\n                                          this.state.selected_list.filter(\n                                            (el) => el !== user_id\n                                          ),\n                                      })\n                                    }\n                                    className=\"my-1 p-1 px-2 rounded-md group-hover:opacity-95 opacity-5 bg-red-500 text-white text-sm\"\n                                  >\n                                    Remove\n                                  </button>\n                                </td>\n                              </tr>\n                            );\n                          }\n                        )\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nexport const Attendance = connect(mapStateToProps, { FC_CloseProctoringRoom })(\n  _Attendance\n);\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport {\n  MdAddAlarm,\n  MdCheckBox,\n  MdCheckBoxOutlineBlank,\n  MdClose,\n} from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype AddTimeToCandidateModalProps = {\n  close: Function;\n  candidate: CandidateProctoringInterface | null;\n  addMinutesHandler: Function;\n  reset_added_minutesHandler: () => void;\n  reset_added_minutes: boolean;\n};\n\nconst AddTimeToCandidateModal: FC<AddTimeToCandidateModalProps> = ({\n  close,\n  candidate,\n  addMinutesHandler,\n  // reset_added_minutesHandler,\n  reset_added_minutes,\n}): ReactElement => {\n  const [minutes, setMinutes] = useState(1);\n  const [reason, setReason] = useState(\"\");\n  const [error, setError] = useState({ target: \"\", msg: \"\" } as {\n    target: string;\n    msg: string;\n  });\n\n  const submitHandler = () => {\n    if (minutes < 2) {\n      return setError({ target: \"minutes\", msg: \"Minimum is 2m\" });\n    }\n\n    if (reason.length <= 3) {\n      return setError({\n        target: \"reason\",\n        msg: \"Reason must me up to 4 characters\",\n      });\n    }\n    addMinutesHandler(minutes, reason);\n    close();\n  };\n\n  return (\n    <Fragment>\n      <div\n        className=\"fixed bg-black bg-opacity-10 top-0 bottom-0 right-0 left-0 animate__animated animate__fadeIn\"\n        onClick={() => close(false)}\n      ></div>\n      <div className=\"fixed w-80 shadow-lg bg-white rounded top-16 mt-2 right-2 animate__animated animate__zoomIn animate__faster\">\n        <div className=\"flex items-center border-b\">\n          <div className=\"flex-1 pl-2 text-xl font-bold text-gray-400\">\n            <h4>Room details</h4>\n          </div>\n\n          <div className=\"\">\n            <button\n              onClick={() => close(false)}\n              className=\"p-2 hover:bg-red-700 hover:text-white rounded text-2xl\"\n            >\n              <MdClose />\n            </button>\n          </div>\n        </div>\n        <div className=\"p-2 \">\n          {candidate !== null ? (\n            <div className=\"border-separate p-2\">\n              {[\n                {\n                  title: \"Names\",\n                  value: candidate?.fname + \" \" + candidate?.lname,\n                },\n                { title: \"Email\", value: candidate?.email },\n                { title: \"Seat\", value: candidate?.seat_number },\n              ].map(({ title, value }, i) => (\n                <div key={i} className=\"flex\">\n                  <span className=\"text-gray-500\">{title}: </span>\n                  <b className=\"text-right inline-block\"> {value}</b>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div\n              className=\"p-2 flex items-center bg-gray-100 border mb-3 cursor-pointer hover:bg-green-100 rounded-md\"\n              // onClick={reset_added_minutesHandler.bind(this)}\n            >\n              <div className=\"p-1\">\n                {reset_added_minutes === true ? (\n                  <MdCheckBox className=\"text-3xl text-green-500\" />\n                ) : (\n                  <MdCheckBoxOutlineBlank className=\"text-3xl text-gray-500\" />\n                )}\n              </div>\n              <div className=\"flex-1 p-1\">\n                <p\n                  className={`${\n                    reset_added_minutes === true ? \"\" : \"text-gray-600\"\n                  }`}\n                >\n                  {reset_added_minutes === true\n                    ? \"All the candidate will lose the minutes you added on them\"\n                    : \"All the candidate will keep the minutes you added on them\"}\n                </p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"p-2 text-center pt-1 bg-gray-100 mx-2 rounded\">\n            <p className=\"m-0 text-sm text-gray-500\">Minutes</p>\n            <div className=\"flex\">\n              <button\n                className=\"text-3xl px-4 hover:bg-blue-200 hover:text-blue-900 rounded\"\n                onClick={setMinutes.bind(this, minutes - 1)}\n              >\n                -\n              </button>\n              <input\n                type=\"number\"\n                className=\"flex-1 text-4xl text-center font-bold bg-transparent text-blue-700\"\n                min={1}\n                max={10}\n                value={minutes}\n                onChange={(e) => setMinutes(+e.target.value)}\n              />\n              <button\n                className=\"text-3xl px-4 hover:bg-blue-200 hover:text-blue-900 rounded\"\n                onClick={setMinutes.bind(this, minutes + 1)}\n              >\n                +\n              </button>\n            </div>\n            {error.target === \"minutes\" && (\n              <span className=\"text-red-500 text-sm\">{error.msg}</span>\n            )}\n          </div>\n\n          <div className=\"p-2\">\n            <label htmlFor=\"minutes-reason\">Reason</label>\n            <textarea\n              id=\"minutes-reason\"\n              className={`w-full bg-gray-100 rounded border-2 ${\n                error.target === \"reason\" ? \"border-red-500\" : \"border-blue-500\"\n              } p-1`}\n              rows={3}\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n            ></textarea>\n            {error.target === \"reason\" && (\n              <span className=\"text-red-500 text-sm\">{error.msg}</span>\n            )}\n          </div>\n\n          <div className=\"p-2 mx-1\">\n            <button\n              className=\"btn bg-blue-500 text-white w-full hover:bg-blue-600\"\n              onClick={() => submitHandler()}\n            >\n              <MdAddAlarm className=\"inline-block text-2xl\" /> Add minutes\n            </button>\n          </div>\n        </div>\n      </div>{\" \"}\n    </Fragment>\n  );\n};\nexport default AddTimeToCandidateModal;\n","import moment from \"moment\";\nimport React, { Fragment } from \"react\";\nimport { FaSchool } from \"react-icons/fa\";\nimport { MdLocationOn } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  FC_RoomDetails,\n  Proctoring,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n  FT_AddRules,\n  FC_AddRules,\n  FT_LoadExamToRoomProctoring,\n  FT_ExamsDetailsData,\n  FT_RoomDetails,\n  FT_ClearExamToRoomProctoring,\n} from \"../../actions\";\nimport {\n  ProctoringExam,\n  ProctoringRoomExam,\n} from \"../../interfaces/socketInterfaces\";\nimport { StoreState } from \"../../reducers\";\nimport search from \"../../utils/search\";\nimport { ProctoringOnlineSupervisor } from \"../ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_RoomDetails: FT_RoomDetails;\n  FC_ExamsDetailsData: FT_ExamsDetailsData;\n  FC_LoadExamToRoomProctoring: FT_LoadExamToRoomProctoring;\n  FC_ClearExamToRoomProctoring: FT_ClearExamToRoomProctoring;\n  FC_AddRules: FT_AddRules;\n}\n\ninterface AppState {\n  error: boolean;\n  errorMsg: string;\n  exams_error: boolean;\n  exams_error_msg: string;\n  search_text: string;\n  loading_room_details: boolean;\n  get_exams_list: boolean;\n}\n\nclass _ProctoringCenter extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      error: false,\n      errorMsg: \"\",\n      exams_error: false,\n      exams_error_msg: \"\",\n      search_text: \"\",\n      loading_room_details: false,\n      get_exams_list: false,\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.auth.user_access.room_id.length >= 3) {\n      //** GET ROOM DETAILS */\n\n      if (this.props.proctoring.room.room_id === \"\") {\n        this.setState({ loading_room_details: true });\n        this.props.FC_RoomDetails(\n          this.props.auth.user_access.room_id,\n          (status: boolean, errorMsg: string) => {\n            if (status === true) {\n              this.setState({ loading_room_details: false });\n\n              if (\n                this.props.auth.application_session._id !== undefined &&\n                this.props.auth.application_session._id !== \"\"\n              ) {\n                //** GET EXAMS DETAILS */\n                this.setState({ get_exams_list: false });\n\n                this.props.FC_ExamsDetailsData(\n                  this.props.auth.application_session?._id,\n                  (status: boolean, error: string) => {\n                    if (status === false) {\n                      this.setState({\n                        exams_error: true,\n                        exams_error_msg: error,\n                        get_exams_list: false,\n                      });\n                    } else {\n                      this.setState({ get_exams_list: false });\n                    }\n                  }\n                );\n              } else {\n                this.setState({\n                  error: true,\n                  errorMsg: \"No application session found\",\n                });\n              }\n            } else {\n              this.setState({\n                error: true,\n                errorMsg: errorMsg,\n                loading_room_details: false,\n              });\n            }\n          }\n        );\n      }\n    }\n  };\n\n  render() {\n    if (this.state.error === true) {\n      return (\n        <div className=\"mt-4\">\n          <div className=\"p-5 bg-red-100 rounded-md mx-auto text-center text-red-900 animate__animated animate__bounceIn\">\n            <h1 className=\"text-3xl font-bold\">Failed do load data</h1>\n            <p>{this.state.errorMsg}</p>\n          </div>\n        </div>\n      );\n    }\n    if (\n      this.state.error === false &&\n      this.props.proctoring.room.loaded === false\n    ) {\n      return (\n        <div className=\"m-5 text-center\">\n          <h5 className=\"text-gray-400 animate__animated animate__fadeIn animate__infinite text-xl\">\n            Loading room details\n          </h5>\n        </div>\n      );\n    }\n\n    const {\n      room_number,\n      center_name,\n      district_name,\n      province_name,\n      // district_id,\n      // center_id,\n      // province_id,\n      // room_id,\n    } = this.props.proctoring.room;\n\n    if (\n      this.props.proctoring.exam.course_id !== \"\" &&\n      this.props.proctoring.exam.position_id !== \"\"\n    ) {\n      return <ProctoringOnlineSupervisor />;\n    }\n\n    let courses_results = search(\n      this.props.proctoring.room_exams,\n      this.state.search_text,\n      {\n        course_id: true,\n        course_name: true,\n        course_code: true,\n      }\n    );\n    return (\n      <Fragment>\n        <div className=\"mr-2\">\n          <div className=\"p-5 bg-white rounded-b-md \">\n            <h2 className=\"text-2xl text-gray-600 font-bold text-center border-b pb-2\">\n              Room details\n            </h2>\n            <div className=\"flex flex-col md:flex-row\">\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <MdLocationOn className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 pt-3 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Province:</span>{\" \"}\n                    <b> {province_name}</b>\n                  </div>\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">District:</span>{\" \"}\n                    <b> {district_name}</b>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <FaSchool className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Center name:</span>{\" \"}\n                    <b> {center_name}</b>\n                  </div>\n\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Room Number:</span>{\" \"}\n                    <b> {room_number}</b>\n                  </div>\n                </div>\n              </div>\n            </div>{\" \"}\n          </div>\n          {this.state.loading_room_details === true && (\n            <div className=\"p-2 rounded-md text-center bg-blue-400 text-white animate__fadeIn animate__animated animate__infinite my-2\">\n              Loading room details...\n            </div>\n          )}\n          {this.state.get_exams_list === true && (\n            <div className=\"p-2 rounded-md text-center bg-blue-400 text-white animate__fadeIn animate__animated animate__infinite my-2\">\n              Loading exams...\n            </div>\n          )}\n          <h2 className=\"mt-5 text-2xl font-bold text-gray-500\">\n            Exams on this room\n          </h2>\n          <div className=\"mt-2 p-2 bg-white rounded-md\">\n            {this.props.proctoring.room_exams.length <= 0 ? (\n              <div className=\"p-5 text-center\">\n                No exams assigned to this room\n              </div>\n            ) : (\n              <>\n                <div className=\"pt-1 pb-3\">\n                  <input\n                    type=\"search\"\n                    onChange={(e) =>\n                      this.setState({ search_text: e.target.value })\n                    }\n                    value={this.state.search_text}\n                    className=\"input bg-gray-100 p-1\"\n                    placeholder=\"Search\"\n                  />\n                </div>\n\n                <table className=\"w-full text-left\">\n                  <thead className=\"bg-gray-100 rounded-md\">\n                    <tr>\n                      <th className=\"p-2\">#</th>\n                      <th className=\"p-2\">Course</th>\n                      <th className=\"p-2\">Position</th>\n                      <th className=\"p-2\">Code</th>\n                      <th className=\"p-2\">Date</th>\n                      <th className=\"p-2\"></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {courses_results.length === 0 && (\n                      <tr>\n                        <td colSpan={7} className=\"py-6 text-center\">\n                          <h2 className=\"text-3xl text-gray-500\">\n                            No data found\n                          </h2>\n                        </td>\n                      </tr>\n                    )}\n\n                    {courses_results.map((room: ProctoringRoomExam, key) => {\n                      let examFound =\n                        this.props.proctoring.exams_list.exams.find(\n                          (exm) => exm.course === room.course_id\n                        );\n\n                      if (examFound === undefined) return null;\n\n                      return (\n                        <tr\n                          className=\"p-2 border-t group hover:bg-blue-50\"\n                          key={key}\n                        >\n                          <td className=\"p-2 text-gray-400\">{key + 1}</td>\n                          <td className=\"p-2 font-bold\">{room.course_name}</td>\n                          <td className=\"p-2\">\n                            <span className=\"p-1 text-sm bg-yellow-100 font-bold text-yellow-900 rounded\">\n                              {room.position_title}\n                            </span>\n                          </td>\n                          <td className=\"p-2\">{room.course_code}</td>\n                          <td className=\"p-2 text-sm\">\n                            {this.state.error === false &&\n                            this.props.proctoring.exams_list.loaded ===\n                              false ? (\n                              <span className=\"text-blue-500 animate__animated animate__fadeIn animate__infinite\">\n                                Loading...\n                              </span>\n                            ) : examFound === undefined ? (\n                              \"Not found\"\n                            ) : (\n                              moment(examFound.exam_date).format(\"LLLL\")\n                            )}\n                          </td>\n                          <td className=\"p-2 text-right\">\n                            {examFound !== undefined &&\n                              examFound !== undefined && (\n                                <Fragment>\n                                  {room.course_id ===\n                                    this.props.proctoring.exam.course_id &&\n                                    room.position_id ===\n                                      this.props.proctoring.exam\n                                        .position_id && (\n                                      <button\n                                        className=\" group-hover:bg-red-500 py-1 px-3 rounded text-red-500 group-hover:text-white bg-red-100\"\n                                        onClick={() =>\n                                          window.confirm(\n                                            \"Are you sure you want to exist the room\"\n                                          ) &&\n                                          this.props.FC_ClearExamToRoomProctoring()\n                                        }\n                                      >\n                                        Leave Room\n                                      </button>\n                                    )}\n                                  {this.props.proctoring.exam.room_id ===\n                                    \"\" && (\n                                    <button\n                                      onClick={() => {\n                                        if (\n                                          examFound !== undefined &&\n                                          examFound !== undefined &&\n                                          room !== null &&\n                                          room !== undefined\n                                        ) {\n                                          this.props.FC_LoadExamToRoomProctoring(\n                                            {\n                                              video_support: false,\n                                              start_exam: false,\n                                              start_time: examFound?.start_time,\n                                              end_time: \"\",\n                                              exam_done: false,\n                                              period_id:\n                                                this.props.auth\n                                                  .application_session._id,\n                                              exam_status:\n                                                examFound?.exam_status,\n                                              exam_date: examFound?.exam_date,\n                                              duration: examFound?.duration,\n                                              position_id: room.position_id,\n                                              position_title:\n                                                room.position_title,\n                                              course_id: room.course_id,\n                                              course_code: room.course_code,\n                                              course_name: room.course_name,\n                                              room_id:\n                                                this.props.proctoring.room\n                                                  .room_id,\n                                              exam_id: examFound.id,\n                                            } as ProctoringExam\n                                          );\n                                          this.props.FC_AddRules(\n                                            examFound.rules\n                                          );\n                                        }\n                                      }}\n                                      className=\" group-hover:bg-blue-500 py-1 px-3 rounded text-blue-500 group-hover:text-white bg-blue-100\"\n                                    >\n                                      Open\n                                    </button>\n                                  )}\n                                </Fragment>\n                              )}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth, proctoring };\n};\n\nexport const ProctoringCenter = connect(mapStateToProps, {\n  FC_RoomDetails,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n  FC_AddRules,\n})(_ProctoringCenter);\n"],"sourceRoot":""}