{"version":3,"sources":["containers/PrepareExam/EditExam/EditExam.tsx"],"names":["getHoursList","hrs","x","getMinutesList","mins","_EditExam","props","changeProctoringRule","key","undefined","state","proctoringRules","find","itm","rule","newData","selected","status","caption","setState","setLoading","loading","addQuestionToPaper","question","validateExamDate","selectedExam","exam_date","start_time","end_time","ExamTimeStatus","Waiting","addEditExamQuestion","alert","removeToQuestionPaper","window","confirm","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","periods","selected_period","is_active","formErr","element","msg","selectedCourse","selectCourse","prepareExam","questions","length","currentStep","StepStatus","Step1","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","setSelectedCourse","course","selected_course","loadQuestionBank","course_id","examQuestionsIds","ids","question_id","submitExamPreparation","a","validateTwoTime","axios","put","API","QBank","id","period","_id","exam_status","PrepareExamStatus","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","loadExamsListByPeriod","setLoadingProps","schoolLevels","selectedEducationCategory","session_plan","redirectToExams","setSelectedExam","PushPopupAlert","title","description","theme","PopupAlertTheme","success","response","data","errors","message","console","log","componentDidMount","questionTypes","loadQuestionTypes","applicationPeriods","loadApplicationPeriods","courses","findExamDetails","unSelectQuestion","editQuestion","findTotalMarks","total","marks","handleChangeTermes","value","setSelectCourse","setSelectPeriod","GetExamsByPeriod","setSelectedPeriod","addQuestionModal","QuestionNumberFormat","NUMBER","submitExam","this","to","stepStatus","actionType","PrepareActionTypes","EditExam","className","onChange","e","target","DATE_DATA","type","parseInt","map","item","i","disabled","EXAM_QUESTIONS_NUMBERING","onClick","NoResultThemes","Dark","callBack","select","number","questionsList","AlertInterface","danger","questionBank","selectedQuestion","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","large","displayClose","padding","selected_course_id","extraLarge","questionPaper","body","Component","connect","auth","system","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions"],"mappings":"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","file":"static/js/59.533eb8b5.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addEditExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addEditExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      this.props.addEditExamQuestion(question);\n    } else {\n      alert(\n        \"You can not add questions while its time has ended or being done!\"\n      );\n    }\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      if (\n        window.confirm(\n          \"Are you sure do you want to remove question from the exam questions paper?\"\n        ) === true\n      ) {\n        this.props.addEditExamQuestion(question);\n      }\n    } else {\n      alert(\n        \"You can not remove questions while its time has ended or being done!\"\n      );\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = true;\n    // if (\n    //   this.props.prepareExam.selectedExam === null ||\n    //   this.props.prepareExam.selectedExam.questions.length !== 0\n    // ) {\n    //   conf = window.confirm(\n    //     \"Are you sure do you want to change course? You will loose your selected questions\"\n    //   );\n    // }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0 ||\n      this.props.course.selected_course === null\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period._id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period._id,\n          this.props.setLoadingProps\n        );\n      } else {\n        this.props.schoolLevels.selectedEducationCategory !== null &&\n          this.props.schoolLevels.selectedEducationCategory.session_plan !==\n            null &&\n          this.props.loadExamsListByPeriod(\n            this.props.schoolLevels.selectedEducationCategory.session_plan._id,\n            this.props.setLoadingProps\n          );\n      }\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (\n      this.props.course.courses !== null &&\n      this.props.course.selected_course === null\n    ) {\n      let myCourse = this.props.course.courses.find(\n        (itm) => itm.course_id === this.props.selectedExam.course\n      );\n      if (myCourse !== undefined) {\n        this.props.setSelectedCourse(myCourse);\n        this.chooseCourse(myCourse);\n      }\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period._id, this.setLoading);\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-black text-2xl\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        {validateExamDate(\n                          this.props.selectedExam.exam_date,\n                          this.props.selectedExam.start_time,\n                          this.props.selectedExam.end_time\n                        ) === ExamTimeStatus.Waiting && (\n                          <div\n                            onClick={() =>\n                              this.props.selectedCourse === null\n                                ? this.setState({ selectCourse: true })\n                                : this.setState({ addQuestionModal: true })\n                            }\n                            className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                          >\n                            <MdAdd className=\"text-2xl\" /> Add question\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-row items-center gap-3\">\n                {this.props.questionBank.questions !== null &&\n                  this.props.questionBank.questions.length > 0 && (\n                    <Link\n                      to={\"/upload-questions\"}\n                      className=\"btn bg-blue-100 hover:bg-blue-200 text-blue-700 cursor-pointer\"\n                    >\n                      Upload new\n                    </Link>\n                  )}\n                <span>Add Exam Questions</span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Editing Exam\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                {this.props.prepareExam.selectedExam &&\n                validateExamDate(\n                  this.props.prepareExam.selectedExam!.exam_date,\n                  this.props.prepareExam.selectedExam!.start_time,\n                  this.props.prepareExam.selectedExam!.end_time\n                ) === ExamTimeStatus.Waiting ? (\n                  <div\n                    onClick={() => this.submitExamPreparation()}\n                    className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  >\n                    Confirm edit exam\n                  </div>\n                ) : (\n                  <div>Can not edit</div>\n                )}\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addEditExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n})(_EditExam);\n"],"sourceRoot":""}