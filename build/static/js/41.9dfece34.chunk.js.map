{"version":3,"sources":["actions/session.ts","containers/AdminDashboard/ChartComponents/PieChart.tsx","containers/AdminDashboard/DashboardLabelItem.tsx","containers/AdminDashboard/ExamDashboard/ExamDashboardLabels.tsx","interfaces/center_report.ts","containers/Admin/CenterReport/DistrictList.tsx","containers/AdminDashboard/CenteDashboard/CenterDashboardTitle.tsx","containers/AdminDashboard/CenteDashboard/RoomChart.tsx","containers/AdminDashboard/CenteDashboard/CenterDashboard.tsx"],"names":["GetPlansTypes","callback","dispatch","a","setAxiosToken","axios","get","API","CLAIMING","res","console","log","GET_PLANS_TYPES","data","plan_types","status","length","type","ActionTypes","payload","error","errorToText","setSelectedPlanType","thisType","SELECT_PLAN_TYPE","getActiveSessionPlan","GET_ACTIVE_SESSION_PLANS","session_plan","undefined","is_active","GetAllSessionPlans","GET_ALL_SESSION_PLANS","session_data","createSessionPlan","CREATE_SESSION_PLAN","updateSessionPlan","UPDATE_SESSION_PLAN","sessionActivation","SESSION_ACTIVATION","deleteSessionPlan","DELETE_SESSION_PLAN","PieChart","props","className","options","series","width","DashboardLabelItem","title","icon","FaUsers","iconColor","count","countOver","IconDefined","toAnyDigit","ExamDashboardLabels","numCols","labelsOnRow","children","childrenPosition","dataLabels","map","item","index","centerReportContentKeyInterface","getDistrictInRoom","allData","result","ids","key","Object","prototype","hasOwnProperty","call","includes","district_id","push","district_name","getRoomOccupation","thisRoom","course_in_room","element","occupied","roomWithOccupation","allRoom","DistrictList","useState","searchInput","setSearchInput","isModal","placeholder","onChange","e","target","value","disabled","districtList","onClick","setChooseDistrict","bgWhite","selectedDistrict","loadindRequest","setSelectedDistrict","search","district","capitalizeFirstLetter","CenterDashboardTitle","loading","thisPeriod","setThisPeriod","application_sessions","session","session_plan_id","session_plan_name","chooseDistrict","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","small","displayClose","padding","reportMainData","RoomChart","generateChartData","categories","remaining","district_ids","_id","room_number","capacity","center_name","toString","name","chart","height","this","stacked","plotOptions","bar","horizontal","stroke","colors","xaxis","labels","formatter","val","yaxis","text","tooltip","y","fill","opacity","noData","align","verticalAlign","Component","filterRoom","dataList","thisDistrict","defaultValue","filter","all","room_type","full","remain","_CenterDashboard","setLoading","setState","setSelectSession","selectSession","setSelectedSession","thisSession","selectedSession","allSession","sessionId","find","loadReportMainData","APPLICATION","reportMainData_error","PushPopupAlert","PopupAlertTheme","danger","componentDidMount","sessionPlan","allSessionPlans","errorMsg","sessionData","isEmptyOrSpaces","warning","activeSession","state","formError","FaLaptopHouse","legend","show","position","horizontalAlign","fontSize","itemMargin","vertical","pie","donut","color","offsetY","fontFamily","total","label","w","globals","seriesTotals","reduce","b","CenterDashboard","connect","auth"],"mappings":"mfAuGaA,EAAgB,SAACC,GAE5B,OADAA,GAAS,EAAM,IACf,uCAAO,WAAOC,GAAP,iBAAAC,EAAA,sEAEHC,cAFG,SAGeC,IAAMC,IAAN,UACbC,IAAIC,SADS,kBAHf,OAGGC,EAHH,OAMHC,QAAQC,IAAI,CAAEC,gBAAiBH,EAAII,OAC/BC,EAAmC,GACpB,MAAfL,EAAIM,QAEW,OAAbN,EAAII,MAAiBJ,EAAII,KAAKG,OAAS,IACzCF,EAAaL,EAAII,MAGrBX,EAA8B,CAC5Be,KAAMC,IAAYN,gBAClBO,QAASL,IAEXb,GAAS,EAAO,IAlBb,kDAoBHS,QAAQU,MAAM,CAAEA,MAAOC,YAAY,EAAD,MAClCpB,GAAS,EAAOoB,YAAY,EAAD,KArBxB,0DAAP,uDAsFWC,EAAsB,SACjCC,GAGA,OADAb,QAAQC,IAAI,CAAEY,aACP,CACLN,KAAMC,IAAYM,iBAClBL,QAASI,IAKAE,EAAuB,SAACxB,GAEnC,OADAA,GAAS,EAAM,IACf,uCAAO,WAAOC,GAAP,iBAAAC,EAAA,sEAEHC,cAFG,SAGeC,IAAMC,IAAN,UACbC,IAAIC,SADS,qBAHf,OAGGC,EAHH,OAMHC,QAAQC,IAAI,CAAEe,yBAA0BjB,EAAII,OACxCc,OAAiDC,EAIjDnB,EAAII,WAA+Be,IAAvBnB,EAAII,KAAKgB,YACvBF,EAAelB,EAAII,MAErBH,QAAQC,IAAI,CAAEgB,aAAclB,EAAII,OAEhCX,EAAqC,CACnCe,KAAMC,IAAYQ,yBAClBP,QAASQ,GAA8B,SAEzC1B,GAAS,EAAO,GAAI0B,GAA8B,QApB/C,kDAsBHjB,QAAQU,MAAM,CAAEA,MAAOC,YAAY,EAAD,MAClCpB,GAAS,EAAOoB,YAAY,EAAD,KAvBxB,0DAAP,uDA6BWS,EAAqB,SAAC7B,GAEjC,OADAA,GAAS,EAAM,IACf,uCAAO,WAAOC,GAAP,iBAAAC,EAAA,sEAEHC,cAFG,SAGeC,IAAMC,IAAN,UACbC,IAAIC,SADS,cAHf,OAGGC,EAHH,OAMHC,QAAQC,IAAI,CAAEoB,sBAAuBtB,EAAII,OACrCmB,EAAuC,GACxB,MAAfvB,EAAIM,QAEW,OAAbN,EAAII,MAAiBJ,EAAII,KAAKG,OAAS,IACzCgB,EAAevB,EAAII,MAGvBX,EAAmC,CACjCe,KAAMC,IAAYa,sBAClBZ,QAASa,IAEX/B,GAAS,EAAO,GAAI+B,GAlBjB,kDAoBHtB,QAAQU,MAAM,CAAEA,MAAOC,YAAY,EAAD,MAClCpB,GAAS,EAAOoB,YAAY,EAAD,KArBxB,0DAAP,uDA2BWY,EAAoB,SAC/BpB,GAEA,MAAO,CACLI,KAAMC,IAAYgB,oBAClBf,QAASN,IAKAsB,EAAoB,SAC/BtB,GAEA,MAAO,CACLI,KAAMC,IAAYkB,oBAClBjB,QAASN,IAKAwB,EAAoB,SAC/BxB,GAEA,MAAO,CACLI,KAAMC,IAAYoB,mBAClBnB,QAASN,IAKA0B,EAAoB,SAAC1B,GAChC,MAAO,CACLI,KAAMC,IAAYsB,oBAClBrB,QAASN,K,iCCvSb,kCA2Be4B,IAbuB,SAACC,GACrC,OACE,qBAAKC,UAAU,QAAf,SACE,cAAC,IAAD,CACEC,QAASF,EAAME,QACfC,OAAQH,EAAMG,OACd5B,KAAK,QACL6B,MAAK,UAAKJ,EAAMI,MAAQJ,EAAMI,MAAQ,a,iCCrB9C,kCA8CeC,IA5B6C,WAQtD,IAPJL,EAOG,uDAPK,CACNM,MAAO,GACPC,KAAMC,IACNC,UAAW,SACXC,MAAO,EACPC,eAAWzB,GAGP0B,EAAcZ,EAAMO,KAC1B,OACE,sBAAKN,UAAU,0FAAf,UACE,qBACEA,UAAS,8BAAyBD,EAAMS,UAA/B,sBADX,SAGE,cAACG,EAAD,CAAaX,UAAS,uBAAkBD,EAAMS,UAAxB,YAExB,gCACE,qBAAIR,UAAU,uCAAd,UACGY,YAAWb,EAAMU,OAAQ,IACzBV,EAAMW,WAAa,KAAOE,YAAWb,EAAMW,cAE9C,sBAAMV,UAAU,wBAAhB,SAAyCD,EAAMM,gB,iCCxCvD,yBAgDeQ,IApC4C,SAACd,GAC1D,IAAMe,EAAkBf,EAAMgB,aAC1BhB,EAAMgB,YAAc,EAClBhB,EAAMgB,YAER,EACJ,OACE,sBACEf,UAAS,6BAAwBc,EAAxB,yBACPA,EAAU,EADH,yBAEQA,EAAU,EAFlB,yBAGPA,EAAU,EAHH,0DADX,UAOGf,EAAMiB,WACHjB,EAAMkB,kBAA+C,UAA3BlB,EAAMkB,mBAC/BlB,EAAMkB,mBACTlB,EAAMiB,SACPjB,EAAMmB,WAAWC,KAAI,SAACC,EAAMC,GAAP,OACpB,kCACE,cAAC,IAAD,CACEhB,MAAOe,EAAKf,MACZC,KAAMc,EAAKd,KACXE,UAAWY,EAAKZ,UAChBC,MAAOW,EAAKX,SALFY,EAAQD,EAAKf,UAS5BN,EAAMiB,UACLjB,EAAMkB,kBACqB,QAA3BlB,EAAMkB,kBACNlB,EAAMiB,c,iCCZP,IAAKM,EAAZ,wI,SAAYA,K,8BAAAA,E,0BAAAA,E,0BAAAA,E,sBAAAA,E,8BAAAA,E,mCAAAA,M,KAoBL,IAAMC,EAAoB,SAC/BC,GAEA,IAAIC,EAAkC,GACpCC,EAAgB,GAClB,IAAK,IAAMC,KAAOH,EACZI,OAAOC,UAAUC,eAAeC,KAAKP,EAASG,KAC3CD,EAAIM,SAASR,EAAQG,GAAKM,eAC7BP,EAAIQ,KAAKV,EAAQG,GAAKM,aACtBR,EAAOS,KAAK,CACVD,YAAaT,EAAQG,GAAKM,YAC1BE,cAAeX,EAAQG,GAAKQ,kBAMpC,OAAOV,GAGIW,EAAoB,SAACC,GAChC,IAAIZ,EAAiB,EACrB,IAAK,IAAME,KAAOU,EAASC,eACzB,GAAIV,OAAOC,UAAUC,eAAeC,KAAKM,EAASC,eAAgBX,GAAM,CACtE,IAAMY,EAAUF,EAASC,eAAeX,GACpCF,EAASc,EAAQC,WACnBf,EAASc,EAAQC,UAIvB,OAAOf,GAGIgB,EAAqB,SAChCC,GAEA,IAAIjB,EAAkC,GACtC,IAAK,IAAME,KAAOe,EAChB,GAAId,OAAOC,UAAUC,eAAeC,KAAKW,EAASf,GAAM,CACtD,IAAIzD,EAA8BwE,EAAQf,GAC1CzD,EAAKsE,SAAWJ,EAAkBM,EAAQf,IAC1CF,EAAOS,KAAKhE,GAGhB,OAAOuD,I,mFC+BMkB,IA9G+B,SAAC5C,GAC7C,MAAsC6C,mBAAiB,IAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,OACE,0BACE9C,UAAS,UACPD,EAAMgD,QAAU,GAAK,8CAFzB,UAME,sBAAK/C,UAAU,gCAAf,UACE,cAAC,KAAD,CAAUA,UAAU,0BACpB,uBACE1B,KAAK,OACL0E,YAAY,SACZhD,UAAS,uCACPD,EAAMgD,QAAU,OAAS,OADlB,qDAGTE,SAAU,SAACC,GAAD,OAAOJ,EAAeI,EAAEC,OAAOC,QACzCA,MAAOP,EACPQ,WAAUtD,EAAMuD,aAAajF,OAAS,MAEtC0B,EAAMgD,SACN,wBACE/C,UAAU,4EACV1B,KAAK,SACLiF,QAAS,WACPxD,EAAMyD,mBAAkB,IAJ5B,sBAaJ,sBACExD,UAAS,2BACPD,EAAMgD,QAAU,OAAS,GADlB,qDAGPhD,EAAM0D,SAAW,YAJrB,UAOE,kCACE,sBACEzD,UAAS,uDACoB,QAA3BD,EAAM2D,iBACF,8CACA,qBAJR,UAOE,qBACE1D,UAAS,0BACoB,QAA3BD,EAAM2D,iBACF,iBACA,kBAENH,QAAS,WACPxD,EAAMyD,mBAAkB,IACvBzD,EAAM4D,gBACsB,QAA3B5D,EAAM2D,kBACN3D,EAAM6D,oBAAoB,QAVhC,SAaE,mBAAG5D,UAAU,iCAAb,4BAEF,wBACE1B,KAAK,SACL0B,UAAU,uGAFZ,yBAQH6D,YAAO9D,EAAMuD,aAAcT,GAAaxE,OAAS,EAChDwF,YAAO9D,EAAMuD,aAAcT,GAAa1B,KAAI,SAAC2C,EAAUzC,GAAX,OAC1C,kCACE,sBAAKrB,UAAU,iEAAf,UACE,qBACEA,UAAU,iCACVuD,QAAS,WACPxD,EAAMyD,mBAAkB,IACvBzD,EAAM4D,gBACL5D,EAAM6D,oBAAoBE,IALhC,SAQE,mBAAG9D,UAAU,iCAAb,SACG+D,YAAsBD,EAAS3B,mBAGpC,wBACE7D,KAAK,SACL0B,UAAU,uGAFZ,wBAdUqB,EAAQyC,EAAS7B,gBAwBjC,qBAAKjC,UAAU,kBAAf,SACE,mBAAGA,UAAU,mCAAb,6C,mWCIGgE,EAzFgD,SAACjE,GAC9D,OACE,eAAC,WAAD,WACE,sBAAKC,UAAU,wEAAf,UACE,sBAAKA,UAAU,wCAAf,UACE,cAAC,IAAD,CAAiBA,UAAU,2CAC3B,qBAAKA,UAAU,gBAAf,SACE,sBAAMA,UAAU,mCAAhB,mCAOJ,0BAASA,UAAU,wDAAnB,UACE,8BACE,wBACEA,UAAS,uFACPD,EAAMkE,SAAW,eAEnBb,MAAOrD,EAAMmE,WACbb,SAAUtD,EAAMkE,QAChBhB,SAAU,SAACC,GACTnD,EAAMoE,cAAcpE,EAAMqE,qBAAsBlB,EAAEC,OAAOC,QAP7D,SAUGrD,EAAMqE,qBAAqBjD,KAAI,SAACkD,EAASjD,GAAV,OAC9B,wBAEEgC,MAAOiB,EAAQC,gBAFjB,SAIGD,EAAQE,mBAHJF,EAAQC,gBAAkBlD,UASvC,qBAAKpB,UAAU,cAAf,UACID,EAAMyE,gBACN,sBACEjB,QAAS,kBAAMxD,EAAMyD,mBAAkB,IACvCxD,UAAU,+MAFZ,UAI8B,QAA3BD,EAAM2D,iBAAN,UACM3D,EAAM2D,iBAAiBvB,eAC1B,eACJ,cAAC,IAAD,CAAQnC,UAAU,qCAS3BD,EAAMyE,gBACL,cAACC,EAAA,EAAD,CACEpE,MACE,sBAAKL,UAAU,mCAAf,UACE,cAAC,IAAD,CAAgBA,UAAU,2BAC1B,qBAAKA,UAAU,gBAAf,SACE,sBAAMA,UAAU,kCAAhB,kCAMN0E,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM/E,EAAMyD,mBAAkB,IACrCuB,eAAe,EACfC,eAAgBC,IAAUC,MAC1BC,cAAc,EACdC,QAAS,CAAE/E,OAAO,GAjBpB,SAmBE,cAACsC,EAAA,EAAD,CACEa,kBAAmBzD,EAAMyD,kBACzBF,aAAc/B,YAAkBxB,EAAMsF,gBACtCzB,oBAAqB7D,EAAM6D,oBAC3BD,eAAgB5D,EAAMkE,QACtBlB,SAAS,EACTW,iBAAkB3D,EAAM2D,yB,kBCmBrB4B,EAvHf,4MACEC,kBAAoB,WAOlB,IAAIC,EAAoC,GACtChD,EAAqB,GACrBiD,EAAsB,GACtBC,EAAyB,GAC3B,IAAK,IAAM/D,KAAO,EAAK5B,MAAMyB,QAEzBI,OAAOC,UAAUC,eAAeC,KAAK,EAAKhC,MAAMyB,QAASG,KACxD+D,EAAa1D,SAAS,EAAKjC,MAAMyB,QAAQG,GAAKgE,MACP,IAAxC,EAAK5F,MAAMyB,QAAQG,GAAKiE,cAExBF,EAAaxD,KAAK,EAAKnC,MAAMyB,QAAQG,GAAKgE,KAC1CnD,EAASN,KAAK,EAAKnC,MAAMyB,QAAQG,GAAKa,UACtCiD,EAAUvD,KACR,EAAKnC,MAAMyB,QAAQG,GAAKkE,SAAW,EAAK9F,MAAMyB,QAAQG,GAAKa,UAE7DgD,EAAWtD,KAAK,CACd,EAAKnC,MAAMyB,QAAQG,GAAKQ,cACxB,EAAKpC,MAAMyB,QAAQG,GAAKmE,YACxB,EAAK/F,MAAMyB,QAAQG,GAAKiE,YAAYG,cAI1C,MAAO,CACL7F,OAAQ,CACN,CACE8F,KAAM,gBACN9H,KAAMsE,GAER,CACEwD,KAAM,iBACN9H,KAAMuH,IAGVD,eAzCN,4CA6CE,WACE,OACE,cAAC,WAAD,UACE,qBAAKxF,UAAU,SAAf,SACE,cAAC,IAAD,CACEC,QAAS,CACPgG,MAAO,CACL3H,KAAM,MACN4H,OACEC,KAAKZ,oBAAoBrF,OAAO7B,QAAU,GACtC,SACAY,EACNmH,SAAS,GAEXC,YAAa,CACXC,IAAK,CACHC,YAAY,IAGhBC,OAAQ,CACNrG,MAAO,EACPsG,OAAQ,CAAC,SAKXC,MAAO,CACLlB,WAAYW,KAAKZ,oBAAoBC,WACrCmB,OAAQ,CACNC,UAAW,SAAUC,GACnB,OAAOA,EAAM,aAInBC,MAAO,CACLzG,MAAO,CACL0G,UAAM9H,IAGV+H,QAAS,CACPC,EAAG,CACDL,UAAW,SAAUC,GACnB,OAAOA,EAAM,aAInBK,KAAM,CACJC,QAAS,GAOXC,OAAQ,CACNL,KAAM,gBACNM,MAAO,SACPC,cAAe,UAEjBb,OAAQ,CAAC,UAAW,YAEtBvG,OAAQiG,KAAKZ,oBAAoBrF,OACjC5B,KAAK,MACL6B,MAAM,OACN+F,OACEC,KAAKZ,oBAAoBrF,OAAO7B,QAAU,GAAK,SAAMY,YA9GnE,GAA+BsI,aCYlBC,EAAa,SACxBC,EACAC,GAMA,IAAIjG,EAAkCgG,EACpCE,GAAwB,EAW1B,MAVqB,QAAjBD,EAEFjG,EAASA,EAAOmG,QACd,SAACxG,GAAD,OAAUA,EAAKa,cAAgByF,EAAazF,eAK9C0F,GAAe,EAEVA,EACH,CACEE,IAAKJ,EAASG,QAAO,SAACxG,GAAD,MAA6B,YAAnBA,EAAK0G,aACpCC,KAAMN,EAASG,QACb,SAACxG,GAAD,MACqB,YAAnBA,EAAK0G,WAA2B1G,EAAKoB,UAAYpB,EAAKyE,YAE1DmC,OAAQP,EAASG,QACf,SAACxG,GAAD,MACqB,YAAnBA,EAAK0G,WAA2B1G,EAAKoB,SAAWpB,EAAKyE,aAG3D,CACEgC,IAAKpG,EACLsG,KAAMtG,EAAOmG,QAAO,SAACxG,GAAD,OAAUA,EAAKoB,UAAYpB,EAAKyE,YACpDmC,OAAQvG,EAAOmG,QAAO,SAACxG,GAAD,OAAUA,EAAKoB,SAAWpB,EAAKyE,cAyBvDoC,E,kDAIJ,WAAYlI,GAA8B,IAAD,8BACvC,cAAMA,IAYRmI,WAAa,SAAC9J,GACZ,EAAK+J,SAAS,CAAElE,QAAS7F,KAdc,EAiBzCgK,iBAAmB,SAAChK,GAClB,EAAK+J,SAAS,CAAEE,cAAejK,KAlBQ,EAqBzCkK,mBAAqB,SAACC,GACpB,EAAKJ,SAAS,CAAEK,gBAAiBD,KAtBM,EAyBzCpE,cAAgB,SAACsE,EAAoCC,GACnD,IAAIH,EAAgDE,EAAWE,MAC7D,SAACvH,GAAD,OAAUA,EAAKkD,kBAAoBoE,KAEjCH,IACF,EAAKJ,SAAS,CAAEK,gBAAiBD,IACjC,EAAKK,mBAAmBL,KA/Ba,EAmCzCK,mBAnCyC,uCAmCpB,WAAOL,GAAP,eAAA/K,EAAA,+EAECE,IAAMC,IAAN,UACbC,IAAIiL,YADS,kCAC4BN,EAAYjE,kBAHzC,OAEXxG,EAFW,OAKjBC,QAAQC,IAAI,wCACZD,QAAQC,IAAI,CAAEqH,eAAgBvH,EAAII,OAClCH,QAAQC,IAAI,wCACZ,EAAKmK,SAAS,CAAE9C,eAAgBvH,EAAII,OARnB,kDAUjBH,QAAQU,MAAM,CAAEqK,qBAAqB,EAAD,KAEpC,EAAK/I,MAAMgJ,eAAe,CACxB1I,MAAO3B,YAAY,EAAD,IAClBiG,MAAOqE,IAAgBC,SAdR,0DAnCoB,wDAsDzCC,kBAAoB,WAClB,GAA+C,OAA3C,EAAKnJ,MAAMoJ,YAAYC,gBACzB,EAAKrJ,MAAMZ,oBACT,SACEf,EACAiL,EACAC,GAGA,GADA,EAAKpB,WAAW9J,IACXA,IACEmL,YAAgBF,IACnB,EAAKtJ,MAAMgJ,eAAe,CACxB1I,MAAOgJ,EACP1E,MAAOqE,IAAgBQ,UAIvBF,GAAeA,EAAYjL,OAAS,GAAG,CACzC,IAAIoL,EAAgBH,EAAYX,MAAK,SAACvH,GAAD,OAAUA,EAAKlC,aAChDuK,GACF,EAAKnB,mBAAmBmB,GACU,OAA9B,EAAKC,MAAMrE,gBACb,EAAKuD,mBAAmBa,KAG1B,EAAKnB,mBAAmBgB,EAAYA,EAAYjL,OAAS,IACvB,OAA9B,EAAKqL,MAAMrE,gBACb,EAAKuD,mBAAmBU,EAAYA,EAAYjL,OAAS,cAQrE,GAAI,EAAK0B,MAAMoJ,YAAYC,gBAAgB/K,OAAS,EAAG,CACrD,IAAIoL,EAAgB,EAAK1J,MAAMoJ,YAAYC,gBAAgBT,MACzD,SAACvH,GAAD,OAAUA,EAAKlC,aAEbuK,GACF,EAAKnB,mBAAmBmB,GACU,OAA9B,EAAKC,MAAMrE,gBACb,EAAKuD,mBAAmBa,KAG1B,EAAKnB,mBACH,EAAKvI,MAAMoJ,YAAYC,gBACrB,EAAKrJ,MAAMoJ,YAAYC,gBAAgB/K,OAAS,IAGlB,OAA9B,EAAKqL,MAAMrE,gBACb,EAAKuD,mBACH,EAAK7I,MAAMoJ,YAAYC,gBACrB,EAAKrJ,MAAMoJ,YAAYC,gBAAgB/K,OAAS,KAKxD,EAAK6J,YAAW,KAhHmB,EAqHzC1E,kBAAoB,SAACpF,GACnB,EAAK+J,SAAS,CAAE3D,eAAgBpG,KAtHO,EAyHzCwF,oBAAsB,SAAC1F,GACrB,EAAKiK,SAAS,CAAEzE,iBAAkBxF,KAxHlC,EAAKwL,MAAQ,CACXzF,SAAS,EACToE,eAAe,EACfG,gBAAiB,KACjBnD,eAAgB,KAChBsE,UAAW,KACXjG,iBAAkB,MAClBc,gBAAgB,GATqB,E,0CA6HzC,WACE,OACiC,OAA/B2B,KAAKuD,MAAMlB,iBACgC,OAA3CrC,KAAKpG,MAAMoJ,YAAYC,iBACO,OAA9BjD,KAAKuD,MAAMrE,eAGT,qBAAKrF,UAAU,kEAAf,6BAOF,oCACE,cAAC,EAAD,CACEiE,QAASkC,KAAKuD,MAAMzF,QACpBC,WAAYiC,KAAKuD,MAAMlB,gBAAgBlE,gBACvCH,cAAegC,KAAKhC,cACpBC,qBAAsB+B,KAAKpG,MAAMoJ,YAAYC,gBAC7C5E,eAAgB2B,KAAKuD,MAAMlF,eAC3BhB,kBAAmB2C,KAAK3C,kBACxBE,iBAAkByC,KAAKuD,MAAMhG,iBAC7BE,oBAAqBuC,KAAKvC,oBAC1ByB,eAAgBc,KAAKuD,MAAMrE,iBAG5Bc,KAAKuD,MAAMrE,gBACV,0BAASrF,UAAU,OAAnB,UACE,qBAAKA,UAAU,uCAAf,oCAGA,cAACa,EAAA,EAAD,CACEK,WAAY,CACV,CACEb,MAAO,aACPC,KAAMsJ,IACNpJ,UAAW,OACXC,MAAO+G,EACL/E,YAAmB0D,KAAKuD,MAAMrE,gBAC9Bc,KAAKuD,MAAMhG,kBACXmE,IAAIxJ,QAER,CACEgC,MAAO,YACPC,KAAMsJ,IACNpJ,UAAW,QACXC,MAAO+G,EACL/E,YAAmB0D,KAAKuD,MAAMrE,gBAC9Bc,KAAKuD,MAAMhG,kBACXqE,KAAK1J,QAET,CACEgC,MAAO,iBACPC,KAAMsJ,IACNpJ,UAAW,OACXC,MAAO+G,EACL/E,YAAmB0D,KAAKuD,MAAMrE,gBAC9Bc,KAAKuD,MAAMhG,kBACXsE,OAAO3J,SAGb0C,YAAa,EA9Bf,SAgCE,qBAAKf,UAAU,sBAAf,SACE,cAACF,EAAA,EAAD,CACEG,QAAS,CACP0G,OAAQ,CAAC,WAAY,aACrBkD,OAAQ,CACNC,MAAM,EACNC,SAAU,SACVC,gBAAiB,SACjBC,SAAU,OACVC,WAAY,CACV3D,WAAY,EACZ4D,SAAU,IAGd9D,YAAa,CACX+D,IAAK,CACHC,MAAO,CACL1D,OAAQ,CACNmD,MAAM,EACN9D,KAAM,CACJ8D,MAAM,EACNG,SAAU,OAEVK,MAAO,UACPC,SAAU,IAEZnH,MAAO,CACL0G,MAAM,EACNG,SAAU,OACVO,WAAY,+BACZF,MAAO,UACPC,QAAS,GACT3D,UAAW,SAAUC,GACnB,OAAOA,IAGX4D,MAAO,CACLX,MAAM,EACNY,MAAO,QACPJ,MAAO,UACP1D,UAAW,SAAU+D,GACnB,OAAOA,EAAEC,QAAQC,aAAaC,QAC5B,SAACtN,EAAWuN,GACV,OAAOvN,EAAIuN,IAEb,SAQdtE,OAAQ,CAAC,UAAW,YAEtBvG,OAAQ,CACNsH,EACE/E,YAAmB0D,KAAKuD,MAAMrE,gBAC9Bc,KAAKuD,MAAMhG,kBACXqE,KAAK1J,OACPmJ,EACE/E,YAAmB0D,KAAKuD,MAAMrE,gBAC9Bc,KAAKuD,MAAMhG,kBACXsE,OAAO3J,QAEX8B,MAAO,aAOjB,0BAASH,UAAU,2BAAnB,UACE,qBAAKA,UAAU,yCAAf,SACE,uBAAMA,UAAU,gDAAhB,8BACoB,IACe,QAAhCmG,KAAKuD,MAAMhG,iBACR,mBACA,MACAyC,KAAKuD,MAAMhG,iBAAiBvB,cAC5B,iBAGR,qBAAKnC,UAAU,iBAAf,SACE,cAAC,EAAD,CACEwB,QAASiB,YAAmB0D,KAAKuD,MAAMrE,gBACvC3B,iBAAkByC,KAAKuD,MAAMhG,+B,GAvRZ6D,aA6SlByD,EAAkBC,aAbP,SAAC,GAOvB,MAAO,CACLC,KAFC,EALHA,KAQE/B,YAHC,EAJHA,eAWsD,CACtDhK,uBACA4J,qBAF6BkC,CAG5BhD","file":"static/js/41.9dfece34.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport { PlansTypeInterface, SessionPlanInterface } from \"../interfaces\";\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// GET ACTIVE PLAN TYPES\nexport interface GetPlansTypesAction {\n  type: ActionTypes.GET_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// GET INACTIVE PLAN TYPES\nexport interface GetDeletedPlansTypesAction {\n  type: ActionTypes.GET_DELETED_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// CREATE PLAN TYPE\nexport interface CreatePlansTypeAction {\n  type: ActionTypes.CREATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// UPDATE PLAN TYPE\nexport interface UpdatePlansTypeAction {\n  type: ActionTypes.UPDATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// DELETE PLAN TYPE\nexport interface DeletePlansTypeAction {\n  type: ActionTypes.DELETE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// SET PLAN TYPE =====================================\nexport interface setSelectedPlanTypeActions {\n  type: ActionTypes.SELECT_PLAN_TYPE;\n  payload: PlansTypeInterface | \"all\";\n}\n\n// GET ALL SESSION PLAN\nexport interface GetAllSessionPlansAction {\n  type: ActionTypes.GET_ALL_SESSION_PLANS;\n  payload: SessionPlanInterface[];\n}\n\n// GET ACTIVE SESSION PLAN\nexport interface GetActiveSessionPlanAction {\n  type: ActionTypes.GET_ACTIVE_SESSION_PLANS;\n  payload: SessionPlanInterface | \"none\";\n}\n\n// CREATE SESSION PLAN\nexport interface CreateSessionPlansAction {\n  type: ActionTypes.CREATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// UPDATE SESSION PLAN\nexport interface UpdateSessionPlansAction {\n  type: ActionTypes.UPDATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// ACTIVATE SESSION PLAN\nexport interface ActivateSessionPlansAction {\n  type: ActionTypes.SESSION_ACTIVATION;\n  payload: SessionPlanInterface;\n}\n\n// DELETE SESSION PLAN\nexport interface DeleteSessionPlanAction {\n  type: ActionTypes.DELETE_SESSION_PLAN;\n  payload: string;\n}\n\nexport type SessionActionType =\n  | GetPlansTypesAction\n  | GetDeletedPlansTypesAction\n  | CreatePlansTypeAction\n  | UpdatePlansTypeAction\n  | DeletePlansTypeAction\n  | GetAllSessionPlansAction\n  | GetActiveSessionPlanAction\n  | CreateSessionPlansAction\n  | UpdateSessionPlansAction\n  | ActivateSessionPlansAction\n  | DeleteSessionPlanAction\n  | setSelectedPlanTypeActions;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type`\n      );\n      console.log({ GET_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetPlansTypesAction>({\n        type: ActionTypes.GET_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetDeletedPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type/deleted`\n      );\n      console.log({ GET_DELETED_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetDeletedPlansTypesAction>({\n        type: ActionTypes.GET_DELETED_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE PLAN TYPE\nexport const createPlanType = (\n  data: PlansTypeInterface\n): CreatePlansTypeAction => {\n  return {\n    type: ActionTypes.CREATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// UPDATE PLAN TYPE\nexport const updatePlanType = (\n  data: PlansTypeInterface\n): UpdatePlansTypeAction => {\n  return {\n    type: ActionTypes.UPDATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// DELETE PLAN TYPE\nexport const deletePlanType = (\n  data: PlansTypeInterface\n): DeletePlansTypeAction => {\n  return {\n    type: ActionTypes.DELETE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// SELECT PLAN TYPES ==========================\nexport const setSelectedPlanType = (\n  thisType: PlansTypeInterface | \"all\"\n): setSelectedPlanTypeActions => {\n  console.log({ thisType });\n  return {\n    type: ActionTypes.SELECT_PLAN_TYPE,\n    payload: thisType,\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const getActiveSessionPlan = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface>(\n        `${API.CLAIMING}/session/active/`\n      );\n      console.log({ GET_ACTIVE_SESSION_PLANS: res.data });\n      let session_plan: SessionPlanInterface | undefined = undefined;\n      // if (res.status === 200) {\n      //   // setApplications(res.data);\n      // }\n      if (res.data && res.data.is_active !== undefined) {\n        session_plan = res.data;\n      }\n      console.log({ session_plan: res.data });\n\n      dispatch<GetActiveSessionPlanAction>({\n        type: ActionTypes.GET_ACTIVE_SESSION_PLANS,\n        payload: session_plan ? session_plan : \"none\",\n      });\n      callback(false, \"\", session_plan ? session_plan : \"none\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ALL PLAN TYPES ==========================\nexport const GetAllSessionPlans = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface[]>(\n        `${API.CLAIMING}/session/`\n      );\n      console.log({ GET_ALL_SESSION_PLANS: res.data });\n      let session_data: SessionPlanInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          session_data = res.data;\n        }\n      }\n      dispatch<GetAllSessionPlansAction>({\n        type: ActionTypes.GET_ALL_SESSION_PLANS,\n        payload: session_data,\n      });\n      callback(false, \"\", session_data);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE SESSION PLAN\nexport const createSessionPlan = (\n  data: SessionPlanInterface\n): CreateSessionPlansAction => {\n  return {\n    type: ActionTypes.CREATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// UPDATE SESSION PLAN\nexport const updateSessionPlan = (\n  data: SessionPlanInterface\n): UpdateSessionPlansAction => {\n  return {\n    type: ActionTypes.UPDATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// ACTIVATE SESSION PLAN\nexport const sessionActivation = (\n  data: SessionPlanInterface\n): ActivateSessionPlansAction => {\n  return {\n    type: ActionTypes.SESSION_ACTIVATION,\n    payload: data,\n  };\n};\n\n// DELETE SESSION PLAN\nexport const deleteSessionPlan = (data: string): DeleteSessionPlanAction => {\n  return {\n    type: ActionTypes.DELETE_SESSION_PLAN,\n    payload: data,\n  };\n};\n","import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\ntype chartType = {\n  options: {\n    labels: string[];\n    legend?: ApexLegend;\n    plotOptions?: ApexPlotOptions;\n    colors?: any[];\n  };\n  series: number[];\n  width?: number;\n};\n\nconst PieChart: React.FC<chartType> = (props) => {\n  return (\n    <div className=\"donut\">\n      <Chart\n        options={props.options}\n        series={props.series}\n        type=\"donut\"\n        width={`${props.width ? props.width : \"380\"}`}\n      />\n    </div>\n  );\n};\n\nexport default PieChart;\n","import React, { FC } from \"react\";\nimport { IconType } from \"react-icons\";\nimport { FaUsers } from \"react-icons/fa\";\nimport { toAnyDigit } from \"../../shared/dataTest\";\n\nexport type DashboardLabelItemInterface = {\n  // TITLE: Application or Exam or Shortlisted ....\n  title: string;\n  // ICON: FaExpand ....\n  icon: IconType;\n  // ICON COLOR: blue, indigo, gray ....\n  iconColor: string;\n  // COUNT: 0,1,2,3,5,23,563 ....\n  count: number;\n  // COUNT: 0,1,2,3,5,23,563 ....\n  countOver?: number;\n};\n\nconst DashboardLabelItem: FC<DashboardLabelItemInterface> = (\n  props = {\n    title: \"\",\n    icon: FaUsers,\n    iconColor: \"indigo\",\n    count: 0,\n    countOver: undefined,\n  }\n) => {\n  const IconDefined = props.icon;\n  return (\n    <div className=\"flex items-center px-6 py-4 bg-white w-full rounded-md space-x-2 mb-2 lg:mb-0 shadow-md\">\n      <div\n        className={`p-3 rounded-full bg-${props.iconColor}-200 bg-opacity-75`}\n      >\n        <IconDefined className={`h-8 w-8 text-${props.iconColor}-600`} />\n      </div>\n      <div>\n        <h1 className=\"text-3xl font-semibold text-gray-700\">\n          {toAnyDigit(props.count)}{\" \"}\n          {props.countOver && \"/ \" + toAnyDigit(props.countOver)}\n        </h1>\n        <span className=\"text-gray-500 text-lg\">{props.title}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardLabelItem;\n","import React from \"react\";\nimport DashboardLabelItem, {\n  DashboardLabelItemInterface,\n} from \"../DashboardLabelItem\";\n\ntype DashboardLabelProps = {\n  dataLabels: DashboardLabelItemInterface[];\n  labelsOnRow?: number;\n  childrenPosition?: \"START\" | \"END\";\n  children?: JSX.Element;\n};\n\nconst ExamDashboardLabels: React.FC<DashboardLabelProps> = (props) => {\n  const numCols: number = props.labelsOnRow\n    ? props.labelsOnRow > 4\n      ? props.labelsOnRow\n      : 4\n    : 4;\n  return (\n    <div\n      className={`grid 2xl:grid-cols-${numCols} xl:grid-cols-${\n        numCols - 1\n      } lg:grid-cols-${numCols - 2} md:grid-cols-${\n        numCols - 3\n      } sm:grid-cols-2 grid-cols-1 gap-4 items-center mx-auto`}\n    >\n      {props.children &&\n        ((props.childrenPosition && props.childrenPosition === \"START\") ||\n          !props.childrenPosition) &&\n        props.children}\n      {props.dataLabels.map((item, index) => (\n        <section key={index + item.title}>\n          <DashboardLabelItem\n            title={item.title}\n            icon={item.icon}\n            iconColor={item.iconColor}\n            count={item.count}\n          />\n        </section>\n      ))}\n      {props.children &&\n        props.childrenPosition &&\n        props.childrenPosition === \"END\" &&\n        props.children}\n    </div>\n  );\n};\n\nexport default ExamDashboardLabels;\n","export interface centerReportInterface {\n  _id: string;\n  occupied: number;\n  isUsed: boolean;\n  center_id: string;\n  room_type: string;\n  room_number: number;\n  capacity: number;\n  center_name: string;\n  district_id: string;\n  district_name: string;\n  course_in_room: courseInRoomInterface[];\n}\n\nexport interface courseInRoomInterface {\n  course_id: string;\n  course_name: string;\n  course_code: string;\n  occupied: number;\n}\n\nexport interface CenterToPrintInterface {\n  no: number;\n  district_name: string;\n  center_name: string;\n  room_number: number;\n  room_type: string;\n  room_capacity: number;\n  room_occupation: number;\n}\n\nexport enum centerReportContentKeyInterface {\n  district_name = \"district_name\",\n  center_name = \"center_name\",\n  room_number = \"room_number\",\n  room_type = \"room_type\",\n  room_capacity = \"room_capacity\",\n  room_occupation = \"room_occupation\",\n}\n\nexport interface centerReportContentInterface {\n  key: centerReportContentKeyInterface;\n  title: string;\n  status: boolean;\n}\n\nexport interface roomDistrictInterface {\n  district_id: string;\n  district_name: string;\n}\n\nexport const getDistrictInRoom = (\n  allData: centerReportInterface[]\n): roomDistrictInterface[] => {\n  let result: roomDistrictInterface[] = [],\n    ids: string[] = [];\n  for (const key in allData) {\n    if (Object.prototype.hasOwnProperty.call(allData, key)) {\n      if (!ids.includes(allData[key].district_id)) {\n        ids.push(allData[key].district_id);\n        result.push({\n          district_id: allData[key].district_id,\n          district_name: allData[key].district_name,\n        });\n      }\n    }\n  }\n\n  return result;\n};\n\nexport const getRoomOccupation = (thisRoom: centerReportInterface): number => {\n  let result: number = 0;\n  for (const key in thisRoom.course_in_room) {\n    if (Object.prototype.hasOwnProperty.call(thisRoom.course_in_room, key)) {\n      const element = thisRoom.course_in_room[key];\n      if (result < element.occupied) {\n        result = element.occupied;\n      }\n    }\n  }\n  return result;\n};\n\nexport const roomWithOccupation = (\n  allRoom: centerReportInterface[]\n): centerReportInterface[] => {\n  let result: centerReportInterface[] = [];\n  for (const key in allRoom) {\n    if (Object.prototype.hasOwnProperty.call(allRoom, key)) {\n      let data: centerReportInterface = allRoom[key];\n      data.occupied = getRoomOccupation(allRoom[key]);\n      result.push(data);\n    }\n  }\n  return result;\n};\n\nexport const center_report_data: centerReportInterface[] = [\n  {\n    _id: \"61af5367558d345d93dea4397a3\",\n    occupied: 0,\n    isUsed: true,\n    center_id: \"61af534c558dd93dea43979f\",\n    room_type: \"Default\",\n    room_number: 0,\n    capacity: 1000000,\n    center_name: \"Gasabo district center\",\n    district_id: \"61af5338558dd93dea43979b\",\n    district_name: \"Kicukiro\",\n    course_in_room: [],\n  },\n  {\n    _id: \"61af5367558dd93defea4397a6\",\n    occupied: 0,\n    isUsed: true,\n    center_id: \"61af534c558dd93dea43979f\",\n    room_type: \" physical room\",\n    room_number: 112,\n    capacity: 100,\n    center_name: \"Center A\",\n    district_id: \"61af5338558dd93dea43979b\",\n    district_name: \"Kicukiro\",\n    course_in_room: [\n      {\n        course_id: \"61546609eeda150485905a32\",\n        course_name: \"Civisme\",\n        course_code: \"C001\",\n        occupied: 12,\n      },\n      {\n        course_id: \"61546684eeda150485905a3d\",\n        course_name: \"IPTC 1\",\n        course_code: \"ipop\",\n        occupied: 21,\n      },\n      {\n        course_id: \"615465faeeda150485905a2e\",\n        course_name: \"ICT2 for Me\",\n        course_code: \"ICT\",\n        occupied: 100,\n      },\n      {\n        course_id: \"61546401eeda1504859059cc\",\n        course_name: \"ICT in Life\",\n        course_code: \"ICT001\",\n        occupied: 1,\n      },\n    ],\n  },\n  {\n    _id: \"61af536755835dd93defea4397a6\",\n    occupied: 0,\n    isUsed: true,\n    center_id: \"61af534c558dd93dea43979f\",\n    room_type: \" physical room\",\n    room_number: 112,\n    capacity: 120,\n    center_name: \"Gasabo district center\",\n    district_id: \"61af5338558dd93dea43979b\",\n    district_name: \"Kicukiro\",\n    course_in_room: [\n      {\n        course_id: \"61546609eeda150485905a32\",\n        course_name: \"Civisme\",\n        course_code: \"C001\",\n        occupied: 100,\n      },\n      {\n        course_id: \"61546684eeda150485905a3d\",\n        course_name: \"IPTC 1\",\n        course_code: \"ipop\",\n        occupied: 1,\n      },\n      {\n        course_id: \"615465faeeda150485905a2e\",\n        course_name: \"ICT2 for Me\",\n        course_code: \"ICT\",\n        occupied: 10,\n      },\n      {\n        course_id: \"61546401eeda1504859059cc\",\n        course_name: \"ICT in Life\",\n        course_code: \"ICT001\",\n        occupied: 1,\n      },\n    ],\n  },\n];\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { roomDistrictInterface } from \"../../../interfaces/center_report\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport search from \"../../../utils/search\";\n\ntype RoleListProps = {\n  setChooseDistrict: (value: boolean) => void;\n  districtList: roomDistrictInterface[];\n  setSelectedDistrict: (data: roomDistrictInterface | \"all\") => void;\n  selectedDistrict: roomDistrictInterface | \"all\";\n  loadindRequest: boolean;\n  bgWhite?: boolean;\n  isModal?: boolean;\n};\n\nconst DistrictList: React.FC<RoleListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  return (\n    <section\n      className={`${\n        props.isModal ? \"\" : \"border-2 rounded border-gray-400 shadow-md\"\n      }`}\n    >\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className={`focus:border-2 h-7 ml-1 pl-9 ${\n            props.isModal ? \"mr-1\" : \"mr-2\"\n          } bg-gray-100 focus:border-gray-700 w-full rounded`}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={props.districtList.length > 0 ? false : true}\n        />\n        {!props.isModal && (\n          <button\n            className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n            type=\"button\"\n            onClick={() => {\n              props.setChooseDistrict(false);\n            }}\n          >\n            Close\n          </button>\n        )}\n      </div>\n      {/* END SEARCH PART ///////////////// */}\n\n      <div\n        className={`w-full h-52 mt-2 ${\n          props.isModal ? \"px-2\" : \"\"\n        } overflow-y-auto divide-y divide-gray-300 ${\n          props.bgWhite && \"bg-white\"\n        }`}\n      >\n        <section>\n          <div\n            className={`group flex items-center justify-between my-1 ${\n              props.selectedDistrict === \"all\"\n                ? \"cursor-default bg-blue-50 hover:bg-blue-100\"\n                : \"hover:bg-blue-100\"\n            }`}\n          >\n            <div\n              className={`p-1 w-full mr-2 ${\n                props.selectedDistrict === \"all\"\n                  ? \"cursor-default\"\n                  : \"cursor-pointer\"\n              }`}\n              onClick={() => {\n                props.setChooseDistrict(false);\n                !props.loadindRequest &&\n                  props.selectedDistrict !== \"all\" &&\n                  props.setSelectedDistrict(\"all\");\n              }}\n            >\n              <p className=\"text-sm font-medium text-black\">All district</p>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 group-hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 p-1 mr-1 rounded text-sm\"\n            >\n              Choose\n            </button>\n          </div>\n        </section>\n        {search(props.districtList, searchInput).length > 0 ? (\n          search(props.districtList, searchInput).map((district, index) => (\n            <section key={index + district.district_id}>\n              <div className=\"group flex items-center justify-between my-1 hover:bg-gray-100\">\n                <div\n                  className=\"p-1 w-full mr-2 cursor-pointer\"\n                  onClick={() => {\n                    props.setChooseDistrict(false);\n                    !props.loadindRequest &&\n                      props.setSelectedDistrict(district);\n                  }}\n                >\n                  <p className=\"text-sm font-medium text-black\">\n                    {capitalizeFirstLetter(district.district_name)}\n                  </p>\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"bg-blue-200 group-hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 p-1 mr-1 rounded text-sm\"\n                >\n                  Choose\n                </button>\n              </div>\n            </section>\n          ))\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No district available\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default DistrictList;\n","import React, { Fragment } from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { CgFileDocument } from \"react-icons/cg\";\nimport { FiEdit } from \"react-icons/fi\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { SessionPlanInterface } from \"../../../interfaces\";\nimport {\n  centerReportInterface,\n  getDistrictInRoom,\n  roomDistrictInterface,\n} from \"../../../interfaces/center_report\";\nimport DistrictList from \"../../Admin/CenterReport/DistrictList\";\n\ntype CenterReportTitleProps = {\n  // FOR SETTINGS ==============================\n  loading: boolean;\n\n  //   FOR APPLICATION SESSION ============================\n  thisPeriod: string;\n  setThisPeriod: (\n    allSession: SessionPlanInterface[],\n    sessionId: string\n  ) => void;\n  application_sessions: SessionPlanInterface[];\n  chooseDistrict: boolean;\n  setChooseDistrict: (status: boolean) => void;\n  selectedDistrict: roomDistrictInterface | \"all\";\n  setSelectedDistrict: (data: roomDistrictInterface | \"all\") => void;\n  reportMainData: centerReportInterface[];\n};\n\nconst CenterDashboardTitle: React.FC<CenterReportTitleProps> = (props) => {\n  return (\n    <Fragment>\n      <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n        <div className=\"flex flex-row items-center gap-3 mb-2\">\n          <AiFillDashboard className=\"text-7xl text-blue-600 hidden md:block\" />\n          <div className=\"flex flex-col\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              Center Dashboard\n            </span>\n          </div>\n        </div>\n\n        {/* FILTER SECTION PERIOD && EDUCATION */}\n        <section className=\"w-full flex flex-col items-end md:w-auto my-2 md:my-0\">\n          <div>\n            <select\n              className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n                props.loading && \"cursor-wait\"\n              }`}\n              value={props.thisPeriod}\n              disabled={props.loading}\n              onChange={(e) => {\n                props.setThisPeriod(props.application_sessions, e.target.value);\n              }}\n            >\n              {props.application_sessions.map((session, item) => (\n                <option\n                  key={session.session_plan_id + item}\n                  value={session.session_plan_id}\n                >\n                  {session.session_plan_name}\n                </option>\n              ))}\n            </select>\n          </div>\n          {/* DISTRICT sections */}\n          <div className=\"mt-1 w-full\">\n            {!props.chooseDistrict && (\n              <div\n                onClick={() => props.setChooseDistrict(true)}\n                className=\"font-bold bg-gray-50 border border-gray-400 rounded py-2 cursor-pointer text-xs px-2 hover:underline justify-between text-gray-600  mb-4 w-full flex flex-row items-center animate__animated animate__zoomIn\"\n              >\n                {props.selectedDistrict !== \"all\"\n                  ? `${props.selectedDistrict.district_name}`\n                  : \"All district\"}\n                <FiEdit className=\"text-lg text-gray-600\" />\n              </div>\n            )}\n          </div>\n          {/* end DISTRICT sections */}\n        </section>\n        {/* END FILTER SECTION PERIOD && EDUCATION */}\n      </div>\n\n      {props.chooseDistrict && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <CgFileDocument className=\"text-3xl text-blue-600\" />\n              <div className=\"flex flex-col\">\n                <span className=\"font-bold text-xl text-blue-600\">\n                  Choose district\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => props.setChooseDistrict(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.small}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <DistrictList\n            setChooseDistrict={props.setChooseDistrict}\n            districtList={getDistrictInRoom(props.reportMainData)}\n            setSelectedDistrict={props.setSelectedDistrict}\n            loadindRequest={props.loading}\n            isModal={true}\n            selectedDistrict={props.selectedDistrict}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default CenterDashboardTitle;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  centerReportInterface,\n  roomDistrictInterface,\n} from \"../../../interfaces/center_report\";\nimport Chart from \"react-apexcharts\";\n\ntype RoomChartProps = {\n  allData: centerReportInterface[];\n  selectedDistrict: roomDistrictInterface | \"all\";\n};\n\nexport class RoomChart extends Component<RoomChartProps> {\n  generateChartData = (): {\n    series: {\n      name: string;\n      data: number[];\n    }[];\n    categories: (string | string[])[];\n  } => {\n    let categories: (string | string[])[] = [],\n      occupied: number[] = [],\n      remaining: number[] = [],\n      district_ids: string[] = [];\n    for (const key in this.props.allData) {\n      if (\n        Object.prototype.hasOwnProperty.call(this.props.allData, key) &&\n        !district_ids.includes(this.props.allData[key]._id) &&\n        this.props.allData[key].room_number !== 0\n      ) {\n        district_ids.push(this.props.allData[key]._id);\n        occupied.push(this.props.allData[key].occupied);\n        remaining.push(\n          this.props.allData[key].capacity - this.props.allData[key].occupied\n        );\n        categories.push([\n          this.props.allData[key].district_name,\n          this.props.allData[key].center_name,\n          this.props.allData[key].room_number.toString(),\n        ]);\n      }\n    }\n    return {\n      series: [\n        {\n          name: \"Occupied room\",\n          data: occupied,\n        },\n        {\n          name: \"Remaining room\",\n          data: remaining,\n        },\n      ],\n      categories,\n    };\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"w-full\">\n          <Chart\n            options={{\n              chart: {\n                type: \"bar\",\n                height:\n                  this.generateChartData().series.length <= 10\n                    ? 350\n                    : undefined,\n                stacked: true,\n              },\n              plotOptions: {\n                bar: {\n                  horizontal: true,\n                },\n              },\n              stroke: {\n                width: 1,\n                colors: [\"#fff\"],\n              },\n              // title: {\n              //   text: \"Fiction Books Sales\",\n              // },\n              xaxis: {\n                categories: this.generateChartData().categories,\n                labels: {\n                  formatter: function (val: string) {\n                    return val + \" sit(s)\";\n                  },\n                },\n              },\n              yaxis: {\n                title: {\n                  text: undefined,\n                },\n              },\n              tooltip: {\n                y: {\n                  formatter: function (val: number) {\n                    return val + \" sit(s)\";\n                  },\n                },\n              },\n              fill: {\n                opacity: 1,\n              },\n              // legend: {\n              //   position: \"bottom\",\n              //   horizontalAlign: \"center\",\n              //   // offsetY: 8,\n              // },\n              noData: {\n                text: \"No data found\",\n                align: \"center\",\n                verticalAlign: \"middle\",\n              },\n              colors: [\"#059669\", \"#374151\"],\n            }}\n            series={this.generateChartData().series}\n            type=\"bar\"\n            width=\"100%\"\n            height={\n              this.generateChartData().series.length <= 10 ? 350 : undefined\n            }\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default RoomChart;\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { FaLaptopHouse } from \"react-icons/fa\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SessionPlanInterface } from \"../../../interfaces\";\nimport {\n  centerReportInterface,\n  roomDistrictInterface,\n  roomWithOccupation,\n} from \"../../../interfaces/center_report\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { SessionPlanReducerInterface } from \"../../../reducers/session\";\nimport { isEmptyOrSpaces } from \"../../../shared/dataTest\";\nimport { API } from \"../../../utils/api\";\nimport { errorToText } from \"../../../utils/errors\";\nimport PieChart from \"../ChartComponents/PieChart\";\nimport ExamDashboardLabels from \"../ExamDashboard/ExamDashboardLabels\";\nimport CenterDashboardTitle from \"./CenterDashboardTitle\";\nimport RoomChart from \"./RoomChart\";\n\nexport const filterRoom = (\n  dataList: centerReportInterface[],\n  thisDistrict: roomDistrictInterface | \"all\"\n): {\n  all: centerReportInterface[];\n  full: centerReportInterface[];\n  remain: centerReportInterface[];\n} => {\n  let result: centerReportInterface[] = dataList,\n    defaultValue: boolean = false;\n  if (thisDistrict !== \"all\") {\n    // roomWithOccupation;\n    result = result.filter(\n      (item) => item.district_id === thisDistrict.district_id\n    );\n  }\n  // RETURN DEFAULT VALUES ====================\n  else {\n    defaultValue = true;\n  }\n  return defaultValue\n    ? {\n        all: dataList.filter((item) => item.room_type !== \"Default\"),\n        full: dataList.filter(\n          (item) =>\n            item.room_type !== \"Default\" && item.occupied >= item.capacity\n        ),\n        remain: dataList.filter(\n          (item) =>\n            item.room_type !== \"Default\" && item.occupied < item.capacity\n        ),\n      }\n    : {\n        all: result,\n        full: result.filter((item) => item.occupied >= item.capacity),\n        remain: result.filter((item) => item.occupied < item.capacity),\n      };\n};\n\ninterface CenterDashboardProps {\n  //   REDUX ############################\n  auth: Auth;\n  sessionPlan: SessionPlanReducerInterface;\n  GetAllSessionPlans: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\ninterface CenterDashboardState {\n  loading: boolean;\n  selectSession: boolean;\n  selectedSession: SessionPlanInterface | null;\n  reportMainData: centerReportInterface[] | null;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  selectedDistrict: roomDistrictInterface | \"all\";\n  chooseDistrict: boolean;\n}\n\nclass _CenterDashboard extends Component<\n  CenterDashboardProps,\n  CenterDashboardState\n> {\n  constructor(props: CenterDashboardProps) {\n    super(props);\n    this.state = {\n      loading: true,\n      selectSession: false,\n      selectedSession: null,\n      reportMainData: null,\n      formError: null,\n      selectedDistrict: \"all\",\n      chooseDistrict: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSelectSession = (status: boolean) => {\n    this.setState({ selectSession: status });\n  };\n\n  setSelectedSession = (thisSession: SessionPlanInterface) => {\n    this.setState({ selectedSession: thisSession });\n  };\n\n  setThisPeriod = (allSession: SessionPlanInterface[], sessionId: string) => {\n    let thisSession: SessionPlanInterface | undefined = allSession.find(\n      (item) => item.session_plan_id === sessionId\n    );\n    if (thisSession) {\n      this.setState({ selectedSession: thisSession });\n      this.loadReportMainData(thisSession);\n    }\n  };\n\n  loadReportMainData = async (thisSession: SessionPlanInterface) => {\n    try {\n      const res = await axios.get<centerReportInterface[]>(\n        `${API.APPLICATION}/currentroomoccupation/${thisSession.session_plan_id}`\n      );\n      console.log(\"====================================\");\n      console.log({ reportMainData: res.data });\n      console.log(\"====================================\");\n      this.setState({ reportMainData: res.data });\n    } catch (error) {\n      console.error({ reportMainData_error: error });\n      // callback(false, errorToText(error));\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    if (this.props.sessionPlan.allSessionPlans === null) {\n      this.props.GetAllSessionPlans(\n        (\n          status: boolean,\n          errorMsg: string,\n          sessionData: SessionPlanInterface[]\n        ) => {\n          this.setLoading(status);\n          if (!status) {\n            if (!isEmptyOrSpaces(errorMsg)) {\n              this.props.PushPopupAlert({\n                title: errorMsg,\n                theme: PopupAlertTheme.warning,\n              });\n            }\n\n            if (sessionData && sessionData.length > 0) {\n              let activeSession = sessionData.find((item) => item.is_active);\n              if (activeSession) {\n                this.setSelectedSession(activeSession);\n                if (this.state.reportMainData === null) {\n                  this.loadReportMainData(activeSession);\n                }\n              } else {\n                this.setSelectedSession(sessionData[sessionData.length - 1]);\n                if (this.state.reportMainData === null) {\n                  this.loadReportMainData(sessionData[sessionData.length - 1]);\n                }\n              }\n            }\n          }\n        }\n      );\n    } else {\n      if (this.props.sessionPlan.allSessionPlans.length > 0) {\n        let activeSession = this.props.sessionPlan.allSessionPlans.find(\n          (item) => item.is_active\n        );\n        if (activeSession) {\n          this.setSelectedSession(activeSession);\n          if (this.state.reportMainData === null) {\n            this.loadReportMainData(activeSession);\n          }\n        } else {\n          this.setSelectedSession(\n            this.props.sessionPlan.allSessionPlans[\n              this.props.sessionPlan.allSessionPlans.length - 1\n            ]\n          );\n          if (this.state.reportMainData === null) {\n            this.loadReportMainData(\n              this.props.sessionPlan.allSessionPlans[\n                this.props.sessionPlan.allSessionPlans.length - 1\n              ]\n            );\n          }\n        }\n        this.setLoading(false);\n      }\n    }\n  };\n\n  setChooseDistrict = (status: boolean) => {\n    this.setState({ chooseDistrict: status });\n  };\n\n  setSelectedDistrict = (data: roomDistrictInterface | \"all\") => {\n    this.setState({ selectedDistrict: data });\n  };\n\n  render() {\n    if (\n      this.state.selectedSession === null ||\n      this.props.sessionPlan.allSessionPlans === null ||\n      this.state.reportMainData === null\n    ) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <section>\n        <CenterDashboardTitle\n          loading={this.state.loading}\n          thisPeriod={this.state.selectedSession.session_plan_id}\n          setThisPeriod={this.setThisPeriod}\n          application_sessions={this.props.sessionPlan.allSessionPlans}\n          chooseDistrict={this.state.chooseDistrict}\n          setChooseDistrict={this.setChooseDistrict}\n          selectedDistrict={this.state.selectedDistrict}\n          setSelectedDistrict={this.setSelectedDistrict}\n          reportMainData={this.state.reportMainData}\n        />\n\n        {this.state.reportMainData && (\n          <section className=\"my-2\">\n            <div className=\"text-2xl font-semibold text-gray-600\">\n              Room occupation status\n            </div>\n            <ExamDashboardLabels\n              dataLabels={[\n                {\n                  title: \"Total room\",\n                  icon: FaLaptopHouse,\n                  iconColor: \"blue\",\n                  count: filterRoom(\n                    roomWithOccupation(this.state.reportMainData),\n                    this.state.selectedDistrict\n                  ).all.length,\n                },\n                {\n                  title: \"Full room\",\n                  icon: FaLaptopHouse,\n                  iconColor: \"green\",\n                  count: filterRoom(\n                    roomWithOccupation(this.state.reportMainData),\n                    this.state.selectedDistrict\n                  ).full.length,\n                },\n                {\n                  title: \"Available room\",\n                  icon: FaLaptopHouse,\n                  iconColor: \"gray\",\n                  count: filterRoom(\n                    roomWithOccupation(this.state.reportMainData),\n                    this.state.selectedDistrict\n                  ).remain.length,\n                },\n              ]}\n              labelsOnRow={5}\n            >\n              <div className=\"flex justify-center\">\n                <PieChart\n                  options={{\n                    labels: [\"Prepared\", \"Remaining\"],\n                    legend: {\n                      show: false,\n                      position: \"bottom\",\n                      horizontalAlign: \"center\",\n                      fontSize: \"16px\",\n                      itemMargin: {\n                        horizontal: 3,\n                        vertical: 0,\n                      },\n                    },\n                    plotOptions: {\n                      pie: {\n                        donut: {\n                          labels: {\n                            show: true,\n                            name: {\n                              show: true,\n                              fontSize: \"16px\",\n                              //   fontFamily: \"Rubik\",\n                              color: \"#2564eb\",\n                              offsetY: -10,\n                            },\n                            value: {\n                              show: true,\n                              fontSize: \"20px\",\n                              fontFamily: \"Helvetica, Arial, sans-serif\",\n                              color: \"#2564eb\",\n                              offsetY: 10,\n                              formatter: function (val) {\n                                return val;\n                              },\n                            },\n                            total: {\n                              show: true,\n                              label: \"Total\",\n                              color: \"#2564eb\",\n                              formatter: function (w) {\n                                return w.globals.seriesTotals.reduce(\n                                  (a: number, b: number) => {\n                                    return a + b;\n                                  },\n                                  0\n                                );\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                    colors: [\"#469769\", \"#4b5563\"],\n                  }}\n                  series={[\n                    filterRoom(\n                      roomWithOccupation(this.state.reportMainData),\n                      this.state.selectedDistrict\n                    ).full.length,\n                    filterRoom(\n                      roomWithOccupation(this.state.reportMainData),\n                      this.state.selectedDistrict\n                    ).remain.length,\n                  ]}\n                  width={210}\n                />\n              </div>\n            </ExamDashboardLabels>\n          </section>\n        )}\n\n        <section className=\"my-3 max-w-full bg-white\">\n          <div className=\"flex items-center justify-between px-3\">\n            <span className=\"text-gray-600 font-semibold text-xl py-4 px-0\">\n              Room availability{\" \"}\n              {this.state.selectedDistrict === \"all\"\n                ? \"on country level\"\n                : \"in \" +\n                  this.state.selectedDistrict.district_name +\n                  \" district\"}\n            </span>\n          </div>\n          <div className=\"mb-4 pb-2 px-3\">\n            <RoomChart\n              allData={roomWithOccupation(this.state.reportMainData)}\n              selectedDistrict={this.state.selectedDistrict}\n            />\n          </div>\n        </section>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n}: StoreState): {\n  auth: Auth;\n  sessionPlan: SessionPlanReducerInterface;\n} => {\n  return {\n    auth: auth,\n    sessionPlan,\n  };\n};\n\nexport const CenterDashboard = connect(mapStateToProps, {\n  GetAllSessionPlans,\n  PushPopupAlert,\n})(_CenterDashboard);\n"],"sourceRoot":""}