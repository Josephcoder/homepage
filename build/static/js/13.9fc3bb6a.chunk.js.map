{"version":3,"sources":["components/NoResult/NoResult.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/QuestionBank/AddQuestion/ChooseMethod/ChooseMethod.tsx","containers/QuestionBank/QuestionsList/QuestionsList.tsx"],"names":["NoResultThemes","NoResult","props","className","theme","Dark","value","undefined","component","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","toLowerCase","TypeError","v4","options","buf","rnds","random","ChooseMethod","close","to","_QuestionsList","setLoading","status","setState","loading","setAddQuestion","addQuestion","chooseCourse","course","setSelectedCourse","loadQuestionBank","course_id","selectCourse","answerQuestionFn","answer","setSelectedQuestion","question","componentDidMount","questionTypes","loadQuestionTypes","courses","loadCourses","selected_course","questionBank","questions","setEditQuestion","item","editQuestion","unSelectQuestion","state","searchQuestionInput","preview","this","course_code","course_name","onClick","type","placeholder","colSpan","map","title","description","getQuestionType","marks","selectedQuestion","LoadingType","dark","questionsList","backDrop","Themes","default","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","questionAnswers","submitQuestionAnswer","large","selected_course_id","Component","QuestionsList","connect","auth","schoolLevels","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel"],"mappings":"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","file":"static/js/13.9fc3bb6a.chunk.js","sourcesContent":["import React from 'react'\nimport { RiSearchLine } from 'react-icons/ri'\n\nexport enum NoResultThemes {\n  Dark = \"Dark\",\n  Light = \"Light\",\n}\n\ninterface NoResultProps {\n  theme: NoResultThemes;\n  value: string;\n  component?: any;\n}\n\nconst NoResult = (props: NoResultProps) => {\n  return (\n    <div className={`flex flex-col py-4 justify-center items-center text-gray-500 border-2 border-white ${props.theme === NoResultThemes.Dark ? \"bg-gray-100\" : \"bg-white\"} rounded`}>\n      <RiSearchLine className=\"text-6xl text-gray-500 animate__animated animate__shakeX\" />\n      <span className=\"text-xl mb-3\">{props.value}</span>\n      {props.component !== undefined &&\n      props.component}\n    </div>\n  )\n}\n\nexport default NoResult\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React from 'react'\nimport { FaEdit } from 'react-icons/fa'\nimport { IoMdArrowRoundBack } from 'react-icons/io'\nimport { SiMicrosoftexcel } from 'react-icons/si'\nimport { Link } from 'react-router-dom'\n\ninterface ChooseMethodProps {\n  close?: (state: boolean) => void;\n}\n\nexport const ChooseMethod = (props: ChooseMethodProps) => {\n  return (\n    <div className=\"px-2 py-2\">\n      <div className=\"flex flex-row items-center gap-3\">\n        {props.close === undefined &&\n        <Link to=\"/question-bank\">\n          <IoMdArrowRoundBack className={`text-blue-600 text-4xl rounded-full bg-gray-100 cursor-pointer animate__animated animate__lightSpeedInLeft`} />\n        </Link>}\n        {props.close === undefined &&\n        <div className=\"flex flex-col\">\n          <span className=\"text-gray-800 text-3xl font-extrabold\">Choose method</span>\n          <span className=\"text-gray-600 text-sm\">Prepare question bank by adding questions through two main methods</span>\n        </div>}\n      </div>\n      <div className={`${props.close === undefined ? \"mt-6\" : \"-mt-6\"} grid md:grid-cols-2 bg-white px-4 py-4 rounded`}>\n        <div className=\"col-span-1\">\n          <Link to=\"/add-question\">\n            <div className={`bg-blue-50 hover:bg-blue-100 border border-white px-6 py-6 rounded text-2xl mr-2 flex flex-col justify-center items-center ${props.close === undefined && \"animate__animated animate__zoomIn animate__fast\"}`}>\n              <FaEdit className=\"text-8xl text-primary\" />\n              <span className=\"text-primary font-bold\">Add manually</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                This option allows you to prepare one question at time using system's interface\n              </span>\n            </div>\n          </Link>\n        </div>\n        <div className=\"col-span-1\">\n          <Link to=\"/upload-questions\">\n            <div className={`bg-white hover:bg-gray-100 border border-gray-300 hover:border-gray-600 px-6 py-6 rounded text-2xl ml-2 flex flex-col justify-center items-center ${props.close === undefined && \"animate__animated animate__zoomIn animate__fast\"}`}>\n              <SiMicrosoftexcel className=\"text-8xl text-gray-600\" />\n              <span className=\"text-gray-600 font-bold\">Upload excel</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                The option of uploading list of questions through excel file. You can also upload the exam at time\n              </span>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}","import React, { Component, Fragment } from 'react'\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport * as Interfaces from \"../../../interfaces/index\";\nimport { course, QuestionInterface } from '../../../interfaces/index';\nimport Loading from '../../../components/Loading/Loading';\nimport { getQuestionType } from '../../../utils/question_bank';\nimport Modal, { ModalSize, Themes } from '../../../components/Modal/Modal';\nimport Courses from '../../../components/Courses/Courses';\nimport { ChooseMethod } from '../AddQuestion/ChooseMethod/ChooseMethod';\nimport EditQuestion from '../AddQuestion/UploadQuestion/EditQuestion/EditQuestion';\nimport { LoadingType } from '../../../components/Loading/LoadingV2';\nimport QuestionDetails from '../../DoExam/QuestionDetails/QuestionDetails';\nimport { exam_question } from '../../../interfaces/exam_question';\nimport NoResult, { NoResultThemes } from '../../../components/NoResult/NoResult';\n\ninterface QuestionsListProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  loadQuestionBank: (course_id : string, callback: (loading: boolean) => void) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n}\ninterface QuestionsListState {\n  loading: boolean;\n  searchQuestionInput: string;\n  selectCourse: boolean;\n  addQuestion: boolean;\n  editQuestion: QuestionInterface | null;\n  preview: QuestionInterface | null;\n}\n\nclass _QuestionsList extends Component<QuestionsListProps, QuestionsListState> {\n  constructor(props: QuestionsListProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      loading: false,\n      searchQuestionInput: \"\",\n      selectCourse: false,\n      addQuestion: false,\n      editQuestion: null,\n      preview: null,\n\t\t};\n\t}\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n  setAddQuestion = (status: boolean) => {\n    this.setState({ addQuestion: status });\n  }\n\n  chooseCourse = (course: course | null) => {\n    this.props.setSelectedCourse(course);\n    if (course !== null) {\n      this.props.loadQuestionBank(course.course_id, this.setLoading);\n    }\n    this.setState({ selectCourse: false })\n  }\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {}\n  setSelectedQuestion = (question: exam_question) => {}\n\n  componentDidMount = () => {\n    if (this.props.questionTypes.questionTypes === null || this.props.questionTypes.questionTypes.length === 0) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (this.props.course.courses === null || this.props.course.courses.length === 0) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true })\n    } else {\n      this.setState({ selectCourse: false })\n    }\n    if (this.props.questionBank.questions === null || this.props.questionBank.questions.length === 0) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(this.props.course.selected_course.course_id, this.setLoading);\n      }\n    }\n  }\n\n  setEditQuestion = (item: QuestionInterface) => {\n    this.props.setSelectedQuestion(item);\n    this.setState({ editQuestion: item });\n  }\n\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  }\n\n  render() {\n    return (\n      <Fragment>\n      {this.state.editQuestion === null ?\n      <div className=\"\">\n        <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n          <div className=\"flex flex-row items center justify-between\">\n            <div className=\"flex flex-col px-1\">\n              <span className=\"text-gray-600 text-3xl font-bold\">Question Bank</span>\n              <span className=\"text-blue-600 text-sm font-bold\">Course: {this.props.course.selected_course === null ? <span className=\"text-yellow-700 italic\">Not selected!</span> : (`${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`)}</span>\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              {this.props.course.selected_course !== null &&\n              <div onClick={() => this.setState({ selectCourse: true })} className={`btn cursor-pointer ${this.props.course.selected_course === null ? \"bg-yellow-50 hover:bg-yellow-100  text-yellow-700 border border-yellow-200\" : \"bg-blue-50 hover:bg-blue-100  text-blue-600\"} h-max flex items-center justify-center h-10`}>{this.props.course.selected_course === null ? \"Choose course\" : \"Change course\"}</div>}\n              <div onClick={() => this.setState({ addQuestion: true })} className=\"btn cursor-pointer bg-white hover:bg-blue-100 border border-blue-600 text-blue-600 h-max flex items-center justify-center h-10\">\n                Add questions\n              </div>\n            </div>\n          </div>\n          <input type=\"text\" className=\"input-white border h-10 text-sm border-gray-400\" placeholder=\"Search question by title or description\" />\n        </div>\n        <div className=\"flex-col\">\n          <div className=\"flex my-2 flex-row justify-between items-center\">\n            <span className=\"text-xl font-bold text-blue-600\">List of questions</span>\n            <div className=\"underline font-bold text-blue-700 bg-white rounded-full px-3 py-1\">{this.props.questionBank.questions && this.props.questionBank.questions.length} questions</div>\n          </div>\n          <div className=\"flex flex-col\">\n            <div className=\"bg-white flex rounded\">\n              <table className=\"table-auto w-full\">\n                <thead>\n                  <tr className=\"text-left bg-blue-50 border-b-2 border-blue-500 text-blue-600\">\n                    <th className=\"p-3 w-1/12 pl-10\">#</th>\n                    <th className=\"p-3\">Question</th>\n                    <th>Category</th>\n                    <th>Marks</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.loading === true ? \n                  <tr>\n                    <td colSpan={5} className=\"pt-6\"><Loading /></td>\n                  </tr> :\n                  this.props.course.selected_course === null ? \n                  <tr>\n                    <td colSpan={5}>\n                      <div className=\"bg-gray-100 flex flex-col items-center text-center gap-3 rounded px-3 py-3\">\n                        <span className=\"text-xl font-bold\">No course selected!</span>\n                        <div onClick={() => this.setState({ selectCourse: true })} className=\"btn bg-yellow-50 text-yellow-800 cursor-pointer hover:bg-white border border-white shadow hover:shadow-none hover:border-yellow-600\">Choose a course</div>\n                      </div>\n                    </td>\n                  </tr> :\n                  this.props.questionBank.questions === null ?\n                  <tr>\n                    <td colSpan={5} className=\"pt-6\">\n                      <Loading />\n                    </td>\n                  </tr> :\n                  this.props.questionBank.questions.length === 0 ? \n                  <tr>\n                    <td colSpan={5}>\n                      <div className=\"flex flex-col items-cnter justify-center\">\n                        <NoResult \n                        theme={NoResultThemes.Dark} \n                        value={\"\"} \n                        component={<span className=\"font-bold text-gray-600 text-2xl -mt-4\">No questions available!</span>} />\n                      </div>\n                    </td>\n                  </tr>:\n                  this.props.questionTypes.questionTypes !== null && this.props.questionTypes.questionTypes.length > 0 &&\n                  this.props.questionBank.questions.map((item, i) => (\n                    <tr key={i + 1} className=\"shadow-sm cursor-pointer border-none\">\n                      <td className=\"flex items-center justify-center\">\n                        <div className=\"py-1 rounded-full my-3\">\n                          <span className=\"text-xl italic text-blue-600\">{i < 9 && 0}{i + 1}</span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"py-2 px-3 flex flex-col\">\n                          <span className=\"text-sm text-gray-600 font-bold w-96 truncate\">\n                            {item.question[0].title}\n                          </span>\n                          <span className=\"text-xs text-gray-500 w-96 truncate\">\n                            {item.question[0].description}\n                          </span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"text-xs font-bold text-gray-700 w-80 truncate\">\n                          {getQuestionType(this.props.questionTypes.questionTypes, item.type) === null ? \n                          <span className=\"text-yellow-700\">Invalid type</span> : \n                          <span className=\"text-blue-600\">{getQuestionType(this.props.questionTypes.questionTypes, item.type)}</span>}\n                        </div>\n                      </td>\n                      <td>\n                        <span className=\"text-xs text-gray-500\">{item.marks}</span>\n                      </td>\n                      <td>\n                        <div className=\"flex justify-end pr-1\">\n                          <div onClick={() => this.setState({ preview: item })} className=\"border border-gray-200 btn bg-gray-100 px-3 py-1 rounded text-gray-600 text-sm flex items-center\">\n                            <span>View</span>\n                          </div>\n                          <div onClick={() => this.setEditQuestion(item)} className=\"border border-blue-200 btn bg-blue-50 px-3 py-1 rounded text-blue-600 text-sm flex items-center ml-1\">\n                            <span>Edit</span>\n                          </div>\n                          <div className=\"border border-red-200 btn px-3 py-1 rounded bg-red-50 text-red-600 text-sm flex items-center ml-1\">\n                            <span>Delete</span>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div> :\n      <div>\n        {this.props.course.selected_course !== null &&\n        <div className=\"bg-white px-2 py-2 mt-4 flex flex-col rounded-t\">\n          <span className=\"text-sm text-gray-600 font-bold\">Course</span>\n          <span className=\"font-bold text-xl text-blue-600\">{this.props.course.selected_course.course_code} - {this.props.course.selected_course.course_name}</span>\n        </div>\n        }\n        {this.props.questionBank.questions === null || this.props.questionBank.selectedQuestion === null? \n        <div className=\"mt-4 px-4 py-4 rounded bg-white\"><Loading type={LoadingType.dark} /></div>\n        :\n        <EditQuestion \n          selectedQuestion={this.state.editQuestion} \n          questionsList={this.props.questionBank.questions}\n          unSelectQuestion={this.unSelectQuestion} \n        />}\n      </div>}\n      {this.state.preview !== null &&\n      <Modal\n        title=\"Question preview\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ preview: null })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.extraLarge}\n        displayClose={true}\n        padding={{title: true,}}>\n        <QuestionDetails\n          questionAnswers={undefined}\n          answerQuestionFn={this.answerQuestionFn}\n          selectedQuestion={null}\n          setSelectedQuestion={this.setSelectedQuestion}\n          preview={false} \n          submitQuestionAnswer={false}          \n        />\n      </Modal>}\n      {this.state.selectCourse === true &&\n      <Modal\n        title=\"Choose a course\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ selectCourse: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n        <Courses setSelectedCourse={this.chooseCourse} selected_course_id={this.props.course.selected_course && this.props.course.selected_course.course_id} />\n      </Modal>}\n      {this.state.addQuestion === true &&\n      <Modal\n        title={\n          <div className=\"flex flex-col\">\n            <span className=\"text-gray-800 text-3xl font-extrabold\">Choose method</span>\n            <span className=\"text-gray-600 text-sm\">Prepare question bank by adding questions through two main methods</span>\n          </div>\n        }\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ addQuestion: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n        <ChooseMethod close={this.setAddQuestion} />\n      </Modal>}\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, questionTypes: questionTypes };\n};\n\nexport const QuestionsList = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n})(_QuestionsList);\n"],"sourceRoot":""}