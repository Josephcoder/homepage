{"version":3,"sources":["interfaces/question.ts","interfaces/candidatesInterfaces.ts","interfaces/events.ts","interfaces/position.ts","assets/profile.png","containers/DoExam/utils/utils.ts","containers/DoExam/DoEamResults/DoExamResults.tsx","components/InformationModal/InformationModal.tsx","containers/ProctoringCandidateOnline/ProctoringCandidateOnline.tsx","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","assets/uk-flag.jpg","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/Cancel/CancelErrorMessage.tsx","containers/DoExam/DoExam.tsx"],"names":["questionTypeElementsType","QuestionLanguage","questionTypeElements","key","SingleMultiple","value","MultipleChoice","CalculatedMultipleChoice","TrueFalse","Matching","Numeric","SimpleCalculate","ShortAnswer","QuestionLanguages","Eng","Fr","Kiny","DocumentStatus","Events","ExamEvents","ExamEventTypes","validateDocCategory","requirement","userDocuments","undefined","find","item","category_id","category","user_detail_category_id","validateDocSubcategory","result","position_requirement","length","i","filterData","category_subcategory_data","category_subcategory_Data_id","_id","required","push","category_subcat_id","user_detail_subcategory_id","subcategory","console","log","returnValidatePosition","requirements","documents","status","findResult","examQuestions","answersList","marks","user_answers","DoExamResults","connect","todos","auth","doExam","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","props","useState","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","exam_questions","to","className","psychometric_questions_list","map","question_id","question_description","itm","answer","page","onClick","user","n_id","InformationModal","title","description","close","joined_room","_ProctoringCandidateOnline","componentWillUnmount","socket","off","START_EXAM_CLIENT","STOP_EXAM_CLIENT","CAND_CONTINUE_EXAM_CLIENT","CAND_RESTART_EXAM_CLIENT","CAND_WARNING_EXAM_CLIENT","CAND_STOP_EXAM_CLIENT","examStart","state","setState","request_fullScreen","exit_fullScreen","FC_MeStartStopExam","startExam","stopExam","closeInfoModal","inform_modal","active","requestFullScreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullScreen","exitFullscreen","eventBrodcaster","type","proctoring","exam","start_exam","event","eventDefiner","user_id","done_by","room_id","room","event_type","FC_CandidateExamEvent","FC_BlockExam","emit","CAND_EXAM_EVENT_SERVER","warning","this","email","fname","lname","FC_AddMyDataToProctoring","muted","stopped","peer","peer_id","ref","JOIN_ROOM","users_list","on","prevState","msg","me","restartExam","addEventListener","preventDefault","window","lastEvent","events_list","events","children","React","Component","ProctoringCandidateOnline","Footer","selectedIndexNext","selectedQuestion","parseInt","selectedIndexPrevious","setProfileWindowStatus","windowStatus","profile","style","position","top","right","questionsList","setSelectedQuestion","height","Profile","width","src","userImage","alt","paddingBottom","paddingTop","QuestionDetails","UK_ICON","question_answers","answerQuestionFn","questionAnswers","DoExamTitle","submitModal","setSubmitModal","incompleteQuestions","setIncompleteQuestions","answeredPercentage","testAnswers","alignSelf","allQuestions","incomplete","submitExam","Modal","backDrop","theme","Themes","default","backDropClose","widthSizeClass","ModalSize","large","displayClose","padding","setCompletedTest","CancelErrorMessage","_DoEam","setQuestionsListWindowStatus","question","current","filter","completedTest","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","componentDidMount","exam_questions_answers","examStatus","exam_id","Done","Canceled","QuestionsList","DoExam","ChangeExamStatus"],"mappings":"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","file":"static/js/9.670089a3.chunk.js","sourcesContent":["import { course } from \"./course\";\n\n// Multiple question interface\nexport interface question_answer {\n  answer: string;\n  status: boolean;\n}\nexport interface psychometric_question {\n  question_id: string;\n  question_title: string;\n  question_description: string;\n  question_answers: question_answer[]\n}\n\nexport enum questionTypeElementsType {\n  SingleMultiple = \"Single Multiple\",\n  MultipleChoice = \"MultipleChoice\",\n  CalculatedMultipleChoice = \"Calculated multichoice\",\n  TrueFalse = \"true or false\",\n  Matching = \"Matching\",\n  Numeric = \"Numerical\",\n  SimpleCalculate = \"Simple Calculate\",\n  ShortAnswer = \"Short Answer\",\n}\n\nexport const questionTypeElements: { key: questionTypeElementsType; value: string; }[] = [\n  {\n    key: questionTypeElementsType.SingleMultiple,\n    value: \"Single Multiple choice Question\",\n  },\n  {\n    key: questionTypeElementsType.MultipleChoice,\n    value: \"Multiple choice Question\",\n  },\n  {\n    key: questionTypeElementsType.CalculatedMultipleChoice,\n    value: \"Calculated Multiple choice Question\",\n  },\n  {\n    key: questionTypeElementsType.TrueFalse,\n    value: \"True & False Question\",\n  },\n  {\n    key: questionTypeElementsType.Matching,\n    value: \"Matching Question\",\n  },\n  {\n    key: questionTypeElementsType.Numeric,\n    value: \"Numeric Question\",\n  },\n  {\n    key: questionTypeElementsType.SimpleCalculate,\n    value: \"Simple calculation Question\",\n  },\n  {\n    key: questionTypeElementsType.ShortAnswer,\n    value: \"Short answer Question\",\n  },\n];\n\nexport interface questionType {\n  status: number;\n  title: string;\n  element: questionTypeElementsType;\n  description: string;\n  createdAt?: string;\n  updatedAt?: string;\n  id?: string;\n}\n\nexport interface uploadQuestions {\n  course: course;\n  questionsFile: File[];\n}\n\nenum QuestionLanguage {\n  Eng = \"Eng\",\n  Fr = \"Fr\",\n  Kiny = \"Kiny\",\n}\n\nexport interface LanguageInterface { key: QuestionLanguage; value: string }\n\nexport const QuestionLanguages: { key: QuestionLanguage; value: string }[] = [\n  { key: QuestionLanguage.Eng, value: \"English\" },\n  { key: QuestionLanguage.Fr, value: \"French\" },\n  { key: QuestionLanguage.Kiny, value: \"Kiny\" },\n]\n\nexport interface uploadQuestionsResponse {\n  insertedCount: number;\n  insertedData: QuestionInterface[]\n  insertedIds: string[];\n  result: {ok: number, n: number}\n}\n\nexport interface QuestionItemInterface {\n  description: string;\n  language: QuestionLanguage;\n  status: number;\n  title: string;\n  answer: QuestionAnswerInterface[]\n}\n\nexport interface QuestionInterface {\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[] // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answer: QuestionAnswerInterface | QuestionAnswerInterface[];\n}\n\n// export interface QuestionAnswerInterface {\n//   value: string | string[] | number[];\n//   status: boolean | string | string[] | number[];\n// }\nexport interface QuestionAnswerInterface {\n  id: string;\n  value: string;\n  status: boolean;\n}","export interface CandidateInterface {\n  n_id: string;\n  fname: string;\n  lname: string;\n  date_of_birth: string;\n  district: string;\n  email: string;\n  phone_number: string;\n  stopped: boolean;\n  user_id: string;\n  // more details\n  application_number: string;\n  cell: string;\n  civil_status: string;\n  country_of_birth: string;\n  date_of_expiry: string;\n  date_of_issue: string;\n  document_type: string;\n  father_names: string;\n  issue_number: string;\n  mother_names: string;\n  photo: string;\n  place_of_birth: string;\n  place_of_issue: string;\n  province: string;\n  sector: string;\n  sex: string;\n  spouse?: any;\n  status: string;\n  village: string;\n  village_id: string;\n  // temporary details\n  active?: boolean;\n  ref?: any;\n  muted?: boolean;\n  room_id?: string;\n  video?: boolean;\n  stream?: any;\n  peer?: any;\n  peer_id?: any;\n  type?: any;\n  id?: string;\n}\n\nexport interface CandidateProctoringInterface {\n  fname: string;\n  lname: string;\n  email: string;\n  stopped: boolean;\n  user_id: string;\n  active: boolean;\n  // others\n  ref?: any;\n  muted?: boolean;\n  peer?: any;\n  peer_id?: any;\n}\n\nexport interface DocumentsCategories {\n  description: string;\n  fields: string[];\n  title: string;\n  user_detail_category_id: string;\n}\n\nexport interface DocumentsCategoriesWithCount {\n  description: string;\n  fields: string[];\n  title: string;\n  user_detail_category_id: string;\n  count: number;\n}\n\nexport interface DocumentSubCategories {\n  category_id: string;\n  description: string;\n  title: string;\n  user_detail_subcategory_id: string;\n}\n// export interface CategorySubcategoryData {\n//   category_id: string;\n//   category_subcategory_id: string;\n//   description: string;\n//   others: {\n//     key: string;\n//     value: string;\n//   }[];\n//   subcategory_id: string;\n//   title: string;\n// }\n\nexport interface CategorySubcategoryData {\n  category_id: string;\n  subcategory_id: string;\n  title: string;\n  description: string;\n  others: {\n    key: string;\n    value: string;\n  }[];\n  category_subcategory_Data_id: string;\n}\n\nexport interface DocumentUser_API {\n  category_id: string;\n  company: string;\n  description: string;\n  email: string;\n  end_year: string;\n  files: string;\n  names: string;\n  phone_number: string;\n  school: string;\n  school_id: string;\n  start_year: string;\n  sub_category_id: string;\n  title: string;\n  year: string;\n  validation_status: string;\n  doc_id: string;\n  category_subcategory_data: string;\n}\n\nexport interface DocumentUser {\n  category_id: string;\n  company: string;\n  description: string;\n  email: string;\n  end_year: string;\n  files: string;\n  names: string;\n  phone_number: string;\n  school: {\n    school_name: string;\n    _id: string;\n    status: boolean;\n    education_category_id?: {\n      education_category_title: string;\n      _id: string;\n    };\n    district_id?: {\n      district_name: string;\n      _id: string;\n    };\n  } | null;\n  school_id: string;\n  start_year: string;\n  sub_category_id: string;\n  title: string;\n  year: string;\n  validation_status: string;\n  doc_id: string;\n  category_subcategory_data: CategorySubcategoryData | null;\n}\n\nexport interface SchoolInterface {\n  district_id: string;\n  education_category_id: string;\n  school_name: string;\n  status: boolean;\n  _id: string;\n}\n\nexport enum DocumentStatus {\n  Waiting = \"waiting\",\n  Rejected = \"rejected\",\n  Approved = \"approved\",\n}\n","export enum Events {\n  USER_CONNECTED = \"user-connected\",\n  USER_DISCONNECTED = \"user-disconnected\",\n  JOIN_ROOM = \"join-room\",\n}\n\nexport enum ExamEvents {\n  START_EXAM_CLIENT = \"START_EXAM_CLIENT\",\n  START_EXAM_SERVER = \"START_EXAM_SERVER\",\n\n  STOP_EXAM_CLIENT = \"STOP_EXAM_CLIENT\",\n  STOP_EXAM_SERVER = \"STOP_EXAM_SERVER\",\n\n  CAND_EVENT_CLIENT = \"CAND_EVENT_CLIENT\",\n  CAND_EVENT_SERVER = \"CAND_EVENT_SERVER\",\n\n  CAND_CONTINUE_EXAM_SERVER = \"CAND_CONTINUE_EXAM_SERVER\",\n  CAND_CONTINUE_EXAM_CLIENT = \"CAND_CONTINUE_EXAM_CLIENT\",\n\n  CAND_STOP_EXAM_CLIENT = \"CAND_STOP_EXAM_CLIENT\",\n  CAND_STOP_EXAM_SERVER = \"CAND_STOP_EXAM_SERVER\",\n\n  CAND_RESTART_EXAM_CLIENT = \"CAND_RESTART_EXAM_CLIENT\",\n  CAND_RESTART_EXAM_SERVER = \"CAND_RESTART_EXAM_SERVER\",\n\n  ALL_CAND_RESTART_EXAM_CLIENT = \"ALL_CAND_RESTART_EXAM_CLIENT\",\n  ALL_CAND_RESTART_EXAM_SERVER = \"ALL_CAND_RESTART_EXAM_SERVER\",\n\n  CAND_WARNING_EXAM_CLIENT = \"CAND_WARNING_EXAM_CLIENT\",\n  CAND_WARNING_EXAM_SERVER = \"CAND_WARNING_EXAM_SERVER\",\n\n  CAND_BRODCAST_MSG_CLIENT = \"CAND_BRODCAST_MSG_CLIENT\",\n  CAND_BRODCAST_MSG_SERVER = \"CAND_BRODCAST_MSG_SERVER\",\n\n  CAND_PRIVATE_MSG_CLIENT = \"CAND_PRIVATE_MSG_CLIENT\",\n  CAND_PRIVATE_MSG_SERVER = \"CAND_PRIVATE_MSG_SERVER\",\n\n  CAND_EXAM_EVENT_CLIENT = \"CAND_EXAM_EVENT_CLIENT\",\n  CAND_EXAM_EVENT_SERVER = \"CAND_EXAM_EVENT_SERVER\",\n}\n\nexport enum ExamEventTypes {\n  PASTE_A_TEXT = \"PASTE A TEXT\",\n  MOVE_MOUSE_OUT = \"MOVE MOUSE OUT WINDOW\",\n}\n\nexport interface EventInterface {\n  event_id: string;\n  user_id: string;\n  event_type: string;\n  description: string;\n  room_id: string;\n  done_by?: string;\n  time: string;\n}\n","import { DocumentUser } from \".\";\n\nexport interface PositionAPI {\n  courses: {\n    course_name: string;\n    course_code: string;\n    description: string;\n    school_levels: string[];\n    course_id: string;\n  }[];\n  position_title: string;\n  description: string;\n  school_level_id: {\n    school_level_name: string;\n    description: string;\n    education_institute: string[];\n    courses: [];\n    school_level_id: string;\n  };\n  education_institute_id: {\n    education_category_title: string;\n    school_levels: [];\n    description: string;\n    education_institute_id: string;\n  };\n  requirements: PositionRequirements[];\n  isDeleted: boolean;\n  position_id: string;\n}\n\nexport interface PositionRequirementsOld {\n  user_detail_category_id: string;\n  title: string;\n  description: string;\n  fields: string[];\n  user_required_docs: {\n    category_id: string;\n    description: string;\n    title: string;\n    user_detail_subcategory_id: string;\n  }[];\n}\n\nexport interface PositionRequirements {\n  category: {\n    description: string;\n    fields: string[];\n    title: string;\n    user_detail_category_id: string;\n  };\n  subcategory: {\n    category_id: string;\n    description: string;\n    title: string;\n    user_detail_subcategory_id: string;\n  };\n  position_requirement: PositionSubcategoryData[];\n  required: boolean;\n}\n\nexport interface PositionSubcategoryData {\n  category_id: string;\n  subcategory_id: string;\n  description: string;\n  required: boolean;\n  title: string;\n  others: { key: string; value: string }[];\n  _id: string;\n  __v?: string;\n}\n\nexport const validateDocCategory = (\n  requirement: PositionRequirements,\n  userDocuments: DocumentUser[]\n) => {\n  if (\n    userDocuments.find(\n      (item) =>\n        item.category_id === requirement.category.user_detail_category_id\n    )?.category_id === undefined\n  ) {\n    return requirement.category.user_detail_category_id;\n  } else {\n    return null;\n  }\n};\n\n// If true, should return null\nexport const validateDocSubcategoryData = (\n  requirement: PositionSubcategoryData,\n  UserData: DocumentUser[]\n): string | null => {\n  let result: string | null = null;\n  // for (let requirement of requirements) {\n  if (\n    UserData.find(\n      (itm) =>\n        itm.category_subcategory_data &&\n        itm.category_subcategory_data.category_subcategory_Data_id ===\n          requirement._id\n    ) === undefined\n  ) {\n    result = requirement.subcategory_id;\n  }\n  // }\n  return result;\n};\n\nexport const validateDocSubcategory = (\n  requirement: PositionRequirements,\n  userDocuments: DocumentUser[]\n) => {\n  let result: {\n    category_subcat_id: string | null;\n    category_id: string | null;\n    user_detail_subcategory_id: string | null;\n  }[] = [];\n  if (requirement.position_requirement.length > 0) {\n    for (let i in requirement.position_requirement) {\n      let filterData = userDocuments.find(\n        (item) =>\n          item.category_subcategory_data &&\n          item.category_subcategory_data.category_subcategory_Data_id ===\n            requirement.position_requirement[i]._id\n      )?.category_subcategory_data;\n      if (\n        (filterData === undefined || filterData === null) &&\n        requirement.position_requirement[i].required === true\n      ) {\n        result.push({\n          category_subcat_id: requirement.position_requirement[i]._id,\n          category_id: requirement.category.user_detail_category_id,\n          user_detail_subcategory_id:\n            requirement.subcategory.user_detail_subcategory_id,\n        });\n      }\n    }\n  }\n  console.log(\"Returned: \", result);\n  return result;\n};\n\nexport const returnValidatePosition = (\n  requirements: PositionRequirements[],\n  documents: DocumentUser[]\n) => {\n  let status = true;\n  for (let i in requirements) {\n    if (requirements[i].position_requirement.length === 0) {\n      if (\n        requirements[i] !== null &&\n        documents !== null &&\n        validateDocCategory(requirements[i], documents) !== null &&\n        validateDocCategory(requirements[i], documents) !== undefined\n      ) {\n        status = false;\n      }\n    } else {\n      if (validateDocSubcategory(requirements[i], documents).length !== 0) {\n        status = false;\n      }\n    }\n  }\n  return status;\n};\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { exam_question } from \"../../../interfaces/exam_question\";\nimport { newAnswer } from \"../DoExam\";\n\nexport const findResult = (examQuestions: exam_question[], answersList: newAnswer[]): number => {\n  let marks: number = 0;\n  if (answersList !== undefined && answersList !== null) {\n    for (let i in answersList) {\n      let answer = answersList;\n      if (answer[i].user_answers?.status === true) {\n        marks = marks + 1;\n      }\n    }\n  }\n  return examQuestions !== undefined ? (marks * 100)/examQuestions.length : 0;\n}","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React, { FC, ReactElement } from \"react\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\ntype InformationModalProps = {\n  title: string;\n  description: string;\n  close: Function;\n};\n\nconst InformationModal: FC<InformationModalProps> = ({\n  title,\n  description,\n  close,\n}): ReactElement => {\n  // return (\n  //   <div className=\"fixed top-5 w-3/4 right-0 left-0 mx-auto bg-yellow-300 rounded\">\n  //     <div className=\"bg-yellow-200 p-3 rounded-md\">\n  //       <h1 className=\"text-2xl font-bold text-yellow-900\">{title}</h1>\n  //       <p className=\"text-sm mt-1\">{description}</p>\n  //     </div>\n\n  //     <div className=\"p-2 text-right\">\n  //       <button\n  //         onClick={() => close()}\n  //         className=\"py-1 px-3 rounded-md bg-yellow-500 btn-sm hover:bg-red-600 hover:text-white\"\n  //       >\n  //         Close\n  //       </button>\n  //     </div>\n  //   </div>\n  // );\n\n  return (\n    <div\n      onClick={() => close()}\n      className=\"fixed top-3 cursor-pointer bg-opacity-70 bg-yellow-100 hover:bg-opacity-90 w-lg right-0 left-0 mt-6 rounded-md mx-auto  py-5 px-3 max-w-sm animate__bounceIn\"\n    >\n      <div className=\"w-full flex\">\n        <div className=\"\">\n          <MdInfoOutline className=\"text-6xl inline text-yellow-800 opacity-50\" />\n        </div>\n        <div className=\"flex-1 pl-2\">\n          <h1 className=\"text-xl text-yellow-800 font-bold\">{title}</h1>\n          <p className=\"mt-0 text-gray-700\">{description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default InformationModal;\n","import React, { Fragment, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  Events,\n  EventInterface,\n  ExamEvents,\n  CandidateProctoringInterface,\n} from \"../../interfaces\";\nimport { eventDefiner, eventDefinerInterface } from \"../../actions/proctoring\";\nimport InformationModal from \"../../components/InformationModal/InformationModal\";\n\nimport {\n  Auth,\n  Socket,\n  Proctoring,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n} from \"../../actions\";\nimport { MdFullscreen, MdFullscreenExit, MdReport } from \"react-icons/md\";\n\n// props for the component\ninterface ProctoringCandidateOnlineProps {\n  socket: Socket;\n  eventDefiner: Function;\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_AddMyDataToProctoring: Function;\n  FC_MeStartStopExam: Function;\n  FC_CandidateExamEvent: Function;\n  children: ReactNode;\n  startExam: Function;\n  stopExam: Function;\n  restartExam: Function;\n  FC_BlockExam: Function;\n}\n\ninterface AppState {\n  request_fullScreen: boolean;\n  exit_fullScreen: boolean;\n  warning: any;\n  inform_modal: {\n    title: string;\n    description: string;\n    active: boolean;\n  };\n}\n\nlet joined_room = false;\n\nclass _ProctoringCandidateOnline extends React.Component<\n  ProctoringCandidateOnlineProps,\n  AppState\n> {\n  constructor(props: ProctoringCandidateOnlineProps) {\n    super(props);\n\n    this.state = {\n      request_fullScreen: this.props.proctoring.exam.start_exam,\n      exit_fullScreen: false,\n      warning: null,\n      inform_modal: {\n        title: \"\",\n        description: \"\",\n        active: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { email, fname, lname, user_id } = this.props.auth.user;\n    // add the user to the list\n    if (joined_room === false) {\n      this.props.FC_AddMyDataToProctoring({\n        active: true,\n        email: email,\n        fname,\n        lname,\n        user_id,\n        muted: false,\n        stopped: false,\n        peer: \"\",\n        peer_id: \"\",\n        ref: \"\",\n      } as CandidateProctoringInterface);\n      this.props.socket.socket.emit(\n        Events.JOIN_ROOM,\n        {\n          room_id: this.props.proctoring.room.room_id,\n          user_id: this.props.auth.user.user_id,\n          peer_id: \"\",\n        },\n        (users_list: any) => {}\n      );\n      joined_room = true;\n    }\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.START_EXAM_CLIENT, (event: any) =>\n      this.examStart(true)\n    );\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.STOP_EXAM_CLIENT, (event: any) =>\n      this.examStart(false)\n    );\n\n    // * WARNING CANDIDATE\n    this.props.socket.socket.on(\n      ExamEvents.CAND_WARNING_EXAM_CLIENT,\n      (event: any) => {\n        this.setState((prevState: AppState) => ({\n          warning: true,\n          inform_modal: {\n            title: \"WARNING\",\n            description: event.msg,\n            active: true,\n          },\n        }));\n        // Add event to the reducer\n        this.props.FC_CandidateExamEvent(\n          eventDefiner({\n            description: event.msg,\n            event_type: \"WARNING\",\n            done_by: \"Invigirator\",\n            room_id: this.props.proctoring.room.room_id,\n            user_id: event.user_id,\n          } as eventDefinerInterface)\n        );\n      }\n    );\n\n    // * STOP EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_STOP_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"STOP EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(true);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"STOP EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_CONTINUE_EXAM_CLIENT,\n      (event: any) => {\n        if (\n          event.user_id === this.props.auth.user.user_id &&\n          this.props.proctoring.me.stopped === true\n        ) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"CONTINUE EXAM\",\n              description: \"Invigirator allowed you to continue the exam\",\n              active: true,\n            },\n          }));\n\n          this.props.FC_BlockExam(false);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: \"Invigirator allowed you to continue the exam\",\n              event_type: \"CONTINUE EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_RESTART_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"RESTART EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(false);\n\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"RESTART EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n          // * Restart Function\n          this.props.restartExam();\n        }\n      }\n    );\n\n    //** EVENTS BROWSER */\n    // document.addEventListener(\"mouseenter\", (e) => {\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   );\n    // });\n\n    // document.addEventListener(\"mouseleave\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    document.addEventListener(\"copy\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\n        \"COPY TEXT\",\n        \"The candidate is try to copy the text\"\n      );\n    });\n\n    document.addEventListener(\"paste\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\"TEXT PASTE\", \"pasted a text\");\n    });\n\n    document.addEventListener(\"visibilitychange\", (event) =>\n      this.eventBrodcaster(\"ZOOMING OUT\", \"Changing the visibility\")\n    );\n\n    // ! ERROR: causing to stop the candidate once they click on a modal into the browser\n    // document.addEventListener(\"focusout\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    window.addEventListener(\"blur\", () =>\n      this.eventBrodcaster(\n        \"LEAVING BROWSER\",\n        \"The candidate is try to leave the browser\"\n      )\n    );\n\n    // prevent the right-click\n    document.addEventListener(\"contextmenu\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n    });\n  }\n\n  componentWillUnmount = () => {\n    this.props.socket.socket.off(ExamEvents.START_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.STOP_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_CONTINUE_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_RESTART_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_WARNING_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_STOP_EXAM_CLIENT);\n  };\n\n  // ***************************************************************************\n\n  /**\n   * @description define wheter the exam has started or not\n   * @param state boolean\n   */\n  examStart = (state: boolean) => {\n    if (state === true) {\n      // start exam\n      this.setState({\n        request_fullScreen: true,\n        exit_fullScreen: false,\n      });\n\n      this.props.FC_MeStartStopExam(true);\n      this.props.startExam();\n    } else {\n      // stop exam mode\n      this.setState({\n        request_fullScreen: false,\n        exit_fullScreen: true,\n      });\n\n      this.props.FC_MeStartStopExam(false);\n      this.props.stopExam();\n    }\n  };\n\n  closeInfoModal = () =>\n    this.setState({\n      inform_modal: {\n        active: false,\n        description: \"\",\n        title: \"\",\n      },\n    });\n\n  /**\n   * @description Request the fullscreen\n   */\n  requestFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    }\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n  };\n\n  /**\n   * @description Exist the fullscreen\n   */\n  exitFullScreen = () => {\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n    if (document.fullscreenElement) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n\n  /**\n   * @description get all the events and send them to the supervisor\n   * @param event\n   */\n  eventBrodcaster = (type: string, description: string) => {\n    if (this.props.proctoring.exam.start_exam === true) {\n      let event: EventInterface = eventDefiner({\n        description: description,\n        user_id: this.props.auth.user.user_id,\n        done_by: \"System\",\n        room_id: this.props.proctoring.room.room_id,\n        event_type: type,\n      } as eventDefinerInterface);\n\n      // Add event to the reducer\n      this.props.FC_CandidateExamEvent(event);\n      this.props.stopExam();\n\n      this.props.FC_BlockExam(true);\n\n      // send the event on the server\n      this.props.socket.socket.emit(ExamEvents.CAND_EXAM_EVENT_SERVER, event);\n    }\n  };\n\n  render() {\n    //* candidate stopped screen\n    if (\n      this.props.proctoring.me.stopped === true &&\n      this.props.proctoring.exam.start_exam === true\n    ) {\n      let lastEvent: EventInterface | null = null;\n      let events_list = this.props.proctoring.events;\n      if (events_list.length >= 1) {\n        lastEvent = events_list[events_list.length - 1];\n      }\n      return (\n        <div className=\"p-5 mx-auto mt-6 text-center bg-red-100 max-w-lg max-w-2/3 w-full rounded-md animate__bounceIn\">\n          <MdReport className=\"text-9xl text-red-900 inline\" />\n          <h1 className=\"text-2xl text-red-900 font-bold\">\n            You have beed stopped <br /> to continue the exam\n          </h1>\n\n          {lastEvent !== null && (\n            <Fragment>\n              <div className=\"mt-2\">\n                <h5 className=\"text-lg  text-red-800 inline-block\">\n                  You violated the rule of:\n                </h5>\n                <h2 className=\"text-md text-white font-bold bg-red-600 border-4 py-0.5 px-3 rounded-full inline-block ml-2 mx-auto\">\n                  {lastEvent?.event_type}\n                </h2>\n              </div>\n\n              <h3 className=\"text-md text-red-800 mt-3 font-bold\">\n                {lastEvent?.description}\n              </h3>\n            </Fragment>\n          )}\n\n          <div className=\"mt-5 border-t border-red-900 border-opacity-50 text-sm text-red-900 text-opacity-80 pt-3 mx-5\">\n            <b>The exam will be saved from where you left off,</b> <br />\n            You can explain the situation to the supervisor <br /> If your\n            reasons are clear you will be gived another chance\n          </div>\n        </div>\n      );\n    }\n\n    //* Request for the full screen\n    if (this.state.request_fullScreen === true) {\n      return (\n        <div className=\"bg-green-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreenExit className=\"text-9xl inline text-green-600 opacity-50\" />\n            <h1 className=\"text-3xl text-green-500 font-bold\">\n              Go Full-Screen mode{\" \"}\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              You need to go in <b>Full-screen mode</b>, in order to get a good\n              experience (Important)\n            </p>\n            <button\n              className=\" bg-green-600 hover:bg-green-800 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.requestFullScreen()}\n            >\n              Yes, go full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    //* Exit for the full screen\n    if (this.state.exit_fullScreen === true) {\n      return (\n        <div className=\"bg-blue-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreen className=\"text-9xl inline text-blue-600 opacity-50\" />\n            <h1 className=\"text-3xl text-blue-600 font-bold\">\n              Quit Full-Screen mode\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              Exam is completed, you can quit the <b>Fullscreen mode</b>\n              (optional)\n            </p>\n            <button\n              className=\" bg-blue-600 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.exitFullScreen()}\n            >\n              Exit full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Fragment>\n        {this.state.inform_modal.active === true && (\n          <InformationModal\n            title={this.state.inform_modal.title}\n            description={this.state.inform_modal.description}\n            close={this.closeInfoModal}\n          />\n        )}\n\n        {this.props.children}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; proctoring: Proctoring; auth: Auth } => {\n  return { socket: socket, auth, proctoring };\n};\n\nexport const ProctoringCandidateOnline = connect(mapStateToProps, {\n  eventDefiner,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n})(_ProctoringCandidateOnline);\n","import React from 'react'\nimport { BiChat } from 'react-icons/bi'\nimport { IoNotifications } from 'react-icons/io5'\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList'\nimport { exam_question } from '../../../interfaces/exam_question';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface FooterInterface {\n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  let selectedIndexNext: number = props.selectedQuestion ? \n  parseInt(props.selectedQuestion.question_id) > 0 && \n  parseInt(props.selectedQuestion.question_id) < psychometric_questions_list.length ? \n  parseInt(props.selectedQuestion.question_id)-1 : -1 : 0;\n\n  let selectedIndexPrevious: number = props.selectedQuestion ? \n  parseInt(props.selectedQuestion.question_id) > 1 ? \n  parseInt(props.selectedQuestion.question_id)-1 : psychometric_questions_list.length : -1;\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {console.log(\"Selected: \", selectedIndexNext)}\n      <div className=\"flex flex-row items-center\">\n        <div onClick={() => props.setProfileWindowStatus(!props.windowStatus.profile)} \n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}>\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div className=\"animate-bounce bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\" style={{position: 'relative', top: '-10px', right: '-12px'}}>02</div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && \n          <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">New events <br/>are available</div>}\n        </div>\n\n        <button \n        onClick={() => props.setSelectedQuestion(psychometric_questions_list[selectedIndexPrevious-1])}\n        className=\"btn btn-blue flex justify-center items-center\" style={{height: 'fit-content'}}><MdChevronLeft className=\"text-xl\" /> <span className=\"hidden md:block\">Previous</span></button>\n\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">Question {props.selectedQuestion && props.selectedQuestion.question_id}</span>\n          <span className=\"text-xs\">Auto save is activated</span>\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><FiVolume2 className=\"text-2xl\" /></div> */}\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><FaMicrophone className=\"text-xl\" />&nbsp; Request to speak</div> */}\n        <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div>\n        <button \n        onClick={() => props.setSelectedQuestion(psychometric_questions_list[selectedIndexNext+1])}\n        className=\"btn btn-blue flex items-center\"><span className=\"hidden md:block\">Next</span> <MdChevronRight className=\"text-xl\" /></button>\n      </div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst Footer = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_Footer);\n\nexport default Footer;","import React from 'react'\nimport { IoClose } from 'react-icons/io5';\nimport userImage from '../../../assets/profile.png'\n\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  const Events = [1,2,3,4,5,6,7,8,9,0,3,231,45,534,6,3,534,6,3,12,5,6,7,8,9,0,3,231,45,534,6,3,12,5];\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose onClick={() => props.setProfileWindowStatus(false)} className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\" />\n              </div>\n            </div>\n            <div className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\" style={{width: '200px', height: '200px'}}>\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">{props.auth.user.fname} {props.auth.user.lname}</span>\n            <span className=\"text-gray-400 text-xs\">ID: {props.auth.user.n_id}</span>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>23</span>\n          </div>\n          <div className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\" style={{paddingBottom: '550px', paddingTop: '10px'}}>\n            {Events.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-row justify-between items-center text-red-300 my-1\">\n                <span>{i + 1}</span>\n                <span>Copied from external</span>\n                <span>2min</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n}: StoreState): { todos: Todo[]; auth: Auth; } => {\n  return { todos: todos, auth: auth, };\n};\n\nconst Profile = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n})(_Profile);\n\nexport default Profile;","export default __webpack_public_path__ + \"static/media/uk-flag.4ac2ebea.jpg\";","import React from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md';\nimport { question_answer } from '../../../interfaces/index';\nimport { newAnswer } from '../DoExam';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question';\nimport UK_ICON from \"../../../assets/uk-flag.jpg\";\nimport { VscTriangleDown } from 'react-icons/vsc';\n\ninterface QuestionDetailsProps {\n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (question_id: string, answer: question_answer) => void;\n  questionAnswers: newAnswer[] | undefined;\n  auth: Auth;\n  doExam: examDataInterface;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"h-8 w-8 bg-gray-500 flex justify-center items-center text-white rounded-full px-3 py-2\">{props.selectedQuestion !== null && props.selectedQuestion.question_id}</div>\n              <div className=\"flex flex-row justify-between w-full\">\n                <div className=\"text-md flex flex-col\">\n                  <span className=\"font-bold\">{props.selectedQuestion !== null && props.selectedQuestion.question_description}</span>\n                  <span className=\"italic text-xs\">Choose the correct answer\n                  </span>\n                </div>\n                <div className=\"flex flex-col bg-white px-3 py-1 justify-center items-center rounded hover:bg-blue-100 border border-white hover:border-blue-500 cursor-pointer\">\n                  <div className=\"flex flex-row gap-2 items-center\">\n                    <span className=\"font-bold text-blue-600\">ENG </span>\n                    <span><img src={UK_ICON} alt=\"\" className=\"h-4\" /></span>\n                    <VscTriangleDown />\n                  </div>\n                </div>\n              </div>\n          </div>\n          <div className=\"my-4 mx-3 py-2 px-2 bg-white rounded\">\n            {props.selectedQuestion !== null &&\n            props.selectedQuestion.question_answers.map((item) => (\n              <div onClick={() => props.answerQuestionFn(props.selectedQuestion!.question_id, item)} className={`px-2 py-2 border-b ${props.questionAnswers !== undefined && props.questionAnswers.length > 0 ? props.questionAnswers.find(itm => itm.question_id === props.selectedQuestion?.question_id)?.user_answers?.answer === item.answer ? \"bg-blue-600 border-blue-500 text-blue-100 hover:bg-blue-800\" : \"bg-white border-gray-100 hover:bg-gray-300\" : \"\"} flex flex-row justify-left items-center rounded cursor-pointer`}>\n                {props.questionAnswers !== undefined && props.questionAnswers.length > 0 ? props.questionAnswers.find(itm => itm.question_id === props.selectedQuestion?.question_id)?.user_answers?.answer === item.answer ? <MdRadioButtonChecked className=\"text-2xl\" /> : <MdRadioButtonUnchecked className=\"text-2xl\" /> : <MdRadioButtonUnchecked className=\"text-2xl\" />}\n                <span className=\"ml-2\">{item.answer}</span>\n              </div>\n            ))}\n          </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n})(_QuestionDetails);\n\nexport default QuestionDetails;","import React, { Fragment } from 'react'\nimport { useState } from 'react'\nimport { IoDocumentTextOutline } from 'react-icons/io5'\nimport { MdArrowBack, MdCheckCircle, } from 'react-icons/md'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList'\nimport { newAnswer } from '../DoExam'\nimport Modal, { Themes, ModalSize } from '../../../components/Modal/Modal'\nimport { RiErrorWarningFill } from 'react-icons/ri'\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  SubmitExamAnswers\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question'\n\ninterface TestTitleInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  setSelectedQuestion: (question: exam_question) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  doExam: examDataInterface;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n  const answeredPercentage = props.doExam.exam_answers ? (props.testAnswers*100)/props.doExam.exam_answers?.exam_questions.length : 0;\n  const submitExam = (allQuestions: exam_question[], answeredQuestions: newAnswer[]) => {\n    let incomplete:exam_question[] = [];\n    for (let i in allQuestions) {\n      let itm = answeredQuestions.find(item => item.question_id === allQuestions[i].question_id) && allQuestions[i];\n      console.log(itm)\n      if (itm === undefined) {\n        incomplete.push(allQuestions[i])\n      }\n    }\n    setIncompleteQuestions(incomplete);\n    setSubmitModal(true);\n  }\n  return (\n    <Fragment>\n    <div className=\"bg-blue-900\">\n      {console.log(\"Incompleted questions: \", incompleteQuestions)}\n      <div className=\"grid grid-cols-6\">\n        <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n          <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0\">\n            <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n            <span className=\"font-bold mr-3 text-xl ml-1 lg:ml-3\">Exam</span>\n          </div>\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-4\" style={{alignSelf: \"center\"}}>\n          <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n            <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n              <div className=\"text-blue-200 text-xs w-full hidden lg:block\">Completed {props.testAnswers} of {props.doExam.exam_answers?.exam_questions.length}</div>\n              <div className=\"bg-blue-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                <div className=\"bg-blue-400 h-3 w-60 rounded-full shadow-md\" style={{width: `${answeredPercentage}%`}}></div>\n              </div>\n              <div className=\"h-auto my-2 w-full bg-blue-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                <div className=\"rounded-full bg-blue-500 h-full text-xs flex items-center justify-center font-bold text-white\" style={{width: `${answeredPercentage}%`}}>\n                  <div className=\"relative left-0 bg-blue-500 px-1 rounded-full\">{answeredPercentage}%</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-4 hidden lg:block h-full\">\n              <div className=\"flex flex-row justify-center items-center h-full\">\n                <div className=\"flex flex-col text-xs justify-start items-start text-blue-200\">\n                  <span>Start at: 12h:00 am</span>\n                  <span>End at: 16h:00 am</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-5 bg-blue-900\">\n              <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                <div className=\"flex flex-col text-xs justify-start items-center text-blue-200 pl-2 md:pl-0\">\n                  <span>Counting down</span>\n                  <span className=\"text-lg lg:text-xl font-bold\">12:00:00</span>\n                </div>\n                <button onClick={() => {props.answeredQuestions !== undefined && submitExam(psychometric_questions_list, props.answeredQuestions)}} type=\"button\" className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\">\n                  <MdCheckCircle className=\"text-white text-xl\" />\n                  <span>Submit</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {submitModal === true && \n    <Modal\n      title={<div className={`${incompleteQuestions.length === 0 ? \"text-blue-600\" : \"text-gray-800\"} font-bold text-2xl`}>Examination results submission</div>}\n      backDrop={true}\n      theme={incompleteQuestions.length === 0 ? Themes.default : Themes.default}\n      close={() => setSubmitModal(false)}\n      backDropClose={false}\n      widthSizeClass={ModalSize.large}\n      displayClose={true}\n      padding={{title: true,}} >\n        <div className=\"pt-4 border-t border-gray-300\">\n          {incompleteQuestions.length !== 0 ? \n          <div>\n            <div className=\"grid md:grid-cols-2\">\n              <div className=\"md:col-span-1\">\n                <div className=\"flex flex-col justify-center items-center mx-4 mb-3 rounded bg-gray-200 px-2 py-2\">\n                  <RiErrorWarningFill className=\"text-8xl text-gray-400\" />\n                  <div className=\"text-xl text-gray-700 font-bold mb-2 text-center\">There are incomplete questions</div>\n                  <div className=\"text-gray-600 text-xs text-center pb-2\">Please, make sure to complete the following remaining questions which are not yet answered. Please, if you proceed anyway, for these questions, you will not be marked!</div>\n                </div>\n              </div>\n              <div className=\"md:col-span-1\">\n                <div className=\" mr-3\">\n                  <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded\">\n                    <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div>\n                    <div className=\"text-xs text-center mb-5 mt-1 text-gray-600\">Choose a question number you want to answer directly</div>\n                    <div className=\"flex flex-row items-center justify-center gap-3\">\n                      {incompleteQuestions.map((item, i) => (\n                        <div onClick={() => { props.setSelectedQuestion(item); setSubmitModal(false) }} key={i + 1} className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\">{item.question_id}</div>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row items-center justify-between mt-5 gap-3\">\n                    <div></div>\n                    <div onClick={() => setSubmitModal(false)} className=\"bg-gray-500 text-white flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-900\">Go back</div>\n                    {/* <div className=\"bg-blue-600 text-white flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-500\">Confirm submission</div> */}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n          : \n          <div className=\"px-4 pb-2\">\n            <div className=\"text-sm text-gray-500\">Hey <b>{props.auth.user.fname}</b>, All questions have been answered, are you sure do you want to submit the final answers?</div>\n            \n            <div className=\"my-2\">\n              <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Test your answers</div>\n              <div className=\"flex flex-col gap-3\">\n                {psychometric_questions_list.map((item, i) => (\n                  <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                    <div className=\"grid md:grid-cols-12 w-full\">\n                      <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                        <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                        <div className=\"text-sm\">\n                          <div>{item.question_description}</div>\n                          <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                            {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-span-2 float-right flex items-center justify-end\">\n                        <div onClick={() => { props.setSelectedQuestion(item); setSubmitModal(false) }} className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\">Edit</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 my-4 gap-4\">\n              <div onClick={() => setSubmitModal(false)} className=\"col-span-1 bg-white text-gray-700 flex items-center justify-center rounded px-5 py-2 cursor-pointer hover:bg-gray-200 hover:text-black border border-gray-400 hover:shadow-xs\">\n                <div className=\"flex flex-col justify-center items-center\">\n                  <MdArrowBack className=\"text-5xl\" />\n                  <span className=\"text-lg\">Back edit</span>\n                </div>\n              </div>\n              <div onClick={() => { setSubmitModal(false); props.setCompletedTest(true); props.SubmitExamAnswers(props.auth.user.n_id); }} className=\"col-span-1 bg-blue-100 text-blue-600 flex items-center justify-center rounded px-5 py-2 cursor-pointer hover:bg-blue-600 hover:text-white border border-blue-300 hover:shadow-lg\">\n                <div className=\"flex flex-col justify-center items-center\">\n                  <MdCheckCircle className=\"text-5xl\" />\n                  <span className=\"text-lg\">Submit test</span>\n                </div>\n              </div>\n            </div>\n          </div>}\n        </div>\n    </Modal>}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  SubmitExamAnswers\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React from 'react'\nimport { MdWarning } from 'react-icons/md'\nimport { Link } from 'react-router-dom'\n\nconst CancelErrorMessage = () => {\n  return (\n    <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n        <div className=\"bg-white mt-5 rounded px-3 md:px-5 py-3 md:py-5 shadow border-2 border-red-500\">\n          <div className=\"flex flex-row gap-5\">\n            <MdWarning className=\"text-8xl\" />\n            <div className=\"flex flex-col\">\n              <span className=\"text-6xl font-bold\">Exam stopped</span>\n              <span className=\"text-xl\">You are out of exam, you violated examination rules. to contact the supervisor, <Link to=\"/do-exam\" className=\"bg-blue-100 px-3 py-1 border border-blue-300 text-blue-600\">click here</Link></span>\n            </div>\n          </div>\n        </div>\n    </div>\n  )\n}\n\nexport default CancelErrorMessage\n","import React, { Component } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { question_answer } from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport { ExamInterface, examStatus } from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport CancelErrorMessage from \"./Cancel/CancelErrorMessage\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\n\ninterface DoExamProps {\n  currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // getUserAnswer: Function;\n  // addAnswer: (questionAnswer: newAnswer) => addUsersAnswers;\n  // SubmitAnswers: Function;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n    };\n  }\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (question_id: string, answer: question_answer) => {\n    console.log(\"Input: \", {\n      question_id: question_id,\n      user_answers: answer,\n    });\n    let current: newAnswer[] =\n      this.state.testAnswers.length > 0\n        ? this.state.testAnswers.filter(\n            (itm) => itm.question_id !== question_id\n          )\n        : this.state.testAnswers;\n    current.push({\n      question_id: question_id,\n      user_answers: answer,\n    });\n    this.setState({\n      testAnswers: current,\n    });\n    for (let i in current) {\n      this.props.addExamAnswer(current[i]);\n    }\n\n    console.log(\"Answers: \", this.state.testAnswers);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n    // this.props.ChangeExamStatus(this.props.auth.user.user_id, examStatus.Editing);\n  };\n\n  render() {\n    if (this.props.doExam.exam_answers) {\n      if (!this.props.doExam.exam_answers.exam_id) {\n        return <Redirect to=\"/dashboard\" />;\n      } else if (this.props.doExam.exam_answers.status === examStatus.Done) {\n        if (\n          this.state.completedTest === false ||\n          this.props.doExam.exam_answers?.exam_questions_answers\n            ?.questionAnswers === null\n        ) {\n          return <Redirect to=\"/dashboard\" />;\n        }\n      } else if (\n        this.props.doExam.exam_answers.status === examStatus.Canceled\n      ) {\n        return <CancelErrorMessage />;\n      }\n      console.log(\"Exam status\", this.props.doExam.exam_answers.status);\n    } else {\n      return <Redirect to=\"/dashboard\" />;\n    }\n\n    return (\n      <ProctoringCandidateOnline\n        startExam={() => {\n          // this.props.ChangeExamStatus(this.props.auth.user.user_id, examStatus.Editing)\n        }}\n        restartExam={() => {\n          // this.initializeEmptyList()\n        }}\n        stopExam={() => {\n          // this.props.ChangeExamStatus(this.props.auth.user.user_id, examStatus.Canceled)\n        }}\n      >\n        {this.state.completedTest === true &&\n        this.props.doExam.exam_answers?.exam_questions_answers\n          ?.questionAnswers !== null ? (\n          <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n            <DoExamResults\n              page=\"doExam\"\n              answeredQuestions={\n                this.props.doExam.exam_answers?.exam_questions_answers\n                  ?.questionAnswers\n              }\n              testAnswers={\n                this.props.doExam.exam_answers?.exam_questions_answers\n                  ?.questionAnswers.length === undefined\n                  ? 0\n                  : this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers.length\n              }\n            />\n          </div>\n        ) : (\n          <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n            <div className=\"grid md:grid-cols-12 h-full\">\n              {this.state.windowStatus.profile === true && (\n                <div\n                  className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                >\n                  <Profile\n                    setProfileWindowStatus={this.setProfileWindowStatus}\n                  />\n                </div>\n              )}\n              <div\n                className={`col-span-${\n                  this.state.windowStatus.profile === false ? \"12\" : \"10\"\n                } bg-gray-800 shadow-lg h-full`}\n              >\n                <div className=\"flex flex-row h-screen bg-gray-800\">\n                  <div className=\"h-full\">\n                    {/* Questions list */}\n                    <div className={`h-full`}>\n                      <QuestionsList\n                        answeredQuestions={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers\n                        }\n                        testAnswers={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers.length === undefined\n                            ? 0\n                            : this.props.doExam.exam_answers\n                                ?.exam_questions_answers?.questionAnswers.length\n                        }\n                        windowStatus={this.state.windowStatus}\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                        setQuestionsListWindowStatus={\n                          this.setQuestionsListWindowStatus\n                        }\n                        selectedQuestion={this.state.selectedQuestion}\n                        setSelectedQuestion={this.setSelectedQuestion}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"w-full h-full\">\n                    {/* Do exam test title */}\n                    <DoExamTitle\n                      setCompletedTest={this.setCompletedTest}\n                      answeredQuestions={\n                        this.props.doExam.exam_answers?.exam_questions_answers\n                          ?.questionAnswers\n                      }\n                      testAnswers={\n                        this.props.doExam.exam_answers?.exam_questions_answers\n                          ?.questionAnswers.length === undefined\n                          ? 0\n                          : this.props.doExam.exam_answers\n                              ?.exam_questions_answers?.questionAnswers.length\n                      }\n                      // currentPosition={this.props.currentPosition}\n                      // setCurrentPosition={this.props.setCurrentPosition}\n                      // setApplicationStep={this.props.setApplicationStep}\n                      windowStatus={this.state.windowStatus}\n                      setProfileWindowStatus={this.setProfileWindowStatus}\n                      setQuestionsListWindowStatus={\n                        this.setQuestionsListWindowStatus\n                      }\n                      setSelectedQuestion={this.setSelectedQuestion}\n                    />\n                    {/* Question details */}\n                    <QuestionDetails\n                      questionAnswers={\n                        this.props.doExam.exam_answers?.exam_questions_answers\n                          ?.questionAnswers\n                      }\n                      answerQuestionFn={this.answerQuestionFn}\n                      // currentPosition={this.props.currentPosition}\n                      // setCurrentPosition={this.props.setCurrentPosition}\n                      // setApplicationStep={this.props.setApplicationStep}\n                      selectedQuestion={this.state.selectedQuestion}\n                      setSelectedQuestion={this.setSelectedQuestion}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <Footer\n              selectedQuestion={this.state.selectedQuestion}\n              setSelectedQuestion={this.setSelectedQuestion}\n              // currentPosition={this.props.currentPosition}\n              // setCurrentPosition={this.props.setCurrentPosition}\n              // setApplicationStep={this.props.setApplicationStep}\n              windowStatus={this.state.windowStatus}\n              setProfileWindowStatus={this.setProfileWindowStatus}\n              setQuestionsListWindowStatus={this.setQuestionsListWindowStatus}\n            />\n          </div>\n        )}\n      </ProctoringCandidateOnline>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n})(_DoEam);\n"],"sourceRoot":""}