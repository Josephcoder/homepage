{"version":3,"sources":["containers/QuestionBank/AddQuestionManually/AddQuestionManually.tsx","utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","components/Courses/Courses.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["AddQuestionManually","props","unSelectQuestion","alert","state","loading","id","uuidv4","course","question","type","chapters","customNumber","marks","answers","is_deleted","selectedLanguage","QuestionLanguages","showFilter","selectedKey","showQuestionChapters","selectedQuestion","question_id","this","Component","ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","check","find","itm","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","toMultipleChoice","answer","value","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","_UploadQuestion","setLoading","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedEducationCategory","setSelectedSchoolLevel","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","item","period","periods","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","loadCourses","searchCourseInput","className","education_category_title","school_level_name","onChange","e","target","placeholder","onClick","schoolLevels","education_categories","loadEducationCategories","loadSchoolLevels","style","minHeight","searchData","map","setSelectedCourse","selected_course_id","course_name","course_code","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","educationCategories","UploadQuestion","connect","auth","questionBank","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","selectedQuestionItem","QuestionAnswer","data","wholeQuestion","language","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","useState","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","setSelectedKey","lang","checkAns","selectedQL","addAnswerMatchingQuestion","AddAnswer","console","log","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","_id","description","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","window","confirm","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","questionAnswers","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","selectedCourse","setAddChapter","addedChapters","name","ChangeLanguage","languagesList","visible","setVisible","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","langItem","testLangQ","l","QuestionLang","actionStatus","PushPopupAlert","PopupAlertTheme","success","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","a","addedQuestion","UpdateQuestion","addExamQuestion","loadQuestionTypes","setSelectedLang","questionLangs","testing","Loading","LoadingType","white","onSubmit","Modal","large","Courses","selected_course","EditQuestion","system","prepareExam","setUploadedQuestions","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/49.4a8fde95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../interfaces/question\";\nimport EditQuestion, {\n  SelectedKeysEdit,\n} from \"../AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface AddQuestionManuallyProps {}\n\ninterface AddQuestionManuallyState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  is_deleted: boolean;\n}\n\nexport class AddQuestionManually extends Component<\n  AddQuestionManuallyProps,\n  AddQuestionManuallyState\n> {\n  constructor(props: AddQuestionManuallyProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: uuidv4(),\n      course: \"\",\n      question: [],\n      type: \"Invalid\",\n      chapters: [],\n      customNumber: 1,\n      marks: 100,\n      answers: [],\n      is_deleted: false,\n      selectedLanguage: QuestionLanguages[0],\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n    };\n  }\n\n  unSelectQuestion = () => {\n    alert(\"Hello\");\n  };\n\n  render() {\n    return (\n      <div>\n        Add new question\n        <EditQuestion\n          selectedQuestion={{\n            question_id: this.state.id,\n            course: this.state.course,\n            question: this.state.question,\n            type: this.state.type,\n            chapters: this.state.chapters,\n            customNumber: this.state.customNumber,\n            marks: this.state.marks,\n            answers: this.state.answers,\n            is_deleted: this.state.is_deleted,\n          }}\n          unSelectQuestion={this.unSelectQuestion}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AddQuestionManually;\n","import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course !== null && (\n              <QuestionChapters\n                selectedCourse={\n                  this.props.course.courses &&\n                  this.props.course.courses.find(\n                    (itm) => itm.course_id === this.state.course\n                  )\n                }\n                addedChapters={this.state.chapters}\n                setAddChapter={this.setAddChapter}\n              />\n            )}\n            <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n              <div className=\"\"></div>\n              <div\n                className=\"btn bg-blue-600 text-white cursor-pointer\"\n                onClick={() => this.setState({ showQuestionChapters: false })}\n              >\n                Done\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}