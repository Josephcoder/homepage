{"version":3,"sources":["utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","components/AnswersDetails/AnswersDetails.tsx","containers/DoExam/DoExamTitle/FindAnswer.tsx","containers/CandidateExams/CandidateExams.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","toMultipleChoice","answers","answer","value","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","_AnswersDetails","props","setLoading","setState","loading","componentDidMount","questionTypes","loadQuestionTypes","exam_id","user_exams_done","period","DATE","item","exam_paper","requestUserAnswers","auth","user","userAnswersTotalMarks","user_answers","total","user_marks","state","user_exam_details","this","className","dangerouslySetInnerHTML","__html","course_name","discription","termes","map","questions","question_id","question","language","description","selectedLanguage","chapters","customNumber","marks","answersList","showCorrectAnswer","showAnswers","onClick","exam_total_marks","Component","AnswersDetails","connect","candidateApplications","FC_GetProfileDetails","LoadCandidateApplications","setSelectedCandidateExam","setSelectedCourse","setSelectedPosition","AddUserApplication","loadApplicationPeriods","FindAnswer","UserAnswersSel","findQuestionType","questionTypeElementsType","MultipleChoice","userAnswer","SingleMultiple","userAnswerSingle","CalculatedMultipleChoice","userAnswer1","Matching","userAnswerMatch","TrueFalse","userAnswerTureFalse","Numeric","userAnswerNumerical","SimpleCalculate","userAnswerSimpleCalculate","ShortAnswer","userAnswerShortAnswer","compareWithToday","tooday","date","myDate","todayConverted","get","ChangeLocationComponent","useState","display","setDisplay","changeLocation","_CandidateExams","setloadingExamsDone","loadingExamsDone","loadCandidateExams","a","setAxiosToken","axios","API","QBank","candidateExams","data","console","log","alert","errorToText","loadUserProfileDetails","InitializationFn","application","application_session","position","exams","loadUserApplications","APPLICATION","candidate_applications","findLocation","updateLocation","application_id","post","selectedCourse","centersModal","maxExamModal","successMessage","updateLocationFunction","addLocation","course_code","location","proctoring_type","sex","removeDuplicatesExams","temp","_id","removeDuplicatesNotPreparedExams","setTimeOut","temps","activeExams","selectApplication","applications","setMaxExamModal","closeModal","selectedExam","FC_Access","UserAccessList","MY_APPLICATION","view","selected_exam_id","to","title","preparedExam","user_status","center_name","room_number","school_levels","UserExamStatus","Editing","Paused","application_status","ApplicationStates","Shortlisted","Done","Removed","rules","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","positionCourses","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","CandidateExams","periods"],"mappings":"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","file":"static/js/50.5c2d1673.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport {\n  questionType,\n  questionTypeElements,\n  questionTypeElementsType,\n} from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React, { Component } from \"react\";\nimport FindAnswer from \"../../containers/DoExam/DoExamTitle/FindAnswer\";\nimport { ExamAnswerSheetDone } from \"../../interfaces/exam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  requestUserAnswers,\n  loadQuestionTypes,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { DATE } from \"../../utils/functions\";\nimport { AiOutlineFileText } from \"react-icons/ai\";\nimport { ExamDoneDetailsAnswers } from \"../../containers/CandidateExams/CandidateExams\";\n\ninterface AnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n  questionTypes: questionTypesStoreInterface;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n}\ninterface AnswersDetailsState {\n  loading: boolean;\n}\n\nexport class _AnswersDetails extends Component<\n  AnswersDetailsProps,\n  AnswersDetailsState\n> {\n  constructor(props: AnswersDetailsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (this.props.exam_id) {\n      let check = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.course === this.props.exam_id.course &&\n          itm.period === this.props.exam_id.period &&\n          DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n      );\n      if (check !== undefined) {\n        if (\n          this.props.candidateExam.user_exams_done.find(\n            (item) => item.exam_paper === check?.exam_paper\n          ) === undefined\n        ) {\n          this.props.requestUserAnswers(\n            check.exam_paper,\n            this.props.auth.user.user_id,\n            this.setLoading\n          );\n        }\n      }\n    }\n  };\n  userAnswersTotalMarks = (user_answers: ExamAnswerSheetDone) => {\n    let total: number = 0;\n    for (let item of user_answers.user_answers) {\n      total += item.user_marks;\n    }\n    return total;\n  };\n  render() {\n    let user_exam_details: ExamAnswerSheetDone | undefined =\n      this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.course === this.props.exam_id.course &&\n          itm.period === this.props.exam_id.period &&\n          DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n      );\n    return (\n      <div className=\"p-2 bg-gray-100\">\n        <div className=\"mb-5 -mt-5\">\n          {user_exam_details !== undefined && (\n            <div className=\"mt-5\">\n              <div className=\"px-3 mb-2 flex flex-row items-center gap-3\">\n                <div>\n                  <AiOutlineFileText className=\"text-5xl text-gray-500\" />\n                </div>\n                <div\n                  className=\"text-2xl font-extrabold\"\n                  dangerouslySetInnerHTML={{\n                    __html: \"Exam for \" + this.props.exam_id.course_name,\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white rounded-t mb-0 border-b\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam date:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: DATE(this.props.exam_id.exam_date),\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white mb-0 border-b\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam description:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.exam_id.discription,\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white rounded-b mb-0\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam terms and conditions:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.exam_id.termes,\n                  }}\n                ></div>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"text-2xl font-extrabold text-blue-600 px-2 mb-3\">\n          Exam answers & marks\n        </div>\n        {user_exam_details === undefined\n          ? \"Not Found\"\n          : user_exam_details.user_answers.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"bg-white hover:bg-white border border-white hover:border-blue-400 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast group mb-2\"\n              >\n                <div className=\"grid md:grid-cols-11 w-full\">\n                  <div className=\"col-span-12 flex flex-row items-center gap-3\">\n                    <div\n                      key={i + 1}\n                      className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\"\n                    >\n                      {i + 1}\n                    </div>\n                    {user_exam_details &&\n                      user_exam_details.questions.find(\n                        (itm) => itm.question_id === item.question\n                      ) !== undefined && (\n                        <div className=\"text-sm w-full\">\n                          <div\n                            className=\"font-bold text-gray-700 text-base\"\n                            dangerouslySetInnerHTML={{\n                              __html: user_exam_details.questions\n                                .find(\n                                  (itm) => itm.question_id === item.question\n                                )!\n                                .question.find(\n                                  (test) => test.language === item.language\n                                )!.description,\n                            }}\n                          ></div>\n                          <div className=\"text-blue-700 font-bold text-sm w-full\">\n                            Answer:&nbsp;{\" \"}\n                            {this.props.questionTypes.questionTypes !== null &&\n                              user_exam_details.user_answers.find(\n                                (itm) => itm.question === item.question\n                              ) && (\n                                <div className=\"mb-2\">\n                                  <FindAnswer\n                                    selectedLanguage={item.language}\n                                    question={{\n                                      question_id: item.question,\n                                      course: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.course,\n                                      question:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.question,\n                                      type: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.type,\n                                      chapters:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.chapters,\n                                      customNumber:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.customNumber,\n                                      marks: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.marks,\n                                      answer: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.answer,\n                                    }}\n                                    answersList={[\n                                      {\n                                        question_id: item.question,\n                                        status: true,\n                                        answer:\n                                          user_exam_details.user_answers.find(\n                                            (itm) =>\n                                              itm.question === item.question\n                                          )!.answer,\n                                      },\n                                    ]}\n                                    questionTypes={\n                                      this.props.questionTypes.questionTypes\n                                    }\n                                    showCorrectAnswer={this.props.showAnswers}\n                                    onClick={() => {}}\n                                  />\n                                </div>\n                              )}\n                          </div>\n                        </div>\n                      )}\n                  </div>\n                </div>\n                <div className=\"col-span-1 flex items-center justify-between\">\n                  <div></div>\n\n                  <div className=\"w-max flex flex-col items-end justify-center border border-blue-400 rounded-md px-2\">\n                    <div className=\"text-sm font-normal text-gray-600\">\n                      Marks\n                    </div>\n                    <div className=\"text-base font-extrabold text-gray-900 -mt-1\">\n                      <span className=\"text-blue-500\">\n                        {item.user_marks.toFixed(2)}\n                      </span>{\" \"}\n                      /{\" \"}\n                      {user_exam_details &&\n                        user_exam_details.questions.find(\n                          (itm) => itm.question_id === item.question\n                        )?.marks}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n        <div className=\"flex flex-row items-center justify-between gap-3 mb-10\">\n          <div className=\"bg-blue-100 p-3 pr-3 text-blue-700 flex flex-col items-start justify-center rounded-lg border-2 border-white\">\n            <span className=\"text-gray-700\">Total marks percentage</span>\n            <span className=\"text-3xl font-extrabold\">\n              {user_exam_details && user_exam_details.total_marks.toFixed(2)}%\n            </span>\n          </div>\n          <div>\n            <div className=\"bg-white rounded-lg p-3\">\n              <div className=\"text-gray-500 font-bold text-base text-right\">\n                Exam total marks\n              </div>\n              {user_exam_details !== undefined && (\n                <div className=\"font-extrabold text-3xl text-gray-900 text-right\">\n                  {this.userAnswersTotalMarks(user_exam_details).toFixed(2)} /{\" \"}\n                  {user_exam_details.exam_total_marks}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    questionTypes: questionTypes,\n  };\n};\n\nexport const AnswersDetails = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  requestUserAnswers,\n  loadQuestionTypes,\n})(_AnswersDetails);\n","import React from \"react\";\nimport {\n  BsCheckSquareFill,\n  BsCheckCircleFill,\n  BsArrowRightSquareFill,\n  BsArrowRightCircleFill,\n} from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionInterface,\n  questionType,\n  questionTypeElementsType,\n  TrueFalseQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  QuestionLanguage,\n  LanguageInterface,\n} from \"../../../interfaces\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../QuestionDetails/ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\n\ninterface FindAnswerProps {\n  question: QuestionInterface;\n  answersList: QuestionAnswersStore[];\n  selectedLanguage: QuestionLanguage | LanguageInterface;\n  questionTypes: questionType[];\n  showCorrectAnswer: boolean;\n  onClick: () => void;\n}\n\nconst FindAnswer = (props: FindAnswerProps) => {\n  const answer = props.answersList.find(\n    (item) => item.question_id === props.question.question_id\n  );\n  const UserAnswersSel = props.question.question.find(\n    (itm) => itm.language === props.selectedLanguage\n  );\n  if (answer === undefined || UserAnswersSel === undefined) {\n    return (\n      <div className=\"text-yellow-600 font-extrabold text-2xl text-center\">\n        No answer found!\n      </div>\n    );\n  } else {\n    switch (findQuestionType(props.question.type, props.questionTypes)) {\n      case questionTypeElementsType.MultipleChoice:\n        const userAnswer: MultipleChoiceQuestionAnswerInterface[] =\n          toMultipleChoice(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswer\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl text-blue-600\">\n                    <BsCheckSquareFill />\n                  </div>\n                  <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl text-blue-600\">\n                          <BsCheckSquareFill />\n                        </div>\n                        <div\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.SingleMultiple:\n        const userAnswerSingle: MultipleChoiceQuestionAnswerInterface[] =\n          toMultipleChoice(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerSingle\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl text-blue-600\">\n                    <BsCheckCircleFill />\n                  </div>\n                  <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl text-blue-600\">\n                          <BsCheckCircleFill />\n                        </div>\n                        <div\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case questionTypeElementsType.CalculatedMultipleChoice:\n        const userAnswer1: CalculatedMultipleChoiceQuestionAnswerInterface[] =\n          toCalculatedMultipleChoice(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswer1\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl text-blue-600\">\n                    <BsCheckSquareFill />\n                  </div>\n                  <div className=\"text-base font-normal text-gray-500\">\n                    {item.value.length > 1 ? (\n                      <>\n                        Between{\" \"}\n                        <span className=\"underline text-gray-600 font-extrabold\">\n                          {item.value[0]}\n                        </span>{\" \"}\n                        and{\" \"}\n                        <span className=\"underline text-gray-600 font-extrabold\">\n                          {item.value[1]}\n                        </span>\n                      </>\n                    ) : (\n                      <span className=\"text-gray-700\">\n                        {item.value[0].toString()}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl text-blue-600\">\n                          <BsCheckSquareFill />\n                        </div>\n                        <div className=\"text-base font-normal text-gray-500\">\n                          {item.value.length > 1 ? (\n                            <>\n                              Between{\" \"}\n                              <span className=\"underline text-blue-600 font-extrabold\">\n                                {item.value[0]}\n                              </span>{\" \"}\n                              and{\" \"}\n                              <span className=\"underline text-blue-600 font-extrabold\">\n                                {item.value[1]}\n                              </span>\n                            </>\n                          ) : (\n                            <span className=\"text-blue-600\">\n                              {item.value[0].toString()}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case questionTypeElementsType.Matching:\n        const userAnswerMatch: MatchingQuestionAnswerInterface[] = toMatching(\n          answer.answer\n        );\n        return (\n          <div className=\"w-full\">\n            {userAnswerMatch.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n              >\n                <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                  <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                    {i + 1}\n                  </div>\n                </div>\n                <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                  <div\n                    className=\"w-full mt-3 lg:mb-0\"\n                    dangerouslySetInnerHTML={{ __html: item.value }}\n                  ></div>\n                  <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                    <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                      <BsArrowRightSquareFill />\n                    </div>\n                    <div\n                      className=\"w-full mr-2\"\n                      dangerouslySetInnerHTML={{ __html: item.status }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n                    >\n                      <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                        <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                          {i + 1}\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                        <div\n                          className=\"w-full mt-3 lg:mb-0\"\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                        <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                          <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                            <BsArrowRightSquareFill />\n                          </div>\n                          <div\n                            className=\"w-full mr-2\"\n                            dangerouslySetInnerHTML={{ __html: item.status }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.TrueFalse:\n        const userAnswerTureFalse: TrueFalseQuestionAnswerInterface[] =\n          toTrueFalse(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerTureFalse\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl\">\n                    <BsArrowRightCircleFill />\n                  </div>\n                  <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl\">\n                          <BsArrowRightCircleFill />\n                        </div>\n                        <div\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.Numeric:\n        const userAnswerNumerical: NumericalQuestionAnswerInterface[] =\n          toNumerical(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerNumerical.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div className=\"text-gray-600 text-base font-normal\">\n                  {item.value.length > 1 ? (\n                    <>\n                      Between{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[0]}\n                      </span>{\" \"}\n                      and{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[1]}\n                      </span>\n                    </>\n                  ) : (\n                    item.value.length > 0 && (\n                      <span className=\"text-gray-700\">\n                        {item.value[0].toString()}\n                      </span>\n                    )\n                  )}\n                </div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div className=\"text-gray-600 text-base font-normal\">\n                        {item.value.length > 1 ? (\n                          <>\n                            Between{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0] - item.value[1]}\n                            </span>{\" \"}\n                            and{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0] + item.value[1]}\n                            </span>\n                          </>\n                        ) : (\n                          item.value.length > 0 && (\n                            <span className=\"text-blue-700\">\n                              {item.value[0].toString()}\n                            </span>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.SimpleCalculate:\n        const userAnswerSimpleCalculate: SimpleCalculatedQuestionAnswerInterface[] =\n          toSimpleCalculated(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerSimpleCalculate.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div className=\"text-gray-600 text-base font-normal\">\n                  {item.value.length > 1 ? (\n                    <>\n                      Between{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[0]}\n                      </span>{\" \"}\n                      and{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[1]}\n                      </span>\n                    </>\n                  ) : (\n                    item.value.length > 0 && (\n                      <span className=\"text-gray-700\">\n                        {item.value[0].toString()}\n                      </span>\n                    )\n                  )}\n                </div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div className=\"text-gray-600 text-base font-normal\">\n                        {item.value.length > 1 ? (\n                          <>\n                            Between{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0]}\n                            </span>{\" \"}\n                            and{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[1]}\n                            </span>\n                          </>\n                        ) : (\n                          item.value.length > 0 && (\n                            <span className=\"text-blue-700\">\n                              {item.value[0].toString()}\n                            </span>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.ShortAnswer:\n        const userAnswerShortAnswer: ShortAnswerQuestionAnswerInterface[] =\n          toShortAnswer(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerShortAnswer.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: item.value,\n                  }}\n                ></div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: item.value,\n                        }}\n                      ></div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      default:\n        return <div className=\"text-blue-600 font-extrabold\">Answer added</div>;\n    }\n  }\n};\n\nexport default FindAnswer;\n","import React, { Component, Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI, PositionAPICourse } from \"../../interfaces\";\nimport {\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\nimport { MdClose } from \"react-icons/md\";\nimport ChooseExamCenter, {\n  LocationTableInterface,\n} from \"../Application/ExamCenter/ChooseExamCenter\";\nimport { sentExamInterface } from \"../Application/ExamCenter/ExamCenter\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { AnswersDetails } from \"../../components/AnswersDetails/AnswersDetails\";\n\nexport const compareWithToday = (tooday: moment.Moment, date: string) => {\n  const myDate = DATE(date, \"MM/DD/YYYY\");\n  let todayConverted =\n    (tooday.get(\"month\") < 9 ? \"0\" : \"\") +\n    (tooday.get(\"month\") + 1).toString() +\n    \"/\" +\n    tooday.get(\"date\") +\n    \"/\" +\n    tooday.get(\"year\");\n  if (new Date(myDate).getTime() < new Date(todayConverted).getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport interface ExamDoneDetailsAnswers {\n  course: string;\n  course_name: string;\n  discription: string;\n  termes: string;\n  rules: {\n    right_click_enabled: boolean;\n    copy_enabled: boolean;\n    paste_enabled: boolean;\n    stop_candidate_when_comeback: boolean;\n    allow_to_leave_browser: boolean;\n  };\n  period: string;\n  exam_date: string;\n}\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface changeLocProps {\n  changeLocation: () => void;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (exam_id: string) => void;\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\n\nconst ChangeLocationComponent = (props: changeLocProps): JSX.Element => {\n  const [display, setDisplay] = useState<boolean>(true);\n  if (display === false) {\n    return <div></div>;\n  }\n  return (\n    <div className=\"absolute right-2 left-2 md:right-1/4 md:left-1/4 lg:left-1/2 lg:right-auto bg-yellow-50 shadow-xl rounded py-1 px-1 flex flex-row justify-between items-center gap-2 text-yellow-800 -mt-5 lg:-mt-8\">\n      <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-1\">\n        <span className=\"font-bold\">You are advised to change location</span>\n        <div\n          onClick={props.changeLocation}\n          className=\"px-2 py-1 rounded bg-blue-100 text-blue-600 w-max cursor-pointer\"\n        >\n          Change\n        </div>\n      </div>\n      <div\n        onClick={() => setDisplay(false)}\n        className=\"bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center p-1 h-8 w-8 cursor-pointer\"\n      >\n        <MdClose className=\"text-4xl\" />\n      </div>\n    </div>\n  );\n};\n\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  loadingExamsDone: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n  selectedCourse: course | null;\n  centersModal: boolean;\n  maxExamModal: boolean;\n  selectedPosition: string;\n  successMessage: string;\n  selectedExam: ExamDoneDetailsAnswers | null;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingExamsDone: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n      selectedCourse: null,\n      centersModal: false,\n      maxExamModal: false,\n      selectedPosition: \"\",\n      successMessage: \"\",\n      selectedExam: null,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setloadingExamsDone = (status: boolean) => {\n    this.setState({ loadingExamsDone: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      // console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  InitializationFn = (application: GetApplicationsAPI) => {\n    if (this.props.candidateExam.user_exams_done.length === 0) {\n      this.props.loadExamsDone(\n        application.application_session.session_plan_id,\n        this.props.auth.user.user_id,\n        this.setloadingExamsDone\n      );\n    }\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          this.props.InitializeExamDetails(\n            application.application_session.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            application.position.position_id,\n            this.setLoading\n          );\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.setLoading(true);\n    try {\n      const res = await axios.get<GetApplicationsAPI[]>(\n        `${API.APPLICATION}/application/${this.props.auth.user.user_id}`\n      );\n      if (res.status === 200) {\n        this.setState({ candidateApplications: res.data });\n        for (let application of res.data) {\n          this.InitializationFn(application);\n        }\n        if (\n          this.props.candidateApplications.candidate_applications === null ||\n          this.props.candidateApplications.candidate_applications.length === 0\n        ) {\n          for (let application of res.data) {\n            this.props.AddUserApplication(application);\n          }\n        }\n      }\n    } catch (error: any) {\n      console.log(\"Appl ex Err: \", { ...error });\n    }\n    this.setLoading(false);\n  };\n  findLocation = (position_id: string, course_id: string) => {\n    if (this.state.candidateApplications !== null) {\n      const test = this.state.candidateApplications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.exams.filter((itm) => itm.course_id === course_id)\n      );\n      if (test !== undefined) {\n        let course = test.exams.find((itm) => itm.course_id === course_id);\n        if (course !== undefined) {\n          return course;\n        }\n      }\n    }\n    return null;\n  };\n  updateLocation = async (\n    application_id: string,\n    exams: sentExamInterface[]\n  ) => {\n    this.setState({ loading: true });\n    for (let i in exams) {\n      try {\n        const res = await axios.post(\n          `${API.APPLICATION}/application/updatemissed`,\n          {\n            application_id: application_id,\n            exams: exams[i],\n          }\n        );\n        if (res.status === 200) {\n          this.setState({\n            selectedCourse: null,\n            centersModal: false,\n            maxExamModal: false,\n            selectedPosition: \"\",\n            successMessage: \"Location updated successfully!\",\n          });\n          this.loadUserApplications();\n        }\n      } catch (error: any) {\n        console.log(\"Update loc err: \", { ...error });\n      }\n    }\n  };\n  updateLocationFunction = (exams: sentExamInterface[]) => {\n    if (this.state.candidateApplications !== null) {\n      let application = this.state.candidateApplications.find(\n        (item) => item.position.position_id === this.state.selectedPosition\n      );\n      if (application !== undefined) {\n        this.updateLocation(application.application_id, exams);\n      } else {\n        alert(\"Invalid application\");\n      }\n    } else {\n      alert(\"Missing application\");\n    }\n  };\n  addLocation = (\n    course_id: string,\n    course_name: string,\n    course_code: string,\n    location: LocationTableInterface,\n    exam_id: string\n  ) => {\n    return this.updateLocationFunction([\n      {\n        course_id: course_id,\n        proctoring_type: \"Center\",\n        center_id: location.center_id,\n        district_id: location.district_id,\n      },\n    ]);\n  };\n  componentDidMount = () => {\n    this.props.loadApplicationPeriods(this.setLoading);\n\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    this.loadUserApplications();\n    if (this.props.auth.application_session !== null) {\n      this.loadCandidateExams(\n        this.props.auth.user.user_id,\n        this.props.auth.application_session.session_plan_id\n      );\n    }\n    if (this.props.auth.application_session !== null) {\n      this.props.loadExamsDone(\n        this.props.auth.application_session.session_plan_id,\n        this.props.auth.user.user_id,\n        this.setloadingExamsDone\n      );\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    if (this.state.candidateApplications !== null) {\n      for (let item of exams) {\n        if (\n          this.state.candidateApplications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm._id === item._id) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    if (this.state.candidateApplications !== null) {\n      for (let item of exams) {\n        if (\n          this.state.candidateApplications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm.course === item.course) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string\n  ): GetApplicationsAPI | null => {\n    if (applications !== null) {\n      let temp = applications.find(\n        (item) => item.position.position_id === position_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  setMaxExamModal = (status: boolean) => {\n    this.setState({ maxExamModal: status });\n  };\n\n  changeLocation = (item: PositionAPICourse) => {\n    this.setState({ selectedCourse: item, centersModal: true });\n    this.setMaxExamModal(true);\n  };\n\n  closeModal = () => {\n    this.setState({ centersModal: false });\n    this.setMaxExamModal(false);\n  };\n\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (this.props.candidateExam.selected_exam_id !== null) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.selectedCourse === null ? (\n          <div className=\"mt-2 -ml-2 mr-3 pb-5\">\n            <div className=\"rounded mt-2\">\n              <div className=\"flex flex-row items-center gap-3\">\n                <Link\n                  to=\"/apps-page\"\n                  title=\"Back to menus\"\n                  className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n                >\n                  <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n                </Link>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-3xl\">My exams</span>\n                  <span className=\"text-gray-600 text-sm\">\n                    List of exams that are assigned to me\n                  </span>\n                </div>\n              </div>\n            </div>\n            {this.state.successMessage !== \"\" && (\n              <div\n                title=\"Click to close the message\"\n                onClick={() => this.setState({ successMessage: \"\" })}\n                className=\"animate__animated animate__zoomIn px-3 py-2 bg-green-500 text-white my-2 rounded cursor-pointer\"\n              >\n                {this.state.successMessage}\n              </div>\n            )}\n            {this.state.loading === true ||\n            this.state.loadingExamsDone === true ||\n            this.state.candidateExams === null ||\n            this.state.candidateApplications == null ? (\n              <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n                <Loading />\n              </div>\n            ) : this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).length === 0 ? (\n              <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n                No exams found\n              </div>\n            ) : (\n              this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).map((item, i) => (\n                <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div>\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-600 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                          <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                            Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-gray-100 underline text-gray-500  font-bold rounded-full px-2\">\n                            Start time: {item.start_time}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-blue-100 text-blue-900  font-bold rounded-full px-2\">\n                            Status: {item.user_status}\n                          </div>\n                        </div>\n                        {this.findLocation(item.position, item.course) !==\n                          null && (\n                          <div className=\"flex flex-row items-center gap-2 mt-2\">\n                            <div>\n                              Exam center:{\" \"}\n                              <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                {\n                                  this.findLocation(item.position, item.course)\n                                    ?.center_name\n                                }\n                              </span>\n                            </div>\n                            <div className=\"w-max flex flex-col md:flex-row\">\n                              Room number:{\" \"}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 ? (\n                                <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                  Waiting room\n                                </span>\n                              ) : (\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.room_number\n                                  }\n                                </span>\n                              )}\n                              {/* Change loc */}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 &&\n                                validateExamDate(\n                                  item.exam_date,\n                                  item.start_time,\n                                  item.end_time\n                                ) !== ExamTimeStatus.Expired && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"lg:w-full flex flex-row items-center justify-end\">\n                      {this.state.activeExams.find(\n                        (itm) => itm === item._id\n                      ) !== undefined ||\n                      item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Paused ? (\n                        validateExamDate(\n                          item.exam_date,\n                          item.start_time,\n                          item.end_time\n                        ) !== ExamTimeStatus.Expired ? (\n                          this.selectApplication(\n                            this.state.candidateApplications,\n                            item.position,\n                            item.course\n                          )?.application_status !==\n                          ApplicationStates.Shortlisted ? (\n                            <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                              Not shortlisted\n                            </div>\n                          ) : (\n                            <div\n                              onClick={() => {\n                                let application = this.selectApplication(\n                                  this.state.candidateApplications,\n                                  item.position,\n                                  item.course\n                                );\n                                if (application !== null) {\n                                  if (\n                                    application.application_status ===\n                                    ApplicationStates.Shortlisted\n                                  ) {\n                                    // Select exam\n                                    this.props.setSelectedPosition(\n                                      application.position\n                                    );\n                                    this.props.setSelectedCourse(\n                                      application.position.courses.find(\n                                        (itm) => itm.course_id === item.course\n                                      )!\n                                    );\n                                    this.props.setSelectedCandidateExam(\n                                      item._id\n                                    );\n                                  } else {\n                                    alert(\n                                      \"Corresponding application is not shortlisted!\"\n                                    );\n                                  }\n                                } else {\n                                  alert(\"Invalid exam!\");\n                                }\n                              }}\n                              className={`${\n                                item.user_status === UserExamStatus.Editing ||\n                                item.user_status === UserExamStatus.Paused\n                                  ? \"bg-green-600 group-hover:bg-green-800\"\n                                  : \"bg-blue-600 group-hover:bg-blue-800\"\n                              } btn  text-white cursor-pointer w-max`}\n                            >\n                              {item.user_status === UserExamStatus.Editing\n                                ? \"Back to Exam\"\n                                : item.user_status === UserExamStatus.Paused\n                                ? \"Paused, back to exam\"\n                                : \"Start Exam\"}\n                            </div>\n                          )\n                        ) : item.user_status === UserExamStatus.Editing ||\n                          item.user_status === UserExamStatus.Done ||\n                          item.user_status === UserExamStatus.Paused ||\n                          item.user_status === UserExamStatus.Removed ? (\n                          <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                            <span>Marks</span>\n                            <span className=\"text-2xl font-extrabold -mt-2\">\n                              {item.user_marks.toFixed(2)}%\n                            </span>\n                            <div\n                              onClick={() =>\n                                this.setState({\n                                  selectedExam: {\n                                    course: item.course,\n                                    course_name: item.course_name,\n                                    discription: item.discription,\n                                    termes: item.termes,\n                                    rules: item.rules,\n                                    period: item.period,\n                                    exam_date: item.exam_date,\n                                  },\n                                })\n                              }\n                              className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                            >\n                              Check details\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                            Expired\n                          </div>\n                        )\n                      ) : item.found === false ? (\n                        <div\n                          title=\"Please wait for the exam time\"\n                          className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                        >\n                          <CountDown\n                            start_time={new Date(today.toString()).toString()}\n                            duration_min={getMinutesFromTwoDates(\n                              new Date(today.toString()),\n                              new Date(\n                                DATE(item.exam_date, \"MM/DD/YYYY\") +\n                                  \" \" +\n                                  item.start_time\n                              )\n                            )}\n                            timeout={() => this.setTimeOut(item._id)}\n                            returnString={true}\n                            labels={true}\n                            days\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                          <span>Marks</span>\n                          <span className=\"text-2xl font-extrabold -mt-2\">\n                            {item.user_marks.toFixed(2)}%\n                          </span>\n                          <div\n                            onClick={() =>\n                              this.setState({\n                                selectedExam: {\n                                  course: item.course,\n                                  course_name: item.course_name,\n                                  discription: item.discription,\n                                  termes: item.termes,\n                                  rules: item.rules,\n                                  period: item.period,\n                                  exam_date: item.exam_date,\n                                },\n                              })\n                            }\n                            className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                          >\n                            Check details\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {/* Not prepared exams */}\n            {this.state.candidateExams !== null &&\n              this.state.loading !== true &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).length > 0 &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).map((item, i) => (\n                <div\n                  key={i + 1}\n                  className=\"my-2 rounded bg-white p-2 py-3 group\"\n                >\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div className=\"\">\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-base text-gray-600 font-bold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                          {this.findLocation(item.position, item.course) !==\n                            null && (\n                            <div className=\"flex flex-row items-center gap-2 mt-2\">\n                              <div className=\"flex flex-col md:flex-row md:items-center\">\n                                Exam center:{\" \"}\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.center_name\n                                  }\n                                </span>\n                              </div>\n                              <div className=\"w-max flex flex-col md:flex-row md:items-center\">\n                                Room number:{\" \"}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 ? (\n                                  <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                    Waiting room\n                                  </span>\n                                ) : (\n                                  <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                    {\n                                      this.findLocation(\n                                        item.position,\n                                        item.course\n                                      )?.room_number\n                                    }\n                                  </span>\n                                )}\n                                {/* Change loc */}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                      Not prepared\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : this.state.loading === true ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : (\n          <div className=\"animate__animated animate__fadeInUp animate__faster mt-2 mr-1 -ml-3 rounded-t-md bg-white shadow-md pb-5\">\n            <div className=\"flex flex-row gap-4 items-center justify-between bg-blue-100 py-2 px-2 mb-2\">\n              <div className=\"flex flex-col w-full\">\n                <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-2\">\n                  <span className=\"font-bold text-xl text-gray-800\">\n                    Change exam location\n                  </span>\n                  <div className=\"bg-white hover:text-yellow-700 hover:bg-white rounded-full p-1 h-10 w-10 border-2 border-white hover:border-yellow-600 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => {\n                        this.setState({\n                          centersModal: false,\n                          selectedCourse: null,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ChooseExamCenter\n              positionCourses={this.state.selectedCourse}\n              addLocation={this.addLocation}\n              closeModal={this.closeModal}\n            />\n          </div>\n        )}\n        {this.state.selectedExam !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600 px-2\">\n                Exam result details\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectedExam: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {/* Check if period is open for claims */}\n            {compareWithToday(today, this.state.selectedExam.exam_date) ===\n            false ? (\n              <div className=\"bg-yellow-100 text-yellow-800 font-extrabold text-center flex flex-col items-center justify-center text-lg px-2 py-6\">\n                <div className=\"mb-5 text-3xl\">\n                  Please wait, the exam details will be visible soon!\n                </div>\n                <div className=\"text-gray-600\">\n                  Please come after this date:{\" \"}\n                </div>\n                <div className=\"bg-white rounded-full px-3 py-1 text-gray-700\">\n                  {DATE(new Date(this.state.selectedExam.exam_date).toString())}\n                </div>\n              </div>\n            ) : (\n              <AnswersDetails\n                exam_id={this.state.selectedExam}\n                showAnswers={false}\n              />\n            )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    periods: periods,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n"],"sourceRoot":""}