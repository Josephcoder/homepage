{"version":3,"sources":["components/Navigation/SideNavigation.tsx","containers/Claimings/ClaimDocView.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx"],"names":["_SideNavigation","props","componentDidMount","PageHasSubNav","componentWillUnmount","state","loading","this","auth","isAuthenticated","navActive","system","navigation","className","children","React","Component","SideNavigation","connect","NavToogle","MainItem","title","icon","MdBrightness1","active","count","IconDefined","isReclaimAllowed","thisClaim","claim_level","_thisClaim","claims","find","item","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","memo","createReClaim","PushPopupAlert","handleSubmit","a","isEmptyOrSpaces","reClaimingMsg","setFormError","element","msg","theme","PopupAlertTheme","warning","setLoadingRequest","setAxiosToken","axios","put","API","CLAIMING","_id","reason","res","console","log","data","status","success","setReClaimingMsg","setReClaiming","error","errorToText","danger","getReasonById","reason_id","claimReasons","id","ClaimGetDocTitle","documentCategories","thisDoc","main","type","onClick","setViewImage","viewImage","validation_status","capitalizeFirstLetter","previous","evaluater","name","validated_by","comment","src","AUTH_FILES","files","alt","length","map","claim","index","default_claim_resaons","showDate","createdAt","toLocaleLowerCase","evaluation_comment","reClaiming","last_claim_status","PENDING","DELETED","disabled","loadingRequest","placeholder","cols","rows","formError","style","resize","value","onChange","e","target","ClaimTypesEnum","thisApplication","position","position_title","setViewPosition","viewPosition","ApplicationStates","Rejected","DATE","dangerouslySetInnerHTML","__html","description","school_level_id","school_level_name","education_institute_id","education_category_title","courses","course_name","course_code","course_id","requirements","FC_ApplicationPositionDistinctCategory","DistinctCategoriesTemp","category_title","ViewRequirements","PositionsTemp","filter","req","category_id","NoResult","NoResultThemes","Dark","questionTypes","loadQuestionTypes","useState","setLoading","useEffect","thisExam","CandidateAnswersDetails","showAnswers","exam_id","claimShowAnswer","thisExamSheet","userDetails","user_info","fname","lname","myPlacement","placed","school","school_name","district_id","district_name","claiming","GetClaimingTypes","setSelectedClaimType","getMyRejectedApplications","getMyRejectedDocuments","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","loadingClaimTypes","setLoadingClaimTypes","candidateApplications","user","user_id","candidateDocuments","claimTypes","countClaims","thisType","result","myClaims","COMPLETED","type_key","Fragment","loadingClaims","selectedClaimType","PlansTypeKeys","APPLICATION","DOCUMENT_VALIDATION","EXAMINATION","getDocumentById","document_id","doc_id","whichClaimType","application","document","exam","MARKS_PUBLICATION","marks_publication","PLACEMENT_TRANSFER","placement","whichClaimStatus","classes","getClaimById","claimList","claim_id","getApplicationById","application_id","displayDocClaimTitle","claiming_on_id","displayClaimTitle","documentReducer","allCourse","myAnswer","thisAnswer","getCourseIdBySheetId","getCourseById","course","Index","setState","setLoadingSession","loadingSession","setViewClaim","viewClaim","setPeriodChanged","periodChanged","setClaimForm","claimForm","setClaimId","claimId","setThisPeriod","thisPeriod","setSearchClaim","searchClaim","loadClaims","getMyClaims","session_plan_id","setSession","sessions","thisSession","is_active","loadExamAnswers","activeSessionPlan","getMyAnswers","getClaimReasons","loadCourses","application_sessions","GetAllSessionPlans","documentCategory","getDocumentCategory","documentSubCategory","getDocumentSubCategory","documentFields","getDocumentFields","getMyPlacement","isDeleteAllowed","thisCLaim","onPeriodChange","period_id","ClaimHeaderTitle","headerTitle","filterClaimsByClaimType","colSpan","Light","search","ClaimApplView","ClaimExamView","ClaimForm","formState","setFormState","CandidateClaim","sessionPlan","allSessionPlans","claimType","getAllClaims","allClaims","isLoading","selectPeriod","session","session_plan_name"],"mappings":"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","file":"static/js/8.7a815039.chunk.js","sourcesContent":["import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, System } from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { NavToogle, PageHasSubNav } from \"../../actions\";\nimport { MdBrightness1, MdSearch } from \"react-icons/md\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  system: System;\n  PageHasSubNav: Function;\n  NavToogle: Function;\n  children: ReactNode;\n}\n//\ninterface AppState {\n  loading: boolean;\n}\n\nclass _SideNavigation extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n    };\n  }\n\n  componentDidMount = () => this.props.PageHasSubNav(true);\n  componentWillUnmount = () => this.props.PageHasSubNav(false);\n\n  render() {\n    const isAuthenticated = this.props.auth.isAuthenticated;\n\n    if (isAuthenticated === false) {\n      return null;\n    }\n\n    const navActive = this.props.system.navigation;\n    return (\n      <div\n        className={`fixed w-48 p-1 pr-2 pl-6 text-gray-700 bg-white ${\n          navActive === true ? \"lg:left-16  left-16\" : \" -left-72 lg:left-16\"\n        }  top-0 bottom-0 pt-20 z-30 shadow-lg  transition-all duration-500 ease-in-out overflow-y-auto`}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  system,\n}: StoreState): { auth: Auth; system: System } => {\n  return { auth: auth, system: system };\n};\n\nexport const SideNavigation = connect(mapStateToProps, {\n  NavToogle,\n  PageHasSubNav,\n})(_SideNavigation);\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SearchComponentInterface = {\n  data: any[];\n};\n\nexport const Search: FC<SearchComponentInterface> = ({\n  data,\n}): ReactElement => {\n  return (\n    <div className=\"m-1 rounded-md shadow-md border border-blue-400 bg-white p-1 flex \">\n      <label htmlFor=\"search-text\" className=\"inline-block text-2xl\">\n        <MdSearch className=\"inline-block text-blue-400\" />\n      </label>\n      <input\n        type=\"search\"\n        className=\"outline-none bg-transparent flex-1 pl-1\"\n        placeholder=\"Search\"\n        id=\"search-text\"\n      />\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype MainItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const MainItem: FC<MainItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n  return (\n    <section\n      className={`${\n        active === true\n          ? \"bg-blue-500 text-white font-bold\"\n          : \"bg-blue-100 text-blue-800\"\n      } mb-1 hover:font-bold py-1 hover:bg-blue-400 hover:text-white --font-bold  px-2 rounded-md flex cursor-pointer items-center`}\n    >\n      <section className=\"flex-1\">\n        <IconDefined className=\"inline-block mr-1 text-xs\" />\n        <span>{title}</span>\n      </section>\n\n      {count > 0 ? (\n        <span className=\"px-0.5 my-1 text-xs bg-blue-600 text-white rounded-full\">\n          {count}\n        </span>\n      ) : null}\n    </section>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemContainerComponentInterface = {\n  children: ReactNode;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const SubItemContainer: FC<SubItemContainerComponentInterface> = ({\n  children,\n}): ReactElement => {\n  return (\n    <div className=\"ml-3 overflow-y-auto border-l-2 border-blue-200 -mt-1 pt-2 mb-2 pl-1 cursor-pointer\">\n      {children}\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n * @important Remenber to use these components inside the <SubItemContainer>...</SubItemContainer>\n */\nexport const SubItem: FC<SubItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n\n  return (\n    <div\n      className={`animate__animated animate__zoomIn animate__faster ${\n        active === true ? \"bg-blue-500 text-white font-bold\" : \" text-blue-800\"\n      } text-blue-800 bg-blue-200 rounded-md px-1 mb-1 flex items-center py-1 font-bold`}\n    >\n      <IconDefined\n        className={`inline-block mr-0.1 text-xs ${\n          active === true ? \"text-white\" : \"\"\n        }`}\n      />\n      <span\n        className={`inline-block pl-1 ${active === true ? \"text-white\" : \"\"}`}\n      >\n        {title}\n      </span>\n      {count >= 1 ? (\n        <span\n          className={`text-sm fint-bold ${active === true ? \"text-white\" : \"\"}`}\n        >\n          {count}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, DocumentClaimUser } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import React, { Component } from \"react\";\nimport { MdAdd, MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport search from \"../../../utils/search\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  // console.log(\"====================================\");\n  // console.log({ claimList, claim_id });\n  // console.log(\"====================================\");\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getClaimReasons: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  searchClaim: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n      searchClaim: \"\",\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  setSearchClaim = (value: string) => {\n    this.setState({ searchClaim: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n      this.loadExamAnswers(\n        thisSession ? thisSession : sessions[0],\n        this.props.auth.user.user_id\n      );\n    }\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan.session_plan_id,\n      user_id,\n      (status: boolean, msg: string, data: SessionPlanInterface | \"none\") => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n    if (this.props.claiming.claimReasons === null) {\n      this.props.getClaimReasons((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status) {\n          if (msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => {\n                this.setClaimForm(true);\n                // alert(\"clicked\");\n              }}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            {/* FILTER FORM =================================== */}\n            <section className=\"flex flex-col-reverse sm:flex-row items-center gap-2 w-full my-2\">\n              <div className=\"w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setSearchClaim(e.target.value)\n                  }\n                  type=\"text\"\n                  className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500 w-full\"\n                  placeholder={`Search claim by title or type`}\n                  value={this.state.searchClaim}\n                  disabled={\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ).length > 0\n                      ? false\n                      : true\n                  }\n                />\n              </div>\n            </section>\n            {/* END FILTER FORM =================================== */}\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim level</td>\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"Nothing found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).map((claim: CandidateClaimInterface, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {claim.title}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap italic\">\n                        Level {claim.claim_level}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.PLACEMENT_TRANSFER && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Placement not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  getClaimReasons,\n  loadCourses,\n  getMyPlacement,\n  getMyAnswers,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline, MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { DATE, errorToText, showDate } from \"../../utils/functions\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span\n              className=\"font-normal\"\n              dangerouslySetInnerHTML={{\n                __html: props.thisClaim.previous.reason,\n              }}\n            ></span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {props.thisApplication.position.description}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  ClaimStatus,\n  course,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { claimShowAnswer } from \"./Candidate/ExaminationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  claimReasons: claimReasonInterface[] | null;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <CandidateAnswersDetails\n                showAnswers={false}\n                exam_id={claimShowAnswer(\n                  props.thisExamSheet,\n                  props.thisExam.course_name\n                )}\n              />\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.userDetails.user_info.fname +\n                          \" \" +\n                          props.thisClaim.userDetails.user_info.lname\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default React.memo(connect(mapStateToProps, {\n  loadQuestionTypes,\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimPlacementView));\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getMyRejectedApplications,\n    getMyRejectedDocuments,\n    PushPopupAlert,\n  })(FilterByType)\n);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getAllClaims,\n    PushPopupAlert,\n  })(AdminFilterByType)\n);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(\n    sessions.filter((item) => item.session_plan_id === period_id)[0]\n  );\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod.session_plan_id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option\n                key={session.session_plan_id + item}\n                value={session.session_plan_id}\n              >\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default React.memo(ClaimHeaderTitle);\n"],"sourceRoot":""}