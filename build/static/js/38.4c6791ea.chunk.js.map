{"version":3,"sources":["containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","assets/profile.png","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","components/ProctoringRuleItem/ProctoringRuleItem.tsx","containers/DoExam/DoExam.tsx"],"names":["toMultipleChoice","answers","res","answer","id","value","status","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","MultipleChoice","props","checkAnswer","item","available_answers","length","check","find","itm","question_id","selectedQuestionAnswer","undefined","x","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","test","a","map","i","title","onClick","oldAnswers","temp","type","questionTypeElementsType","SingleMultiple","t","addAnswer","className","dangerouslySetInnerHTML","__html","TrueFalse","SimpleCalculated","answeredValue","toString","onChange","e","target","ShortAnswer","style","minHeight","Numerical","CalculatedMultipleChoice","filter","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","selectedLanguage","checkIfSelected","Matching","useState","displayWindow","setDisplayWindow","setSelectedAnswer","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","question","language","key","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","Footer","connect","auth","doExam","candidateExam","system","proctoring","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","setSelectedExamQuestion","findIndex","candidate_exam","selectedIndexPrevious","selected_question","selectedIndexNext","ConfirmSubmitAnswer","exam_id","questionAnswered","question_answers","findQuestionType","questionTypes","SubmitAnswer","setProfileWindowStatus","windowStatus","profile","position","top","right","events","questionsList","selected_exam_id","exam_paper_id","height","submitQuestionAnswer","Profile","width","src","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","event_type_id","description","DATE","time","Date","getHours","getMinutes","getSeconds","QuestionDetails","setQuestionLanguage","loadQuestionTypes","loading","setLoading","selectLang","setSelectLang","QuestionData","q","getDefaultLanguage","findSelectedQuestionDetails","filterLanguages","langs","selectedQuestionDetails","langItem","testLangQ","l","questionSelected","selected_language","Loading","LoadingType","white","Shuffle","SimpleCalculate","Numeric","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","setSubmitModal","submitExam","maxHeight","DoExamTitle","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","course_name","course_code","alignSelf","start_time","duration","toFixed","CountDown","duration_min","timeout","returnString","labels","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","maxWidth","displayClose","padding","marginTop","ModalMarginTop","small","DoExamResults","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","page","ProctoringRuleItem","getDetails","examDetails","rule_key","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","_DoEam","setState","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","setExamQuestionAnswer","setCompletedTest","completedTest","changingExamStatusLoading","changingExamStatus","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","periods","selected_period","selected_exam_details","checkUserExam","exam","positions","selected_position","exam_room_details","RequestUserExamDetails","user_id","position_id","userExamLocation","district_id","center_id","room_id","setLoadExamResultMessage","BackToExamination","loadUserProfileDetails","FC_GetProfileDetails","msg","componentDidMount","sex","course","courses","loadCourses","exam_questions_answers","testAnswers","componentWillUnmount","socket","emit","Events","USER_DISCONNECTED_ONLINE_SERVER","setLoadExamResultNoMessage","PushPopupAlert","PopupAlertTheme","danger","success","user_exams_done","exam_paper","CleanCandidateExam","examQuestionIds","sel_question","SubmitExamQuestionAnswer","disability","gender","email","phone_number","in_education","questions_order","userAnswer","submitWholeExam","axios","put","API","DO_EXAM","doneExam","submittedExam","document","fullscreenElement","exitFullscreen","errorToText","startExam","display_exam","start_exam","requestExam","loadCandidateExamFromSupervisor","candidateDetailsProctoring","joined","pauseExam","inExam","data","application_session_id","application_session","session_plan_id","done_by","EventsLabels","DONE_EXAM","FC_SaveEvent","error","EXAM_DONE_SERVER","timeOutExam","TIME_OUT","TIME_OUT_SERVER","getExam","REQUEST_EXAM_SERVER","examStatus","loadUserExamErr","added_minutes","group_id","this","window","location","reload","ProctoringCandidateOnline","restartExam","CleanCandidateExamAnswers","setExamStatus","UserExamActions","Restart","stopExam","Done","period_id","removeClient","Removed","examAlreadyDone","candidateStopExam","reason","candidateContinueExam","joinedRoom","changeTime","timer","candidateProctoringDetails","requestUserAnswers","QuestionsList","selected_course","preview","setSelectedCandidateExam","extraLarge","exam_date","termes","medium","Component","DoExam","ChangeExamStatus","loadCandidateExam","setSelectedPeriod","GetUserExamDetails","FC_AddRules"],"mappings":"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","file":"static/js/38.4c6791ea.chunk.js","sourcesContent":["import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.type === questionTypeElementsType.SingleMultiple\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  TrueFalseQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n\n  const addAnswer = (\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [\n          ...temp,\n          {\n            id: t.id,\n            value: t.value,\n            status: false,\n          },\n        ];\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  SimpleCalculatedQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: [newAnswers[0].value],\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0].toString()\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  ShortAnswerQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: \"\",\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"200px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: [item.value],\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-600 rounded-b animate__animated animate__fadeInUp animate__faster border-t -mx-2 mt-2 rounded\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-50\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-600 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(true);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: item.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ans: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(\n              (it) => it.status.toString() === ans.status\n            );\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let ans = temp.answer.find((itm) => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(\n            props.selectedQuestionAnswer.question_id,\n            props.selectedLanguage,\n            ans\n          );\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [\n            ...res,\n            {\n              id: ans.id,\n              lang: item.language,\n              status: ans.status.toString(),\n            },\n          ];\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React from \"react\";\nimport { IoNotifications } from \"react-icons/io5\";\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from \"../utils/utils\";\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n  proctoring: Proctoring;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (\n        let x: number = 0;\n        x < props.candidateExam.candidate_exam.questions.length;\n        x++\n      ) {\n        if (\n          props.candidateExam.candidate_exam.questions[x].question_id ===\n          question_id\n        ) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  };\n\n  let selectedIndexPrevious: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0\n        ? findIndex(props.candidateExam.selected_question)\n        : props.candidateExam.candidate_exam.questions.length\n      : -1;\n\n  let selectedIndexNext: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0 &&\n        findIndex(props.candidateExam.selected_question) <\n          props.candidateExam.candidate_exam.questions.length - 1\n        ? findIndex(props.candidateExam.selected_question)\n        : findIndex(props.candidateExam.selected_question) === 0\n        ? 0\n        : -1\n      : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(\n        (item) =>\n          questionAnswered(\n            props.candidateExam.question_answers,\n            item.question_id,\n            findQuestionType(item.type, props.questionTypes.questionTypes)!\n          ) === true\n      );\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {/* {console.log(\"Selected: \", selectedIndexNext)} */}\n      <div className=\"flex flex-row items-center\">\n        <div\n          onClick={() =>\n            props.setProfileWindowStatus(!props.windowStatus.profile)\n          }\n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}\n        >\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div\n              className=\"bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\"\n              style={{ position: \"relative\", top: \"-10px\", right: \"-12px\" }}\n            >\n              {props.proctoring.events.length}\n            </div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && (\n            <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">\n              New events <br />\n              are available\n            </div>\n          )}\n        </div>\n\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexPrevious - 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex justify-center items-center\"\n          style={{ height: \"fit-content\" }}\n        >\n          <MdChevronLeft className=\"text-xl\" />{\" \"}\n          <span className=\"hidden md:block\">Previous</span>\n        </button>\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">\n            Question{\" \"}\n            {props.candidateExam.selected_question &&\n              findIndex(props.candidateExam.selected_question) + 1}\n          </span>\n          {props.submitQuestionAnswer === true ? (\n            <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">\n              Saving question answer...\n            </span>\n          ) : (\n            <span className=\"text-xs\">Auto save is activated</span>\n          )}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div> */}\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexNext + 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex items-center\"\n        >\n          <span className=\"hidden md:block\">Next</span>{\" \"}\n          <MdChevronRight className=\"text-xl\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    system: system,\n    proctoring: proctoring,\n  };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;\n","import React from \"react\";\nimport { IoClose } from \"react-icons/io5\";\nimport userImage from \"../../../assets/profile.png\";\n\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring } from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { DATE } from \"../../../utils/functions\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose\n                  onClick={() => props.setProfileWindowStatus(false)}\n                  className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\"\n                />\n              </div>\n            </div>\n            <div\n              className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            >\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">\n              {props.auth.user.fname} {props.auth.user.lname}\n            </span>\n            <span className=\"text-gray-400 text-xs\">\n              ID: {props.auth.user.n_id}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>{props.proctoring.events.length}</span>\n          </div>\n          <div\n            className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\"\n            style={{ paddingBottom: \"550px\", paddingTop: \"10px\" }}\n          >\n            {props.proctoring.events.length === 0 ? (\n              <div className=\"text-white font-bold\">No events found!</div>\n            ) : (\n              props.proctoring.events.map((item, i) => (\n                <div className=\"flex flex-col text-gray-300 border-b py-2 border-gray-700\">\n                  <div\n                    key={i + 1}\n                    className=\"flex flex-row items-center my-1 gap-2\"\n                  >\n                    <div className=\"bg-gray-600 text-white h-6 w-6 px-3 rounded-full flex items-center justify-center\">\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span>{item.event_type_id}</span>\n                      <span className=\"font-bold\">{item.description}</span>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row justify-between items-center\">\n                    <span className=\"text-gray-500\">\n                      {DATE(item.time, \"DD/MM/YYYY\")}\n                    </span>\n                    <span className=\"bg-gray-600 px-2 rounded-full text-xs font-bold text-yellow-300\">\n                      {new Date(item.time).getHours()} :\n                      {new Date(item.time).getMinutes()} :\n                      {new Date(item.time).getSeconds()}\n                    </span>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {})(_Profile);\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../interfaces/index\";\nimport { newAnswer } from \"../DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from \"../../../interfaces/exam_question\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../components/Loading/LoadingV2\";\nimport MultipleChoice from \"./Answers/MultipleChoice\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"./ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\nimport TrueFalse from \"./Answers/TrueFalse\";\nimport Matching from \"./Answers/Matching\";\nimport SimpleCalculated from \"./Answers/SimpleCalculated\";\nimport ShortAnswer from \"./Answers/ShortAnswer\";\nimport Numerical from \"./Answers/Numerical\";\nimport CalculatedMultipleChoice from \"./Answers/CalculatedMultipleChoice\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { Shuffle } from \"../../../utils/functions\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined =\n        props.candidateExam.candidate_exam.questions.find(\n          (itm) =>\n            props.candidateExam.selected_question &&\n            itm.question_id === props.candidateExam.selected_question &&\n            itm.question.find(\n              (testLang) => testLang.language === getDefaultLanguage()\n            ) !== undefined\n        );\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  };\n\n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res: QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(\n        (itm) => itm.question_id === props.candidateExam.selected_question\n      );\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  };\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    const selectedQuestionDetails =\n      props.candidateExam.candidate_exam?.questions.find(\n        (itm) => itm.question_id === props.candidateExam.selected_question\n      );\n    if (selectedQuestionDetails !== undefined) {\n      for (let langItem of selectedQuestionDetails.question) {\n        let testLangQ = QuestionLanguages.find(\n          (l) => l.key === langItem.language\n        );\n        if (testLangQ !== undefined) {\n          langs = [...langs, testLangQ];\n        }\n      }\n    }\n    return langs;\n  };\n  const getDefaultLanguage = (): QuestionLanguage => {\n    let questionSelected = props.candidateExam.candidate_exam?.questions.find(\n      (itm) => itm.question_id === props.candidateExam.selected_question\n    );\n    let check = questionSelected?.question.find(\n      (item) => item.language === props.candidateExam.selected_language\n    );\n    if (check === undefined && questionSelected !== undefined) {\n      return questionSelected.question[0].language;\n    }\n    return props.candidateExam.selected_language;\n  };\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          {/* <div\n            className={`h-8 ${\n              props.submitQuestionAnswer === true\n                ? \"animate__animated animate__fadeIn bg-yellow-50 text-yellow-700 animate-pulse\"\n                : \"text-blue-400 italic\"\n            } px-3 py-2 rounded  font-bold text-sm`}\n          >\n            {props.submitQuestionAnswer === true\n              ? \"Saving your answer ...\"\n              : \"\"}\n          </div> */}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {QuestionData() !== null &&\n                QuestionData()?.question.find(\n                  (itm) => itm.language === getDefaultLanguage()\n                ) && (\n                  <div className=\"text-md flex flex-col w-full\">\n                    <span className=\"text-sm text-gray-600\">\n                      {QuestionData() !== null &&\n                        QuestionData()?.question.find(\n                          (itm) => itm.language === getDefaultLanguage()\n                        )?.title}\n                    </span>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: QuestionData()!.question.find(\n                          (itm) => itm.language === getDefaultLanguage()\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold\"\n                    ></div>\n                  </div>\n                )}\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div\n                  onClick={() => setSelectLang(!selectLang)}\n                  className=\"flex flex-row items-center gap-2\"\n                >\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{ width: \"97px\" }}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">\n                      Language\n                    </span>\n                    <span\n                      title={\n                        filterLanguages().find(\n                          (itm) => itm.key === getDefaultLanguage()\n                        )?.value\n                      }\n                      className=\"text-sm font-bold text-blue-600 truncate\"\n                      style={{ width: \"97px\" }}\n                    >\n                      {\n                        filterLanguages().find(\n                          (itm) => itm.key === getDefaultLanguage()\n                        )?.value\n                      }\n                    </span>\n                  </div>\n                  <div\n                    className={`${\n                      selectLang === true\n                        ? \"bg-yellow-800 text-white\"\n                        : \"bg-gray-50 hover:bg-blue-600\"\n                    } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                  >\n                    {selectLang === true ? (\n                      <FaTimes className=\"text-xl my-2 mx-2\" />\n                    ) : (\n                      <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                    )}\n                  </div>\n                </div>\n                {selectLang === true && (\n                  <div\n                    className=\"relative rounded overflow-hidden\"\n                    style={{ width: \"182px\" }}\n                  >\n                    <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                      {filterLanguages().map((item, i) => (\n                        <span\n                          onClick={() => {\n                            props.setQuestionLanguage(item.key);\n                            setSelectLang(!selectLang);\n                          }}\n                          key={i + 1}\n                          className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                            getDefaultLanguage() === item.key\n                              ? \"bg-blue-800 font-extrabold border-blue-800\"\n                              : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                          }`}\n                        >\n                          {getDefaultLanguage() === item.key ? (\n                            <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                          ) : (\n                            <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                          )}{\" \"}\n                          {item.value}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"my-4 py-2 px-2 bg-white rounded\"\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.candidateExam.candidate_exam?.questions.find(\n                    (itm) =>\n                      itm.question_id === props.candidateExam.selected_question\n                  )?.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toTrueFalse(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={getDefaultLanguage()}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toMatching(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        findSelectedQuestionDetails().find(\n                          (itm) => itm.language === getDefaultLanguage()\n                        )!.answer\n                      )\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toSimpleCalculated(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toShortAnswer(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toNumerical(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toCalculatedMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;\n","import React from \"react\";\nimport { MdCheckCircle, MdClose } from \"react-icons/md\";\nimport { Auth } from \"../../../actions/auth\";\nimport { candidateExamStoreInterface } from \"../../../actions/candidate_exam\";\nimport { questionTypesStoreInterface } from \"../../../actions/questionTypes\";\nimport { System } from \"../../../actions/system\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { course } from \"../../../interfaces/course\";\nimport { QuestionInterface } from \"../../../interfaces/question\";\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from \"../utils/utils\";\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamPendingQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    );\n  }\n  return (\n    <div\n      className={`pt-4 border-t border-gray-300 ${\n        PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"\n      }`}\n    >\n      {props.candidateExam.candidate_exam &&\n      AnsweredQuest.length !==\n        props.candidateExam.candidate_exam.questions.length &&\n      PendingQuest.length !== 0 ? (\n        <div>\n          <div className=\"grid md:grid-cols-2 h-full\">\n            <div className=\"md:col-span-2 h-full\">\n              <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n                {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n                <div className=\"flex flex-col\">\n                  <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">\n                    Submit incomplete questions\n                  </div>\n                  <div className=\"text-gray-700 text-sm text-left pb-2\">\n                    Please, make sure to complete the following remaining\n                    questions which are not yet answered. Please, if you proceed\n                    anyway, for these questions, you will not be marked!\n                  </div>\n                </div>\n                <div className=\"mr-4\">\n                  <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => props.setSubmitModal(false)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"md:col-span-2\">\n              <div className=\"\">\n                <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                  {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                  <div className=\"text-center mb-5 text-gray-600 font-bold\">\n                    Pick a question number you want to answer directly\n                  </div>\n                  <div className=\"flex justify-center items-center text-center\">\n                    <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                      {props.candidateExam.candidate_exam.questions.map(\n                        (item, i) =>\n                          PendingQuest.find(\n                            (itm) => itm.question_id === item.question_id\n                          )?.question_id !== undefined && (\n                            <div\n                              onClick={() => {\n                                props.candidateExam.candidate_exam &&\n                                  props.setSelectedExamQuestion(\n                                    props.candidateExam.candidate_exam\n                                      .exam_paper_id,\n                                    item.question_id\n                                  );\n                                props.setSubmitModal(false);\n                              }}\n                              key={i + 1}\n                              className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\"\n                            >\n                              {i + 1}\n                            </div>\n                          )\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                  <div\n                    onClick={() => props.setSubmitModal(false)}\n                    className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\"\n                  >\n                    Back to edit\n                  </div>\n                  <div\n                    onClick={() => props.submitExam()}\n                    className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\"\n                  >\n                    Submit anyway\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"px-4 pb-2\">\n          <div className=\"flex flex-row items-center justify-between mb-4\">\n            <div className=\"text-blue-700 font-bold\">\n              Hey{\" \"}\n              <b>\n                <u>{props.auth.user.fname}</u>\n              </b>\n              , All questions have been answered, are you sure do you want to\n              submit the final answers?\n            </div>\n            <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n              <MdClose\n                className=\"cursor-pointer font-extrabold text-3xl\"\n                onClick={() => props.setSubmitModal(false)}\n              />\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between\">\n            <div\n              onClick={() => props.setSubmitModal(false)}\n              className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\"\n            >\n              <span className=\"\">Back to edit</span>\n            </div>\n            <div\n              onClick={() => {\n                props.submitExam();\n              }}\n              className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\"\n            >\n              <MdCheckCircle className=\"text-3xl\" />\n              <span className=\"\">Submit exam</span>\n            </div>\n          </div>\n\n          <div className=\"my-2\">\n            <div className=\"font-extrabold text-xl text-gray-700 my-2 mt-4\">\n              Verify your answers\n            </div>\n            <div\n              className=\"flex flex-col gap-3 overflow-y-auto\"\n              style={{ maxHeight: \"100%\" }}\n            >\n              {props.candidateExam.candidate_exam === null ? (\n                <Loading />\n              ) : (\n                AnsweredQuest.length > 0 &&\n                AnsweredQuest.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className=\"bg-gray-200 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast\"\n                  >\n                    <div className=\"grid md:grid-cols-12 w-full\">\n                      <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                        <div\n                          key={i + 1}\n                          className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\"\n                        >\n                          {i + 1}\n                        </div>\n                        <div className=\"text-sm\">\n                          <div>{item.question[0].description}</div>\n                          <div className=\"text-blue-700 font-bold text-sm\">\n                            Answer:&nbsp; Done\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-span-2 float-right flex items-center justify-end\">\n                        <div\n                          onClick={() => {\n                            props.candidateExam.candidate_exam &&\n                              props.setSelectedExamQuestion(\n                                props.candidateExam.candidate_exam\n                                  .exam_paper_id,\n                                item.question_id\n                              );\n                            props.setSubmitModal(false);\n                          }}\n                          className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\"\n                        >\n                          Edit\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionsReview;\n","import React, { Fragment } from \"react\";\nimport { useState } from \"react\";\nimport { IoDocumentTextOutline } from \"react-icons/io5\";\nimport { MdCheckCircle } from \"react-icons/md\";\nimport Modal, {\n  Themes,\n  ModalSize,\n  ModalMarginTop,\n} from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from \"../utils/utils\";\nimport { course } from \"../../../interfaces\";\nimport QuestionsReview from \"./QuestionsReview\";\nimport { CountDown } from \"../../../components/CountDown/CountDown\";\n\ninterface TestTitleInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n  start_time: string;\n  duration_min: number;\n  timeout: () => void;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n\n  const TotalAnswered: number = props.candidateExam.candidate_exam\n    ? NumberOfAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam\n    ? (TotalAnswered * 100) /\n      props.candidateExam.candidate_exam.questions.length\n    : 0;\n  return (\n    <Fragment>\n      <div className=\"bg-gray-800\">\n        <div className=\"grid grid-cols-6\">\n          <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n            <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n              <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n              <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n                <span className=\"font-bold text-lg truncate -mb-1\">\n                  {props.selectedExam?.course_name}\n                </span>\n                <span className=\"text-gray-300 text-xs truncate\">\n                  Code: {props.selectedExam?.course_code}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"col-span-6 md:col-span-4 lg:col-span-4\"\n            style={{ alignSelf: \"center\" }}\n          >\n            <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n              <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n                <div className=\"text-gray-200 text-sm w-full hidden lg:block\">\n                  Completed {TotalAnswered} of{\" \"}\n                  {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.questions.length}\n                </div>\n                <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                  <div\n                    className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  ></div>\n                </div>\n                <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                  <div\n                    className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  >\n                    <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">\n                      {answeredPercentage}%\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-4 hidden lg:block h-full\">\n                <div className=\"flex flex-row justify-center items-center h-full\">\n                  <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                    <div>\n                      Start time:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam?.start_time}\n                      </span>\n                    </div>\n                    <div>\n                      Duration:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam &&\n                        props.candidateExam.candidate_exam.duration / 60 > 1\n                          ? (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hours\"\n                          : props.candidateExam.candidate_exam &&\n                            (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hour\"}\n                        {props.candidateExam.candidate_exam &&\n                          props.candidateExam.candidate_exam.duration % 60 >\n                            0 &&\n                          \", \" +\n                            (props.candidateExam.candidate_exam.duration % 60) +\n                            \" mins\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-5 bg-gray-800\">\n                <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                  <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                    <span>Counting down</span>\n                    <div className=\"text-lg lg:text-xl font-bold\">\n                      <CountDown\n                        start_time={props.start_time}\n                        duration_min={props.duration_min}\n                        timeout={() => props.timeout()}\n                        returnString={true}\n                        labels\n                      />\n                    </div>\n                  </div>\n                  {props.submitQuestionAnswer === true ? (\n                    <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 border border-gray-600 animate-pulse\">\n                      Saving...\n                    </div>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        props.SubmitAnswer();\n                        setSubmitModal(true);\n                      }}\n                      type=\"button\"\n                      className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\"\n                    >\n                      <MdCheckCircle className=\"text-white text-xl\" />\n                      <span>Submit</span>\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {submitModal === true && (\n        <Modal\n          title={\"\"}\n          backDrop={true}\n          theme={\n            props.candidateExam.question_answers.length === 0\n              ? Themes.default\n              : Themes.default\n          }\n          close={() => setSubmitModal(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.maxWidth}\n          displayClose={false}\n          padding={{ title: false }}\n          marginTop={ModalMarginTop.small}\n        >\n          <QuestionsReview\n            auth={props.auth}\n            candidateExam={props.candidateExam}\n            system={props.system}\n            setSelectedExamQuestion={props.setSelectedExamQuestion}\n            submitQuestionAnswer={props.submitQuestionAnswer}\n            questionTypes={props.questionTypes}\n            loadQuestionTypes={props.loadQuestionTypes}\n            submitExam={props.submitExam}\n            selectedExam={props.selectedExam}\n            setSubmitModal={setSubmitModal}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n} => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React from \"react\";\nimport { MdCheckCircleOutline, MdHighlightOff } from \"react-icons/md\";\nimport { InitialExamDetails } from \"../../actions/candidate_exam\";\n\ninterface ProctoringRuleItemProps {\n  examDetails: () => InitialExamDetails | null;\n  rule_key: string;\n}\n\nconst ProctoringRuleItem = (props: ProctoringRuleItemProps) => {\n  const getDetails = () => {\n    let res: {\n      value: string;\n      status: boolean;\n    } | null = null;\n    if (props.examDetails() !== null) {\n      switch (props.rule_key) {\n        case \"right_click_enabled\":\n          res = {\n            value: \"Right click\",\n            status: props.examDetails()!.rules.right_click_enabled,\n          };\n          break;\n        case \"copy_enabled\":\n          res = {\n            value: \"Copy text\",\n            status: props.examDetails()!.rules.copy_enabled,\n          };\n          break;\n        case \"paste_enabled\":\n          res = {\n            value: \"Paste item or text\",\n            status: props.examDetails()!.rules.paste_enabled,\n          };\n          break;\n        case \"stop_candidate_when_comeback\":\n          res = {\n            value: \"Coming back after leaving\",\n            status: props.examDetails()!.rules.stop_candidate_when_comeback,\n          };\n          break;\n        case \"allow_to_leave_browser\":\n          res = {\n            value: \"Leave browser\",\n            status: props.examDetails()!.rules.allow_to_leave_browser,\n          };\n          break;\n      }\n    }\n    return res;\n  };\n  return (\n    <div className=\"flex flex-row items-center justify-between w-full border-b py-2\">\n      <div\n        className={`flex flex-row items-center ${\n          getDetails()?.status === true\n            ? \"text-blue-600 font-bold\"\n            : \"text-yellow-800 font-bold\"\n        }`}\n      >\n        {getDetails()?.status === true ? (\n          <MdCheckCircleOutline className=\"text-2xl mr-3\" />\n        ) : (\n          <MdHighlightOff className=\"text-2xl mr-3\" />\n        )}\n        <span>{getDetails()?.value}</span>\n      </div>\n      <span\n        className={`rounded-full px-3 py-1 border font-bold ${\n          getDetails()?.status === true\n            ? \"bg-white text-blue-800 border-blue-100\"\n            : \"bg-yellow-50 text-yellow-800 border-yellow-100\"\n        }`}\n      >\n        {getDetails()?.status === true ? \"Allowed\" : \"Prohibited\"}\n      </span>\n    </div>\n  );\n};\n\nexport default ProctoringRuleItem;\n","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  Socket,\n  FC_AddRules,\n  FT_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n  Proctoring,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  EventInterface,\n  Events,\n  EventsLabels,\n  LiveServer__Candidate_Details,\n  LiveServer__Room,\n  question_answer,\n} from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport {\n  CandidateExam,\n  CandidateExamQuestionAnswer,\n  ExamInterface,\n  ExamResultsDetails,\n  examStatus,\n  UserExamActions,\n  userExamDetails,\n} from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdCheckCircle, MdInfoOutline } from \"react-icons/md\";\nimport ProctoringRuleItem from \"../../components/ProctoringRuleItem/ProctoringRuleItem\";\n\ninterface DoExamProps {\n  proctoring: Proctoring;\n  FC_GetProfileDetails: Function;\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (\n    exam_id: string,\n    CheckUserExam: (candidateExam: CandidateExam) => void,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (\n    userExamDetails: userExamDetails,\n    callback: (loading: boolean) => void,\n    setLoadExamResultMessage: (msg: string, status: boolean) => void,\n    BackToExamination: (exam: ExamResultsDetails) => void\n  ) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  CleanCandidateExamAnswers: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (\n    answer: CandidateExamQuestionAnswer,\n    callback: (loading: boolean) => void,\n    actionStatus: (msg: string, status: boolean) => void\n  ) => void;\n  GetUserExamDetails: (\n    request: RequestUserExamDetailsInterface,\n    callback: (loading: boolean) => void\n  ) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n  setExamStatus: (\n    user: string,\n    exam_paper_id: string,\n    action: UserExamActions,\n    reason: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_SaveEvent: Function;\n  socket: Socket;\n  FC_AddRules: FT_AddRules;\n  loadCandidateExamFromSupervisor: (\n    candidateExam: CandidateExam,\n    firstTime: boolean\n  ) => void;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n  changingExamStatus: boolean;\n  inExam: boolean;\n\n  // Exam counter\n  start_exam: boolean;\n  start_time: string;\n  duration: number;\n  added_minutes: number;\n  group_id: string;\n  submittedExam: boolean;\n  candidateDetailsProctoring: LiveServer__Candidate_Details | null;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n      changingExamStatus: false,\n      // timer\n      start_exam: false,\n      start_time: \"\",\n      duration: 0,\n      added_minutes: 0,\n      group_id: \"\",\n      inExam: false,\n      submittedExam: false,\n      candidateDetailsProctoring: null,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  };\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    // console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  changingExamStatusLoading = (status: boolean) => {\n    this.setState({ changingExamStatus: status });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check;\n      }\n    }\n    return null;\n  };\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (\n      this.props.positions.selected_position !== null &&\n      this.props.candidateExam.selected_exam_details !== null\n    ) {\n      if (this.props.candidateExam.exam_room_details !== null) {\n        // alert(this.props.candidateExam.exam_room_details.district_id)\n        this.props.RequestUserExamDetails(\n          {\n            user: this.props.auth.user.user_id,\n            position: this.props.positions.selected_position.position_id,\n            exam: exam,\n            userExamLocation: {\n              district_id:\n                this.props.candidateExam.exam_room_details.district_id,\n              center_id: this.props.candidateExam.exam_room_details.center_id,\n              room_id: this.props.candidateExam.exam_room_details.room_id,\n            },\n          },\n          this.setLoading,\n          this.setLoadExamResultMessage,\n          this.props.BackToExamination\n        );\n      }\n    }\n  };\n\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  componentWillUnmount = () => {\n    if (this.props.candidateExam.exam_room_details) {\n      this.props.socket.socket.emit(Events.USER_DISCONNECTED_ONLINE_SERVER, {\n        room_id: this.props.candidateExam.exam_room_details.room_id,\n        user_id: this.props.auth.user.user_id,\n      });\n    }\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      // );\n      let test = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.exam_paper ===\n          this.props.candidateExam.candidate_exam?.exam_paper_id\n      );\n      if (test === undefined) {\n        this.props.CleanCandidateExam(\n          this.props.candidateExam.candidate_exam.exam_paper_id\n        );\n      }\n    }\n  };\n\n  SubmitAnswer = () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.question_answers.length > 0\n    ) {\n      let examQuestionIds: string[] = [];\n      for (let temp of this.props.candidateExam.candidate_exam.questions) {\n        examQuestionIds = [...examQuestionIds, temp.question_id];\n      }\n      for (let answer of this.props.candidateExam.question_answers) {\n        let sel_question =\n          this.props.candidateExam.candidate_exam.questions.find(\n            (item) => item.question_id === answer.question_id\n          );\n        if (\n          answer.status === false &&\n          this.props.candidateExam.exam_room_details &&\n          sel_question !== undefined\n        ) {\n          //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer(\n            {\n              user: this.props.auth.user.user_id,\n              exam_paper: this.props.candidateExam.candidate_exam.exam_paper_id,\n              // New updates need to be checked\n              position: this.props.candidateExam.exam_room_details.position_id,\n              disability: this.props.auth.user.disability,\n              fname: this.props.auth.user.fname,\n              lname: this.props.auth.user.lname,\n              gender: this.props.auth.user.sex,\n              email: this.props.auth.user.email,\n              phone_number: this.props.auth.user.phone_number,\n              in_education: this.props.auth.user.in_education,\n              questions_order: examQuestionIds,\n              // End new updates\n              question: answer.question_id,\n              language:\n                sel_question.question.find(\n                  (itm) =>\n                    itm.language === this.props.candidateExam.selected_language\n                ) === undefined\n                  ? sel_question.question[0].language\n                  : this.props.candidateExam.selected_language,\n              userAnswer: answer.answer,\n            },\n            this.setSubmitQuestionAnswer,\n            this.setLoadExamResultNoMessage\n          );\n        }\n      }\n    }\n  };\n\n  submitExam = async () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.exam_room_details !== null\n    ) {\n      let exam_id = this.props.candidateExam.candidate_exam.exam_paper_id;\n      let user_id = this.props.auth.user.user_id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(\n          `${API.DO_EXAM}/answersheet/submit/${user_id}/${exam_id}`\n        );\n        if (res) {\n          this.doneExam();\n          this.setState({ submittedExam: true });\n          // this.props.CleanCandidateExam(exam_id);\n          // Exit full screen\n          if (document.fullscreenElement) {\n            if (document.exitFullscreen) {\n              document.exitFullscreen();\n            }\n          }\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success,\n          });\n        }\n      } catch (error: any) {\n        // console.log(\"Submit exam err: \", { ...error });\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  };\n\n  startExam = () => {\n    this.setState({ display_exam: true, start_exam: true });\n    this.props.candidateExam.selected_exam_id !== null &&\n      this.requestExam(\n        this.props.candidateExam.selected_exam_id,\n        (status: boolean, exam: CandidateExam) => {\n          // console.log(\"Testing exam from supervisor: \", exam);\n          if (status === true) {\n            this.props.loadCandidateExamFromSupervisor(\n              exam,\n              this.state.candidateDetailsProctoring !== null &&\n                this.state.candidateDetailsProctoring.user.joined === true\n                ? true\n                : false\n            );\n          }\n        }\n      );\n  };\n  pauseExam = () => {\n    this.setState({ display_exam: false, start_exam: false, inExam: false });\n  };\n\n  doneExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Done the exam\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.DONE_EXAM,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.EXAM_DONE_SERVER, data);\n    }\n  };\n\n  timeOutExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Time out\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.TIME_OUT,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.TIME_OUT_SERVER, data);\n      this.submitExam();\n      // console.log(\"this.submitExam(); ==> timeOutExam()\");\n    }\n  };\n\n  requestExam = (\n    exam_id: string,\n    getExam: (status: boolean, exam: CandidateExam) => void\n  ) => {\n    this.props.socket.socket.emit(Events.REQUEST_EXAM_SERVER, exam_id, getExam);\n  };\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/candidate-exams\" />;\n    }\n\n    if (\n      this.state.loading === true ||\n      this.props.candidateExam.exam_room_details === null\n    ) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Loading, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Submitting your exam, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50 w-full\">\n        <Fragment>\n          {/* {console.log(\"Rules: \")} */}\n          {this.state.inExam === false ? (\n            <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n              <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n                <div className=\"text-white text-lg px-4 mb-4\">Confirm</div>\n                <div className=\"flex flex-col items-center justify-center mb-10\">\n                  <Loading />\n                  <div className=\"text-yellow-800 text-xl font-bold my-5\">\n                    Something went wrong, retry again!\n                  </div>\n\n                  <div\n                    onClick={() => window.location.reload()}\n                    className=\"btn bg-yellow-100 text-yellow-800 border border-yellow-600 w-max text-center cursor-pointer\"\n                  >\n                    Click here to reload\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <ProctoringCandidateOnline\n              startExam={() => {\n                this.startExam();\n                this.setState({ start_exam: true });\n              }}\n              restartExam={() => {\n                if (this.props.candidateExam.candidate_exam !== null) {\n                  let id =\n                    this.props.candidateExam.candidate_exam.exam_paper_id;\n                  this.props.CleanCandidateExamAnswers(id);\n\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    id,\n                    UserExamActions.Restart,\n                    \"Exam restarted by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n\n                  // this.props.candidateExam.candidate_exam &&\n                  //   this.props.requestUserAnswers(\n                  //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                  //     this.props.auth.user.user_id,\n                  //     this.setLoading\n                  //   );\n                }\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              stopExam={() => {\n                // EXAM DONE ON WHOLE ROOM\n                // Stop all the room\n                // this.setState({ start_exam: false });\n                // console.log(\"DONE whole room\");\n                this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Done,\n                    \"All candidates ended by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              room_id={this.props.candidateExam.exam_room_details.room_id}\n              exam_id={\n                this.props.candidateExam.candidate_exam === null\n                  ? this.props.candidateExam.selected_exam_id\n                  : this.props.candidateExam.candidate_exam.exam_paper_id\n              }\n              position_id={\n                this.props.candidateExam.exam_room_details.position_id\n              }\n              application_session_id={\n                this.props.candidateExam.exam_room_details.period_id\n              }\n              removeClient={() => {\n                // REMOVE INDIVIDUAL\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Removed,\n                    \"Exam stopped by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              examAlreadyDone={() => {\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                // console.log(\"Exam already done\");\n              }}\n              candidateStopExam={(reason: string) => {\n                // PAUSE\n                // console.log(`candidateStopExam: ${reason}`);\n                // this.pauseExam();\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Paused,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n              }}\n              candidateContinueExam={(reason: string) => {\n                // console.log(`candidateContinueExam: ${reason}`);\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Continue,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              joinedRoom={(data: LiveServer__Room) => {\n                // console.log(\"Joined room: \", data);\n                this.setState({\n                  group_id: data.group_id,\n                });\n              }}\n              changeTime={(timer: {\n                duration: number;\n                start_time: string;\n                added_minutes: string;\n              }) => {\n                this.setState({\n                  duration: timer.duration,\n                  start_time: timer.start_time,\n                });\n              }}\n              candidateProctoringDetails={(\n                data: LiveServer__Candidate_Details\n              ) => {\n                this.setState({ candidateDetailsProctoring: data });\n                if (data.user.joined === true) {\n                  this.startExam();\n                  this.props.candidateExam.candidate_exam &&\n                    this.props.requestUserAnswers(\n                      this.props.candidateExam.candidate_exam.exam_paper_id,\n                      this.props.auth.user.user_id,\n                      this.setLoading\n                    );\n                }\n                // console.log(\"Joined: \", data.user.joined);\n              }}\n            >\n              {this.state.start_exam === false ||\n              (this.props.candidateExam.candidate_exam === null &&\n                this.state.inExam === true) ? (\n                // || this.props.proctoring.exam.start_exam === false\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    <MdInfoOutline className=\"text-9xl text-blue-600\" />\n                    <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">\n                      Please wait for the supervisor\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The supervisor will allow you to start your exam, please\n                      wait or contact him/her when forgot to let you start exam!\n                    </div>\n\n                    <Loading />\n                    <div className=\"flex flex-row items-center -mt-2\">\n                      <div\n                        onClick={() => window.location.reload()}\n                        className=\"btn bg-blue-100 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-808\"\n                      >\n                        Reload page\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : this.props.candidateExam.candidate_exam === null ||\n                this.props.candidateExam.candidate_exam === null ||\n                this.props.proctoring.exam.start_exam === false ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    {/* <MdInfoOutline className=\"text-9xl text-blue-600\" /> */}\n                    <div className=\"text-gray-700 text-5xl px-4 text-center font-extrabold\">\n                      Wait for the exam\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The exam is not yet initiated, wait for the supervisor to\n                      load the exam. If it continues to delay, please contact\n                      your invigilator\n                    </div>\n\n                    <Loading />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  {this.state.completedTest === true &&\n                  this.props.doExam.exam_answers?.exam_questions_answers\n                    ?.questionAnswers !== null ? (\n                    <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                      <DoExamResults\n                        page=\"doExam\"\n                        answeredQuestions={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers\n                        }\n                        testAnswers={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers.length === undefined\n                            ? 0\n                            : this.props.doExam.exam_answers\n                                ?.exam_questions_answers?.questionAnswers.length\n                        }\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                      <div className=\"grid md:grid-cols-12 h-full\">\n                        {this.state.windowStatus.profile === true && (\n                          <div\n                            className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                          >\n                            <Profile\n                              setProfileWindowStatus={\n                                this.setProfileWindowStatus\n                              }\n                            />\n                          </div>\n                        )}\n                        <div\n                          className={`col-span-${\n                            this.state.windowStatus.profile === false\n                              ? \"12\"\n                              : \"10\"\n                          } bg-gray-800 shadow-lg h-full`}\n                        >\n                          <div className=\"flex flex-row h-screen bg-gray-800\">\n                            <div className=\"h-full\">\n                              {/* Questions list */}\n                              <div className={`h-full`}>\n                                <QuestionsList\n                                  windowStatus={this.state.windowStatus}\n                                  setProfileWindowStatus={\n                                    this.setProfileWindowStatus\n                                  }\n                                  setQuestionsListWindowStatus={\n                                    this.setQuestionsListWindowStatus\n                                  }\n                                  questionTypes={this.props.questionTypes}\n                                  loadQuestionTypes={\n                                    this.props.loadQuestionTypes\n                                  }\n                                  SubmitAnswer={this.SubmitAnswer}\n                                />\n                              </div>\n                            </div>\n                            <div className=\"w-full h-full\">\n                              {/* Do exam test title */}\n                              <DoExamTitle\n                                setCompletedTest={this.setCompletedTest}\n                                windowStatus={this.state.windowStatus}\n                                setProfileWindowStatus={\n                                  this.setProfileWindowStatus\n                                }\n                                setQuestionsListWindowStatus={\n                                  this.setQuestionsListWindowStatus\n                                }\n                                questionTypes={this.props.questionTypes}\n                                loadQuestionTypes={this.props.loadQuestionTypes}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                                submitExam={() => {\n                                  this.submitExam();\n                                  // console.log(\n                                  //   \"this.submitExam() ===> <DoExamTitle />\"\n                                  // );\n                                }}\n                                selectedExam={this.props.course.selected_course}\n                                SubmitAnswer={this.SubmitAnswer}\n                                start_time={this.state.start_time}\n                                duration_min={this.state.duration}\n                                timeout={() => this.timeOutExam()}\n                              />\n                              {/* Question details */}\n                              <QuestionDetails\n                                questionAnswers={\n                                  this.props.doExam.exam_answers\n                                    ?.exam_questions_answers?.questionAnswers\n                                }\n                                answerQuestionFn={this.answerQuestionFn}\n                                selectedQuestion={this.state.selectedQuestion}\n                                setSelectedQuestion={this.setSelectedQuestion}\n                                preview={false}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <Footer\n                        windowStatus={this.state.windowStatus}\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                        setQuestionsListWindowStatus={\n                          this.setQuestionsListWindowStatus\n                        }\n                        questionTypes={this.props.questionTypes}\n                        loadQuestionTypes={this.props.loadQuestionTypes}\n                        SubmitAnswer={this.SubmitAnswer}\n                        submitQuestionAnswer={this.state.submitQuestionAnswer}\n                      />\n                    </div>\n                  )}\n                </div>\n              )}\n            </ProctoringCandidateOnline>\n          )}\n          {this.props.candidateExam.candidate_exam === null &&\n            this.state.inExam === false && (\n              <Modal\n                title=\"\"\n                backDrop={true}\n                theme={Themes.default}\n                close={() => this.props.setSelectedCandidateExam(null)}\n                backDropClose={false}\n                widthSizeClass={ModalSize.extraLarge}\n                displayClose={false}\n                padding={{ title: false }}\n              >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? (\n                    <Loading />\n                  ) : (\n                    <div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                        <div className=\"my-2 w-full\">\n                          <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                            {this.props.course.selected_course && (\n                              <div>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_code\n                                  }\n                                  -\n                                </span>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_name\n                                  }\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam date:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {DATE(\n                                this.examDetails()!.exam_date,\n                                \"DD/MM/YYYY\"\n                              )}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Start time:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails()?.start_time}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam duration:\n                            </span>\n                            {this.examDetails() !== null && (\n                              <span className=\"text-blue-600 font-bold\">\n                                {this.examDetails()!.duration / 60 >= 1 &&\n                                  this.examDetails()!.duration / 60 +\n                                    \" hrs\"}{\" \"}\n                                {this.examDetails()!.duration % 60 > 0 && (\n                                  <span>\n                                    {this.examDetails()!.duration % 60} mins\n                                  </span>\n                                )}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                      <div className=\"flex flex-row justify-center items-center\">\n                        {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                      </div>\n                      <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Examination rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: this.examDetails()!.termes,\n                              }}\n                            ></div>\n                          )}\n                        </div>\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Exam Proctoring rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <>\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"right_click_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"copy_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"paste_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"stop_candidate_when_comeback\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"allow_to_leave_browser\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        <span className=\"text-blue-700\">\n                          If you are ready, click to start the exam now, The\n                          system will start to count your time!\n                        </span>\n                      </div>\n                      <div className=\"flex flex-row items-center justify-between mt-2\">\n                        <button\n                          onClick={() =>\n                            this.props.setSelectedCandidateExam(null)\n                          }\n                          className=\"btn bg-gray-50 text-gray-600 border\"\n                        >\n                          Go Back\n                        </button>\n                        <button\n                          onClick={() => {\n                            this.setState({ inExam: true });\n                            this.props.candidateExam.selected_exam_id !==\n                              null &&\n                              this.requestExam(\n                                this.props.candidateExam.selected_exam_id,\n                                (status: boolean, exam: CandidateExam) => {\n                                  if (status === true) {\n                                    this.props.loadCandidateExamFromSupervisor(\n                                      exam,\n                                      this.state.candidateDetailsProctoring !==\n                                        null &&\n                                        this.state.candidateDetailsProctoring\n                                          .user.joined === true\n                                        ? true\n                                        : false\n                                    );\n                                  }\n                                }\n                              );\n                          }}\n                          className=\"btn bg-blue-600 text-white\"\n                        >\n                          I accept, Start exam\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </Modal>\n            )}\n          {this.state.submittedExam === true && (\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.medium}\n              displayClose={false}\n              padding={{ title: false }}\n            >\n              <div className=\"px-5 py-5\">\n                <div className=\"flex flex-row items-center justify-center\">\n                  <MdCheckCircle className=\"text-7xl text-blue-600\" />\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <span className=\"text-3xl font-extrabold text-blue-600 text-center\">\n                    Exam submitted\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center mt-3 mb-5\">\n                  <span className=\"text-center text-gray-500\">\n                    Thank you for attending the exam, Your exam has been\n                    submitted successfully!, click continue to the applications\n                    list, you will open the application to view your score right\n                    now.\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <div\n                    onClick={() => {\n                      this.setState({ submittedExam: false });\n                      if (document.fullscreenElement) {\n                        if (document.exitFullscreen) {\n                          document.exitFullscreen();\n                        }\n                      }\n                      this.props.candidateExam.candidate_exam &&\n                        this.props.CleanCandidateExam(\n                          this.props.candidateExam.candidate_exam.exam_paper_id\n                        );\n                      window.location.reload();\n                    }}\n                    className=\"btn bg-blue-100 text-blue-700 rounded w-max cursor-pointer\"\n                  >\n                    Continue to view marks\n                  </div>\n                </div>\n              </div>\n            </Modal>\n          )}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n  socket,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  positions: positionsStoreInterface;\n  socket: Socket;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    course: course,\n    periods: periods,\n    questionTypes: questionTypes,\n    positions: positions,\n    socket,\n    proctoring,\n  };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  FC_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n})(_DoEam);\n"],"sourceRoot":""}