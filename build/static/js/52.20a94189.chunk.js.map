{"version":3,"sources":["actions/location.ts","containers/Locations/RoomForm.tsx","containers/Locations/CenterForm.tsx","containers/Locations/ViewCenters.tsx","containers/Locations/index.tsx"],"names":["getAllRoom","callback","dispatch","a","axios","get","API","APPLICATION","res","type","ActionTypes","GET_ALL_ROOM","payload","data","console","error","errorToText","FC_CreateCenter","log","CREATE_CENTER","FC_UpdateCenter","UPDATE_CENTER","FC_DeleteCenter","DELETE_CENTER","FC_CreateRoom","CREATE_ROOM","FC_UpdateRoom","UPDATE_ROOM","FC_DeleteRoom","delete_room","DELETE_ROOM","RoomForm","props","className","element","onChange","e","setError","selectProvince","target","value","thisProvince","province_id","disabled","loadingRequest","locations","map","item","index","province_name","msg","selectDistrict","thisDistrict","district_id","filter","loc","length","districts","district","district_name","selectCenter","thisCenter","examination_center_id","centers","center","center_name","placeholder","roomNumber","setRoomNumber","parseInt","roomCapacity","setRoomCapacity","onClick","setActionTypes","setThisRoom","handleSubmitRoom","CenterForm","setCenterName","centerName","handleSubmit","connect","PushPopupAlert","useState","loadingDeletion","setLoadingDeletion","searchCenter","setSearchCenter","setLoadingRequest","actionTypes","post","rooms","thisProvinceId","title","theme","PopupAlertTheme","success","room","examination_center_room_id","patch","isUsed","doc_category_error","danger","handleDelete","centerId","window","confirm","delete","center_id","newArr","setThisDistrict","province_error","room_type","room_number","capacity","occupied","thisRoom","room_id","handleDeleteRoom","roomId","warning","setThisCenter","province","items","setThisProvince","d","searchData","id","Modal","backDrop","Themes","default","close","displayClose","backDropClose","widthSizeClass","ModalSize","medium","padding","body","footer","Locations","roomLocation","loading","setLoading","districtNotFound","setDistrictNotFound","useEffect","status","NoResult","NoResultThemes","Dark"],"mappings":"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","file":"static/js/52.20a94189.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport { API } from \"../utils/api\";\nimport {\n  CentersInterface,\n  DistrictInterface,\n  RoomLocationInterface,\n  RoomsInterface,\n} from \"../shared/interfaces\";\nimport { errorToText } from \"../utils/errors\";\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\nexport interface getAllRoomActions {\n  type: ActionTypes.GET_ALL_ROOM;\n  payload: RoomLocationInterface[];\n}\n\nexport interface createProvinceActions {\n  type: ActionTypes.CREATE_PROVINCE;\n  payload: RoomLocationInterface;\n}\n\nexport interface updateProvinceActions {\n  type: ActionTypes.UPDATE_PROVINCE;\n  payload: {\n    province_id: string;\n    province_name: string;\n  };\n}\n\nexport interface deleteProvinceActions {\n  type: ActionTypes.DELETE_PROVINCE;\n  payload: string;\n}\n\n// ============ DISTRICT =================\nexport interface createDistrictActions {\n  type: ActionTypes.CREATE_DISTRICT;\n  payload: { province_id: string; data: DistrictInterface };\n}\n\nexport interface updateDistrictActions {\n  type: ActionTypes.UPDATE_DISTRICT;\n  payload: {\n    province_id: string;\n    district_id: string;\n    district_name: string;\n  };\n}\n\nexport interface deleteDistrictActions {\n  type: ActionTypes.DELETE_DISTRICT;\n  payload: { province_id: string; district_id: string };\n}\n\n// ============ CENTERS =================\nexport interface createCenterActions {\n  type: ActionTypes.CREATE_CENTER;\n  payload: {\n    province_id: string;\n    district_id: string;\n    data: CentersInterface;\n  };\n}\n\nexport interface updateCenterActions {\n  type: ActionTypes.UPDATE_CENTER;\n  payload: {\n    province_id: string;\n    district_id: string;\n    examination_center_id: string;\n    center_name: string;\n  };\n}\n\nexport interface deleteCenterActions {\n  type: ActionTypes.DELETE_CENTER;\n  payload: { province_id: string; district_id: string; center_id: string };\n}\n\n// ============ ROOMS =================\nexport interface createRoomActions {\n  type: ActionTypes.CREATE_ROOM;\n  payload: {\n    province_id: string;\n    district_id: string;\n    center_id: string;\n    data: RoomsInterface;\n  };\n}\n\nexport interface updateRoomActions {\n  type: ActionTypes.UPDATE_ROOM;\n  payload: {\n    province_id: string;\n    district_id: string;\n    center_id: string;\n    room_id: string;\n    room_number: number;\n    capacity: number;\n  };\n}\n\nexport interface deleteRoomActions {\n  type: ActionTypes.DELETE_ROOM;\n  payload: {\n    province_id: string;\n    district_id: string;\n    center_id: string;\n    room_id: string;\n  };\n}\n\nexport type RoomActionType =\n  | getAllRoomActions\n  | createProvinceActions\n  | updateProvinceActions\n  | deleteProvinceActions\n  | createDistrictActions\n  | updateDistrictActions\n  | deleteDistrictActions\n  | createCenterActions\n  | updateCenterActions\n  | deleteCenterActions\n  | createRoomActions\n  | updateRoomActions\n  | deleteRoomActions;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\nexport const getAllRoom = (callback: Function) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\");\n    try {\n      const res = await axios.get<RoomLocationInterface[]>(\n        `${API.APPLICATION}/roomlocation`\n      );\n      dispatch<getAllRoomActions>({\n        type: ActionTypes.GET_ALL_ROOM,\n        payload: res.data,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error(\"Err: \", error);\n      callback(false, errorToText(error));\n    }\n  };\n};\n\nexport const FC_CreateProvince = (data: RoomLocationInterface) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<createProvinceActions>({\n      type: ActionTypes.CREATE_PROVINCE,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_UpdateProvince = (data: {\n  province_id: string;\n  province_name: string;\n}) => {\n  console.log({ data });\n  return async (dispatch: Dispatch) => {\n    dispatch<updateProvinceActions>({\n      type: ActionTypes.UPDATE_PROVINCE,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_DeleteProvince = (data: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<deleteProvinceActions>({\n      type: ActionTypes.DELETE_PROVINCE,\n      payload: data,\n    });\n  };\n};\n\n// DISTRICT =================\nexport const FC_CreateDistrict = (data: {\n  province_id: string;\n  data: DistrictInterface;\n}) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<createDistrictActions>({\n      type: ActionTypes.CREATE_DISTRICT,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_UpdateDistrict = (data: {\n  province_id: string;\n  district_id: string;\n  district_name: string;\n}) => {\n  console.log({ data });\n  return async (dispatch: Dispatch) => {\n    dispatch<updateDistrictActions>({\n      type: ActionTypes.UPDATE_DISTRICT,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_DeleteDistrict = (data: {\n  province_id: string;\n  district_id: string;\n}) => {\n  console.log({ data });\n  return async (dispatch: Dispatch) => {\n    dispatch<deleteDistrictActions>({\n      type: ActionTypes.DELETE_DISTRICT,\n      payload: data,\n    });\n  };\n};\n\n// CENTERS =================\nexport const FC_CreateCenter = (data: {\n  province_id: string;\n  district_id: string;\n  data: CentersInterface;\n}) => {\n  console.log({ data });\n  return async (dispatch: Dispatch) => {\n    dispatch<createCenterActions>({\n      type: ActionTypes.CREATE_CENTER,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_UpdateCenter = (data: {\n  province_id: string;\n  district_id: string;\n  examination_center_id: string;\n  center_name: string;\n}) => {\n  console.log({ data });\n  return async (dispatch: Dispatch) => {\n    dispatch<updateCenterActions>({\n      type: ActionTypes.UPDATE_CENTER,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_DeleteCenter = (data: {\n  province_id: string;\n  district_id: string;\n  center_id: string;\n}) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<deleteCenterActions>({\n      type: ActionTypes.DELETE_CENTER,\n      payload: data,\n    });\n  };\n};\n\n// ROOM =================\nexport const FC_CreateRoom = (data: {\n  province_id: string;\n  district_id: string;\n  center_id: string;\n  data: RoomsInterface;\n}) => {\n  console.log({ data });\n  return async (dispatch: Dispatch) => {\n    dispatch<createRoomActions>({\n      type: ActionTypes.CREATE_ROOM,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_UpdateRoom = (data: {\n  province_id: string;\n  district_id: string;\n  center_id: string;\n  room_id: string;\n  room_number: number;\n  capacity: number;\n}) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<updateRoomActions>({\n      type: ActionTypes.UPDATE_ROOM,\n      payload: data,\n    });\n  };\n};\n\nexport const FC_DeleteRoom = (data: {\n  province_id: string;\n  district_id: string;\n  center_id: string;\n  room_id: string;\n}) => {\n  console.log({ delete_room: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<deleteRoomActions>({\n      type: ActionTypes.DELETE_ROOM,\n      payload: data,\n    });\n  };\n};\n","import React, { Fragment } from \"react\";\nimport {\n  CentersInterface,\n  DistrictInterface,\n  RoomLocationInterface,\n  RoomsInterface,\n} from \"../../shared/interfaces\";\n\ninterface RoomFormProps {\n  thisCenter: CentersInterface | null;\n  thisDistrict: DistrictInterface;\n  thisProvince: RoomLocationInterface;\n  locations: RoomLocationInterface[];\n  roomNumber: number;\n  roomCapacity: number;\n  thisRoom: RoomsInterface | null;\n  error: {\n    element: string;\n    msg: string;\n  } | null;\n  loadingRequest: boolean;\n  setError: (\n    value: React.SetStateAction<{\n      element: string;\n      msg: string;\n    } | null>\n  ) => void;\n  setRoomNumber: React.Dispatch<React.SetStateAction<number>>;\n  setRoomCapacity: React.Dispatch<React.SetStateAction<number>>;\n  setThisRoom: React.Dispatch<React.SetStateAction<RoomsInterface | null>>;\n  setActionTypes: React.Dispatch<\n    React.SetStateAction<\n      | \"\"\n      | \"CREATE_PROVINCE\"\n      | \"UPDATE_PROVINCE\"\n      | \"CREATE_DISTRICT\"\n      | \"UPDATE_DISTRICT\"\n      | \"CREATE_CENTER\"\n      | \"UPDATE_CENTER\"\n      | \"CREATE_ROOM\"\n      | \"UPDATE_ROOM\"\n    >\n  >;\n  handleSubmitRoom: () => Promise<void>;\n  selectProvince: (province_id: string) => void;\n  selectDistrict: (province_id: string, district_id: string) => void;\n  selectCenter: (\n    province_id: string,\n    district_id: string,\n    center_id: string\n  ) => void;\n}\n\nconst RoomForm = (props: RoomFormProps) => {\n  return (\n    <Fragment>\n      <div className=\"py-4 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7\">\n        {/* PROVINCE SELECT ========================================== */}\n        <div className=\"flex flex-col\">\n          <label>Province</label>\n          <select\n            className={`bg-white py-1 px-2 border-2 w-full focus:outline-none focus:bg-gray-100 text-gray-600 focus:text-gray-800 rounded h-10 md:w-full ${\n              props.error && props.error.element === \"province_id\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            }`}\n            onChange={(e) => {\n              props.error &&\n                props.error.element === \"province_id\" &&\n                props.setError(null);\n              props.selectProvince(e.target.value);\n            }}\n            value={props.thisProvince.province_id}\n            disabled={props.loadingRequest}\n          >\n            <option value=\"\" disabled>\n              Select province\n            </option>\n            {props.locations.map((item, index) => (\n              <option value={item.province_id} key={item.province_id + index}>\n                {item.province_name}\n              </option>\n            ))}\n          </select>\n          {props.error && props.error.element === \"province_id\" && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n        {/* END PROVINCE SELECT ========================================== */}\n\n        {/* DISTRICT SELECT ========================================== */}\n        <div className=\"flex flex-col\">\n          <label>District</label>\n          <select\n            className={`bg-white py-1 px-2 border-2 w-full focus:outline-none focus:bg-gray-100 text-gray-600 focus:text-gray-800 rounded h-10 md:w-full ${\n              props.error && props.error.element === \"district_id\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            }`}\n            onChange={(e) => {\n              props.error &&\n                props.error.element === \"district_id\" &&\n                props.setError(null);\n              props.selectDistrict(\n                props.thisProvince.province_id,\n                e.target.value\n              );\n            }}\n            value={props.thisDistrict.district_id}\n            disabled={props.loadingRequest || props.thisProvince === null}\n          >\n            <option value=\"\" disabled>\n              Select district\n            </option>\n            {props.thisProvince !== null &&\n            props.locations.filter(\n              (loc) => loc.province_id === props.thisProvince!.province_id\n            ).length > 0 ? (\n              props.locations\n                .filter(\n                  (loc) => loc.province_id === props.thisProvince!.province_id\n                )[0]\n                .districts.map((district, index) => (\n                  <option\n                    value={district.district_id}\n                    key={index + district.district_id}\n                  >\n                    {district.district_name}\n                  </option>\n                ))\n            ) : (\n              <option value=\"\" disabled>\n                No district found\n              </option>\n            )}\n          </select>\n          {props.error && props.error.element === \"district_id\" && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n        {/* END DISTRICT SELECT ========================================== */}\n\n        {/* DISTRICT SELECT ========================================== */}\n        <div className=\"flex flex-col\">\n          <label>Center</label>\n          <select\n            className={`bg-white py-1 px-2 border-2 w-full focus:outline-none focus:bg-gray-100 text-gray-600 focus:text-gray-800 rounded h-10 md:w-full ${\n              props.error && props.error.element === \"center_id\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            }`}\n            onChange={(e) => {\n              props.error &&\n                props.error.element === \"center_id\" &&\n                props.setError(null);\n              props.selectCenter(\n                props.thisProvince.province_id,\n                props.thisDistrict.district_id,\n                e.target.value\n              );\n            }}\n            value={\n              props.thisCenter ? props.thisCenter.examination_center_id : \"\"\n            }\n            disabled={\n              props.loadingRequest ||\n              props.thisProvince === null ||\n              props.thisDistrict === null\n            }\n          >\n            <option value=\"\" disabled>\n              Select center\n            </option>\n            {props.thisDistrict !== null &&\n            props.thisDistrict.centers.length > 0 ? (\n              props.thisDistrict.centers.map((center, index) => (\n                <option\n                  value={center.examination_center_id}\n                  key={index + center.examination_center_id}\n                >\n                  {center.center_name}\n                </option>\n              ))\n            ) : (\n              <option value=\"\" disabled>\n                No center found\n              </option>\n            )}\n          </select>\n          {props.error && props.error.element === \"center_id\" && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n        {/* END DISTRICT SELECT ========================================== */}\n\n        <div className=\"flex flex-col\">\n          <label>Room</label>\n          <input\n            type=\"number\"\n            className={`text-left input-white w-full inline-block border-2 ${\n              props.error && props.error.element === \"room_number\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            }`}\n            placeholder=\"Room number\"\n            value={props.roomNumber}\n            onChange={(e) => props.setRoomNumber(parseInt(e.target.value))}\n            disabled={props.loadingRequest}\n          />\n          {props.error && props.error.element === \"room_number\" && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n        <div className=\"flex flex-col\">\n          <label>Seats Capacity</label>\n          <input\n            type=\"number\"\n            className={`text-left input-white w-full inline-block border-2 ${\n              props.error && props.error.element === \"room_capacity\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            }`}\n            placeholder=\"Room capacity\"\n            value={props.roomCapacity}\n            onChange={(e) => props.setRoomCapacity(parseInt(e.target.value))}\n            disabled={props.loadingRequest}\n          />\n          {props.error && props.error.element === \"room_capacity\" && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n      </div>\n      <div className=\"pt-4 flex justify-between\">\n        <button\n          onClick={() => {\n            props.setActionTypes(\"\");\n            props.setThisRoom(null);\n            props.setRoomCapacity(0);\n            props.setRoomNumber(0);\n          }}\n          className={`btn bg-gray-400 text-white hover:bg-gray-600`}\n          type=\"button\"\n          disabled={props.loadingRequest}\n        >\n          Exit\n        </button>\n        <button\n          className=\"btn bg-primary text-white hover:bg-blue-600\"\n          type=\"button\"\n          onClick={() => props.handleSubmitRoom()}\n          disabled={props.loadingRequest}\n        >\n          {props.loadingRequest ? \"Loading...\" : \"Save\"}\n        </button>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default RoomForm;\n","import React, { Fragment } from \"react\";\nimport { MdCancel, MdSave } from \"react-icons/md\";\nimport {\n  DistrictInterface,\n  RoomLocationInterface,\n} from \"../../shared/interfaces\";\n\ninterface CenterFormProps {\n  thisDistrict: DistrictInterface;\n  thisProvince: RoomLocationInterface;\n  locations: RoomLocationInterface[];\n  loadingRequest: boolean;\n  centerName: string;\n  error: {\n    element: string;\n    msg: string;\n  } | null;\n  setCenterName: (value: React.SetStateAction<string>) => void;\n  setError: (\n    value: React.SetStateAction<{\n      element: string;\n      msg: string;\n    } | null>\n  ) => void;\n  setActionTypes: React.Dispatch<\n    React.SetStateAction<\n      | \"\"\n      | \"CREATE_PROVINCE\"\n      | \"UPDATE_PROVINCE\"\n      | \"CREATE_DISTRICT\"\n      | \"UPDATE_DISTRICT\"\n      | \"CREATE_CENTER\"\n      | \"UPDATE_CENTER\"\n      | \"CREATE_ROOM\"\n      | \"UPDATE_ROOM\"\n    >\n  >;\n  handleSubmit: () => Promise<void>;\n  selectProvince: (province_id: string) => void;\n  selectDistrict: (province_id: string, district_id: string) => void;\n}\n\nconst CenterForm: React.FC<CenterFormProps> = (props) => {\n  return (\n    <Fragment>\n      <div className=\"py-4 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7\">\n        {/* PROVINCE SELECT ========================================== */}\n        <div className=\"flex flex-col\">\n          <label>Province</label>\n          <select\n            className={`bg-white py-1 px-2 border-2 w-full focus:outline-none focus:bg-gray-100 text-gray-600 focus:text-gray-800 rounded h-10 md:w-full ${\n              props.error && props.error.element === \"province_id\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            }`}\n            onChange={(e) => {\n              props.error &&\n                props.error.element === \"province_id\" &&\n                props.setError(null);\n              props.selectProvince(e.target.value);\n            }}\n            value={props.thisProvince.province_id}\n            disabled={props.loadingRequest}\n          >\n            <option value=\"\" disabled>\n              Select province\n            </option>\n            {props.locations.map((item, index) => (\n              <option value={item.province_id} key={item.province_id + index}>\n                {item.province_name}\n              </option>\n            ))}\n          </select>\n          {props.error && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n        {/* END PROVINCE SELECT ========================================== */}\n\n        {/* DISTRICT SELECT ========================================== */}\n        <div className=\"flex flex-col\">\n          <label>District</label>\n          <select\n            className={`bg-white py-1 px-2 border-2 w-full focus:outline-none focus:bg-gray-100 text-gray-600 focus:text-gray-800 rounded h-10 md:w-full ${\n              props.error && props.error.element === \"district_id\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            }`}\n            onChange={(e) => {\n              props.error &&\n                props.error.element === \"district_id\" &&\n                props.setError(null);\n              props.selectDistrict(\n                props.thisProvince.province_id,\n                e.target.value\n              );\n            }}\n            value={props.thisDistrict.district_id}\n            disabled={props.loadingRequest || props.thisProvince === null}\n          >\n            <option value=\"\" disabled>\n              Select district\n            </option>\n            {props.thisProvince !== null &&\n            props.locations.filter(\n              (loc) => loc.province_id === props.thisProvince!.province_id\n            ).length > 0 ? (\n              props.locations\n                .filter(\n                  (loc) => loc.province_id === props.thisProvince!.province_id\n                )[0]\n                .districts.map((district, index) => (\n                  <option\n                    value={district.district_id}\n                    key={index + district.district_id}\n                  >\n                    {district.district_name}\n                  </option>\n                ))\n            ) : (\n              <option value=\"\" disabled>\n                No district found\n              </option>\n            )}\n          </select>\n          {props.error && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n        {/* END DISTRICT SELECT ========================================== */}\n\n        <div className=\"flex flex-col\">\n          <label>Center name</label>\n          <input\n            type=\"text\"\n            className={`bg-white py-1 px-2 border-2 ${\n              props.error && props.error.element === \"center_name\"\n                ? \"border-red-700\"\n                : \"border-gray-400 focus:border-gray-500\"\n            } rounded focus:outline-none focus:bg-gray-100`}\n            onChange={(e) => {\n              props.error &&\n                props.error.element === \"center_name\" &&\n                props.setError(null);\n              props.setCenterName(e.target.value);\n            }}\n            value={props.centerName}\n            disabled={props.loadingRequest}\n          />\n          {props.error && (\n            <span className=\"text-red-700\">{props.error.msg}</span>\n          )}\n        </div>\n      </div>\n      <div className=\"pt-4 flex justify-between\">\n        <button\n          type=\"button\"\n          className=\"btn bg-gray-500 focus:outline-none hover:bg-gray-700 text-white flex items-center gap-1\"\n          onClick={() => {\n            props.setActionTypes(\"\");\n            props.setCenterName(\"\");\n          }}\n          disabled={props.loadingRequest}\n        >\n          <MdCancel\n            className={`inline-block mr-1 text-xl font-bold ${\n              props.loadingRequest ? \"animate-pulse\" : \"\"\n            }`}\n          />\n          Cancel\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-blue focus:outline-none flex items-center gap-1\"\n          onClick={() => props.handleSubmit()}\n          disabled={props.loadingRequest}\n        >\n          <MdSave className=\"inline-blocktext-xl font-bold\" />\n          <span>{props.loadingRequest ? \"loading...\" : \"Save\"}</span>\n        </button>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default CenterForm;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  MdAdd,\n  MdClear,\n  MdCreate,\n  MdDelete,\n  MdExpandLess,\n  MdExpandMore,\n} from \"react-icons/md\";\nimport {\n  FC_CreateCenter,\n  FC_CreateRoom,\n  FC_DeleteCenter,\n  FC_DeleteRoom,\n  FC_UpdateCenter,\n  FC_UpdateRoom,\n} from \"../../actions/location\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport {\n  CentersInterface,\n  DistrictInterface,\n  RoomLocationInterface,\n  RoomsInterface,\n} from \"../../shared/interfaces\";\nimport { PushPopupAlert } from \"../../actions/system\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { errorToText } from \"../../utils/errors\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { AiOutlineFileSearch } from \"react-icons/ai\";\nimport RoomForm from \"./RoomForm\";\nimport CenterForm from \"./CenterForm\";\nimport searchData from \"../../utils/search\";\n\ninterface AppProps {\n  thisProvinceId: string;\n  thisDistrict: DistrictInterface;\n  thisCenter: CentersInterface | null;\n  thisRoom: RoomsInterface | null;\n  thisProvince: RoomLocationInterface | null;\n  locations: RoomLocationInterface[];\n  loadingRequest: boolean;\n  actionTypes:\n    | \"\"\n    | \"CREATE_PROVINCE\"\n    | \"UPDATE_PROVINCE\"\n    | \"CREATE_DISTRICT\"\n    | \"UPDATE_DISTRICT\"\n    | \"CREATE_CENTER\"\n    | \"UPDATE_CENTER\"\n    | \"CREATE_ROOM\"\n    | \"UPDATE_ROOM\";\n  setLoadingRequest: React.Dispatch<React.SetStateAction<boolean>>;\n  setThisCenter: React.Dispatch<React.SetStateAction<CentersInterface | null>>;\n  setThisRoom: React.Dispatch<React.SetStateAction<RoomsInterface | null>>;\n  setThisDistrict: React.Dispatch<\n    React.SetStateAction<DistrictInterface | null>\n  >;\n  setThisProvince: React.Dispatch<\n    React.SetStateAction<RoomLocationInterface | null>\n  >;\n  setActionTypes: React.Dispatch<\n    React.SetStateAction<\n      | \"\"\n      | \"CREATE_PROVINCE\"\n      | \"UPDATE_PROVINCE\"\n      | \"CREATE_DISTRICT\"\n      | \"UPDATE_DISTRICT\"\n      | \"CREATE_CENTER\"\n      | \"UPDATE_CENTER\"\n      | \"CREATE_ROOM\"\n      | \"UPDATE_ROOM\"\n    >\n  >;\n  FC_CreateCenter: Function;\n  FC_UpdateCenter: Function;\n  FC_DeleteCenter: Function;\n  FC_CreateRoom: Function;\n  FC_UpdateRoom: Function;\n  FC_DeleteRoom: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\nconst ViewCenters: React.FC<AppProps> = (props) => {\n  const [centerName, setCenterName] = useState<string>(\"\");\n  const [roomNumber, setRoomNumber] = useState<number>(0);\n  const [roomCapacity, setRoomCapacity] = useState<number>(0);\n  const [error, setError] = useState<{ element: string; msg: string } | null>(\n    null\n  );\n  const [loadingDeletion, setLoadingDeletion] = useState<string>(\"\");\n  const [searchCenter, setSearchCenter] = useState<string>(\"\");\n\n  const handleSubmit = async () => {\n    if (!props.thisProvince) {\n      return setError({\n        element: \"province_id\",\n        msg: \"Province is required\",\n      });\n    }\n    if (!props.thisDistrict) {\n      return setError({\n        element: \"district_id\",\n        msg: \"District is required\",\n      });\n    }\n    if (!centerName.length) {\n      return setError({\n        element: \"center_name\",\n        msg: \"Center name is required\",\n      });\n    }\n    props.setLoadingRequest(true);\n    try {\n      let res;\n      if (props.actionTypes === \"CREATE_CENTER\") {\n        res = await axios.post<{ data: CentersInterface }>(\n          `${API.APPLICATION}/center`,\n          {\n            district_id: props.thisDistrict.district_id,\n            center_name: centerName,\n            rooms: [],\n          }\n        );\n        if (res.data) {\n          props.FC_CreateCenter({\n            province_id: props.thisProvinceId,\n            district_id: props.thisDistrict.district_id,\n            data: res.data.data,\n          });\n          props.PushPopupAlert({\n            title: \"New Center created successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(\"\");\n          setCenterName(\"\");\n        }\n      } else if (props.thisCenter && props.actionTypes === \"UPDATE_CENTER\") {\n        const rooms: string[] = props.thisCenter.rooms.map(\n          (room) => room.examination_center_room_id\n        );\n        res = await axios.patch<{ update: CentersInterface }>(\n          `${API.APPLICATION}/center`,\n          {\n            examination_center_id: props.thisCenter.examination_center_id,\n            center_name: centerName,\n            rooms,\n            isUsed: true,\n          }\n        );\n        if (res.data) {\n          props.FC_UpdateCenter({\n            province_id: props.thisProvinceId,\n            district_id: props.thisDistrict.district_id,\n            examination_center_id: props.thisCenter.examination_center_id,\n            center_name: centerName,\n          });\n          props.PushPopupAlert({\n            title: \"Center updated successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(\"\");\n          setCenterName(\"\");\n        }\n      }\n    } catch (error) {\n      console.log({ doc_category_error: error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n      props.setLoadingRequest(false);\n    }\n  };\n\n  const handleDelete = async (centerId: string) => {\n    if (window.confirm(\"Are you sure do you want to delete this center?\")) {\n      setLoadingDeletion(centerId);\n      try {\n        const res = await axios.delete<CentersInterface>(\n          `${API.APPLICATION}/center/${centerId}`\n        );\n\n        if (res.data) {\n          props.FC_DeleteCenter({\n            province_id: props.thisProvinceId,\n            district_id: props.thisDistrict.district_id,\n            center_id: centerId,\n          });\n          let newArr: DistrictInterface = { ...props.thisDistrict }; // copying the old datas array\n          let center: CentersInterface[] = [];\n\n          center = props.thisDistrict.centers.filter(\n            (element) => element.examination_center_id !== centerId\n          );\n          newArr.centers = center;\n          props.setThisDistrict(newArr);\n\n          props.PushPopupAlert({\n            title: \"Center deleted successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(\"\");\n        }\n      } catch (error) {\n        console.log({ province_error: error });\n        props.PushPopupAlert({\n          title: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n        props.setLoadingRequest(false);\n      }\n      setLoadingDeletion(\"\");\n    }\n  };\n\n  const handleSubmitRoom = async () => {\n    if (!props.thisProvince) {\n      return setError({\n        element: \"province_id\",\n        msg: \"Province is required\",\n      });\n    }\n\n    if (!props.thisDistrict) {\n      return setError({\n        element: \"district_id\",\n        msg: \"District is required\",\n      });\n    }\n\n    if (!props.thisCenter) {\n      return setError({\n        element: \"center_id\",\n        msg: \"Center is required\",\n      });\n    }\n\n    if (roomNumber <= 0) {\n      return setError({\n        element: \"room_number\",\n        msg: \"Room number is required\",\n      });\n    }\n\n    if (roomCapacity <= 0) {\n      return setError({\n        element: \"room_capacity\",\n        msg: \"Enter valid room capacity\",\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      let res;\n      if (props.actionTypes === \"CREATE_ROOM\") {\n        res = await axios.post<{ data: RoomsInterface }>(\n          `${API.APPLICATION}/centerroom`,\n          {\n            center_id: props.thisCenter.examination_center_id,\n            room_type: \"Physical room\",\n            room_number: roomNumber,\n            capacity: roomCapacity,\n            occupied: 0,\n          }\n        );\n        if (res.data) {\n          props.FC_CreateRoom({\n            province_id: props.thisProvinceId,\n            district_id: props.thisDistrict.district_id,\n            center_id: props.thisCenter.examination_center_id,\n            data: res.data.data,\n          });\n          props.PushPopupAlert({\n            title: \"New Room created successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(\"\");\n          setRoomNumber(0);\n          setRoomCapacity(0);\n        }\n      } else if (props.thisRoom && props.actionTypes === \"UPDATE_ROOM\") {\n        res = await axios.patch<{ data: RoomsInterface }>(\n          `${API.APPLICATION}/centerroom`,\n          {\n            examination_center_room_id:\n              props.thisRoom.examination_center_room_id,\n            center_id: props.thisCenter.examination_center_id,\n            room_type: props.thisRoom.room_type,\n            room_number: roomNumber,\n            capacity: roomCapacity,\n            occupied: props.thisRoom.occupied,\n            isUsed: true,\n          }\n        );\n        if (res.data) {\n          props.FC_UpdateRoom({\n            province_id: props.thisProvinceId,\n            district_id: props.thisDistrict.district_id,\n            center_id: props.thisCenter.examination_center_id,\n            room_id: props.thisRoom.examination_center_room_id,\n            room_number: roomNumber,\n            capacity: roomCapacity,\n          });\n          props.PushPopupAlert({\n            title: \"Room updated successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(\"\");\n          setRoomNumber(0);\n          setRoomCapacity(0);\n          props.setThisRoom(null);\n        }\n      }\n    } catch (error) {\n      console.log({ doc_category_error: error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n      props.setLoadingRequest(false);\n    }\n  };\n\n  const handleDeleteRoom = async (roomId: string) => {\n    if (window.confirm(\"Are you sure do you want to delete this room?\")) {\n      if (props.thisCenter === null) {\n        return PushPopupAlert({\n          title: \"Center is required!\",\n          theme: PopupAlertTheme.warning,\n        });\n      }\n      setLoadingDeletion(roomId);\n      try {\n        const res = await axios.delete<CentersInterface>(\n          `${API.APPLICATION}/centerroom/${roomId}`\n        );\n        if (res.data) {\n          console.log({ res });\n          let newArr: CentersInterface = { ...props.thisCenter }; // copying the old datas array\n          let room: RoomsInterface[] = [];\n\n          room = props.thisCenter.rooms.filter(\n            (element) => element.examination_center_room_id !== roomId\n          );\n          newArr.rooms = room;\n          props.FC_DeleteRoom({\n            province_id: props.thisProvinceId,\n            district_id: props.thisDistrict.district_id,\n            center_id: props.thisCenter.examination_center_id,\n            room_id: roomId,\n          });\n          props.setThisCenter(newArr);\n          props.PushPopupAlert({\n            title: \"Room deleted successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(\"\");\n        }\n      } catch (error) {\n        console.log({ province_error: error });\n        props.PushPopupAlert({\n          title: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n        props.setLoadingRequest(false);\n      }\n      setLoadingDeletion(\"\");\n    }\n  };\n\n  const selectProvince = (province_id: string) => {\n    let province = props.locations.filter(\n      (items) => items.province_id === province_id\n    )[0];\n    props.setThisProvince(province);\n    if (province.districts.length > 0) {\n      props.setThisDistrict(\n        props.locations.filter((items) => items.province_id === province_id)[0]\n          .districts[0]\n      );\n    }\n  };\n  const selectDistrict = (province_id: string, district_id: string) => {\n    props.setThisDistrict(\n      props.locations\n        .filter((items) => items.province_id === province_id)[0]\n        .districts.filter((d) => d.district_id === district_id)[0]\n    );\n    props.setThisCenter(null);\n  };\n  const selectCenter = (\n    province_id: string,\n    district_id: string,\n    center_id: string\n  ) => {\n    props.setThisCenter(\n      props.locations\n        .filter((items) => items.province_id === province_id)[0]\n        .districts.filter((d) => d.district_id === district_id)[0]\n        .centers.filter((item) => item.examination_center_id === center_id)[0]\n    );\n  };\n\n  const isRoomExist = (thisCenter: CentersInterface): boolean => {\n    if (thisCenter.rooms.length > 0) {\n      return true;\n    }\n    return false;\n  };\n\n  const cleanModal = () => {\n    if (\n      props.actionTypes === \"CREATE_ROOM\" ||\n      props.actionTypes === \"UPDATE_ROOM\"\n    ) {\n      props.setThisRoom(null);\n      setRoomCapacity(0);\n      setRoomNumber(0);\n    }\n    if (\n      (props.actionTypes === \"CREATE_CENTER\" ||\n        props.actionTypes === \"UPDATE_CENTER\") &&\n      props.thisProvince\n    ) {\n      setCenterName(\"\");\n    }\n    props.setActionTypes(\"\");\n    setError(null);\n  };\n\n  return (\n    <div\n      className={`bg-white w-full p-2 border border-gray-300 rounded shadow`}\n    >\n      <div className=\"border-b px-2 py-3 flex justify-between\">\n        <h2 className=\"text-3xl font-semibold text-gray-800\">\n          List of Centers\n        </h2>\n        <div className=\"flex items-center gap-2\">\n          <button\n            type=\"button\"\n            className={`btn mb-1 border-2 border-blue-400 bg-blue-400 hover:bg-blue-500 hover:border-blue-500\n        text-white rounded-md flex items-center font-bold focus:outline-none ${\n          props.loadingRequest && \"cursor-wait\"\n        } ${props.actionTypes !== \"\" && \"cursor-not-allowed\"}`}\n            onClick={() => props.setActionTypes(\"CREATE_CENTER\")}\n            disabled={props.actionTypes !== \"\" || props.loadingRequest}\n          >\n            <MdAdd className=\"inline-block mr-1 text-xl font-bold\" /> New Center\n          </button>\n          <button\n            type=\"button\"\n            className={`btn hover:bg-blue-500 mb-1 border-2 border-blue-500 bg-white\n        hover:text-white rounded-md flex items-center font-bold text-gray-700 focus:outline-none gap-1 ${\n          props.loadingRequest && \"cursor-wait\"\n        } ${props.actionTypes !== \"\" && \"cursor-not-allowed\"}`}\n            onClick={() => props.setActionTypes(\"CREATE_ROOM\")}\n            disabled={props.actionTypes !== \"\" || props.loadingRequest}\n          >\n            <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n            New Room\n          </button>\n        </div>\n      </div>\n\n      {/* FILTER FORM ======================================== */}\n      <div className=\"flex flex-col sm:flex-row items-center gap-2 w-full my-2\">\n        <div className=\"w-full sm:w-1/5\">\n          <select\n            className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500 w-full\"\n            placeholder={`Filter by province`}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              selectProvince(e.target.value)\n            }\n            value={props.thisProvince ? props.thisProvince.province_id : \"\"}\n          >\n            <option value=\"\" disabled>\n              Filter by province\n            </option>\n            {props.locations.map((province, index) => (\n              <option\n                value={province.province_id}\n                key={index + province.province_id}\n              >\n                {province.province_name}\n              </option>\n            ))}\n          </select>\n        </div>\n        {props.thisProvince && (\n          <div className=\"w-full sm:w-1/5\">\n            <select\n              className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500 w-full\"\n              placeholder={`Filter by district`}\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                selectDistrict(props.thisProvince!.province_id, e.target.value)\n              }\n              value={props.thisDistrict ? props.thisDistrict.district_id : \"\"}\n            >\n              <option value=\"\" disabled>\n                Filter by district\n              </option>\n              {props.thisProvince !== null &&\n              props.locations.filter(\n                (loc) => loc.province_id === props.thisProvince!.province_id\n              ).length > 0 ? (\n                props.locations\n                  .filter(\n                    (loc) => loc.province_id === props.thisProvince!.province_id\n                  )[0]\n                  .districts.map((district, index) => (\n                    <option\n                      value={district.district_id}\n                      key={index + district.district_id}\n                    >\n                      {district.district_name}\n                    </option>\n                  ))\n              ) : (\n                <option value=\"\" disabled>\n                  No district found\n                </option>\n              )}\n            </select>\n          </div>\n        )}\n        <div className=\"w-full sm:w-3/5\">\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearchCenter(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500\"\n            placeholder={`Search ${props.thisDistrict.district_name}'s centers by title`}\n            value={searchCenter}\n            disabled={props.thisDistrict.centers.length > 0 ? false : true}\n          />\n        </div>\n      </div>\n      {/* END FILTER FORM ======================================== */}\n\n      {props.thisDistrict.centers.length > 0 ? (\n        <div className=\"bg-white\">\n          {searchData(props.thisDistrict.centers, searchCenter).map(\n            (center, index) => (\n              <div\n                key={index + center.examination_center_id}\n                className=\"p-2 my-3 rounded border hover:bg-gray-50\"\n              >\n                <div\n                  className=\"flex justify-between items-center group cursor-pointer\"\n                  onClick={() =>\n                    !props.thisCenter ||\n                    props.thisCenter.examination_center_id !==\n                      center.examination_center_id\n                      ? props.setThisCenter(center)\n                      : props.setThisCenter(null)\n                  }\n                >\n                  <div className=\"ml-2\">\n                    <div className=\"text-2xl font-semibold text-gray-600\">\n                      {center.center_name}\n                    </div>\n                    <div className=\"text-base top-1 text-gray-600\">\n                      {center.rooms.length > 0\n                        ? center.rooms.length + \" Room(s)\"\n                        : null}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {props.thisCenter &&\n                      props.thisCenter.examination_center_id ===\n                        center.examination_center_id && (\n                        <button\n                          className={`text-white bg-blue-400 group-hover:bg-blue-600 focus:outline-none p-2 rounded-full group-hover:shadow-md group-hover:text-white  ${\n                            props.loadingRequest && \"cursor-wait\"\n                          } ${\n                            props.actionTypes !== \"\" && \"cursor-not-allowed\"\n                          }`}\n                          onClick={() => {\n                            props.setThisCenter(center);\n                            setCenterName(center.center_name);\n                            props.setActionTypes(\"UPDATE_CENTER\");\n                          }}\n                          disabled={\n                            props.loadingRequest || props.actionTypes !== \"\"\n                          }\n                          title=\"Edit center\"\n                        >\n                          <MdCreate className=\"w-6 h-6\" />\n                        </button>\n                      )}\n                    {props.thisCenter &&\n                      props.thisCenter.examination_center_id ===\n                        center.examination_center_id &&\n                      !isRoomExist(props.thisCenter) && (\n                        <button\n                          title=\"Delete center\"\n                          className={`bg-red-400 group-hover:bg-red-600 text-white focus:outline-none p-2 rounded-full group-hover:shadow-md group-hover:text-white ${\n                            props.loadingRequest && \"cursor-wait\"\n                          } ${\n                            props.actionTypes !== \"\" && \"cursor-not-allowed\"\n                          }`}\n                          onClick={() =>\n                            handleDelete(center.examination_center_id)\n                          }\n                          disabled={\n                            props.loadingRequest ||\n                            loadingDeletion.length > 0 ||\n                            props.actionTypes !== \"\"\n                          }\n                        >\n                          <MdClear className=\"w-6 h-6\" />\n                        </button>\n                      )}\n\n                    <button\n                      title={\n                        props.thisCenter &&\n                        props.thisCenter.examination_center_id ===\n                          center.examination_center_id\n                          ? \"Close Center\"\n                          : \"View Rooms\"\n                      }\n                      className={`${\n                        props.thisCenter &&\n                        props.thisCenter.examination_center_id ===\n                          center.examination_center_id\n                          ? \"group-hover:bg-gray-600\"\n                          : \"group-hover:bg-gray-500\"\n                      } p-2 rounded-full bg-gray-300 group-hover:shadow-md flex justify-center items-center focus:outline-none text-gray-800 group-hover:text-white`}\n                      onClick={() =>\n                        !props.thisCenter ||\n                        props.thisCenter.examination_center_id !==\n                          center.examination_center_id\n                          ? props.setThisCenter(center)\n                          : props.setThisCenter(null)\n                      }\n                    >\n                      {props.thisCenter &&\n                      props.thisCenter.examination_center_id ===\n                        center.examination_center_id ? (\n                        <MdExpandLess className=\"w-6 h-6\" />\n                      ) : (\n                        <MdExpandMore className=\"w-6 h-6\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n\n                {props.thisCenter &&\n                  props.thisCenter.examination_center_id ===\n                    center.examination_center_id && (\n                    <div\n                      className={`bg-white h-full w-full hidden md:block mt-2 p-2 pb-5 border border-gray-300 rounded shadow animate__animated animate__fadeIn`}\n                    >\n                      <div className=\"border-b px-2 py-3 flex justify-between\">\n                        <h2 className=\"text-3xl font-semibold text-gray-800\">\n                          List of Rooms\n                        </h2>\n\n                        <button\n                          type=\"button\"\n                          className={`btn hover:bg-blue-500 mb-1 border-2 border-blue-500 bg-white\n        hover:text-white rounded-md flex items-center font-bold text-gray-700 focus:outline-none gap-1 ${\n          props.loadingRequest && \"cursor-wait\"\n        } ${props.actionTypes !== \"\" && \"cursor-not-allowed\"}`}\n                          onClick={() => props.setActionTypes(\"CREATE_ROOM\")}\n                          disabled={\n                            props.actionTypes !== \"\" || props.loadingRequest\n                          }\n                        >\n                          <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n                          New Room\n                        </button>\n                      </div>\n\n                      {center.rooms.length > 0 ? (\n                        <table\n                          className={`w-full shadow sm:rounded-lg table-auto order-table max-w-full`}\n                        >\n                          <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                            <tr\n                              className={`text-left tracking-wide bg-gray-100 border-b-2 border-gray-500 text-gray-600 overflow-hidden`}\n                            >\n                              <th className={`p-3 text-left`}>Room</th>\n                              <th className={`p-3 text-left`}>Type</th>\n                              <th className={`p-3 text-left`}>Capacity</th>\n                              <th className={`p-3 text-left`}>Occupied</th>\n                              <th className={`p-3 text-left`}></th>\n                            </tr>\n                          </thead>\n                          <tbody\n                            id={`table-data_${props.thisDistrict.district_id}`}\n                            className=\"bg-white text-black text-base\"\n                          >\n                            {center.rooms.map(\n                              (room: RoomsInterface, index: number) => (\n                                <tr\n                                  key={index + room.examination_center_room_id}\n                                >\n                                  {/* <td className=\"p-3 text-left whitespace-nowrap\">{index + 1}</td> */}\n                                  <td className=\"p-3 text-left\">\n                                    {room.room_number}\n                                  </td>\n                                  <td className=\"p-3 text-left\">\n                                    {room.room_type}\n                                  </td>\n                                  <td className=\"p-3 text-left\">\n                                    {room.capacity}\n                                  </td>\n                                  <td className=\"p-3 text-left\">\n                                    {room.occupied}\n                                  </td>\n                                  <td>\n                                    <div className=\"flex items-center justify-center gap-2\">\n                                      <button\n                                        title=\"Update Sub-Category\"\n                                        className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none\"\n                                        onClick={() => {\n                                          props.setThisRoom(room);\n                                          setRoomCapacity(room.capacity);\n                                          setRoomNumber(room.room_number);\n                                          props.setActionTypes(\"UPDATE_ROOM\");\n                                        }}\n                                        disabled={\n                                          props.loadingRequest ||\n                                          props.actionTypes !== \"\"\n                                        }\n                                      >\n                                        <MdCreate className=\"text-blue-700 w-7 h-7\" />\n                                      </button>\n                                      <button\n                                        title=\"Delete Sub-Category\"\n                                        className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none\"\n                                        onClick={() =>\n                                          handleDeleteRoom(\n                                            room.examination_center_room_id\n                                          )\n                                        }\n                                        disabled={\n                                          props.loadingRequest ||\n                                          props.actionTypes !== \"\"\n                                        }\n                                      >\n                                        {loadingDeletion ===\n                                        room.examination_center_room_id ? (\n                                          \"Loading...\"\n                                        ) : (\n                                          <div className=\"flex justify-center items-center gap-1\">\n                                            <MdDelete className=\"text-red-700 w-7 h-7\" />\n                                          </div>\n                                        )}\n                                      </button>\n                                    </div>\n                                  </td>\n                                </tr>\n                              )\n                            )}\n                          </tbody>\n                        </table>\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <AiOutlineFileSearch className=\"w-24 h-24 mx-auto text-gray-600\" />\n                          <span className=\"text-gray-600 text-2xl\">\n                            No Data Found\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  )}\n              </div>\n            )\n          )}\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <AiOutlineFileSearch className=\"w-24 h-24 mx-auto text-gray-600\" />\n          <span className=\"text-gray-600 text-2xl\">No Data Found</span>\n        </div>\n      )}\n\n      {/* modal for creating new categories or sub category */}\n      {props.actionTypes !== \"\" && (\n        <Modal\n          backDrop={true}\n          theme={Themes.default}\n          close={(): void => cleanModal()}\n          displayClose={true}\n          backDropClose={false}\n          title={\n            <div className=\"flex items-center space-x-5\">\n              <div className=\"block pl-2 font-semibold text-xl self-start text-gray-700\">\n                {/* <p className=\"text-base text-gray-500 font-medium\">\n                    You are{\" \"}\n                    {actionType === \"CREATE_SUB\" || \"CREATE_CAT\"\n                      ? \"creating\"\n                      : \"updating\"}\n                  </p> */}\n                <h2 className=\"uppercase text-back\">\n                  {props.actionTypes === \"CREATE_ROOM\"\n                    ? \"CREATING NEW ROOM\"\n                    : props.actionTypes === \"UPDATE_ROOM\" &&\n                      \"UPDATING EXISTING ROOM\"}\n                  {props.actionTypes === \"CREATE_CENTER\"\n                    ? \"CREATING NEW CENTER\"\n                    : props.actionTypes === \"UPDATE_CENTER\" &&\n                      \"UPDATING EXISTING CENTER\"}\n                </h2>\n              </div>\n            </div>\n          }\n          widthSizeClass={ModalSize.medium}\n          padding={{ title: true, body: false, footer: false }}\n        >\n          <div className=\"mx-5 mb-8\">\n            <div className=\"divide-y divide-gray-200\">\n              {(props.actionTypes === \"CREATE_ROOM\" ||\n                props.actionTypes === \"UPDATE_ROOM\") &&\n                props.thisProvince && (\n                  <RoomForm\n                    roomNumber={roomNumber}\n                    roomCapacity={roomCapacity}\n                    thisRoom={props.thisRoom}\n                    setError={setError}\n                    loadingRequest={props.loadingRequest}\n                    setRoomNumber={setRoomNumber}\n                    setRoomCapacity={setRoomCapacity}\n                    setThisRoom={props.setThisRoom}\n                    setActionTypes={props.setActionTypes}\n                    handleSubmitRoom={handleSubmitRoom}\n                    thisDistrict={props.thisDistrict}\n                    thisProvince={props.thisProvince}\n                    locations={props.locations}\n                    error={error}\n                    selectProvince={selectProvince}\n                    selectDistrict={selectDistrict}\n                    selectCenter={selectCenter}\n                    thisCenter={props.thisCenter}\n                  />\n                )}\n              {(props.actionTypes === \"CREATE_CENTER\" ||\n                props.actionTypes === \"UPDATE_CENTER\") &&\n                props.thisProvince && (\n                  <CenterForm\n                    centerName={centerName}\n                    error={error}\n                    loadingRequest={props.loadingRequest}\n                    setCenterName={setCenterName}\n                    setError={setError}\n                    setActionTypes={props.setActionTypes}\n                    handleSubmit={handleSubmit}\n                    thisDistrict={props.thisDistrict}\n                    thisProvince={props.thisProvince}\n                    locations={props.locations}\n                    selectProvince={selectProvince}\n                    selectDistrict={selectDistrict}\n                  />\n                )}\n            </div>\n          </div>\n        </Modal>\n      )}\n      {/* end modal for creating new categories or sub category */}\n    </div>\n  );\n};\n\nexport default connect(null, {\n  FC_CreateCenter,\n  FC_UpdateCenter,\n  FC_DeleteCenter,\n  FC_CreateRoom,\n  FC_UpdateRoom,\n  FC_DeleteRoom,\n  PushPopupAlert,\n})(ViewCenters);\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { AiOutlineFilter } from \"react-icons/ai\";\nimport { BsCaretRightFill } from \"react-icons/bs\";\nimport { connect } from \"react-redux\";\nimport { getAllRoom } from \"../../actions/location\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  CentersInterface,\n  DistrictInterface,\n  RoomLocationInterface,\n  RoomsInterface,\n} from \"../../shared/interfaces\";\nimport ViewCenters from \"./ViewCenters\";\n\ninterface AppProps {\n  locations: RoomLocationInterface[];\n  getAllRoom: Function;\n}\nconst Index: React.FC<AppProps> = ({ locations, getAllRoom }) => {\n  const [actionTypes, setActionTypes] = useState<\n    | \"CREATE_PROVINCE\"\n    | \"UPDATE_PROVINCE\"\n    | \"CREATE_DISTRICT\"\n    | \"UPDATE_DISTRICT\"\n    | \"CREATE_CENTER\"\n    | \"UPDATE_CENTER\"\n    | \"CREATE_ROOM\"\n    | \"UPDATE_ROOM\"\n    | \"\"\n  >(\"\");\n  const [thisProvince, setThisProvince] =\n    useState<RoomLocationInterface | null>(null);\n  const [thisDistrict, setThisDistrict] = useState<DistrictInterface | null>(\n    null\n  );\n  const [thisCenter, setThisCenter] = useState<CentersInterface | null>(null);\n  const [thisRoom, setThisRoom] = useState<RoomsInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [districtNotFound, setDistrictNotFound] = useState<boolean>(false);\n  const [loadingRequest, setLoadingRequest] = useState<boolean>(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (!locations.length && loading) {\n      getAllRoom((status: boolean, msg: string) => {\n        if (!status && msg.length > 0) {\n          console.log(msg);\n          !locations.length && setLoading(false);\n        }\n        // setLoadingLocations(false);\n      });\n    } else if (locations.length && thisProvince === null) {\n      setThisProvince(locations[0]);\n    } else if (thisProvince && thisDistrict === null && !districtNotFound) {\n      setThisDistrict(\n        locations[0].districts.length > 0 ? locations[0].districts[0] : null\n      );\n      setDistrictNotFound(true);\n    } else {\n      setLoading(false);\n    }\n  }, [\n    getAllRoom,\n    locations.length,\n    locations,\n    thisProvince,\n    thisDistrict,\n    loading,\n    districtNotFound,\n  ]);\n\n  if (loading === true) {\n    return (\n      <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n        Loading locations...\n      </div>\n    );\n  }\n\n  return (\n    <Fragment>\n      <div className=\"w-full my-5\">\n        {/* header title */}\n        <div className=\"flex justify-between w-full m-2 gap-1\">\n          <div className=\"flex flex-col\">\n            <span className=\"text-blue-600 text-2xl md:text-2xl lg:text-3xl font-bold\">\n              Locations Management\n            </span>\n\n            <div className=\"flex flex-row items-center md:gap-3 gap-2 mt-1\">\n              <AiOutlineFilter className=\"text-xl\" />\n              <div className=\"flex flex-row items-center gap-1\">\n                {thisProvince && (\n                  <span className=\"text-gray-700 text-base font-bold\">\n                    {thisProvince.province_name}\n                  </span>\n                )}\n                {thisDistrict && (\n                  <div className=\"flex flex-row items-center gap-1\">\n                    <BsCaretRightFill />\n                    <span className=\"text-blue-600 text-base font-bold underline\">\n                      {thisDistrict.district_name} district\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* end header title */}\n\n        {locations.length > 0 ? (\n          <div className=\"w-full\">\n            {/* ============================= CENTERS ============================= */}\n            {thisDistrict && thisProvince && (\n              <ViewCenters\n                locations={locations}\n                thisProvince={thisProvince}\n                thisProvinceId={thisProvince.province_id}\n                thisDistrict={thisDistrict}\n                thisCenter={thisCenter}\n                thisRoom={thisRoom}\n                loadingRequest={loadingRequest}\n                actionTypes={actionTypes}\n                setThisProvince={setThisProvince}\n                setThisDistrict={setThisDistrict}\n                setLoadingRequest={setLoadingRequest}\n                setThisCenter={setThisCenter}\n                setThisRoom={setThisRoom}\n                setActionTypes={setActionTypes}\n              />\n            )}\n            {!thisDistrict && thisProvince && (\n              <NoResult\n                theme={NoResultThemes.Dark}\n                value={`No District Available in ${thisProvince.province_name}`}\n              />\n            )}\n            {/* =========================== END CENTERS =========================== */}\n          </div>\n        ) : (\n          <NoResult theme={NoResultThemes.Dark} value=\"No Locations found!\" />\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  locations,\n}: StoreState): {\n  locations: RoomLocationInterface[];\n} => {\n  return { locations: locations.roomLocation };\n};\n\nexport const Locations = connect(mapStateToProps, {\n  getAllRoom,\n})(Index);\n"],"sourceRoot":""}