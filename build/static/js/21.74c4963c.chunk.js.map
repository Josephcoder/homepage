{"version":3,"sources":["components/ProctoringCandidateDetails/ProctoringCandidateDetails.tsx","components/ProctoringMainTopBar/ProctoringMainTopBar.tsx","components/ProctoringStatistics/ProctoringStatistics.tsx","components/ProctoringEvents/ProctoringEvents.tsx","containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor.tsx","components/ProctoringCandidates/ProctoringCandidates.tsx","components/CenterCardSupervisor/CenterCardSupervisor.tsx","containers/ProctoringCenter/ProctoringCenter.tsx"],"names":["ActiveTap","ProctoringMainTopBar","course_title","post_title","duration","started_at","end_at","exam_start","startExamHandler","stopExamHandler","focus_mode","focusToggle","leaveRoom","className","onClick","htmlFor","window","confirm","title","ProctoringStatistics","total","active","done","left","ProctoringEvents","events","candidates","clickOpen","clickHandler","loading","useState","selected","setSelected","length","colSpan","map","evnt","i","findUser","find","cand","user_id","event_id","event_type_id","createdAt","description","undefined","fname","lname","email","ActiveSideTap","ProctoringCandidateDetails","candidate","chatHandler","micHandler","focusHandler","stopHandler","restartHandler","warnHandler","closeHandler","home_proctoring","exam_started","removeInExam","Details","setActive","bind","Events","position_title","course_name","ProctoringCandidates","show_title","CenterCardSupervisor","seat_number","warningHandler","detailsHandler","continueHandler","color","stopped","_ProctoringOnlineSupervisor","props","myPeer","componentDidMount","proctoring","exam","room_id","course_id","position_id","console","log","FC_LoadRoomEvents","application_session_id","auth","application_session","_id","exam_id","status","msg","setState","events_loading","error","target","FC_GetProctoringRoom","loading_room","socket","emit","JOIN_ROOM","room","user","peer_id","data","FC_SetActiveCandidates","UPDATED_ROOM_LIST","on","USER_CONNECTED","new_user","FC_SetOneActiveCandidate","USER_DISCONNECTED","userId","FC_CandidateOffline","FC_SaveEvent","done_by","ExamEvents","CANDIDATE_LEFT_EXAM_EVENT","time","Date","toString","CAND_EXAM_EVENT_CLIENT","event","FC_CandidateExamEvent","off","FC_ClearExamToRoomProctoring","startCenterProctoring","blank","e","ActiveSIdeTabHandler","itm","active_side_tab","SelectCandidateHandler","value","selected_candidate","START_EXAM_SERVER","FC_ExamStartStop","STOP_EXAM_SERVER","FC_ContinueExam","CAND_CONTINUE_EXAM_SERVER","CAND_CONTINUE_EXAM_CLIENT","stopCandidateHandler","prompt","CAND_STOP_EXAM_SERVER","CAND_STOP_EXAM_CLIENT","FC_StopCandidate","ejectCandidateHandler","CAND_REMOVE_EXAM_SERVER","CAND_REMOVE_EXAM_CLIENT","FC_CandidateRemoveExam","warnCandidateHandler","CAND_WARNING_EXAM_SERVER","restartCandidateHandler","CAND_RESTART_EXAM_SERVER","prevState","state","online_room","online_candidates","start_exam","activeCandidates","this","filter","nonActiveCandidates","candidate_loaded","Spinner","Fragment","Candidates","React","Component","ProctoringOnlineSupervisor","connect","_ProctoringCenter","user_access","FC_RoomDetails","errorMsg","session","FC_ExamsDetailsData","exams_error","exams_error_msg","loaded","room_number","center_name","district_name","province_name","room_exams","key","examFound","exams_list","exams","exm","course","course_code","exam_date","FC_LoadExamToRoomProctoring","video_support","start_time","end_time","exam_done","period_id","exam_status","id","ProctoringCenter"],"mappings":"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","file":"static/js/21.74c4963c.chunk.js","sourcesContent":["import React, { FC, ReactElement, useState } from \"react\";\nimport { CandidateProctoringInterface, EventInterface } from \"../../interfaces\";\nimport ProctoringEvents from \"../ProctoringEvents/ProctoringEvents\";\nimport {\n  MdAccountCircle,\n  MdArrowBack,\n  MdVolumeUp,\n  MdChat,\n  MdFullscreen,\n  MdNotInterested,\n  MdReplay,\n  MdWarning,\n} from \"react-icons/md\";\n\ntype ProctoringCandidateDetailsProps = {\n  candidate: CandidateProctoringInterface | undefined;\n  chatHandler: Function;\n  micHandler: Function;\n  focusHandler: Function;\n  stopHandler: Function;\n  restartHandler: Function;\n  warnHandler: Function;\n  closeHandler: Function;\n  removeInExam: Function;\n  events: EventInterface[];\n  home_proctoring: boolean;\n  exam_started: boolean;\n  focus_mode: boolean;\n};\n\nenum ActiveTap {\n  Details,\n  Events,\n}\n\nconst ProctoringCandidateDetails: FC<ProctoringCandidateDetailsProps> = ({\n  candidate,\n  chatHandler,\n  micHandler,\n  focusHandler,\n  stopHandler,\n  restartHandler,\n  warnHandler,\n  closeHandler,\n  events,\n  home_proctoring,\n  exam_started,\n  focus_mode,\n  removeInExam,\n}): ReactElement => {\n  const [active, setActive] = useState(ActiveTap.Details);\n\n  if (candidate === undefined) {\n    return (\n      <div className=\"p-4 text-center bg-white\">\n        <h1 className=\"text-3xl text-gray-800\">Oops!!</h1>\n        <p className=\"text-3xl text-gray-700\">\n          The selected candidate can't be found{\" \"}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-1\">\n      <div\n        className={`p-2 border-rounded ${\n          focus_mode === true\n            ? \"bg-blue-900 text-white\"\n            : \"bg-gray-500 text-white\"\n        }  rounded-md flex items-baseline `}\n      >\n        <button\n          onClick={() => closeHandler()}\n          className=\"p-1 block bg-blue-900 bg-opacity-70 rounded-md mr-2 font-bold text-1xl\"\n        >\n          <MdArrowBack />\n        </button>\n        <h3 className=\"text-center -mt-1 mb-0 pb-0 text-1xl font-bold block text-blue-500--\">\n          User details\n        </h3>\n      </div>\n      <div className=\"p-2 text-center\">\n        <MdAccountCircle className=\"text-9xl text-center mx-auto\" />\n\n        <h1\n          className={`text-xl  ${\n            focus_mode === true ? \"text-white\" : \"text-gray-800\"\n          } font-bold`}\n        >\n          {candidate.email}\n        </h1>\n        <h2\n          className={` ${\n            focus_mode === true ? \"text-gray-400\" : \"text-gray-800\"\n          }  text-md`}\n        >\n          {candidate.fname} {candidate.lname}\n        </h2>\n      </div>\n      <div className=\"my-2 py-1 rounded grid grid-cols-2 gap-1\">\n        {/* buttons start here */}\n\n        {exam_started === true && candidate.active === true && (\n          <>\n            {home_proctoring === true && (\n              <>\n                <button\n                  onClick={micHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdVolumeUp className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Mic</span>\n                </button>\n\n                <button\n                  onClick={chatHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdChat className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Chat</span>\n                </button>\n\n                <button\n                  onClick={focusHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdFullscreen className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Focus</span>\n                </button>\n              </>\n            )}\n\n            <button\n              onClick={stopHandler.bind(this, candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdNotInterested className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-md p-0 block -mt-0\">Stop</span>\n            </button>\n\n            <button\n              onClick={restartHandler.bind(this, candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdReplay className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-md p-0 block -mt-0\">Restart</span>\n            </button>\n\n            <button\n              title=\"give a warning\"\n              onClick={() => warnHandler(candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-md p-0 block -mt-0\">Warn</span>\n            </button>\n\n            <button\n              title=\"Remove into in exam\"\n              onClick={() => removeInExam(candidate.user_id)}\n              className=\"text-center rounded-md p-1 border-2 border-red-600 hover:bg-red-600 text-white  hover:text-white bg-red-500\"\n            >\n              <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-md p-0 block -mt-0\">Remove into exam</span>\n            </button>\n          </>\n        )}\n      </div>\n\n      <div className=\"my-1 bg-blue-900 bg-opacity-40 rounded-md p-1 mt-2 grid grid-cols-2 gap-2 text-sm\">\n        <button\n          onClick={() => setActive(ActiveTap.Details)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Details\n              ? \"bg-blue-700 border-2 border-blue-300\"\n              : \"bg-blue-900\"\n          }`}\n        >\n          candidate\n        </button>\n\n        <button\n          onClick={() => setActive(ActiveTap.Events)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Events\n              ? \"bg-blue-700 border-2 border-blue-300\"\n              : \"bg-blue-900\"\n          }`}\n        >\n          Events\n        </button>\n      </div>\n\n      {active === ActiveTap.Details ? (\n        <div\n          className={`mt-2 ${\n            focus_mode === true ? \"text-white\" : \"text-gray-900\"\n          } border-blue-400`}\n        >\n          <h2 className=\" font-bold text-2xl mb-1 opacity-70 text-center border-b\">\n            User information\n          </h2>\n          <div className=\"p-2 rounded-md border   border-opacity-20\">\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Username:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">First name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.fname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Last name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.lname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">email:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Position:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.position_title}\n              </h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Course name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.course_name}\n              </h4>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ProctoringEvents\n          candidates={[candidate]}\n          events={events}\n          focus_mode={focus_mode}\n          loading={false}\n        />\n      )}\n    </div>\n  );\n};\nexport default ProctoringCandidateDetails;\n","import React, { FC, Fragment, ReactElement } from \"react\";\nimport { MdFullscreen, MdFullscreenExit } from \"react-icons/md\";\n// import { Link } from \"react-router-dom\";\ntype ProctoringMainTopBarProps = {\n  course_title: string;\n  post_title: string;\n  duration: string;\n  started_at: string;\n  end_at: string;\n  exam_start: boolean;\n  startExamHandler: Function;\n  stopExamHandler: Function;\n  focus_mode: boolean;\n  focusToggle: Function;\n  leaveRoom: Function;\n};\n\nconst ProctoringMainTopBar: FC<ProctoringMainTopBarProps> = ({\n  course_title,\n  post_title,\n  duration,\n  started_at,\n  end_at,\n  exam_start,\n  startExamHandler,\n  stopExamHandler,\n  focus_mode,\n  focusToggle,\n  leaveRoom,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div\n      className={`${\n        focus_mode === true\n          ? \"border-blue-500 border-opacity-30 text-white proctoring-evaluator-navigation\"\n          : \"bg-white rounded-t-sm  rounded-md\"\n      } py-2 px-3 border-b  grid grid-flow-row md:grid-cols-1 lg:grid-cols-2 transition-all ease-in-out`}\n    >\n      <div className=\"flex\">\n        <button\n          onClick={() => focusToggle()}\n          className={`px-2 ${\n            focus_mode === true\n              ? \"bg-blue-900 hover:bg-blue-500 \"\n              : \"bg-blue-100 hover:bg-blue-500 \"\n          } mr-2  rounded-md  hover:text-white`}\n        >\n          {focus_mode === true ? (\n            <Fragment>\n              <MdFullscreenExit className=\"text-3xl mx-auto -mb-2\" />\n              <span className=\"text-xs inline-block pt-1\">Un-Focus</span>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <MdFullscreen className=\"text-3xl mx-auto -mb-2\" />\n              <span className=\"text-xs inline-block pt-1\">Focus</span>\n            </Fragment>\n          )}\n        </button>\n        <div className=\"\">\n          <label\n            htmlFor=\"\"\n            className={`${\n              focus_mode === true ? \"text-gray-200\" : \"\"\n            } text-sm m-0`}\n          >\n            {post_title}\n          </label>\n          <h3 className=\"text-white- text-xl  font-bold\">{course_title}</h3>\n        </div>\n      </div>\n      <div className=\"text-red lg:pt-0 sm:pt-3 text-right md:text-left lg:text-right\">\n        <div className=\"grid grid-cols-5 gap-4 text-left\">\n          <div>\n            <label className=\"text-gray-400 text-sm\">Duration</label>\n            <h2 className=\"text-xl font-bold\">{duration}</h2>\n          </div>\n          <div>\n            <label className=\"text-gray-400 text-sm\">Started at:</label>\n            <h2 className=\"text-xl font-bold\">{started_at}</h2>\n          </div>\n          <div>\n            <label className=\"text-gray-400 text-sm\">End at</label>\n            <h2 className=\"text-xl font-bold\">{end_at}</h2>\n          </div>\n          {/* <div>\n            <label className=\"text-gray-400 text-sm\">Remaining </label>\n            <h2 className=\"text-xl font-bold\">{remaining}</h2>\n          </div> */}\n          <div className=\"flex items-center\">\n            {exam_start === false && (\n              <button\n                onClick={() =>\n                  window.confirm(\"Are you sure you want to leave the room??\") &&\n                  leaveRoom()\n                }\n                className=\"btn bg-red-100 text-red-900 w-full hover:bg-red-500 hover:text-white\"\n                title=\"Start Exam\"\n              >\n                Leave\n              </button>\n            )}\n          </div>\n\n          <div className=\"flex items-center\">\n            {exam_start === false ? (\n              <button\n                onClick={() => startExamHandler()}\n                className=\"btn bg-green-500 text-white w-full\"\n                title=\"Start Exam\"\n              >\n                Start\n              </button>\n            ) : (\n              <button\n                onClick={() => stopExamHandler()}\n                className=\"btn bg-red-600 text-white w-full\"\n                title=\"stop Exam\"\n              >\n                Stop\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProctoringMainTopBar;\n","import React, { FC, ReactElement } from \"react\";\n\ntype ProctoringStatisticsProps = {\n  total: number;\n  active: number;\n  done: number;\n  left: number;\n  focus_mode: boolean;\n};\n\nconst ProctoringStatistics: FC<ProctoringStatisticsProps> = ({\n  total,\n  active,\n  done,\n  left,\n  focus_mode,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div\n      className={`grid grid-col-4 grid-flow-col gap-4 p-2 ${\n        focus_mode === true\n          ? \"bg-blue-900 text-gray-300\"\n          : \"bg-white  shadow-lg border \"\n      } rounded-md my-2 text-center w-90`}\n    >\n      <div title=\"Total candite(s)\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{total}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Total\n        </label>\n      </div>\n      <div title=\"Active candite(s)\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{active}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Active\n        </label>\n      </div>\n      <div title=\"Candite(s) who done exam\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{done}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Done\n        </label>\n      </div>\n      <div title=\"Candite(s) who left unfinished\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{left}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Left\n        </label>\n      </div>\n    </div>\n  );\n};\nexport default ProctoringStatistics;\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdClose } from \"react-icons/md\";\nimport { EventInterface, CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringEventsProps = {\n  events: EventInterface[];\n  clickOpen?: boolean;\n  clickHandler?: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  loading: boolean;\n};\n\nconst ProctoringEvents: FC<ProctoringEventsProps> = ({\n  events,\n  clickOpen = true,\n  clickHandler,\n  candidates,\n  focus_mode,\n  loading,\n}): ReactElement => {\n  /* function body */\n  const [selected, setSelected] = useState(\"\");\n\n  return (\n    <div\n      className={`mt-2 p-2 ${\n        focus_mode === true\n          ? \"bg-gray-900 text-white\"\n          : \"bg-gray-50 shadow-sm border\"\n      } rounded-md `}\n    >\n      <h1 className=\"text-xl\">Events</h1>\n      {loading === true ? (\n        <div className=\"p-2\">\n          <h4 className=\"block animate__animated animate__fadeIn animate__infinite p-3 text-center\">\n            Loading events...\n          </h4>\n        </div>\n      ) : (\n        <table className=\"w-full text-left\">\n          <thead className=\"text-sm text-gray-500\">\n            <tr>\n              <th>#</th>\n              <th>username</th>\n              <th>Event type</th>\n              <th>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {events.length === 0 ? (\n              <tr>\n                <td className=\"p-3 py-8 text-center\" colSpan={4}>\n                  <h2 className=\"font-bold text-2xl\">No events found</h2>\n                  <h2 className=\"\">No event has been committed yet</h2>\n                </td>\n              </tr>\n            ) : (\n              events.map((evnt: EventInterface, i: number) => {\n                let findUser = candidates.find(\n                  (cand: CandidateProctoringInterface) =>\n                    cand.user_id === evnt.user_id\n                );\n\n                return (\n                  <Fragment key={i}>\n                    {selected === evnt.event_id ? (\n                      <tr>\n                        <td\n                          colSpan={4}\n                          className=\"animate__animated animate__zoomIn animate__faster\"\n                        >\n                          <div className=\"overflow-hidden my-1 rounded border bg-blue-900 bg-opacity-30 border-blue-500\">\n                            <div className=\"px-3  flex items-center bg-blue-900 bg-opacity-30\">\n                              <h2 className=\"flex-1 m-0 text-xl py-2 opacity-70\">\n                                Event <b>{i + 1}</b> details\n                              </h2>\n                              <button\n                                onClick={() => setSelected(\"\")}\n                                className=\"hover:bg-red-600 text-2xl p-1.5 rounded-md\"\n                              >\n                                <MdClose />\n                              </button>\n                            </div>\n                            <div className=\"p-2\">\n                              <p>\n                                <span className=\"opacity-70\">Event type: </span>\n                                <b>{evnt.event_type_id}</b>\n                              </p>\n                              <p>\n                                <span className=\"opacity-70\">Time: </span>\n                                <b>{evnt.createdAt}</b>\n                              </p>\n                              <p className=\"p-1 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                                <span className=\"opacity-70 block\">\n                                  Description:{\" \"}\n                                </span>\n                                <b>{evnt.description}</b>\n                              </p>\n                              {findUser !== undefined && (\n                                <div className=\"p-1 mt-2 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                                  <p>\n                                    <span className=\"opacity-70\">Names: </span>\n                                    <b>\n                                      {findUser.fname} {findUser.lname}\n                                    </b>\n                                  </p>\n                                  <p>\n                                    <span className=\"opacity-70\">Email: </span>\n                                    <b>{findUser.email}</b>\n                                  </p>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                    ) : (\n                      <tr\n                        onClick={() => setSelected(evnt.event_id)}\n                        className=\"p-2 rounded-md hover:bg-blue-900 bg-opacity-30 cursor-pointer\"\n                      >\n                        <td className=\"px-1 opacity-95\">{i + 1}</td>\n                        <td className=\"text-blue-500 font-bold\">\n                          {findUser !== undefined ? (\n                            <span\n                              title={findUser?.fname + \" \" + findUser?.lname}\n                            >\n                              {findUser?.lname}\n                            </span>\n                          ) : (\n                            <span className=\"opacity-50\">System/Admin</span>\n                          )}\n                        </td>\n\n                        <td className=\"text-red-400 text-sm pl-1\">\n                          {evnt.event_type_id}\n                        </td>\n\n                        <td className=\"text-gray-400 pl-1\">2min</td>\n                      </tr>\n                    )}\n                  </Fragment>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default ProctoringEvents;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { StoreState } from \"../../reducers\";\n// import VideoCardSupervisor from \"./VideoCardSupervisor\";\nimport ProctoringMainTopBar from \"../../components/ProctoringMainTopBar/ProctoringMainTopBar\";\nimport ProctoringStatistics from \"../../components/ProctoringStatistics/ProctoringStatistics\";\nimport ProctoringCandidateDetails from \"../../components/ProctoringCandidateDetails/ProctoringCandidateDetails\";\nimport ProctoringEvents from \"../../components/ProctoringEvents/ProctoringEvents\";\nimport ProctoringCandidates from \"../../components/ProctoringCandidates/ProctoringCandidates\";\nimport CenterCardSupervisor from \"../../components/CenterCardSupervisor/CenterCardSupervisor\";\nimport {\n  // CandidateInterface,\n  // RoomServer,\n  EventInterface,\n  OnlineCandidates,\n  Events,\n  ExamEvents,\n  CandidateProctoringInterface,\n  OnlineProctoringRoom,\n} from \"../../interfaces\";\n// import { eventDefiner, eventDefinerInterface } from \"../../actions/proctoring\";\nimport {\n  Socket,\n  FC_GetProctoringRoom,\n  Auth,\n  Proctoring,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_LoadRoomEvents_Interface,\n  FC_CandidateRemoveExam,\n} from \"../../actions\";\nimport Spinner from \"../../components/Loading/Spinner\";\nimport { MdInfoOutline } from \"react-icons/md\";\n// props for the component\nexport interface ProctoringOnlineSupervisorProps {\n  socket: Socket;\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_GetProctoringRoom: Function;\n  FC_SetActiveCandidates: Function;\n  FC_SetOneActiveCandidate: Function;\n  FC_CandidateOffline: Function;\n  FC_ExamStartStop: Function;\n  FC_ContinueExam: Function;\n  FC_StopCandidate: Function;\n  FC_CandidateExamEvent: Function;\n  FC_ClearExamToRoomProctoring: Function;\n  FC_SaveEvent: Function;\n  FC_LoadRoomEvents: Function;\n  FC_CandidateRemoveExam: Function;\n}\n\nenum ActiveSideTap {\n  Candidates,\n  Events,\n}\n\ninterface AppState {\n  focus_mode: boolean;\n  loading: boolean;\n  loading_room: boolean;\n  events: EventInterface[];\n  active_side_tab: ActiveSideTap;\n  selected_candidate: string | null;\n  online_room: boolean;\n  online_candidates: OnlineCandidates[];\n  start_exam: boolean;\n  error: {\n    target: string;\n    msg: string;\n  };\n  events_loading: boolean;\n}\n\nclass _ProctoringOnlineSupervisor extends React.Component<\n  ProctoringOnlineSupervisorProps,\n  AppState\n> {\n  private myPeer: any;\n\n  constructor(props: ProctoringOnlineSupervisorProps) {\n    super(props);\n\n    this.state = {\n      focus_mode: false,\n      loading_room: true,\n      loading: false,\n      events: [],\n      active_side_tab: ActiveSideTap.Events,\n      selected_candidate: null,\n      online_room: false,\n      online_candidates: [],\n      start_exam: false,\n      error: {\n        msg: \"\",\n        target: \"\",\n      },\n      events_loading: true,\n    };\n  }\n\n  componentDidMount = () => {\n    const { room_id, course_id, position_id } = this.props.proctoring.exam;\n\n    console.log({ room_id: room_id });\n\n    // load candidate\n    this.props.FC_LoadRoomEvents(\n      {\n        application_session_id: this.props.auth.application_session?._id,\n        exam_id: this.props.proctoring.exam.exam_id,\n        room_id: room_id,\n      } as FC_LoadRoomEvents_Interface,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            events_loading: false,\n          });\n        } else {\n          this.setState({\n            events_loading: false,\n            error: {\n              target: \"main\",\n              msg: msg,\n            },\n          });\n        }\n      }\n    );\n    // check if the user have already joined the room\n    if (this.props.proctoring.candidates.length <= 0) {\n      this.props.FC_GetProctoringRoom(\n        { room_id, course_id, position_id },\n        (status: boolean, candidates: any[], msg: string) => {\n          if (status === true) {\n            this.setState({\n              loading_room: false,\n            });\n\n            // if (this.props.proctoring.candidate_loaded === false) {\n            //* add the user to the list\n            this.props.socket.socket.emit(\n              Events.JOIN_ROOM,\n              {\n                room_id: this.props.proctoring.room.room_id,\n                user_id: this.props.auth.user.user_id,\n                peer_id: \"\",\n              },\n              (data: {\n                candidates: OnlineCandidates[];\n                room: OnlineProctoringRoom | undefined;\n              }) =>\n                this.props.FC_SetActiveCandidates(data.room, data.candidates)\n            );\n            // }\n          } else {\n            this.setState({\n              loading_room: false,\n              error: {\n                target: \"all\",\n                msg: msg,\n              },\n            });\n          }\n        }\n      );\n    } else {\n      // update the active list\n      this.props.socket.socket.emit(\n        Events.UPDATED_ROOM_LIST,\n        this.props.proctoring.room.room_id,\n        ({\n          room,\n          candidates,\n        }: {\n          room: OnlineProctoringRoom | undefined;\n          candidates: OnlineCandidates[];\n        }) => {\n          console.log({ candidates, room });\n          this.props.FC_SetActiveCandidates(room, candidates);\n        }\n      );\n    }\n\n    // center room proctoring\n    //* New user connected\n    this.props.socket.socket.on(\n      Events.USER_CONNECTED,\n      (new_user: OnlineCandidates) => {\n        this.props.FC_SetOneActiveCandidate(new_user.user_id);\n        // this.props.FC_SaveEvent({\n        //   application_session: this.props.auth.application_session?._id,\n        //   description: \"Connected\",\n        //   done_by: \"System\",\n        //   event_type_id: ExamEvents.CANDIDATE_JOIN_EXAM_EVENT,\n        //   exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n        //   position_id: this.props.proctoring.exam.position_id,\n        //   room_id: this.props.proctoring.room.room_id,\n        //   time: new Date().toString(),\n        //   user_id: new_user.user_id,\n        // } as EventInterface, (status:boolean, error:string) => {if (status === false) this.setState({error:{target: \"main\", msg: error}})});\n      }\n    );\n\n    //* remove the candidate online\n    this.props.socket.socket.on(Events.USER_DISCONNECTED, (userId: any) => {\n      this.props.FC_CandidateOffline(userId);\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Leave the room\",\n          done_by: \"System\",\n          event_type_id: ExamEvents.CANDIDATE_LEFT_EXAM_EVENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: userId,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    });\n\n    /**\n     * @description Exam events\n     */\n    this.props.socket.socket.on(\n      ExamEvents.CAND_EXAM_EVENT_CLIENT,\n      (event: EventInterface) => this.props.FC_CandidateExamEvent(event)\n    );\n  };\n\n  // componentWillUnmount = () => {};\n  leaveRoom = () => {\n    // this.props.socket.socket.off(ExamEvents.START_EXAM_CLIENT);\n    this.props.socket.socket.off(Events.USER_CONNECTED);\n    this.props.socket.socket.off(Events.USER_DISCONNECTED);\n    this.props.socket.socket.off(ExamEvents.CAND_EXAM_EVENT_CLIENT);\n\n    this.props.FC_ClearExamToRoomProctoring();\n  };\n\n  startCenterProctoring = () => {};\n\n  // ***************************************************************************\n\n  blank = (e: any) => console.log(\"clicked\");\n\n  /**\n   * chand the active tab on the side\n   * @param itm\n   * @returns\n   */\n  ActiveSIdeTabHandler = (itm: ActiveSideTap) =>\n    this.setState({ active_side_tab: itm });\n\n  SelectCandidateHandler = (value: string | null) =>\n    this.setState({ selected_candidate: value });\n\n  startExamHandler = () => {\n    if (window.confirm(\"Are you sure you want to start the exam??\")) {\n      this.props.socket.socket.emit(ExamEvents.START_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        data: \"start exam\",\n        description: \"The exam started on this room\",\n        msg: \"The exam started on this room\",\n      });\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"The exam started on this room\",\n          done_by: \"Administrator\",\n          event_type_id: \"EXAM STARTED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n      this.props.FC_ExamStartStop(true);\n    }\n  };\n\n  stopExamHandler = () => {\n    if (window.confirm(\"Are you sure you want to stop the exam??\")) {\n      this.props.socket.socket.emit(ExamEvents.STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        description: \"Exam stopped on this room\",\n      });\n      this.props.FC_ExamStartStop(false);\n      // Save event\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Exam stopped on this room\",\n          done_by: \"Supervisor\",\n          event_type_id: \"EXAM_STOPPED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  continueHandler = (user_id: string) => {\n    if (\n      window.confirm(\n        \"Alre you sure you want to give this candidate the permition to continue the exam??\"\n      )\n    ) {\n      this.props.FC_ContinueExam(user_id);\n      this.props.socket.socket.emit(ExamEvents.CAND_CONTINUE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        description: \"Allowed a candidate to continue exam\",\n      });\n\n      // Save the contitue action\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Allowed a candidate to continue exam\",\n          done_by: \"Supervisor\",\n          event_type_id: ExamEvents.CAND_CONTINUE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n        } as EventInterface,\n        (status: boolean, error: string, event: EventInterface | null) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  stopCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"If you want to stop the candidate add the reason\");\n    if (msg !== null) {\n      this.props.socket.socket.emit(ExamEvents.CAND_STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `STOP: ${msg}`,\n        done_by: \"Supervisor\",\n        event_type_id: ExamEvents.CAND_STOP_EXAM_CLIENT,\n      });\n\n      this.props.FC_StopCandidate(user_id);\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `STOP: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: ExamEvents.CAND_STOP_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  ejectCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to remove the candidate add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(ExamEvents.CAND_REMOVE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `REMOVED: ${msg}`,\n        done_by: \"Supervisor\",\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `REMOVED: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: ExamEvents.CAND_REMOVE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false) {\n            this.setState({ error: { target: \"main\", msg: error } });\n          } else {\n            this.props.FC_CandidateRemoveExam(user_id);\n          }\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  warnCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to warn this candidate, add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(ExamEvents.CAND_WARNING_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `WARNING: ${msg}`,\n        description: `WARNING: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `WARNING: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: ExamEvents.CAND_WARNING_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  restartCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"Restart this candidate's exam, reason\");\n    if (msg !== null) {\n      console.log(\"RESTART EXAM CANDIDATE\");\n      this.props.socket.socket.emit(ExamEvents.CAND_RESTART_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `RESTART: ${msg}`,\n        description: `RESTART: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `RESTART: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: ExamEvents.CAND_RESTART_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  focusToggle = () =>\n    this.setState((prevState) => ({\n      focus_mode: !prevState.focus_mode,\n    }));\n\n  render() {\n    let activeCandidates = this.props.proctoring.candidates.filter(\n      (itm: CandidateProctoringInterface) => itm.active === true\n    );\n\n    let nonActiveCandidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === false\n    );\n\n    return (\n      <div\n        className={`${\n          this.state.focus_mode === false\n            ? \" p-1\"\n            : \"fixed right-0 left-0 bottom-0 top-0 z-50 overflow-y-auto\"\n        } transition-all ease-in-out`}\n      >\n        {this.state.error.target === \"main\" && (\n          <div\n            className=\"animate__animated animate__slideInDown p-2 rounded-md animate__faster text-center text-sm bg-red-200 text-red-900\"\n            onClick={() => this.setState({ error: { target: \"\", msg: \"\" } })}\n          >\n            {this.state.error.msg}\n          </div>\n        )}\n\n        <ProctoringMainTopBar\n          focusToggle={this.focusToggle}\n          focus_mode={this.state.focus_mode}\n          course_title={this.props.proctoring.exam.course_name}\n          post_title={this.props.proctoring.exam.position_title}\n          duration={this.props.proctoring.exam.duration + \"H\"}\n          started_at=\"12:00 AM\"\n          end_at=\"14:00 PM\"\n          exam_start={this.props.proctoring.exam.start_exam}\n          startExamHandler={this.startExamHandler}\n          stopExamHandler={this.stopExamHandler}\n          leaveRoom={this.leaveRoom}\n        />\n\n        {/* this is the body */}\n        <div\n          className={`${\n            this.state.focus_mode === true\n              ? \"proctoring-body-contents text-white\"\n              : \"\"\n          }  h-screen`}\n        >\n          <div className=\"lg:grid lg:grid-flow-col gap-4\">\n            <div className=\"lg:col-span-4 p-2 pt-3 lg:h-screen overflow-y-auto\">\n              {/* pictures or images */}\n              {this.props.proctoring.candidate_loaded === false ? (\n                <div className=\"p-8 text-center animate__animated animate__zoomIn\">\n                  <Spinner />\n                  <h2 className=\"text-xl font-bold text-gray-400\">\n                    Loading candidates\n                  </h2>\n                </div>\n              ) : (\n                <div className=\"animate__animated animate__zoomI\">\n                  <div\n                    className={`${\n                      this.state.focus_mode === true\n                        ? \"bg-blue-900 bg-opacity-30\"\n                        : \"bg-gray-100\"\n                    } rounded-md mb-4`}\n                  >\n                    <h3\n                      className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                        this.state.focus_mode === true\n                          ? \"text-blue-100 bg-blue-900\"\n                          : \"text-white bg-gray-500\"\n                      } pb-1 mb-1`}\n                    >\n                      <span className=\"flex-1\">Non active candidates </span>\n\n                      <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                        {activeCandidates.length}\n                      </span>\n                    </h3>\n                    {activeCandidates.length === 0 ? (\n                      <div className=\"py-8 text-center w-full\">\n                        <MdInfoOutline className=\"inline-block text-6xl\" />\n                        <h3 className=\"text-center text-2xl font-bold\">\n                          No candidate\n                        </h3>\n                        <h3 className=\"text-center\">\n                          Once candidates start to join they will appear here\n                        </h3>\n                      </div>\n                    ) : (\n                      <div className=\"grid grid-flow-row sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-5 gap-4 p-2\">\n                        {activeCandidates.map(\n                          (\n                            candidate: CandidateProctoringInterface,\n                            i: number\n                          ) => {\n                            return (\n                              <CenterCardSupervisor\n                                focus_mode={this.state.focus_mode}\n                                key={i}\n                                seat_number={i + 1}\n                                candidate={candidate}\n                                stopHandler={this.stopCandidateHandler}\n                                warningHandler={this.warnCandidateHandler}\n                                detailsHandler={this.SelectCandidateHandler}\n                                continueHandler={this.continueHandler}\n                                exam_started={\n                                  this.props.proctoring.exam.start_exam\n                                }\n                              />\n                            );\n                          }\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {nonActiveCandidates.length !== 0 && (\n                    <div\n                      className={`${\n                        this.state.focus_mode === true\n                          ? \"bg-blue-900 bg-opacity-30\"\n                          : \"bg-gray-100\"\n                      } rounded-md`}\n                    >\n                      <h3\n                        className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                          this.state.focus_mode === true\n                            ? \"text-blue-100 bg-blue-900\"\n                            : \"text-white bg-gray-500\"\n                        } pb-1 mb-1`}\n                      >\n                        <span className=\"flex-1\">Non active candidates </span>\n                        <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                          {nonActiveCandidates.length}\n                        </span>\n                      </h3>\n                      <div className=\"mt-3 mx-2 pb-2\">\n                        <ProctoringCandidates\n                          candidates={nonActiveCandidates}\n                          clickHandler={this.SelectCandidateHandler}\n                          show_title={false}\n                          focus_mode={this.state.focus_mode}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            <div\n              className={`${\n                this.state.focus_mode === true\n                  ? \"proctoring-side-section border-blue-500  border-opacity-30\"\n                  : \"lg:bg-gray-100 \"\n              } p-2  col-span-1 w-full transition-all ease-in-out  h-screen overflow-y-auto  lg:border-l `}\n            >\n              {/* statistics */}\n              {this.state.selected_candidate === null ? (\n                <React.Fragment>\n                  <ProctoringStatistics\n                    total={43}\n                    active={43}\n                    done={43}\n                    left={43}\n                    focus_mode={this.state.focus_mode}\n                  />\n\n                  {/* {this.state.online_room === true && ( */}\n                  <div className=\"my-2 p-1 rounded-md bg-blue-800 bg-opacity-60 grid grid-col-2 grid-flow-col gap-1\">\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Events\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Events\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Event list\n                    </button>\n\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Candidates\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Candidates\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Candidates\n                    </button>\n                  </div>\n                  {/* )} */}\n\n                  {/* events */}\n                  {this.state.active_side_tab === ActiveSideTap.Events ? (\n                    <ProctoringEvents\n                      candidates={this.props.proctoring.candidates}\n                      events={this.props.proctoring.events}\n                      focus_mode={this.state.focus_mode}\n                      loading={this.state.events_loading}\n                    />\n                  ) : (\n                    <ProctoringCandidates\n                      candidates={this.props.proctoring.candidates}\n                      clickHandler={this.SelectCandidateHandler}\n                      focus_mode={this.state.focus_mode}\n                      show_title={false}\n                    />\n                  )}\n                </React.Fragment>\n              ) : (\n                <ProctoringCandidateDetails\n                  candidate={this.props.proctoring.candidates.find(\n                    (itm) => itm.user_id === this.state.selected_candidate\n                  )}\n                  events={this.props.proctoring.events.filter(\n                    (evnt: EventInterface) =>\n                      evnt.user_id === this.state.selected_candidate\n                  )}\n                  removeInExam={this.ejectCandidateHandler}\n                  chatHandler={this.blank}\n                  micHandler={this.blank}\n                  focusHandler={this.blank}\n                  stopHandler={this.stopCandidateHandler}\n                  restartHandler={this.restartCandidateHandler}\n                  warnHandler={this.warnCandidateHandler}\n                  closeHandler={() => this.SelectCandidateHandler(null)}\n                  home_proctoring={false}\n                  exam_started={this.props.proctoring.exam.start_exam}\n                  focus_mode={this.state.focus_mode}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; auth: Auth; proctoring: Proctoring } => {\n  return { socket: socket, auth: auth, proctoring: proctoring };\n};\n\nexport const ProctoringOnlineSupervisor = connect(mapStateToProps, {\n  FC_GetProctoringRoom,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_CandidateRemoveExam,\n})(_ProctoringOnlineSupervisor);\n","import React, { FC, ReactElement } from \"react\";\nimport { MdAccountCircle } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringCandidatesProps = {\n  clickHandler: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  show_title: boolean;\n};\n\nconst ProctoringCandidates: FC<ProctoringCandidatesProps> = ({\n  clickHandler,\n  candidates,\n  focus_mode,\n  show_title,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className={`mt-2 ${focus_mode === true ? \"text-white p-2 \" : \"\"}`}>\n      {show_title === true && (\n        <h1 className=\"text-3xl font-bold text-center pb-2 border-b mb-1 border-gray-100\">\n          Candidates\n        </h1>\n      )}\n      <table\n        className={`w-full text-left ${\n          focus_mode === true ? \"\" : \"bg-white rounded-md\"\n        }  p-2\"`}\n      >\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th></th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {candidates.map((cand: CandidateProctoringInterface, i: number) => (\n            <tr\n              key={i}\n              className={`border-b mb-1 ${\n                focus_mode === true\n                  ? \"border-blue-800 border-opacity-60 hover:bg-blue-900\"\n                  : \"border-gray-200 border-opacity-60 hover:bg-blue-100\"\n              }  cursor-pointer`}\n              onClick={clickHandler.bind(this, cand.user_id)}\n            >\n              <td\n                className={`${\n                  focus_mode === true ? \"text-blue-500\" : \"text-gray-400\"\n                }  w-5 text-left`}\n              >\n                <MdAccountCircle className=\"text-5xl\" />\n              </td>\n\n              <td className=\"text-gray-400 pl-1 py-1\">\n                <h4\n                  className={`font-bold text-lg p-0 m-0 ${\n                    focus_mode === true ? \"text-white\" : \"text-gray-900\"\n                  }`}\n                >\n                  {cand.email}\n                </h4>\n                <p className=\"text-sm p-0 m-0 -mt-1\">\n                  {cand.fname} {cand.lname}\n                </p>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default ProctoringCandidates;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdNotInterested, MdWarning } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype CenterCardSupervisorProps = {\n  seat_number: number;\n  candidate: CandidateProctoringInterface;\n  warningHandler: Function;\n  stopHandler: Function;\n  detailsHandler: Function;\n  continueHandler: Function;\n  exam_started: boolean;\n  focus_mode: boolean;\n};\n\nconst CenterCardSupervisor: FC<CenterCardSupervisorProps> = ({\n  seat_number,\n  candidate,\n  warningHandler,\n  stopHandler,\n  detailsHandler,\n  continueHandler,\n  exam_started,\n  focus_mode,\n}): ReactElement => {\n  /* function body */\n  let color =\n    candidate?.stopped === true ? \"red\" : focus_mode === true ? \"blue\" : \"gray\";\n  return (\n    <div\n      className={`bg-${color}-900 bg-opacity-50 hover:bg-opacity-100 cursor-pointer border-${color}-400 border p-2 rounded-md text-white transition-all ease-in-out`}\n      onClick={detailsHandler.bind(this, candidate.user_id)}\n    >\n      <div className=\"text-center\">\n        <span className={`text-${color}-200`}>Seat number</span>\n        <h1 className=\"text-5xl font-bold\">{seat_number}</h1>\n      </div>\n\n      <div className={`mt-1 border-t border-${color}-500 pt-2`}>\n        <h4 className={`text-xs text-${color}-400`}>Full names</h4>\n        <h4 className=\"text-sm font-bold\">\n          {candidate.fname} {candidate.lname}\n        </h4>\n      </div>\n\n      {exam_started === true && (\n        <div className=\"mt-2\">\n          {candidate.stopped === false ? (\n            <button\n              onClick={warningHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-yellow-300\"\n            >\n              <MdWarning className=\"inline\" /> Warn\n            </button>\n          ) : (\n            <button\n              onClick={continueHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-green-400\"\n            >\n              <MdWarning className=\"inline\" /> Condinue\n            </button>\n          )}\n          <button\n            onClick={stopHandler.bind(this, candidate.user_id)}\n            className=\"px-2 text-sm py-1 rounded-md text-white- bg-red-700 ml-1\"\n          >\n            <MdNotInterested className=\"inline\" /> Stop\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default CenterCardSupervisor;\n","import React, { Fragment } from \"react\";\nimport { FaSchool } from \"react-icons/fa\";\nimport { MdLocationOn } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  FC_RoomDetails,\n  Proctoring,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n} from \"../../actions\";\nimport { ProctoringExam } from \"../../interfaces/socketInterfaces\";\nimport { StoreState } from \"../../reducers\";\nimport { ProctoringOnlineSupervisor } from \"../ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_RoomDetails: Function;\n  FC_ExamsDetailsData: Function;\n  FC_LoadExamToRoomProctoring: Function;\n  FC_ClearExamToRoomProctoring: Function;\n}\n\ninterface AppState {\n  error: boolean;\n  errorMsg: string;\n  exams_error: boolean;\n  exams_error_msg: string;\n}\n\nclass _ProctoringCenter extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      error: false,\n      errorMsg: \"\",\n      exams_error: false,\n      exams_error_msg: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.auth.user_access.room_id.length >= 3) {\n      //** GET ROOM DETAILS */\n\n      if (this.props.proctoring.room.room_id === \"\") {\n        this.props.FC_RoomDetails(\n          this.props.auth.user_access.room_id,\n          (status: boolean, errorMsg: string) => {\n            if (status === true) {\n              console.log({ session: this.props.auth.application_session });\n\n              if (this.props.auth.application_session._id.length >= 1) {\n                //** GET EXAMS DETAILS */\n\n                // if (this.props.proctoring.room_exams.length === 0) {\n                this.props.FC_ExamsDetailsData(\n                  this.props.auth.application_session?._id,\n                  (status: boolean, error: string) => {\n                    if (status === false) {\n                      this.setState({\n                        exams_error: true,\n                        exams_error_msg: error,\n                      });\n                    }\n                  }\n                );\n                // } else {\n\n                // }\n              } else {\n                this.setState({\n                  error: true,\n                  errorMsg: \"No application session found\",\n                });\n              }\n            } else {\n              this.setState({\n                error: true,\n                errorMsg: errorMsg,\n              });\n            }\n          }\n        );\n      }\n    }\n  };\n\n  render() {\n    if (this.state.error === true) {\n      return (\n        <div className=\"mt-4\">\n          <div className=\"p-5 bg-red-100 rounded-md mx-auto text-center text-red-900 animate__animated animate__bounceIn\">\n            <h1 className=\"text-3xl font-bold\">Failed do load data</h1>\n            <p>{this.state.errorMsg}</p>\n          </div>\n        </div>\n      );\n    }\n    if (\n      this.state.error === false &&\n      this.props.proctoring.room.loaded === false\n    ) {\n      return (\n        <div className=\"m-5 text-center\">\n          <h5 className=\"text-gray-400 animate__animated animate__fadeIn animate__infinite text-xl\">\n            Loading room details\n          </h5>\n        </div>\n      );\n    }\n\n    const {\n      room_number,\n      center_name,\n      district_name,\n      province_name,\n      // district_id,\n      // center_id,\n      // province_id,\n      // room_id,\n    } = this.props.proctoring.room;\n\n    if (\n      this.props.proctoring.exam.course_id !== \"\" &&\n      this.props.proctoring.exam.position_id !== \"\"\n    ) {\n      return <ProctoringOnlineSupervisor />;\n    }\n    return (\n      <Fragment>\n        <div className=\"mr-2\">\n          <div className=\"p-5 bg-white rounded-b-md \">\n            <h2 className=\"text-2xl text-gray-600 font-bold text-center border-b pb-2\">\n              Room details\n            </h2>\n            <div className=\"flex flex-col md:flex-row\">\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <MdLocationOn className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 pt-3 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Province:</span>{\" \"}\n                    <b> {province_name}</b>\n                  </div>\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">District:</span>{\" \"}\n                    <b> {district_name}</b>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <FaSchool className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Center name:</span>{\" \"}\n                    <b> {center_name}</b>\n                  </div>\n\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Room Number:</span>{\" \"}\n                    <b> {room_number}</b>\n                  </div>\n                </div>\n              </div>\n            </div>{\" \"}\n          </div>\n\n          <h2 className=\"mt-5 text-2xl font-bold text-gray-500\">\n            Exams on this room\n          </h2>\n          <div className=\"mt-2 p-2 bg-white rounded-md\">\n            {this.props.proctoring.room_exams.length <= 0 ? (\n              <div className=\"p-5 text-center\">\n                No exams assigned to this room\n              </div>\n            ) : (\n              <table className=\"w-full text-left\">\n                <thead className=\"bg-gray-100 rounded-md\">\n                  <tr>\n                    <th className=\"p-2\">#</th>\n                    <th className=\"p-2\">Course</th>\n                    <th className=\"p-2\">Position</th>\n                    <th className=\"p-2\">Code</th>\n                    <th className=\"p-2\">Date</th>\n                    <th className=\"p-2\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.props.proctoring.room_exams.map((room, key) => {\n                    let examFound = this.props.proctoring.exams_list.exams.find(\n                      (exm) => exm.course === room.course_id\n                    );\n\n                    return (\n                      <tr\n                        className=\"p-2 border-t group hover:bg-blue-50\"\n                        key={key}\n                      >\n                        <td className=\"p-2 text-gray-400\">{key + 1}</td>\n                        <td className=\"p-2 font-bold\">{room.course_name}</td>\n                        <td className=\"p-2\">\n                          <span className=\"p-1 text-sm bg-yellow-100 font-bold text-yellow-900 rounded\">\n                            {room.position_title}\n                          </span>\n                        </td>\n                        <td className=\"p-2\">{room.course_code}</td>\n                        <td className=\"p-2 text-sm\">\n                          {this.state.error === false &&\n                          this.props.proctoring.exams_list.loaded === false ? (\n                            <span className=\"text-blue-500 animate__animated animate__fadeIn animate__infinite\">\n                              Loading...\n                            </span>\n                          ) : examFound === undefined ? (\n                            \"Not found\"\n                          ) : (\n                            examFound.exam_date\n                          )}\n                        </td>\n                        <td className=\"p-2 text-right\">\n                          {examFound !== undefined && examFound !== undefined && (\n                            <Fragment>\n                              {room.course_id ===\n                                this.props.proctoring.exam.course_id &&\n                                room.position_id ===\n                                  this.props.proctoring.exam.position_id && (\n                                  <button\n                                    className=\" group-hover:bg-red-500 py-1 px-3 rounded text-red-500 group-hover:text-white bg-red-100\"\n                                    onClick={() =>\n                                      window.confirm(\n                                        \"Are you sure you want to exist the room\"\n                                      ) &&\n                                      this.props.FC_ClearExamToRoomProctoring()\n                                    }\n                                  >\n                                    Leave Room\n                                  </button>\n                                )}\n                              {this.props.proctoring.exam.room_id === \"\" && (\n                                <button\n                                  onClick={() => {\n                                    if (\n                                      examFound !== undefined &&\n                                      examFound !== undefined &&\n                                      room !== null &&\n                                      room !== undefined\n                                    ) {\n                                      this.props.FC_LoadExamToRoomProctoring({\n                                        video_support: false,\n                                        start_exam: false,\n                                        start_time: examFound?.start_time,\n                                        end_time: \"\",\n                                        exam_done: false,\n                                        period_id:\n                                          this.props.auth.application_session\n                                            ._id,\n                                        exam_status: examFound?.exam_status,\n                                        exam_date: examFound?.exam_date,\n                                        duration: examFound?.duration,\n                                        position_id: room.position_id,\n                                        position_title: room.position_title,\n                                        course_id: room.course_id,\n                                        course_code: room.course_code,\n                                        course_name: room.course_name,\n                                        room_id:\n                                          this.props.proctoring.room.room_id,\n                                        exam_id: examFound.id,\n                                      } as ProctoringExam);\n                                    }\n                                  }}\n                                  className=\" group-hover:bg-blue-500 py-1 px-3 rounded text-blue-500 group-hover:text-white bg-blue-100\"\n                                >\n                                  Open\n                                </button>\n                              )}\n                            </Fragment>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth, proctoring };\n};\n\nexport const ProctoringCenter = connect(mapStateToProps, {\n  FC_RoomDetails,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n})(_ProctoringCenter);\n"],"sourceRoot":""}