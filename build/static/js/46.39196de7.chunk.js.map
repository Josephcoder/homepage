{"version":3,"sources":["containers/Claimings/ClaimDocView.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx"],"names":["isReclaimAllowed","thisClaim","claim_level","_thisClaim","claims","find","item","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","connect","createReClaim","PushPopupAlert","props","handleSubmit","a","isEmptyOrSpaces","reClaimingMsg","setFormError","element","msg","title","theme","PopupAlertTheme","warning","setLoadingRequest","setAxiosToken","axios","put","API","CLAIMING","_id","reason","res","console","log","data","status","success","setReClaimingMsg","setReClaiming","error","errorToText","danger","className","ClaimGetDocTitle","documentCategories","thisDoc","main","type","onClick","setViewImage","viewImage","validation_status","capitalizeFirstLetter","previous","evaluater","name","validated_by","comment","src","AUTH_FILES","files","alt","length","map","claim","index","showDate","createdAt","timestampToDate","date_created","timeFR","toLocaleLowerCase","evaluation_comment","id","reClaiming","last_claim_status","PENDING","DELETED","disabled","loadingRequest","placeholder","cols","rows","formError","style","resize","value","onChange","e","target","filterClaimsByClaimType","claimList","claimType","filter","type_key","auth","claiming","GetClaimingTypes","setSelectedClaimType","getAllClaims","useState","loading","setLoading","loadingClaimTypes","setLoadingClaimTypes","useEffect","claimTypes","countClaims","thisType","result","allClaims","Fragment","loadingClaims","active","selectedClaimType","count","PlansTypeKeys","APPLICATION","DOCUMENT_VALIDATION","EXAMINATION","ClaimHeaderTitle","isLoading","loadingSession","periodChanged","headerTitle","thisPeriod","session_plan_id","sessions","period_id","application_sessions","selectPeriod","setThisPeriod","setLoadingSession","onPeriodChange","session","session_plan_name","ClaimTypesEnum","thisApplication","position","position_title","setViewPosition","viewPosition","ApplicationStates","Rejected","DATE","description","school_level_id","school_level_name","education_institute_id","education_category_title","courses","course_name","course_code","course_id","requirements","FC_ApplicationPositionDistinctCategory","DistinctCategoriesTemp","category_title","ViewRequirements","PositionsTemp","req","category_id","NoResult","NoResultThemes","Dark","questionTypes","loadQuestionTypes","getAnswersByQuestion","question_id","thisExamSheet","user_answers","question","thisExam","questions","findQuestionType","questionTypeElementsType","MultipleChoice","SingleMultiple","TrueFalse","answer","indexAnswer","user_marks","SimpleCalculate","Matching","ShortAnswer","Numeric","CalculatedMultipleChoice","userDetails","user_info","fname","lname","myPlacement","placed","school","school_name","district_id","district_name","getMyRejectedApplications","getMyRejectedDocuments","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","candidateApplications","user","user_id","candidateDocuments","myClaims","COMPLETED","getDocumentById","document_id","doc_id","whichClaimType","application","document","exam","MARKS_PUBLICATION","marks_publication","PLACEMENT_TRANSFER","placement","whichClaimStatus","classes","getClaimById","claim_id","getApplicationById","application_id","displayDocClaimTitle","claiming_on_id","displayClaimTitle","documentReducer","allCourse","myAnswer","thisAnswer","getCourseIdBySheetId","getCourseById","course","Index","setState","setViewClaim","viewClaim","setPeriodChanged","setClaimForm","claimForm","setClaimId","claimId","loadClaims","getMyClaims","state","setSession","thisSession","is_active","componentDidMount","loadCourses","GetAllSessionPlans","documentCategory","getDocumentCategory","documentSubCategory","getDocumentSubCategory","documentFields","getDocumentFields","getMyPlacement","isDeleteAllowed","thisCLaim","this","SideNavigation","colSpan","Light","ClaimApplView","ClaimExamView","ClaimForm","formState","setFormState","Component","CandidateClaim","sessionPlan","allSessionPlans"],"mappings":"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","file":"static/js/46.39196de7.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, DocumentClaimUser } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate, timestampToDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default connect(mapStateToProps, {\n  GetClaimingTypes,\n  setSelectedClaimType,\n  getAllClaims,\n  PushPopupAlert,\n})(AdminFilterByType);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(\n    sessions.filter((item) => item.session_plan_id === period_id)[0]\n  );\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod.session_plan_id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option\n                key={session.session_plan_id + item}\n                value={session.session_plan_id}\n              >\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default ClaimHeaderTitle;\n","import React, { Component } from \"react\";\nimport { MdAdd, MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => this.setClaimForm(true)}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  filterClaimsByClaimType(\n                    this.props.claiming.myClaims,\n                    this.props.claiming.selectedClaimType\n                  ).map((claim, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {displayClaimTitle(\n                          this.props.claiming,\n                          this.props.documentReducer,\n                          this.props.courses,\n                          claim\n                        )}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  loadCourses,\n  getMyPlacement,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport {\n  DATE,\n  errorToText,\n  showDate,\n  timestampToDate,\n} from \"../../utils/functions\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisClaim.previous.reason}\n            </span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {props.thisApplication.position.description}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { ImInfo, ImRadioChecked, ImRadioUnchecked } from \"react-icons/im\";\nimport { MdSwapHoriz } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CalculatedMultipleChoiceInterface,\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  ClaimGetUserAnswers,\n  ClaimStatus,\n  course,\n  matchingAnswerInterface,\n  multipleChoiceAnswerInterface,\n  questionTypeElementsType,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate, timestampToDate } from \"../../utils/functions\";\nimport { findQuestionType } from \"../DoExam/utils/utils\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getAnswersByQuestion = (question_id: string): ClaimGetUserAnswers[] => {\n    return props.thisExamSheet.user_answers.filter(\n      (item) => item.question === question_id\n    );\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                Questions\n              </div>\n              {props.thisExamSheet.questions.map((item, index) => (\n                <div\n                  key={index + item.id}\n                  className=\"rounded border my-2 p-1 shadow divide-y\"\n                >\n                  {/* SINGLE & MULTIPLE && TRUE+FALSE QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    (findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.MultipleChoice ||\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.SingleMultiple ||\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.TrueFalse) && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {item.question[0].answer.map(\n                                (\n                                  question: multipleChoiceAnswerInterface,\n                                  index\n                                ) => (\n                                  <li\n                                    className={`mb-1 flex items-center`}\n                                    key={index + question.id}\n                                  >\n                                    {question.status ? (\n                                      <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                    ) : (\n                                      <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                    )}\n                                    {question.value}\n                                  </li>\n                                )\n                              )}\n                            </ul>\n                          </div>\n\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {getAnswersByQuestion(item.question_id).length >\n                              0 ? (\n                                getAnswersByQuestion(\n                                  item.question_id\n                                )[0].answer.map(\n                                  (\n                                    answer: multipleChoiceAnswerInterface,\n                                    indexAnswer\n                                  ) => (\n                                    <li\n                                      className=\"mb-3 flex items-center\"\n                                      key={indexAnswer}\n                                    >\n                                      {answer.status ? (\n                                        <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                      ) : (\n                                        <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                      )}\n                                      {answer.value}\n                                    </li>\n                                  )\n                                )\n                              ) : (\n                                <li className=\"mb-3 flex items-center\">\n                                  <ImInfo className=\"h-6 w-6 mr-2\" />\n                                  No Answer provided\n                                </li>\n                              )}\n                            </ul>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Simple Calculate QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.SimpleCalculate && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <span>\n                              Between {item.question[0].answer[0].value[0]} + \"\n                              and \"+{item.question[0].answer[0].value[1]}\n                            </span>\n                          </div>\n\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            {getAnswersByQuestion(item.question_id).length >\n                            0 ? (\n                              getAnswersByQuestion(\n                                item.question_id\n                              )[0].answer.map(\n                                (\n                                  answer: multipleChoiceAnswerInterface,\n                                  indexAnswer\n                                ) => (\n                                  <span key={indexAnswer}>{answer.value}</span>\n                                )\n                              )\n                            ) : (\n                              <span>No Answer provided</span>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* MATCHING QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.Matching && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Expected answer :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {item.question[0].answer.map(\n                                  (\n                                    question: matchingAnswerInterface,\n                                    index\n                                  ) => (\n                                    <li\n                                      className={`mb-1 flex items-center gap-2 text-lg`}\n                                      key={index + question.id}\n                                    >\n                                      {question.value}\n                                      <MdSwapHoriz className=\"\" />\n                                      {question.status}\n                                    </li>\n                                  )\n                                )}\n                              </ul>\n                            </div>\n\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Given answers :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {getAnswersByQuestion(item.question_id).length >\n                                0 ? (\n                                  getAnswersByQuestion(\n                                    item.question_id\n                                  )[0].answer.map(\n                                    (\n                                      answer: multipleChoiceAnswerInterface,\n                                      indexAnswer\n                                    ) => (\n                                      <li\n                                        className=\"mb-3 flex items-center\"\n                                        key={indexAnswer}\n                                      >\n                                        {answer.status ? (\n                                          <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                        ) : (\n                                          <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                        )}\n                                        {answer.value}\n                                      </li>\n                                    )\n                                  )\n                                ) : (\n                                  <li className=\"mb-3 flex items-center\">\n                                    <ImInfo className=\"h-6 w-6 mr-2\" />\n                                    No Answer provided\n                                  </li>\n                                )}\n                              </ul>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center px-4 mb-2\">\n                            <p className=\"text-md font-medium\">Marks :</p>\n                            <span>\n                              {getAnswersByQuestion(item.question_id) &&\n                              getAnswersByQuestion(item.question_id).length > 0\n                                ? getAnswersByQuestion(item.question_id)[0]\n                                    .user_marks\n                                : \"\"}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Short Answer QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.ShortAnswer && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <span>\n                              {capitalizeFirstLetter(\n                                item.question[0].answer[0].value\n                              )}\n                            </span>\n                          </div>\n\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            {getAnswersByQuestion(item.question_id).length >\n                            0 ? (\n                              getAnswersByQuestion(\n                                item.question_id\n                              )[0].answer.map(\n                                (\n                                  answer: multipleChoiceAnswerInterface,\n                                  indexAnswer\n                                ) => (\n                                  <span key={indexAnswer}>{answer.value}</span>\n                                )\n                              )\n                            ) : (\n                              <span>No Answer provided</span>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Numeric QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.Numeric && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <span>{item.question[0].answer[0].value[0]}</span>\n                          </div>\n\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            {getAnswersByQuestion(item.question_id).length >\n                            0 ? (\n                              getAnswersByQuestion(\n                                item.question_id\n                              )[0].answer.map(\n                                (\n                                  answer: multipleChoiceAnswerInterface,\n                                  indexAnswer\n                                ) => (\n                                  <span key={indexAnswer}>{answer.value}</span>\n                                )\n                              )\n                            ) : (\n                              <span>No Answer provided</span>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Calculated Multiple Choice QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! ===\n                      questionTypeElementsType.CalculatedMultipleChoice && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {item.question[0].answer.map(\n                                (\n                                  question: CalculatedMultipleChoiceInterface,\n                                  index\n                                ) => (\n                                  <li\n                                    className={`mb-1 flex items-center`}\n                                    key={index + question.id}\n                                  >\n                                    {question.status ? (\n                                      <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                    ) : (\n                                      <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                    )}\n                                    {question.value}\n                                  </li>\n                                )\n                              )}\n                            </ul>\n                          </div>\n\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {getAnswersByQuestion(item.question_id).length >\n                              0 ? (\n                                getAnswersByQuestion(\n                                  item.question_id\n                                )[0].answer.map(\n                                  (\n                                    answer: multipleChoiceAnswerInterface,\n                                    indexAnswer\n                                  ) => (\n                                    <li\n                                      className=\"mb-3 flex items-center\"\n                                      key={indexAnswer}\n                                    >\n                                      {answer.status ? (\n                                        <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                      ) : (\n                                        <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                      )}\n                                      {answer.value}\n                                    </li>\n                                  )\n                                )\n                              ) : (\n                                <li className=\"mb-3 flex items-center\">\n                                  <ImInfo className=\"h-6 w-6 mr-2\" />\n                                  No Answer provided\n                                </li>\n                              )}\n                            </ul>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                </div>\n              ))}\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.userDetails.user_info.fname +\n                          \" \" +\n                          props.thisClaim.userDetails.user_info.lname\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default connect(mapStateToProps, {\n  loadQuestionTypes,\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate, timestampToDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimPlacementView);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default connect(mapStateToProps, {\n  GetClaimingTypes,\n  setSelectedClaimType,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  PushPopupAlert,\n})(FilterByType);\n"],"sourceRoot":""}