{"version":3,"sources":["components/Questions/QuestionItem.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","components/QuestionPreview/QuestionPreview.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","containers/PrepareExam/EditExam/EditExam.tsx"],"names":["QuestionItem","props","useState","editMode","setEditMode","selectedQuestion","setSelectedQuestion","onClick","select","callBack","question","className","number","status","questionTypes","find","itm","id","type","title","dangerouslySetInnerHTML","__html","description","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","questionsList","unSelectQuestion","questionAnswers","answerQuestionFn","answer","preview","submitQuestionAnswer","MultipleChoice","checkAnswer","item","res","available_answers","length","check","question_id","selectedQuestionAnswer","undefined","x","addAnswerItemFn","newAnswers","useEffect","test","answers","a","value","map","i","oldAnswers","temp","questionTypeElementsType","SingleMultiple","t","addAnswer","TrueFalse","SimpleCalculated","answeredValue","toString","onChange","e","target","ShortAnswer","style","minHeight","Numerical","CalculatedMultipleChoice","filter","getRandomArbitrary","toFixed","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","selectedLanguage","checkIfSelected","Matching","displayWindow","setDisplayWindow","setSelectedAnswer","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","language","key","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","Questions","connect","auth","course","schoolLevels","questionBank","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","setSelectedCourse","loadQuestionTypes","loading","setLoading","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","chapters","selectedCourse","name","course_id","to","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","setState","actionType","changeProctoringRule","state","proctoringRules","rule","newData","selected","caption","addQuestionToPaper","addExamQuestion","removeToQuestionPaper","window","confirm","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","periods","selected_period","is_active","formErr","element","msg","selected_course","selectCourse","prepareExam","currentStep","StepStatus","Step1","exam_date","start_time","end_time","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","validateTwoTime","axios","post","API","QBank","period","session_plan_id","exam_status","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","redirectToExams","PushPopupAlert","PopupAlertTheme","success","response","data","errors","message","console","log","componentDidMount","applicationPeriods","loadApplicationPeriods","examsList","loadExamsListByPeriod","application_session","editQuestion","findTotalMarks","total","marks","handleChangeTermes","setSelectCourse","setSelectPeriod","GetExamsByPeriod","setSelectedPeriod","alert","Prepare","addQuestionModal","proctoringDefaultRules","submitExam","this","qts","stepStatus","preparedExams","parseInt","disabled","NoResultThemes","Dark","AlertInterface","danger","large","selected_course_id","body","Component","PrepareExam","system","loadExamsList","QuestionPreview","doExam","candidateExam","setSelectedExamQuestion","setQuestionLanguage","selectLang","setSelectLang","setSelectedLanguage","filterLanguages","langs","langItem","testLangQ","l","LoadingType","white","width","findQuestionType","question_answers","toMultipleChoice","candidate_exam","toTrueFalse","toMatching","Shuffle","SimpleCalculate","toSimpleCalculated","toShortAnswer","Numeric","toNumerical","toCalculatedMultipleChoice","PrepareExamSteps","Steps","course_name","session_plan_name","Switch","_EditExam","validateExamDate","ExamTimeStatus","Waiting","addEditExamQuestion","put","setLoadingProps","setSelectedExam","courses","findExamDetails","EditExam","DATE_DATA"],"mappings":"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","file":"static/js/29.0855bca7.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      <div\n        onClick={() => props.select === true && props.callBack(props.question)}\n        className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n          props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n        } hover:border-blue-600 mb-3`}\n      >\n        <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n          <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n            <div>\n              {props.select === false ? (\n                <div className=\"font-bold text-blue-600\">({props.number})</div>\n              ) : props.status === true ? (\n                <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n              ) : (\n                <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n              )}\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">\n                {props.questionTypes.questionTypes &&\n                  props.questionTypes.questionTypes.find(\n                    (itm) => itm.id && itm.id === props.question.type\n                  )?.title}\n              </span>\n              <span className=\"font-bold\">\n                {props.question.question[0].title}\n              </span>\n              <div\n                className=\"w-full text-xs\"\n                dangerouslySetInnerHTML={{\n                  __html: props.question.question[0].description,\n                }}\n              ></div>\n            </div>\n          </div>\n          {props.select === false && (\n            <div className=\"flex flex-row items-center gap-2\">\n              <div\n                onClick={() => setSelectedQuestion(props.question)}\n                className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <CgDetailsMore className=\"text-3xl text-gray-700\" />\n              </div>\n              <div\n                onClick={() => setEditMode(true)}\n                className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <MdEdit className=\"text-3xl text-blue-700\" />\n              </div>\n              <div\n                onClick={() =>\n                  props.select === false && props.callBack(props.question)\n                }\n                className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <IoMdTrash className=\"text-3xl text-yellow-700\" />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      {editMode === true && (\n        <Modal\n          title=\"\"\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setEditMode(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={false}\n          padding={{ title: false }}\n        >\n          <div className=\"pt-0\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        </Modal>\n      )}\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.type === questionTypeElementsType.SingleMultiple\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  TrueFalseQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n\n  const addAnswer = (\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [\n          ...temp,\n          {\n            id: t.id,\n            value: t.value,\n            status: false,\n          },\n        ];\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  SimpleCalculatedQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: [newAnswers[0].value],\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0].toString()\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  ShortAnswerQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: \"\",\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"200px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: [item.value],\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: item.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ans: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(\n              (it) => it.status.toString() === ans.status\n            );\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let ans = temp.answer.find((itm) => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(\n            props.selectedQuestionAnswer.question_id,\n            props.selectedLanguage,\n            ans\n          );\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [\n            ...res,\n            {\n              id: ans.id,\n              lang: item.language,\n              status: ans.status.toString(),\n            },\n          ];\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n\nexport interface ExamItemResponseFull {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  course_id: string;\n  course_code: string;\n  course_name: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.setLoading\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) =>\n              itm.period === this.props.periods.selected_period?.session_plan_id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Confirm preparation\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => {\n              if (\n                this.props.periods.selected_period !== null &&\n                this.props.periods.selected_period.is_active === true\n              ) {\n                this.setState({ selectPeriod: false });\n              } else {\n                alert(\"Please choose active session\");\n              }\n            }}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n})(_PrepareExam);\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-80 md:pb-60\">\n          {/* <div\n            className={`h-8 ${\n              props.submitQuestionAnswer === true\n                ? \"animate__animated animate__fadeIn bg-yellow-50 text-yellow-700 animate-pulse\"\n                : \"text-blue-400 italic\"\n            } px-3 py-2 rounded  font-bold text-sm`}\n          >\n            {props.submitQuestionAnswer === true\n              ? \"Saving your answer ...\"\n              : \"\"}\n          </div> */}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.title,\n                    }}\n                    className=\"text-sm text-gray-600\"\n                  ></div>\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.description,\n                    }}\n                    className=\"text-lg text-gray-800 font-bold\"\n                  ></div>\n                </div>\n              )}\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div\n                  onClick={() => setSelectLang(!selectLang)}\n                  className=\"flex flex-row items-center gap-2\"\n                >\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{ width: \"97px\" }}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">\n                      Language\n                    </span>\n                    <span\n                      title={\n                        filterLanguages().find(\n                          (itm) => itm.key === selectedLanguage\n                        )?.value\n                      }\n                      className=\"text-sm font-bold text-blue-600 truncate\"\n                      style={{ width: \"97px\" }}\n                    >\n                      {\n                        filterLanguages().find(\n                          (itm) => itm.key === selectedLanguage\n                        )?.value\n                      }\n                    </span>\n                  </div>\n                  <div\n                    className={`${\n                      selectLang === true\n                        ? \"bg-yellow-800 text-white\"\n                        : \"bg-gray-50 hover:bg-blue-600\"\n                    } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                  >\n                    {selectLang === true ? (\n                      <FaTimes className=\"text-xl my-2 mx-2\" />\n                    ) : (\n                      <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                    )}\n                  </div>\n                </div>\n                {selectLang === true && (\n                  <div\n                    className=\"relative rounded overflow-hidden\"\n                    style={{ width: \"182px\" }}\n                  >\n                    <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                      {filterLanguages().map((item, i) => (\n                        <span\n                          onClick={() => {\n                            props.setQuestionLanguage(item.key);\n                            setSelectLang(!selectLang);\n                            setSelectedLanguage(item.key);\n                          }}\n                          key={i + 1}\n                          className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                            selectedLanguage === item.key\n                              ? \"bg-blue-800 font-extrabold border-blue-800\"\n                              : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                          }`}\n                        >\n                          {selectedLanguage === item.key ? (\n                            <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                          ) : (\n                            <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                          )}{\" \"}\n                          {item.value}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"my-4 py-2 px-2 bg-white rounded\"\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answer\n                      )\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addEditExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addEditExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      this.props.addEditExamQuestion(question);\n    } else {\n      alert(\n        \"You can not add questions while its time has ended or being done!\"\n      );\n    }\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      if (\n        window.confirm(\n          \"Are you sure do you want to remove question from the exam questions paper?\"\n        ) === true\n      ) {\n        this.props.addEditExamQuestion(question);\n      }\n    } else {\n      alert(\n        \"You can not remove questions while its time has ended or being done!\"\n      );\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = true;\n    // if (\n    //   this.props.prepareExam.selectedExam === null ||\n    //   this.props.prepareExam.selectedExam.questions.length !== 0\n    // ) {\n    //   conf = window.confirm(\n    //     \"Are you sure do you want to change course? You will loose your selected questions\"\n    //   );\n    // }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0 ||\n      this.props.course.selected_course === null\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.props.setLoadingProps\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.props.setLoadingProps\n          );\n      }\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (\n      this.props.course.courses !== null &&\n      this.props.course.selected_course === null\n    ) {\n      let myCourse = this.props.course.courses.find(\n        (itm) => itm.course_id === this.props.selectedExam.course\n      );\n      if (myCourse !== undefined) {\n        this.props.setSelectedCourse(myCourse);\n        this.chooseCourse(myCourse);\n      }\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        {validateExamDate(\n                          this.props.selectedExam.exam_date,\n                          this.props.selectedExam.start_time,\n                          this.props.selectedExam.end_time\n                        ) === ExamTimeStatus.Waiting && (\n                          <div\n                            onClick={() =>\n                              this.props.selectedCourse === null\n                                ? this.setState({ selectCourse: true })\n                                : this.setState({ addQuestionModal: true })\n                            }\n                            className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                          >\n                            <MdAdd className=\"text-2xl\" /> Add question\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Editing Exam\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                {this.props.prepareExam.selectedExam &&\n                validateExamDate(\n                  this.props.prepareExam.selectedExam!.exam_date,\n                  this.props.prepareExam.selectedExam!.start_time,\n                  this.props.prepareExam.selectedExam!.end_time\n                ) === ExamTimeStatus.Waiting ? (\n                  <div\n                    onClick={() => this.submitExamPreparation()}\n                    className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  >\n                    Confirm edit exam\n                  </div>\n                ) : (\n                  <div>Can not edit</div>\n                )}\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addEditExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n})(_EditExam);\n"],"sourceRoot":""}