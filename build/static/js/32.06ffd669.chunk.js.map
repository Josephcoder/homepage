{"version":3,"sources":["components/Modal/Modal.tsx","utils/functions.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","assets/profile.png","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","containers/DoExam/DoExam.tsx"],"names":["Themes","ModalMarginTop","ModalSize","Modal","props","themeColor","title","backDrop","theme","close","backDropClose","widthSizeClass","displayClose","padding","body","footer","primary","secondary","danger","success","warning","onClick","className","undefined","marginTop","none","style","width","maxHeight","height","maxWidth","overflowY","margin","zIndex","default","children","errorToText","error","console","error_res","JSON","parse","request","response","errors","length","message","DATE","data","format","date","Date","getFullYear","getMonth","slice","getDate","checkIfImageExists","url","callback","img","Image","src","complete","onload","onerror","calculate_age","dob","diff_ms","now","getTime","age_dt","Math","abs","getUTCFullYear","zoomInOut","imageId","zoomType","thisImage","document","getElementById","alert","currWidth","clientWidth","fullScreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","sortCompare","property","sortOrder","a","b","sortThisArray","TYPE","_sortOrder","sort","timestampToDate","thisTimestamp","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","_hours","toString","timeFR","substr","timeAMPM","isFileImage","file","includes","toLowerCase","getFileType","fileName","lastIndexOf","toMultipleChoice","answers","res","answer","id","value","status","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","MultipleChoice","checkAnswer","item","available_answers","check","find","itm","question_id","selectedQuestionAnswer","x","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","test","map","oldAnswers","temp","type","questionTypeElementsType","SingleMultiple","t","addAnswer","TrueFalse","Matching","checkIfSelected","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","question","language","key","testAnswerLang","it","checkAnswerStatus","selectedLanguage","findWord","arr","ReturnMatchingStatus","newItem","onChange","e","target","selected","SimpleCalculated","answeredValue","ShortAnswer","minHeight","Numerical","CalculatedMultipleChoice","filter","QuestionDetails","connect","auth","doExam","candidateExam","system","questionTypes","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","useState","loading","setLoading","selectLang","setSelectLang","QuestionData","candidate_exam","q","selected_question","findSelectedQuestionDetails","Loading","LoadingType","white","submitQuestionAnswer","selected_language","description","i","findQuestionType","question_answers","log","SimpleCalculate","Numeric","Footer","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","findIndex","selectedIndexPrevious","selectedIndexNext","ConfirmSubmitAnswer","exam_id","questionAnswered","SubmitAnswer","setProfileWindowStatus","windowStatus","profile","position","top","right","questionsList","selected_exam_id","Profile","proctoring","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","events","time","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","setSubmitModal","submitExam","DoExamTitle","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","course_name","course_code","alignSelf","start_time","duration","CountDown","duration_min","timeout","returnString","labels","days","small","DoExamResults","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","page","_DoEam","setState","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","setExamQuestionAnswer","setCompletedTest","completedTest","changingExamStatusLoading","changingExamStatus","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","questionAnswers","examDetails","periods","selected_period","selected_exam_details","checkUserExam","exam","positions","selected_position","exam_room_details","RequestUserExamDetails","user_id","position_id","userExamLocation","district_id","center_id","room_id","setLoadExamResultMessage","BackToExamination","componentDidMount","FC_AddRules","allow_to_leave_browser","copy_enabled","paste_enabled","right_click_enabled","stop_candidate_when_comeback","course","courses","loadCourses","exam_questions_answers","testAnswers","setLoadExamResultNoMessage","msg","PushPopupAlert","PopupAlertTheme","GetUserExamDetails","period","user_exams_done","CleanCandidateExam","SubmitExamQuestionAnswer","userAnswer","submitWholeExam","axios","put","API","DO_EXAM","startExam","display_exam","start_exam","pauseExam","doneExam","user_exam_details","application_session_id","application_session","_id","done_by","event_type_id","EventsLabels","DONE_EXAM","ExamId","FC_SaveEvent","socket","emit","Events","EXAM_DONE_SERVER","timeOutExam","TIME_OUT","TIME_OUT_SERVER","examStatus","loadUserExamErr","added_minutes","group_id","this","ProctoringCandidateOnline","restartExam","loadCandidateExam","setExamStatus","UserExamActions","Restart","stopExam","Paused","period_id","removeClient","Removed","examAlreadyDone","candidateStopExam","reason","info","candidateContinueExam","Continue","joinedRoom","changeTime","timer","QuestionsList","selected_course","preview","setSelectedCandidateExam","large","exam_date","dangerouslySetInnerHTML","__html","termes","Component","DoExam","ChangeExamStatus","setSelectedPeriod"],"mappings":"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","file":"static/js/32.06ffd669.chunk.js","sourcesContent":["/**\n * @description Modal design\n * @done_by Niyongabo\n */\nimport { MdClose } from \"react-icons/md\";\n\nexport enum Themes {\n  default = \"default\",\n  primary = \"primary\",\n  secondary = \"secondary\",\n  danger = \"danger\",\n  success = \"success\",\n  warning = \"warning\",\n}\n\nexport enum ModalMarginTop {\n  none = \"top-0\",\n  small = \"top-28\",\n  medium = \"top-1/3\",\n  large = \"top-1/2\",\n  extra = \"top-2/3\",\n}\n\nexport enum ModalSize {\n  small = \"max-w-sm\",\n  medium = \"max-w-screen-sm\",\n  large = \"max-w-screen-md\",\n  extraLarge = \"max-w-screen-lg\",\n  maxWidth = \"max-w-screen h-full\",\n}\n\ninterface ModalInterface {\n  title?: any;\n  backDrop: boolean;\n  theme: Themes;\n  close: Function;\n  backDropClose: boolean;\n  footer?: any;\n  children: any;\n  widthSizeClass: ModalSize;\n  displayClose: boolean;\n  padding: { title?: boolean; body?: boolean; footer?: boolean };\n  marginTop?: ModalMarginTop;\n}\n\nconst Modal = (props: ModalInterface): JSX.Element => {\n  const {\n    title,\n    backDrop,\n    theme,\n    close,\n    backDropClose,\n    widthSizeClass,\n    displayClose,\n    padding = { title: true, body: true, footer: true },\n  }: ModalInterface = props;\n\n  let themeColor: string;\n\n  switch (theme) {\n    case Themes.primary:\n      themeColor = \"blue-500\";\n      break;\n    case Themes.secondary:\n      themeColor = \"gray-300\";\n      break;\n    case Themes.danger:\n      themeColor = \"red-500\";\n      break;\n    case Themes.success:\n      themeColor = \"green-500\";\n      break;\n    case Themes.warning:\n      themeColor = \"yellow-500\";\n      break;\n    default:\n      themeColor = \"white\";\n      break;\n  }\n  return (\n    <>\n      <div onClick={(): void => backDropClose && close()} className={`animate__animated animate__fadeIn animate__faster modal fixed bg-black bg-opacity-${backDrop === true ? '60' : '0'}`}></div>\n      <div className={`fixed items-center justify-items-center ${props.marginTop === undefined ? ModalMarginTop.none : props.marginTop} left-0 right-0 bottom-0 bg-white rounded shadow-xl self-center ${widthSizeClass} animate__animated ${props.marginTop !== undefined && props.marginTop !== ModalMarginTop.none ? \"animate__fadeInUp\" : \"animate__zoomIn\"} animate__faster`} style={{width: '100%', maxHeight: '99vh', height: `${widthSizeClass === ModalSize.maxWidth ? props.marginTop === undefined ? \"100%\" : \"unset\" : \"fit-content\"}`, overflowY: 'auto', margin: 'auto', zIndex: 99999999}}>\n        <div className={`flex justify-between bg-${themeColor} ${padding.title === true ? \"py-4 px-4\" : \"\" } rounded-t text-${theme === Themes.default || theme === Themes.secondary ? \"black\" : \"white\"}`}>\n          {!title || title === \"\" ? <div></div> : (<h4 className={`text-lg font-bold `}>{title}</h4>)}\n          {displayClose === false ? \"\" : <div className=\"hover:text-red-600 hover:bg-red-100 rounded-full p-1 h-8 w-8\"><MdClose className=\"cursor-pointer font-extrabold text-2xl\" onClick={():void => close()} /></div>}\n        </div>\n        <div\n          className={`space-x-3 ${padding.body === true ? \"py-4 px-4\" : \"\"}`}\n        >\n          <div>{props.children !== \"\" ? props.children : \"\"}</div>\n        </div>\n        {props.footer !== undefined && props.footer !== \"\" ? (\n          <div\n            className={`flex float-right ${\n              padding.footer === true ? \"py-4 px-4\" : \"\"\n            }`}\n          >\n            {props.footer}\n          </div>\n        ) : ( \n          \"\"\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","export const errorToText = (error: any): string => {\n  console.error({ ...error });\n  let error_res = JSON.parse(error?.request?.response);\n  if (error_res.errors.length >= 1) {\n    return error_res.errors[0].message;\n  } else {\n    return \"Something went wrong, please try again later\";\n  }\n};\n\nexport const search = (objList: any, text: string, keys: any = null) => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product: any) => {\n    let flag;\n    let dataKeys = keys === null ? product : keys;\n    for (let prop in dataKeys) {\n      flag = false;\n      if (product[prop] === null || product[prop] === undefined) continue;\n      flag =\n        product[prop].toString().toLowerCase().indexOf(text.toLowerCase()) > -1;\n      if (flag) break;\n    }\n    return flag;\n  });\n};\n\nexport const DATE = (\n  data: string,\n  format: \"DD/MM/YYYY\" | \"YYYY/MM/DD\" = \"DD/MM/YYYY\"\n): string => {\n  const date = new Date(data);\n  if (format === \"YYYY/MM/DD\") {\n    return (\n      date.getFullYear() +\n      \"-\" +\n      (\"0\" + (date.getMonth() + 1)).slice(-2) +\n      \"-\" +\n      date.getDate()\n    );\n  } else {\n    return (\n      date.getDate() +\n      \"/\" +\n      (\"0\" + (date.getMonth() + 1)).slice(-2) +\n      \"/\" +\n      date.getFullYear()\n    );\n  }\n};\n\nexport const checkIfImageExists = (url: string, callback: Function) => {\n  const img = new Image();\n\n  img.src = url;\n\n  if (img.complete) {\n    callback(true);\n  } else {\n    img.onload = () => {\n      callback(true);\n    };\n    img.onerror = () => {\n      callback(false);\n    };\n  }\n};\n\nexport const calculate_age = (dob: string) => {\n  const date = new Date(dob);\n  var diff_ms = Date.now() - date.getTime();\n  var age_dt = new Date(diff_ms);\n\n  return Math.abs(age_dt.getUTCFullYear() - 1970);\n};\n\n// export const Shuffle = (array: any[]) => {\n//   let currentIndex: number = array.length,  randomIndex: number;\n//   while (currentIndex !== 0) {\n//     randomIndex = Math.floor(Math.random() * currentIndex);\n//     currentIndex--;\n//     [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n//   }\n//   return array;\n// }\n\n// export const Shuffle = (array: any[]) => {\n//   let ranNums = array.sort(() => Math.random() - array.length/100)\n//   return ranNums;\n// }\n\nexport const randomIntFromInterval = (min: number, max: number) => {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const Shuffle = (arr: any[]) => {\n  let temp = arr;\n  let res: any[] = [];\n  for (let i = temp.length - 1; i >= 0; i--) {\n    let j = randomIntFromInterval(0, i);\n    res = [...res, temp[j]];\n    let testing = temp;\n    let newTemp = temp.filter((itm) => testing.indexOf(itm) !== j);\n    temp = newTemp;\n  }\n  return res;\n};\n\nexport const zoomInOut = (imageId: string, zoomType: \"IN\" | \"OUT\" = \"IN\") => {\n  let thisImage = document.getElementById(imageId);\n  if (!thisImage) return alert(`Element with ID of ${imageId} not found!`);\n  let currWidth: number = thisImage.clientWidth;\n  if (zoomType === \"IN\") {\n    if (currWidth === 500) alert(\"Maximum Zoom in level reached\");\n    thisImage.style.width = currWidth + 40 + \"px\";\n  }\n  if (zoomType === \"OUT\") {\n    if (currWidth === 40) alert(\"Maximum Zoom out level reached\");\n    thisImage.style.width = currWidth - 40 + \"px\";\n  }\n};\n\nexport const fullScreen = (\n  imageId: string,\n  action: \"OPEN\" | \"CLOSE\" = \"OPEN\"\n) => {\n  let thisImage = document.getElementById(imageId) as HTMLElement & {\n    mozRequestFullScreen(): Promise<void>;\n    webkitRequestFullscreen(): Promise<void>;\n    msRequestFullscreen(): Promise<void>;\n  };\n  if (!thisImage) return alert(`Element with ID of ${imageId} not found!`);\n  if (thisImage.requestFullscreen) {\n    thisImage.requestFullscreen();\n  } else if (thisImage.webkitRequestFullscreen) {\n    thisImage.webkitRequestFullscreen();\n  } else if (thisImage.mozRequestFullScreen) {\n    thisImage.mozRequestFullScreen();\n  }\n};\n\nconst sortCompare = (property: string, sortOrder: 1 | -1) => {\n  return function (a: any, b: any) {\n    let result =\n      a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\n    return result * sortOrder;\n  };\n};\n\nexport const sortThisArray = (\n  TYPE: boolean,\n  data: any[],\n  property: string,\n  sortOrder: \"ASC\" | \"DESC\" = \"ASC\"\n): any[] => {\n  if (TYPE && property.length > 0) {\n    let _sortOrder: 1 | -1 = sortOrder === \"ASC\" ? 1 : -1;\n    return data.sort(sortCompare(property, _sortOrder));\n  }\n  return data;\n};\n\nexport const timestampToDate = (\n  thisTimestamp: number\n): { date: string; timeFR: string; timeAMPM: string } => {\n  let date = new Date(thisTimestamp * 1000);\n  let hours = date.getHours();\n  let minutes = \"0\" + date.getMinutes();\n  let seconds = \"0\" + date.getSeconds();\n\n  // AMPM FORMAT ===================================\n  let ampm = hours >= 12 ? \"pm\" : \"am\";\n  let _hours = hours % 12;\n  _hours = _hours ? _hours : 12; // the hour '0' should be '12'\n\n  // Will display time in 10:30:23 format\n  return {\n    date: DATE(date.toString()),\n    timeFR: hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2),\n    timeAMPM:\n      _hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2) + \" \" + ampm,\n  };\n};\n\nexport const isFileImage = (file: string): boolean => {\n  const imageExtensions: string[] = [\n    \"jpg\",\n    \"jpeg\",\n    \"jpe\",\n    \"jif\",\n    \"jfif\",\n    \"jfi\",\n    \"jp2\",\n    \"j2k\",\n    \"jpf\",\n    \"jpx\",\n    \"jpm\",\n    \"mj2\",\n    \"png\",\n    \"gif\",\n    \"webp\",\n    \"tiff\",\n    \"tif\",\n    \"psd\",\n    \"raw\",\n    \"bmp\",\n    \"svg\",\n    \"svgz\",\n  ];\n  // return file && file[\"type\"].split(\"/\")[0] === \"image\";\n  return imageExtensions.includes(file.toLowerCase());\n};\n\nexport const getFileType = (fileName: string): string => {\n  return fileName.substr(fileName.lastIndexOf(\".\") + 1);\n};\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { MultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  \n  const checkAnswer = (item: MultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: MultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: MultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.type === questionTypeElementsType.SingleMultiple ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonUnchecked className=\"text-2xl truncate\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default MultipleChoice\n","import React, { useEffect } from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { TrueFalseQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: TrueFalseQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n\n  const addAnswer = (item: TrueFalseQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [...temp, {\n          id: t.id,\n          value: t.value,\n          status: false,\n        }]\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  \n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <MdRadioButtonChecked className=\"text-2xl\" />:\n          <MdRadioButtonUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default TrueFalse\n","import React, { useEffect } from 'react'\nimport { MdRadioButtonUnchecked } from 'react-icons/md'\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CandidateExam } from '../../../../interfaces/exam'\nimport { MatchingQuestionAnswerInterface, MatchingStatuses, QuestionInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MatchingQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswer = (item: MatchingQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: item.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  \n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: \"\"\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n\n  const checkAnswerStatus = (selectedQuestionId: string, selectedLang: QuestionLanguage, ans: MatchingQuestionAnswerInterface) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(test => test.id === selectedQuestionId);\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(itm => itm.language === lang.key);\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(it => it.status.toString() === ans.status);\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (temp !== undefined) {\n      let ans = temp.answer.find(itm => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(props.selectedQuestionAnswer.question_id, props.selectedLanguage, ans);\n        }\n      }\n    }\n    return false;\n  }\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined = props.selectedExam?.questions.find(itm => itm.id === props.selectedQuestionAnswer.question_id);\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [...res, {\n            id: ans.id,\n            lang: item.language,\n            status: ans.status.toString()\n          }]\n        }\n      }\n    }\n    return res;\n  }\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find(itm => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(itm => itm.id === item && itm.lang === lang)?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  }\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"} grid grid-cols-2`}>\n          <div className=\"col-span-1 flex flex-row items-center gap-2\">\n            {checkAnswer(item) === true ?\n            <RiCheckboxCircleFill className=\"text-2xl\" />:\n            <MdRadioButtonUnchecked className=\"text-2xl\" />}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n          <div className=\"col-span-1\">\n            <select \n            onChange={(e) => {\n              addAnswer({\n                id: item.id,\n                value: item.value,\n                status: e.target.value\n              }, props.selectedQuestionAnswer.question_id)\n            }}\n            className={`border rounded w-full py-2 px-2 cursor-pointer focus:outline-none focus:border-blue-500 ${checkAnswer(item) === false ? \"border-gray-400 text-gray-600\" : \"border-blue-50 bg-blue-50 text-blue-600 hover:border-blue-600\"}`}>\n              <option value=\"\">Select matching</option>\n              {props.selectedQuestionAnswer !== null &&\n                props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((itm, x) => (\n                  <option selected={itm.status === findWord(props.selectedLanguage, checkIfSelected(item.id)) ? true : false} key={x + 1} value={itm.status}>{itm.status}</option>\n                ))}\n            </select>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Matching\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { SimpleCalculatedQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (item: SimpleCalculatedQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: [newAnswers[0].value],\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0].toString() : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SimpleCalculated\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { ShortAnswerQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: ShortAnswerQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: \"\",\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <textarea \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }} value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} style={{minHeight: '200px'}}></textarea>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ShortAnswer\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { NumericalQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: NumericalQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: {id: string; value: string[]; status: number[]}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: {id: string; value: string; status: number[]}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: [item.value],\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0] : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold border-blue-600\" : \"border text-gray-700 border-gray-500\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Numerical\n","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CalculatedMultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center rounded cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ?\n          <MdRadioButtonUnchecked className=\"text-2xl\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default CalculatedMultipleChoice\n","import React, { useEffect, useState } from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md';\nimport { QuestionInterface, QuestionItemInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../interfaces/index';\nimport { newAnswer } from '../DoExam';\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question';\nimport Loading from '../../../components/Loading/Loading';\nimport { LoadingType } from '../../../components/Loading/LoadingV2';\nimport MultipleChoice from './Answers/MultipleChoice';\nimport { toCalculatedMultipleChoice, toMatching, toMultipleChoice, toNumerical, toShortAnswer, toSimpleCalculated, toTrueFalse } from './ConvertingAnswers';\nimport { findQuestionType } from '../utils/utils';\nimport TrueFalse from './Answers/TrueFalse';\nimport Matching from './Answers/Matching';\nimport SimpleCalculated from './Answers/SimpleCalculated';\nimport ShortAnswer from './Answers/ShortAnswer';\nimport Numerical from './Answers/Numerical';\nimport CalculatedMultipleChoice from './Answers/CalculatedMultipleChoice';\nimport { BiWorld } from 'react-icons/bi';\nimport { AiFillCaretDown } from 'react-icons/ai';\nimport { FaTimes } from 'react-icons/fa';\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) =>void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined = props.candidateExam.candidate_exam.questions.find(itm => props.candidateExam.selected_question && itm.id === props.candidateExam.selected_question);\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  }\n  \n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res:QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(itm => itm.id === props.candidateExam.selected_question);\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  }\n  useEffect(() => {\n    if (props.questionTypes.questionTypes === null || props.questionTypes.questionTypes.length === 0) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props])\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ?\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n        <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n          <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n          <Loading type={LoadingType.white} />\n        </div>\n      </div>:\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          {props.submitQuestionAnswer === true && \n          <div className=\"bg-blue-50 px-3 py-2 rounded text-blue-700 font-bold animate-pulse text-sm\">Saving your answer ...</div>}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              <div className=\"text-md flex flex-col w-full\">\n                <span className=\"text-sm text-gray-600\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.title}\n                </span>\n                <span className=\"text-lg text-gray-800 font-bold\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.description}\n                </span>\n              </div>\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div onClick={() => setSelectLang(!selectLang)} className=\"flex flex-row items-center gap-2\">\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{width: '97px'}}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">Language</span>\n                    <span title={QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value} className=\"text-sm font-bold text-blue-600 truncate\" style={{width: '97px'}}>\n                      {QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value}\n                    </span>\n                  </div>\n                  <div className={`${selectLang === true ? \"bg-yellow-800 text-white\" : \"bg-gray-50 hover:bg-blue-600\"} h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}>\n                    {selectLang === true ? \n                    <FaTimes className=\"text-xl my-2 mx-2\" />:\n                    <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />}\n                  </div>\n                </div>\n                {selectLang === true &&\n                <div className=\"relative rounded overflow-hidden\" style={{width: '182px'}}>\n                  <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                    {QuestionLanguages.map((item, i) => (\n                      <span onClick={() => {props.setQuestionLanguage(item.key); setSelectLang(!selectLang)}} key={i + 1} \n                      className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${props.candidateExam.selected_language === item.key ? \"bg-blue-800 font-extrabold border-blue-800\" : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"}`}>\n                        {props.candidateExam.selected_language === item.key ? <MdRadioButtonChecked className=\"text-xl mr-2\" /> : <MdRadioButtonUnchecked className=\"text-xl mr-2\" />} {item.value}\n                      </span>\n                    ))}\n                  </div>\n                </div>}\n              </div>\n            </div>\n          </div>\n          <div className=\"my-4 py-2 px-2 bg-white rounded\" onClick={() => selectLang === true && setSelectLang(false)}>\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            (findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.MultipleChoice ||\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SingleMultiple) &&\n            <MultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.TrueFalse &&\n            <TrueFalse \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toTrueFalse(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Matching Question */}\n            {console.log(\"Type: \", findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes))}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Matching &&\n            <Matching \n              selectedLanguage={props.candidateExam.selected_language}\n              selectedExam={props.candidateExam.candidate_exam}\n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMatching(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SimpleCalculate &&\n            <SimpleCalculated \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toSimpleCalculated(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.ShortAnswer &&\n            <ShortAnswer \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toShortAnswer(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Numeric &&\n            <Numerical \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toNumerical(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.CalculatedMultipleChoice &&\n            <CalculatedMultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toCalculatedMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n          </div>\n      </div>}\n    </div>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, questionTypes: questionTypes, };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;","import React from 'react'\nimport { IoNotifications } from 'react-icons/io5'\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from '../utils/utils';\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface; \n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (let x: number = 0; x < props.candidateExam.candidate_exam.questions.length; x++) {\n        if (props.candidateExam.candidate_exam.questions[x].id === question_id) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  }\n\n  let selectedIndexPrevious: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 ? \n  findIndex(props.candidateExam.selected_question) : props.candidateExam.candidate_exam.questions.length : -1;\n\n  let selectedIndexNext: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 && findIndex(props.candidateExam.selected_question) < props.candidateExam.candidate_exam.questions.length-1 ? \n  findIndex(props.candidateExam.selected_question) : findIndex(props.candidateExam.selected_question) === 0 ? 0 : -1 : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(item => questionAnswered(props.candidateExam.question_answers, item.id, findQuestionType(item.type, props.questionTypes.questionTypes)!) === true);\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  }\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {console.log(\"Selected: \", selectedIndexNext)}\n      <div className=\"flex flex-row items-center\">\n        <div onClick={() => props.setProfileWindowStatus(!props.windowStatus.profile)} \n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}>\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div className=\"bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\" style={{position: 'relative', top: '-10px', right: '-12px'}}>02</div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && \n          <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">New events <br/>are available</div>}\n        </div>\n\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexPrevious-1].id)}\n        className=\"btn btn-blue flex justify-center items-center\" style={{height: 'fit-content'}}><MdChevronLeft className=\"text-xl\" /> <span className=\"hidden md:block\">Previous</span></button>\n\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">Question {props.candidateExam.selected_question && findIndex(props.candidateExam.selected_question)+1}</span>\n          {props.submitQuestionAnswer === true ? \n          <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">Saving question answer...</span>:\n          <span className=\"text-xs\">Auto save is activated</span>}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div> */}\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexNext+1].id)}\n        className=\"btn btn-blue flex items-center\"><span className=\"hidden md:block\">Next</span> <MdChevronRight className=\"text-xl\" /></button>\n      </div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth;  candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;","import React from 'react'\nimport { IoClose } from 'react-icons/io5';\nimport userImage from '../../../assets/profile.png'\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose onClick={() => props.setProfileWindowStatus(false)} className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\" />\n              </div>\n            </div>\n            <div className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\" style={{width: '200px', height: '200px'}}>\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">{props.auth.user.fname} {props.auth.user.lname}</span>\n            <span className=\"text-gray-400 text-xs\">ID: {props.auth.user.n_id}</span>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>23</span>\n          </div>\n          <div className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\" style={{paddingBottom: '550px', paddingTop: '10px'}}>\n            {props.proctoring.events.length === 0 ? <div className=\"text-white font-blod\">No events found!</div> : props.proctoring.events.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-row justify-between items-center text-red-300 my-1\">\n                <span>{i + 1}</span>\n                <span>{item.description}</span>\n                <span>{item.time}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring; } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {\n\n})(_Profile);\n\nexport default Profile;","import React from 'react'\nimport { MdCheckCircle, MdClose } from 'react-icons/md'\nimport { Auth } from '../../../actions/auth'\nimport { candidateExamStoreInterface } from '../../../actions/candidate_exam'\nimport { questionTypesStoreInterface } from '../../../actions/questionTypes'\nimport { System } from '../../../actions/system'\nimport Loading from '../../../components/Loading/Loading'\nimport { course } from '../../../interfaces/course'\nimport { QuestionInterface } from '../../../interfaces/question'\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from '../utils/utils'\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamPendingQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    )\n  }\n  return (\n    <div className={`pt-4 border-t border-gray-300 ${PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"}`}>\n      {props.candidateExam.candidate_exam && AnsweredQuest.length !== props.candidateExam.candidate_exam.questions.length && PendingQuest.length !== 0 ? \n      <div>\n        <div className=\"grid md:grid-cols-2 h-full\">\n          <div className=\"md:col-span-2 h-full\">\n            <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n              {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n              <div className=\"flex flex-col\">\n                <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">Submit incomplete questions</div>\n                <div className=\"text-gray-700 text-sm text-left pb-2\">Please, make sure to complete the following remaining questions which are not yet answered. Please, if you proceed anyway, for these questions, you will not be marked!</div>\n              </div>\n              <div className=\"mr-4\">\n              <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"md:col-span-2\">\n            <div className=\"\">\n              <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                <div className=\"text-center mb-5 text-gray-600 font-bold\">Pick a question number you want to answer directly</div>\n                <div className=\"flex justify-center items-center text-center\">\n                  <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                    {props.candidateExam.candidate_exam.questions.map((item, i) => (\n                      PendingQuest.find(itm => itm.id === item.id)?.id !== undefined &&\n                        <div onClick={() => { \n                          props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                            props.candidateExam.candidate_exam.id,\n                            item.id\n                          );\n                          props.setSubmitModal(false);\n                        }} key={i + 1} className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\">{i + 1}</div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                <div onClick={() => props.setSubmitModal(false)} className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\">Back to edit</div>\n                <div onClick={() => props.submitExam()} className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\">Submit anyway</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      : \n      <div className=\"px-4 pb-2\">\n        <div className=\"flex flex-row items-center justify-between mb-4\">\n          <div className=\"text-blue-700 font-bold\">Hey <b><u>{props.auth.user.fname}</u></b>, All questions have been answered, are you sure do you want to submit the final answers?</div>\n          <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n        </div>\n        <div className=\"flex flex-row items-center justify-between\">\n          <div onClick={() => props.setSubmitModal(false)} className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\">\n            <span className=\"\">Back to edit</span>\n          </div>\n          <div onClick={() => { props.submitExam() }} className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\">\n            <MdCheckCircle className=\"text-3xl\" />\n            <span className=\"\">Submit exam</span>\n          </div>\n        </div>\n        \n        <div className=\"my-2\">\n          <div className=\"font-extrabold text-xl text-gray-700 my-2 mt-4\">Verify your answers</div>\n          <div className=\"flex flex-col gap-3 overflow-y-auto\" style={{maxHeight: '100%'}}>\n            {props.candidateExam.candidate_exam === null ? <Loading /> :\n            AnsweredQuest.length > 0 && AnsweredQuest.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{i + 1}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question[0].description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        Done\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-span-2 float-right flex items-center justify-end\">\n                    <div onClick={() => { \n                      props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                        props.candidateExam.candidate_exam.id,\n                        item.id\n                      );\n                      props.setSubmitModal(false);\n                    }} className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\">Edit</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nexport default QuestionsReview\n","import React, { Fragment } from 'react'\nimport { useState } from 'react'\nimport { IoDocumentTextOutline } from 'react-icons/io5'\nimport { MdCheckCircle, } from 'react-icons/md'\nimport Modal, { Themes, ModalSize, ModalMarginTop } from '../../../components/Modal/Modal'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from '../utils/utils'\nimport { course } from '../../../interfaces'\nimport QuestionsReview from './QuestionsReview'\nimport { CountDown } from '../../../components/CountDown/CountDown'\n\ninterface TestTitleInterface { \n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n  start_time: string;\n  duration_min: number;\n  timeout: () => void;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n  \n  const TotalAnswered: number = props.candidateExam.candidate_exam ? NumberOfAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam ? (TotalAnswered*100)/props.candidateExam.candidate_exam.questions.length : 0;\n  return (\n    <Fragment>\n    <div className=\"bg-gray-800\">\n      <div className=\"grid grid-cols-6\">\n        <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n          <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n            <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n            <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n              <span className=\"font-bold text-lg truncate -mb-1\">{props.selectedExam?.course_name}</span>\n              <span className=\"text-gray-300 text-xs truncate\">Code: {props.selectedExam?.course_code}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-4\" style={{alignSelf: \"center\"}}>\n          <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n            <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n              <div className=\"text-gray-200 text-sm w-full hidden lg:block\">Completed {TotalAnswered} of {props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.questions.length}</div>\n              <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                <div className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\" style={{width: `${answeredPercentage}%`}}></div>\n              </div>\n              <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                <div className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\" style={{width: `${answeredPercentage}%`}}>\n                  <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">{answeredPercentage}%</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-4 hidden lg:block h-full\">\n              <div className=\"flex flex-row justify-center items-center h-full\">\n                <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                  <div>Start time: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam?.start_time}</span></div>\n                  <div>Duration: <span className=\"font-bold text-gray-200\">\n                    {props.candidateExam.candidate_exam && \n                    props.candidateExam.candidate_exam.duration/60 > 1 ?\n                    props.candidateExam.candidate_exam.duration/60 + \" hours\" : \n                    props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.duration/60 + \" hour\"}\n                    {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.duration % 60 > 0 && \", \" + props.candidateExam.candidate_exam.duration % 60 + \" mins\" }\n                  </span></div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-5 bg-gray-800\">\n              <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                  <span>Counting down</span>\n                  <div className=\"text-lg lg:text-xl font-bold\">\n                    <CountDown\n                      start_time={props.start_time}\n                      duration_min={props.duration_min}\n                      timeout={() => props.timeout()}\n                      returnString={true}\n                      labels\n                      days\n                    />\n                  </div>\n                </div>\n                {props.submitQuestionAnswer === true ? \n                <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 animate-pulse\">Saving...</div> : \n                <button onClick={() => {props.SubmitAnswer(); setSubmitModal(true)}} type=\"button\" className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\">\n                  <MdCheckCircle className=\"text-white text-xl\" />\n                  <span>Submit</span>\n                </button>}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {submitModal === true && \n    <Modal\n      title={\"\"}\n      backDrop={true}\n      theme={props.candidateExam.question_answers.length === 0 ? Themes.default : Themes.default}\n      close={() => setSubmitModal(false)}\n      backDropClose={true}\n      widthSizeClass={ModalSize.maxWidth}\n      displayClose={false}\n      padding={{title: false,}}\n      marginTop={ModalMarginTop.small} >\n        <QuestionsReview \n        auth={props.auth} \n        candidateExam={props.candidateExam} \n        system={props.system} \n        setSelectedExamQuestion={props.setSelectedExamQuestion} \n        submitQuestionAnswer={props.submitQuestionAnswer} \n        questionTypes={props.questionTypes} \n        loadQuestionTypes={props.loadQuestionTypes} \n        submitExam={props.submitExam} \n        selectedExam={props.selectedExam}\n        setSubmitModal={setSubmitModal} />\n    </Modal>}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth; candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  Socket,\n  FC_AddRules,\n  FT_AddRules,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { EventInterface, Events, EventsLabels, LiveServer__Room, question_answer } from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport { CandidateExam, CandidateExamQuestionAnswer, ExamInterface, ExamResultsDetails, examStatus, UserExamActions, userExamDetails } from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\ninterface DoExamProps {\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (\n    exam_id: string,\n    CheckUserExam: (candidateExam: CandidateExam) => void,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (\n    userExamDetails: userExamDetails,\n    callback: (loading: boolean) => void,\n    setLoadExamResultMessage: (msg: string, status: boolean) => void,\n    BackToExamination: (exam: ExamResultsDetails) => void\n  ) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (\n    answer: CandidateExamQuestionAnswer,\n    callback: (loading: boolean) => void,\n    actionStatus: (msg: string, status: boolean) => void\n  ) => void;\n  GetUserExamDetails: (\n    request: RequestUserExamDetailsInterface,\n    callback: (loading: boolean) => void\n  ) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n  setExamStatus: (exam_id: string, action: UserExamActions, reason: string, callback: (loading: boolean) => void) => void;\n  FC_SaveEvent: Function;\n  socket: Socket;\n  FC_AddRules: FT_AddRules;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n  changingExamStatus: boolean;\n\n  // Exam counter\n  start_exam: boolean;\n  start_time: string;\n  duration: number;\n  added_minutes: number;\n  group_id: string;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n      changingExamStatus: false,\n      // timer     \n      start_exam: false,\n      start_time: \"\",\n      duration: 0,\n      added_minutes: 0,\n      group_id: \"\",\n    };\n    \n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  };\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  changingExamStatusLoading = (status: boolean) => {\n    this.setState({ changingExamStatus: status });\n  }\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check;\n      }\n    }\n    return null;\n  };\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (this.props.positions.selected_position !== null && this.props.candidateExam.selected_exam_details !== null) {\n      if (this.props.candidateExam.exam_room_details !== null) {\n        // alert(this.props.candidateExam.exam_room_details.district_id)\n        this.props.RequestUserExamDetails({\n          user: this.props.auth.user.user_id,\n          position: this.props.positions.selected_position.position_id,\n          exam: exam,\n          userExamLocation: {\n            district_id: this.props.candidateExam.exam_room_details.district_id,\n            center_id: this.props.candidateExam.exam_room_details.center_id,\n            room_id: this.props.candidateExam.exam_room_details.room_id\n          }\n        }, this.setLoading, this.setLoadExamResultMessage, this.props.BackToExamination)\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    this.props.FC_AddRules({\n      allow_to_leave_browser: false,\n      copy_enabled: false,\n      paste_enabled: false,\n      right_click_enabled: false,\n      stop_candidate_when_comeback: false,\n    });\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      this.props.GetUserExamDetails(\n        {\n          period: this.props.candidateExam.candidate_exam.period,\n          course: this.props.candidateExam.candidate_exam.course,\n          user: this.props.auth.user.user_id,\n        },\n        this.setLoading\n      );\n      let test = this.props.candidateExam.user_exams_done.find(\n        (itm) => itm.id === this.props.candidateExam.candidate_exam?.id\n      );\n      if (test === undefined) {\n        this.props.CleanCandidateExam(\n          this.props.candidateExam.candidate_exam.id\n        );\n      }\n    }\n  };\n\n  SubmitAnswer = () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.question_answers.length > 0\n    ) {\n      for (let answer of this.props.candidateExam.question_answers) {\n        if (answer.status === false) {\n          //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer(\n            {\n              exam: this.props.candidateExam.candidate_exam.id,\n              question: answer.question_id,\n              language: this.props.candidateExam.selected_language,\n              userAnswer: answer.answer,\n            },\n            this.setSubmitQuestionAnswer,\n            this.setLoadExamResultNoMessage\n          );\n        }\n      }\n    }\n  };\n\n  submitExam = async () => {\n    if (this.props.candidateExam.candidate_exam !== null && this.props.candidateExam.exam_room_details !== null) {\n      let exam_id = this.props.candidateExam.candidate_exam.id;\n      let position_id = this.props.candidateExam.exam_room_details.position_id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(`${API.DO_EXAM}/user/submit/${exam_id}/${position_id}`);\n        if (res) {\n          console.log(\"Put: \", res);\n          // this.doneExam();\n          console.log(\"this.doneExam() => submitExam()\")\n\n          this.props.CleanCandidateExam(exam_id);\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success,\n          });\n        }\n      } catch (error: any) {\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  };\n\n  startExam = () => {\n    this.setState({ display_exam: true, start_exam: true });\n  };\n  pauseExam = () => {\n    this.setState({ display_exam: false, start_exam: false });\n  };\n\n\n\n\n\n  doneExam = () => {\n    if (this.props.candidateExam.exam_room_details !== null && this.props.candidateExam.user_exam_details !== null) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id: this.props.auth.application_session?._id,\n        description: \"Done the exam\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.DONE_EXAM,\n        exam_id: this.props.candidateExam.user_exam_details.ExamId.exam_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.EXAM_DONE_SERVER, data);\n    }\n  };\n\n\n\n  timeOutExam = () => {\n    if (this.props.candidateExam.exam_room_details !== null && this.props.candidateExam.user_exam_details !== null) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id: this.props.auth.application_session?._id,\n        description: \"Time out\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.TIME_OUT,\n        exam_id: this.props.candidateExam.user_exam_details.ExamId.exam_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.TIME_OUT_SERVER, data);\n      // this.submitExam();\n      console.log(\"this.submitExam(); ==> timeOutExam()\");\n      \n    }\n  };\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/applications\" />;\n    }\n\n    if (\n      this.state.loading === true ||\n      this.props.candidateExam.exam_room_details === null\n    ) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Loading, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Submitting your exam, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50\">\n        <Fragment>\n          {this.props.candidateExam.user_exam_details === null ? (\n            <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n              <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n                <div className=\"text-gray-600 text-lg px-4 mb-4\">\n                  Loading questions, Please wait...\n                </div>\n                <Loading />\n              </div>\n            </div>\n          ) : (\n            <ProctoringCandidateOnline\n              startExam={() => {\n                this.startExam();\n                this.setState({ start_exam: true,})\n              }}\n              restartExam={() => {\n                this.props.candidateExam.selected_exam_id !== null && this.props.loadCandidateExam(this.props.candidateExam.selected_exam_id, this.checkUserExam, this.setLoading);\n                this.props.candidateExam.candidate_exam !== null && this.props.setExamStatus(\n                  this.props.candidateExam.candidate_exam.id,\n                  UserExamActions.Restart,\n                  \"Exam restarted\",\n                  this.changingExamStatusLoading\n                )\n                this.startExam();\n              }}\n              stopExam={() => {\n                // Stop all the room\n                // this.setState({ start_exam: false });\n                console.log(\"Pause\");\n                this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null && this.props.setExamStatus(\n                  this.props.candidateExam.candidate_exam.id,\n                  UserExamActions.Paused,\n                  \"Exam paused by supervisor\",\n                  this.changingExamStatusLoading\n                )\n              }}\n\n              room_id={this.props.candidateExam.exam_room_details.room_id}\n              exam_id={\n                this.props.candidateExam.user_exam_details.ExamId.exam_id\n              }\n              position_id={\n                this.props.candidateExam.exam_room_details.position_id\n              }\n              application_session_id={\n                this.props.candidateExam.exam_room_details.period_id\n              }\n              removeClient={() => {\n                this.props.candidateExam.candidate_exam !== null && this.props.setExamStatus(\n                  this.props.candidateExam.candidate_exam.id,\n                  UserExamActions.Removed,\n                  \"Exam stopped\",\n                  this.changingExamStatusLoading\n                )\n                this.pauseExam();\n              }}\n              examAlreadyDone={() => console.log(\"Exam already done\")}\n              candidateStopExam={(reason: string) => \n                {\n                  console.log(`candidateStopExam: ${reason}`);\n                  this.props.candidateExam.candidate_exam !== null && this.props.setExamStatus(\n                    this.props.candidateExam.candidate_exam.id,\n                    UserExamActions.Removed,\n                    reason,\n                    this.changingExamStatusLoading\n                  );\n                  if (this.props.candidateExam.candidate_exam !== null) {\n                    this.props.CleanCandidateExam(this.props.candidateExam.candidate_exam.id);\n                    this.props.PushPopupAlert({\n                      title: \"Success!\",\n                      description: reason,\n                      theme: PopupAlertTheme.info,\n                    });\n                  }\n                }\n              }\n              candidateContinueExam={(reason: string) =>\n                {\n                  console.log(`candidateContinueExam: ${reason}`);\n                  this.props.candidateExam.candidate_exam !== null && this.props.setExamStatus(\n                    this.props.candidateExam.candidate_exam.id,\n                    UserExamActions.Continue,\n                    reason,\n                    this.changingExamStatusLoading\n                  )\n                  this.startExam();\n                }\n              }\n\n              joinedRoom={(data: LiveServer__Room) => {\n                this.setState({\n                  group_id: data.group_id,\n                });\n              }}\n\n              changeTime={(timer: {\n                duration: number;\n                start_time: string;\n                added_minutes: string;\n              }) => {\n                this.setState({\n                  duration: timer.duration,\n                  start_time: timer.start_time,\n                });\n              }}\n            >\n              {this.state.start_exam === false ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    <MdInfoOutline className=\"text-9xl text-blue-600\" />\n                    <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">\n                      Please wait for the supervisor\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The supervisor will allow you to start your exam, please\n                      wait or contact him/her when forgot to let you start exam!\n                    </div>\n                    <Loading />\n                  </div>\n                </div>\n              ) : this.props.candidateExam.candidate_exam === null ||\n                this.props.candidateExam.user_exam_details === null ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-2 px-4 py-4 w-full h-full\">\n                    <div className=\"text-gray-500 text-lg px-4 mb-4\">\n                      Waiting for loading exam...\n                    </div>\n                    <Loading />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  {this.state.completedTest === true &&\n                  this.props.doExam.exam_answers?.exam_questions_answers\n                    ?.questionAnswers !== null ? (\n                    <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                      <DoExamResults\n                        page=\"doExam\"\n                        answeredQuestions={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers\n                        }\n                        testAnswers={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers.length === undefined\n                            ? 0\n                            : this.props.doExam.exam_answers\n                                ?.exam_questions_answers?.questionAnswers.length\n                        }\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                      <div className=\"grid md:grid-cols-12 h-full\">\n                        {this.state.windowStatus.profile === true && (\n                          <div\n                            className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                          >\n                            <Profile\n                              setProfileWindowStatus={\n                                this.setProfileWindowStatus\n                              }\n                            />\n                          </div>\n                        )}\n                        <div\n                          className={`col-span-${\n                            this.state.windowStatus.profile === false\n                              ? \"12\"\n                              : \"10\"\n                          } bg-gray-800 shadow-lg h-full`}\n                        >\n                          <div className=\"flex flex-row h-screen bg-gray-800\">\n                            <div className=\"h-full\">\n                              {/* Questions list */}\n                              <div className={`h-full`}>\n                                <QuestionsList\n                                  windowStatus={this.state.windowStatus}\n                                  setProfileWindowStatus={\n                                    this.setProfileWindowStatus\n                                  }\n                                  setQuestionsListWindowStatus={\n                                    this.setQuestionsListWindowStatus\n                                  }\n                                  questionTypes={this.props.questionTypes}\n                                  loadQuestionTypes={\n                                    this.props.loadQuestionTypes\n                                  }\n                                  SubmitAnswer={this.SubmitAnswer}\n                                />\n                              </div>\n                            </div>\n                            <div className=\"w-full h-full\">\n                              {/* Do exam test title */}\n                              <DoExamTitle\n                                setCompletedTest={this.setCompletedTest}\n                                windowStatus={this.state.windowStatus}\n                                setProfileWindowStatus={\n                                  this.setProfileWindowStatus\n                                }\n                                setQuestionsListWindowStatus={\n                                  this.setQuestionsListWindowStatus\n                                }\n                                questionTypes={this.props.questionTypes}\n                                loadQuestionTypes={this.props.loadQuestionTypes}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                                submitExam={() => {\n                                  // this.submitExam();\n                                  console.log(\"this.submitExam() ===> <DoExamTitle />\");\n                                  \n                                \n                                }}\n                                selectedExam={this.props.course.selected_course}\n                                SubmitAnswer={this.SubmitAnswer}\n\n                                start_time={this.state.start_time}\n                                duration_min={this.state.duration}\n                                timeout={() => this.timeOutExam()}\n                              />\n                              {/* Question details */}\n                              <QuestionDetails\n                                questionAnswers={\n                                  this.props.doExam.exam_answers\n                                    ?.exam_questions_answers?.questionAnswers\n                                }\n                                answerQuestionFn={this.answerQuestionFn}\n                                selectedQuestion={this.state.selectedQuestion}\n                                setSelectedQuestion={this.setSelectedQuestion}\n                                preview={false}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <Footer\n                        windowStatus={this.state.windowStatus}\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                        setQuestionsListWindowStatus={\n                          this.setQuestionsListWindowStatus\n                        }\n                        questionTypes={this.props.questionTypes}\n                        loadQuestionTypes={this.props.loadQuestionTypes}\n                        SubmitAnswer={this.SubmitAnswer}\n                        submitQuestionAnswer={this.state.submitQuestionAnswer}\n                      />\n                    </div>\n                  )}\n                </div>\n              )}\n            </ProctoringCandidateOnline>\n          )}\n          {this.props.candidateExam.candidate_exam === null && (\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.large}\n              displayClose={false}\n              padding={{ title: false }}\n            >\n              <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                {this.props.course.courses === null ? (\n                  <Loading />\n                ) : (\n                  <div>\n                    <div className=\"flex flex-row items-center gap-2\">\n                      {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                      <div className=\"my-2 w-full\">\n                        <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                          {this.props.course.selected_course && (\n                            <div>\n                              <span>\n                                {this.props.course.selected_course.course_code}-\n                              </span>\n                              <span>\n                                {this.props.course.selected_course.course_name}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">\n                            Exam date:\n                          </span>\n                          <span className=\"text-blue-600 font-bold\">\n                            {DATE(this.examDetails()!.exam_date, \"DD/MM/YYYY\")}\n                          </span>\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">\n                            Start time:\n                          </span>\n                          <span className=\"text-blue-600 font-bold\">\n                            {this.examDetails()?.start_time}\n                          </span>\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">\n                            Exam duration:\n                          </span>\n                          {this.examDetails() !== null && (\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails()!.duration / 60 >= 1 &&\n                                this.examDetails()!.duration / 60 + \" hrs\"}{\" \"}\n                              {this.examDetails()!.duration % 60 > 0 && (\n                                <span>\n                                  {this.examDetails()!.duration % 60} mins\n                                </span>\n                              )}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                    <div className=\"flex flex-row justify-center items-center\">\n                      {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                    </div>\n                    <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                      <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                        <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                          Examination rules\n                        </div>\n                        {this.examDetails() !== null && (\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: this.examDetails()!.termes,\n                            }}\n                          ></div>\n                        )}\n                      </div>\n                      <span className=\"text-blue-700\">\n                        If you are ready, start click to start the exam now, The\n                        system will start to count your time!\n                      </span>\n                    </div>\n                    <div className=\"flex flex-row items-center justify-between mt-2\">\n                      <button\n                        onClick={() =>\n                          this.props.setSelectedCandidateExam(null)\n                        }\n                        className=\"btn bg-gray-50 text-gray-600 border\"\n                      >\n                        Go Back\n                      </button>\n                      <button\n                        onClick={() =>\n                          this.props.candidateExam.selected_exam_id !== null &&\n                          this.props.loadCandidateExam(\n                            this.props.candidateExam.selected_exam_id,\n                            this.checkUserExam,\n                            this.setLoading\n                          )\n                        }\n                        className=\"btn bg-blue-600 text-white\"\n                      >\n                        I accept, Start exam\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Modal>\n          )}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n  socket\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  positions: positionsStoreInterface;\n  socket: Socket\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    course: course,\n    periods: periods,\n    questionTypes: questionTypes,\n    positions: positions,\n    socket\n  };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  FC_AddRules,\n})(_DoEam);\n"],"sourceRoot":""}