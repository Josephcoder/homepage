{"version":3,"sources":["containers/QuestionBank/AddQuestion/UploadQuestion/UploadedQuestions/UploadedQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/Upload.tsx","components/DownloadLink/DownloadLink.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/UploadQuestion.tsx","utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","components/Courses/Courses.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["UploadedQuestions","connect","auth","course","schoolLevels","questionBank","prepareExam","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","setSelectedCourse","addExamQuestion","IncrementQuestionBank","props","useState","loading","setLoading","redirect","setRedirect","setExam","setSetExam","useEffect","questionTypes","length","loadQuestionTypes","to","className","uploadedQuestions","insertedData","selectedCourse","course_id","courses","find","itm","course_name","onClick","selected","undefined","returnToCourse","insertedCount","window","confirm","selected_course","questions","x","addToExam","selectedQuestion","clearUploadedQuestionsStore","Loading","map","item","i","selectQuestion","id","type","title","question","dangerouslySetInnerHTML","__html","description","Upload","loadQuestionBank","setQuestions","formError","setFormError","upload_percentage","set_upload_percentage","showQuestionEdit","setShowQuestionEdit","validateExcelFile","file","a","element","msg","submitQuestion","e","preventDefault","size","setUploadingStatus","formData","FormData","append","axios","post","API","QBank","onUploadProgress","progressEvent","number_percentage","loaded","total","res","status","data","console","log","response","errors","message","course_code","onSubmit","onChange","target","files","name","Math","round","Alert","theme","AlertInterface","danger","style","width","EditQuestion","questionsList","unSelectQuestion","DownloadLink","location","href","icon","caption","_UploadQuestion","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","showFilter","setSchoolLevelFilterFn","filteredCourses","searched","filtered","filter","school_levels","itm1","school_level_id","item2","uploadingStatus","componentDidMount","state","searchCourseInput","this","Courses","selected_course_id","Modal","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","SchoolLevelsFilter","educationCategories","education_categories","Component","UploadQuestion","ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","check","check_type","questionTypeElements","key","findTotalMarks","results","sum","test","total_marks","toFixed","CheckIfExamDone","validateCalculatedFormula","formula","characters","el","nextCharacter","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","toMultipleChoice","answers","answer","value","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","CoursesAction","periods","system","loadApplicationPeriods","setSelectedPeriod","PushPopupAlert","addNew","setAddNew","search","setSearch","setSelectedCourseComp","course_selected","deleteCourseFn","delete","APPLICATION","PopupAlertTheme","success","warning","placeholder","searchData","action","View","Update","Delete","extraLarge","body","closeModal","deleteSelected","chaptersOnly","filterWithExams","preparedExams","period","selected_period","session_plan_id","education_category_title","school_level_name","minHeight","AddCourse","setCourse_id","setCourse_name","setCourse_code","setDescription","chapters","setChapters","setSchool_levels","openAdd","chapter","addChapter","setAddChapter","submitCourse","obj","patch","info","disabled","uuidv4","addNewChapter","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","selectedQuestionItem","selectedKey","QuestionAnswer","wholeQuestion","language","selectedLanguage","editMatchingValue","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","marks","setSelectedKey","QuestionLanguages","lang","checkAns","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","_id","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","questionAnswers","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","addedChapters","ChangeLanguage","languagesList","visible","setVisible","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","langItem","testLangQ","l","QuestionLang","actionStatus","updatedQuestion","current","editedAnswerIndex","editedAnswer","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","question_id","customNumber","is_deleted","UpdateQuestion","showQuestionChapters","setSelectedLang","questionLangs","testing","LoadingType","white","large","courseDetail","SchoolLevelSelect","height","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/38.b20d2f83.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  IncrementQuestionBank,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { course } from \"../../../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../../../interfaces/question\";\nimport { VscListSelection } from \"react-icons/vsc\";\nimport { Redirect } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  selectQuestion: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  IncrementQuestionBank: (question: QuestionInterface) => void;\n}\n\nconst _UploadedQuestions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [redirect, setRedirect] = useState<boolean>(false);\n  const [setExam, setSetExam] = useState<boolean>(false);\n  const returnToCourse = () => {\n    if (\n      props.questionBank.uploadedQuestions !== null &&\n      props.questionBank.uploadedQuestions.insertedData[0].course !==\n        props.selectedCourse.course_id\n    ) {\n      if (props.course.courses) {\n        let selected = props.course.courses.find(\n          (itm) =>\n            props.questionBank.uploadedQuestions &&\n            itm.course_id ===\n              props.questionBank.uploadedQuestions.insertedData[0].course\n        );\n        if (selected !== undefined) {\n          props.setSelectedCourse(selected);\n        }\n      }\n    }\n  };\n  const clearUploadedQuestionsStore = () => {\n    if (window.confirm(\"Have you completed to modify questions?\")) {\n      if (\n        props.questionBank.uploadedQuestions !== null &&\n        props.questionBank.uploadedQuestions.insertedData.length > 0\n      ) {\n        for (let selectedQuestion of props.questionBank.uploadedQuestions\n          .insertedData) {\n          props.IncrementQuestionBank(selectedQuestion);\n        }\n        props.setUploadedQuestions(null);\n      }\n      setRedirect(true);\n    }\n  };\n  const addToExam = () => {\n    if (window.confirm(\"Are you sure do you want to add to exam?\") === true) {\n      if (\n        props.questionBank.uploadedQuestions !== null &&\n        props.questionBank.uploadedQuestions.insertedData.length > 0\n      ) {\n        if (props.course.selected_course !== null) {\n          for (let x of props.prepareExam.questions) {\n            props.addExamQuestion(x);\n          }\n          if (props.prepareExam.questions.length === 0) {\n            for (let itm of props.questionBank.uploadedQuestions.insertedData) {\n              props.addExamQuestion(itm);\n              props.IncrementQuestionBank(itm);\n            }\n          }\n          if (props.questionBank.uploadedQuestions.insertedData.length !== 0) {\n            props.setUploadedQuestions(null);\n            setSetExam(true);\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  if (setExam === true) {\n    return <Redirect to=\"/prepare-exam\" />;\n  }\n  if (redirect === true) {\n    return <Redirect to=\"/question-bank\" />;\n  }\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 my-4 rounded\">\n      {props.questionBank.uploadedQuestions !== null &&\n      props.questionBank.uploadedQuestions.insertedData[0].course !==\n        props.selectedCourse.course_id ? (\n        <div className=\"text-center flex flex-col items-center text-gray-500 py-6 rounded bg-gray-100 mt-5\">\n          You have changed course! <br />\n          <div className=\"bg-blue-50 text-blue-600 font-bold rounded-full text-center w-max px-3 border border-blue-200 flex items-center justify-center mb-3\">\n            {props.course.courses !== null &&\n              props.course.courses.find(\n                (itm) =>\n                  itm.course_id ===\n                  props.questionBank.uploadedQuestions?.insertedData[0].course\n              )?.course_name}\n          </div>\n          <div\n            onClick={() => returnToCourse()}\n            className=\"btn bg-blue-600 text-white cursor-pointer\"\n          >\n            Back to list\n          </div>\n        </div>\n      ) : (\n        <>\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-blue-600 font-bold mb-2 flex flex-row items-center gap-2 text-xl\">\n              <VscListSelection className=\"text-2xl\" />\n              <span>\n                Uploaded questions list (\n                {props.questionBank.uploadedQuestions?.insertedCount})\n              </span>\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <div\n                onClick={() => addToExam()}\n                className=\"btn border bg-blue-50 hover:bg-blue-600 border-blue-600 text-blue-600 hover:text-white mb-2 cursor-pointer\"\n              >\n                Make it an exam\n              </div>\n              <div\n                onClick={() => clearUploadedQuestionsStore()}\n                className=\"btn bg-blue-600 text-white mb-2 cursor-pointer\"\n              >\n                Continue\n              </div>\n            </div>\n          </div>\n          {loading === true ? (\n            <Loading />\n          ) : props.questionBank.uploadedQuestions === null ? (\n            <div>Please upload questions</div>\n          ) : props.questionBank.uploadedQuestions.insertedData === null ? (\n            <Loading />\n          ) : props.questionBank.uploadedQuestions.insertedData.length === 0 ? (\n            <div>No questions uploaded!</div>\n          ) : (\n            props.questionBank.uploadedQuestions.insertedData.map((item, i) => (\n              <div\n                onClick={() => props.selectQuestion(item)}\n                key={i + 1}\n                className=\"bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 hover:bg-blue-50 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 hover:border-blue-600 mb-3\"\n              >\n                <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n                  <div className=\"rounded-full bg-blue-100 text-blue-600 h-8 w-8 flex items-center justify-center text-xl font-bold px-3 py-3\">\n                    {i + 1}\n                  </div>\n                  <div className=\"flex flex-col truncate\">\n                    <span className=\"text-xs text-blue-600 font-bold w-max\">\n                      {props.questionTypes.questionTypes &&\n                        props.questionTypes.questionTypes.find(\n                          (itm) => itm.id && itm.id === item.type\n                        )?.title}\n                    </span>\n                    <span className=\"font-bold\">{item.question[0].title}</span>\n                    <span\n                      className=\"truncate text-xs\"\n                      dangerouslySetInnerHTML={{\n                        __html: item.question[0].description,\n                      }}\n                    ></span>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    prepareExam: prepareExam,\n  };\n};\n\nconst UploadedQuestions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  addExamQuestion,\n  IncrementQuestionBank,\n})(_UploadedQuestions);\n\nexport default UploadedQuestions;\n","import axios from \"axios\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { FiFileText } from \"react-icons/fi\";\nimport { IoMdCloudUpload } from \"react-icons/io\";\nimport Alert, { AlertInterface } from \"../../../../components/Alert/Alert\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport {\n  course,\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../../interfaces\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { API } from \"../../../../utils/api\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n} from \"../../../../actions\";\nimport { StoreState } from \"../../../../reducers\";\nimport UploadedQuestions from \"./UploadedQuestions/UploadedQuestions\";\nimport EditQuestion from \"./EditQuestion/EditQuestion\";\n\ninterface UploadInterface {\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (course: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\n\nconst _Upload = (props: UploadInterface) => {\n  const [questions, setQuestions] = useState<File | null>(null);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [upload_percentage, set_upload_percentage] = useState<number>(0);\n  const [showQuestionEdit, setShowQuestionEdit] = useState<{\n    status: boolean;\n    question: QuestionInterface | null;\n  } | null>(null);\n\n  const validateExcelFile = async (file: File) => {\n    if (\n      file.type !==\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" &&\n      file.type !== \"application/vnd.ms-excel\" &&\n      file.type !== \"text/csv\"\n    ) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose excel file or svg file\",\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const submitQuestion = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // Validation\n    setFormError(null);\n    if (questions === null) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Please select a file\",\n      });\n    } else if (questions.size === 0) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose a real file\",\n      });\n    } else if (\n      questions.type !==\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" &&\n      questions.type !== \"application/vnd.ms-excel\" &&\n      questions.type !== \"text/csv\"\n    ) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose excel file or svg file\",\n      });\n    } else {\n      setLoading(true);\n      props.setUploadingStatus(true);\n      try {\n        const formData = new FormData();\n        formData.append(\"course\", props.selectedCourse.course_id);\n        formData.append(\"file\", questions);\n        const res = await axios.post(`${API.QBank}/question`, formData, {\n          onUploadProgress: (progressEvent: any) => {\n            let number_percentage =\n              (+progressEvent?.loaded / +progressEvent.total) * 100;\n            set_upload_percentage(number_percentage);\n          },\n        });\n        if (res.status === 201) {\n          // console.log(\"Uploaded questions: \", res.data);\n          props.setUploadedQuestions(res.data);\n        }\n        // console.log(\"Questions: \", res);\n      } catch (error: any) {\n        console.log(\"Err: \", { ...error });\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors) {\n              setFormError({\n                element: \"questions\",\n                msg: error.response.data.errors[0].message,\n              });\n            }\n          }\n        }\n      }\n      setLoading(false);\n      props.setUploadingStatus(false);\n    }\n  };\n\n  const selectQuestion = (question: QuestionInterface) => {\n    setShowQuestionEdit({\n      status: true,\n      question: question,\n    });\n  };\n\n  const unSelectQuestion = () => {\n    setShowQuestionEdit({\n      status: false,\n      question: null,\n    });\n  };\n\n  useEffect(() => {\n    if (props.questionBank.questions === null) {\n      if (props.course.selected_course !== null) {\n        props.loadQuestionBank(\n          props.course.selected_course.course_id,\n          setLoading\n        );\n      }\n    }\n  }, [props]);\n\n  return (\n    <Fragment>\n      {props.questionBank.uploadedQuestions === null ? (\n        <div className=\"mb-4\">\n          <div className=\"flex flex-row justify-between items-center rounded px-3 py-2 bg-white animate__animated animate__fadeIn shadow\">\n            <div className=\"flex flex-col\">\n              <span className=\"font-bold text-blue-600 text-lg truncate\">\n                {props.course.selected_course !== null &&\n                  props.course.selected_course.course_name}\n              </span>\n              <span className=\"text-xs font-bold text-gray-500 truncate\">\n                Course code:{\" \"}\n                {props.course.selected_course &&\n                  props.course.selected_course.course_code}\n              </span>\n            </div>\n            {/* <div className=\"btn bg-blue-50 text-blue-500 hover:bg-blue-100 hover:text-blue-700  cursor-pointer\">Download template</div> */}\n          </div>\n          <form onSubmit={submitQuestion}>\n            <div className={`my-2`}>\n              <label\n                className={`w-full flex flex-col items-center px-4 py-6 tracking-wide rounded border border-gray-400 bg-white ${\n                  loading === true\n                    ? \"cursor-not-allowed hover:bg-gray-100 bg-gray-100 text-gray-400\"\n                    : \"cursor-pointer hover:border-blue-600 hover:bg-blue-100 border-gray-100 text-blue-600 hover:text-blue-700\"\n                }`}\n              >\n                <IoMdCloudUpload className=\"text-6xl\" />\n                <span className=\"text-base leading-normal\">\n                  {loading === true\n                    ? \"Loading, Please wait...\"\n                    : \"Click to select a file\"}\n                </span>\n                {loading === false && (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setFormError(null);\n                      if (\n                        e.target.files &&\n                        e.target.files.length > 0 &&\n                        loading === false\n                      ) {\n                        setQuestions(e.target.files[0]);\n                        validateExcelFile(e.target.files[0]);\n                      }\n                    }}\n                    type=\"file\"\n                    className=\"hidden\"\n                  />\n                )}\n              </label>\n            </div>\n            {questions !== null && (\n              <div className=\"rounded bg-blue-50 px-3 py-2 flex flex-row items-center justify-between gap-2 border border-blue-500\">\n                <div className=\"flex flex-row gap-2 items-center\">\n                  <FiFileText className=\"text-5xl text-blue-600\" />\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-bold text-blue-600 truncate\">\n                      File: {questions.name}\n                    </span>\n                    <span className=\"text-gray-500 text-xs truncate\">\n                      File type: {questions.type}\n                    </span>\n                    <span className=\"text-gray-500 text-xs\">\n                      Size: {Math.round(questions.size / 1024)} Kbs\n                    </span>\n                  </div>\n                </div>\n                {loading === false && (\n                  <div\n                    onClick={() => {\n                      setQuestions(null);\n                      setFormError(null);\n                    }}\n                    className=\"btn text-sm bg-red-50 text-red-600 border border-red-200 cursor-pointer hover:bg-red-100\"\n                  >\n                    Delete\n                  </div>\n                )}\n              </div>\n            )}\n            {formError !== null && formError.element === \"questions\" && (\n              <div onClick={() => setFormError(null)} className=\"mt-2\">\n                <Alert\n                  title=\"Invalid\"\n                  description={formError.msg}\n                  theme={AlertInterface.danger}\n                />\n              </div>\n            )}\n            {loading === true && questions !== null && (\n              <div className=\"bg-blue-200 h-6 w-full rounded mt-2\">\n                <div\n                  className=\"h-full rounded bg-blue-500 flex flex-row items-center justify-between px-2 truncate text-xs text-white font-bold animate__animated animate__delay-1s\"\n                  style={{ width: `${upload_percentage}%` }}\n                >\n                  <span className=\"italic\">Uploading, Please wait...</span>\n                  <span>{upload_percentage}%</span>\n                </div>\n              </div>\n            )}\n            {loading === true ? (\n              <div className=\"mt-5\">\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"flex flex-row items-center justify-between my-2\">\n                <div\n                  onClick={() => props.setSelectedCourse(null)}\n                  className=\"btn cursor-pointer bg-gray-100\"\n                >\n                  Back\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn cursor-pointer bg-blue-600 text-white\"\n                >\n                  Save questions\n                </button>\n              </div>\n            )}\n          </form>\n        </div>\n      ) : showQuestionEdit !== null &&\n        showQuestionEdit.status === true &&\n        showQuestionEdit.question !== null &&\n        props.questionBank.uploadedQuestions?.insertedData ? (\n        <EditQuestion\n          selectedQuestion={showQuestionEdit.question}\n          questionsList={props.questionBank.uploadedQuestions.insertedData}\n          unSelectQuestion={unSelectQuestion}\n        />\n      ) : (\n        <UploadedQuestions\n          selectedCourse={props.selectedCourse}\n          selectQuestion={selectQuestion}\n          questionTypes={props.questionTypes}\n          loadQuestionTypes={props.loadQuestionTypes}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Upload = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n})(_Upload);\n\nexport default Upload;\n","import React from \"react\";\n\ninterface DonwloadLinkProps {\n  className: string;\n  title: string;\n  caption: string;\n  location: string;\n  icon: any;\n}\nconst DownloadLink = (props: DonwloadLinkProps) => {\n  const downloadFile = () => {\n    window.location.href = props.location;\n  };\n  return (\n    <button\n      title={props.title}\n      className={`flex flex-row items-center gap-2 ${props.className}`}\n      onClick={downloadFile}\n    >\n      {props.icon}\n      {props.caption}\n    </button>\n  );\n};\n\nexport default DownloadLink;\n","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as Interfaces from \"../../../../interfaces/index\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n} from \"../../../../actions\";\nimport { StoreState } from \"../../../../reducers\";\nimport { course } from \"../../../../interfaces/course\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport SchoolLevelsFilter from \"../../../Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { searchItem } from \"../../../Application/ApplicationPositions/ApplicationPositions\";\nimport Upload from \"./Upload\";\nimport Courses from \"../../../../components/Courses/Courses\";\nimport { SiMicrosoftexcel } from \"react-icons/si\";\nimport DownloadLink from \"../../../../components/DownloadLink/DownloadLink\";\nimport { VscListFlat } from \"react-icons/vsc\";\nimport { IoArrowBackOutline } from \"react-icons/io5\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return filtered;\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"\">\n          <div className=\"my-3 flex flex-row justify-between items-center\">\n            <div className=\"flex flex-row items-center gap-3\">\n              <div>\n                <Link\n                  to=\"/question-bank\"\n                  title=\"Back to question bank\"\n                  className=\"bg-white rounded-full h-10 w-10 flex items-center justify-center text-blue-600 hover:bg-blue-600 hover:text-white\"\n                >\n                  <IoArrowBackOutline className=\" text-4xl\" />\n                </Link>\n              </div>\n              <div className=\"flex flex-col\">\n                <span className=\"text-gray-700 text-3xl font-extrabold\">\n                  Upload questions\n                </span>\n                <div className=\"text-gray-600\">\n                  {this.props.course.selected_course !== null ? (\n                    <div className=\"mt-1\">\n                      <span className=\"text-blue-600 font-bold underline\">\n                        {this.props.course.selected_course.course_code} -\n                      </span>\n                      <span className=\"font-bold text-blue-600 underline\">\n                        {this.props.course.selected_course.course_name}\n                      </span>\n                    </div>\n                  ) : (\n                    <div className=\"text-sm\">\n                      Please make sure you have downloaded the format template\n                      before writing list of questions\n                      <br />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex flex-row\">\n              <DownloadLink\n                className=\"btn bg-white border border-white hover:bg-blue-100 mr-1\"\n                title=\"Click to download sample questions to refer!\"\n                caption=\"Samples\"\n                location=\"https://spreadsheets.google.com/feeds/download/spreadsheets/Export?key=1taUovVksxo1KzNq3cWtLxARY7HICMjUvyHq4w041Tmc&exportFormat=xlsx\"\n                icon={<VscListFlat className=\"text-2xl\" />}\n              />\n              <DownloadLink\n                className=\"px-2 py-2 rounded font-bold bg-blue-100 hover:bg-blue-600 hover:text-white text-blue-600 mr-1 border border-blue-400 hover:border-blue-600\"\n                title=\"Click to download excel template you can use to prepare questions!\"\n                caption=\"Download template\"\n                location=\"https://spreadsheets.google.com/feeds/download/spreadsheets/Export?key=1HtNaIh6cS-bFlaBpzIuhbrYLvreUjmTu84dBw10GMo0&exportFormat=xlsx\"\n                icon={<SiMicrosoftexcel className=\"text-2xl\" />}\n              />\n              {/* <Link\n                to=\"/question-bank\"\n                className=\"btn bg-white text-blue-600 mr-1 flex flex-row items-center gap-2\"\n              >\n                <FiExternalLink className=\"text-2xl\" />\n                <span>Question bank</span>\n              </Link> */}\n            </div>\n          </div>\n          <div className=\"flex-col\">\n            <div className=\"grid md:grid-cols-5 gap-2\">\n              {this.props.questionBank.uploadedQuestions === null && (\n                <div\n                  className={`animate__animated ${\n                    this.props.course.selected_course === null\n                      ? \"md:col-span-5\"\n                      : \"md:col-span-2 transition-all duration-500 ease-in-out\"\n                  } md:flex md:flex-col min-h-full`}\n                >\n                  <Courses\n                    setSelectedCourse={this.props.setSelectedCourse}\n                    selected_course_id={\n                      this.props.course.selected_course &&\n                      this.props.course.selected_course.course_id\n                    }\n                  />\n                </div>\n              )}\n              {this.props.course.selected_course !== null && (\n                <div\n                  className={`${\n                    this.props.questionBank.uploadedQuestions === null\n                      ? \"md:col-span-3\"\n                      : \"md:col-span-5\"\n                  } md:flex flex-col min-h-full rounded`}\n                >\n                  <Upload\n                    selectedCourse={this.props.course.selected_course}\n                    setUploadingStatus={this.setUploadingStatus}\n                    setSelectedCourse={this.props.setSelectedCourse}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n  };\n};\n\nexport const UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n","import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}