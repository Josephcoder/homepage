{"version":3,"sources":["containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx"],"names":["MultipleChoice","props","checkAnswer","item","res","available_answers","length","check","find","itm","question_id","selectedQuestionAnswer","undefined","x","answer","id","status","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","test","answers","a","value","map","onClick","oldAnswers","temp","type","questionTypeElementsType","SingleMultiple","t","addAnswer","className","toMultipleChoice","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","TrueFalse","Matching","checkIfSelected","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","question","language","key","testAnswerLang","it","toString","checkAnswerStatus","selectedLanguage","findWord","arr","ReturnMatchingStatus","newItem","onChange","e","target","selected","SimpleCalculated","answeredValue","ShortAnswer","style","minHeight","Numerical","CalculatedMultipleChoice","filter","QuestionDetails","connect","auth","doExam","candidateExam","system","questionTypes","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","useState","loading","setLoading","selectLang","setSelectLang","QuestionData","candidate_exam","q","selected_question","findSelectedQuestionDetails","Loading","LoadingType","white","submitQuestionAnswer","selected_language","title","description","width","i","findQuestionType","question_answers","console","log","SimpleCalculate","Numeric"],"mappings":"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","file":"static/js/3.91a6ea6f.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { MultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  \n  const checkAnswer = (item: MultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: MultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: MultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.type === questionTypeElementsType.SingleMultiple ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.type === questionTypeElementsType.SingleMultiple ? \n          <MdRadioButtonUnchecked className=\"text-2xl truncate\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default MultipleChoice\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React, { useEffect } from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { TrueFalseQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: TrueFalseQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n\n  const addAnswer = (item: TrueFalseQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [...temp, {\n          id: t.id,\n          value: t.value,\n          status: false,\n        }]\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  \n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <MdRadioButtonChecked className=\"text-2xl\" />:\n          <MdRadioButtonUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default TrueFalse\n","import React, { useEffect } from 'react'\nimport { MdRadioButtonUnchecked } from 'react-icons/md'\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CandidateExam } from '../../../../interfaces/exam'\nimport { MatchingQuestionAnswerInterface, MatchingStatuses, QuestionInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: MatchingQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswer = (item: MatchingQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: item.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  \n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: \"\"\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n\n  const checkAnswerStatus = (selectedQuestionId: string, selectedLang: QuestionLanguage, ans: MatchingQuestionAnswerInterface) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(test => test.id === selectedQuestionId);\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(itm => itm.language === lang.key);\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(it => it.status.toString() === ans.status);\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (temp !== undefined) {\n      let ans = temp.answer.find(itm => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(props.selectedQuestionAnswer.question_id, props.selectedLanguage, ans);\n        }\n      }\n    }\n    return false;\n  }\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined = props.selectedExam?.questions.find(itm => itm.id === props.selectedQuestionAnswer.question_id);\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [...res, {\n            id: ans.id,\n            lang: item.language,\n            status: ans.status.toString()\n          }]\n        }\n      }\n    }\n    return res;\n  }\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find(itm => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(itm => itm.id === item && itm.lang === lang)?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  }\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"} grid grid-cols-2`}>\n          <div className=\"col-span-1 flex flex-row items-center gap-2\">\n            {checkAnswer(item) === true ?\n            <RiCheckboxCircleFill className=\"text-2xl\" />:\n            <MdRadioButtonUnchecked className=\"text-2xl\" />}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n          <div className=\"col-span-1\">\n            <select \n            onChange={(e) => {\n              addAnswer({\n                id: item.id,\n                value: item.value,\n                status: e.target.value\n              }, props.selectedQuestionAnswer.question_id)\n            }}\n            className={`border rounded w-full py-2 px-2 cursor-pointer focus:outline-none focus:border-blue-500 ${checkAnswer(item) === false ? \"border-gray-400 text-gray-600\" : \"border-blue-50 bg-blue-50 text-blue-600 hover:border-blue-600\"}`}>\n              <option value=\"\">Select matching</option>\n              {props.selectedQuestionAnswer !== null &&\n                props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((itm, x) => (\n                  <option selected={itm.status === findWord(props.selectedLanguage, checkIfSelected(item.id)) ? true : false} key={x + 1} value={itm.status}>{itm.status}</option>\n                ))}\n            </select>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Matching\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { SimpleCalculatedQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (item: SimpleCalculatedQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: [newAnswers[0].value],\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0].toString() : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SimpleCalculated\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { ShortAnswerQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: ShortAnswerQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: { id: string, value: string, status: boolean}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: { id: string, value: string, status: boolean}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: item.value,\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: \"\",\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <textarea \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }} value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\" : \"border text-gray-700 border-gray-500 bg-gray-50\"}`} style={{minHeight: '200px'}}></textarea>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ShortAnswer\n","import React, { useEffect } from 'react'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { NumericalQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: NumericalQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n  const addAnswerItemFn = (newAnswers: {id: string; value: string[]; status: number[]}[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [{\n          id: newAnswers[0].id,\n          value: newAnswers[0].value,\n          status: newAnswers[0].status\n        }]\n      });\n    }\n  }\n  const addAnswer = (item: {id: string; value: string; status: number[]}, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([{\n        id: oldAnswers.answer[0].id,\n        value: [item.value],\n        status: oldAnswers.answer[0].status,\n      }]);\n    }\n  }\n  const answeredValue = () => {\n    let answer = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    return answer !== undefined ? answer.answer.length !== 0 && answer.answer[0].value[0] : \"\"\n  }\n\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [{\n            id: props.selectedQuestionAnswer.answers[0].id,\n            value: [\"\"],\n            status: props.selectedQuestionAnswer.answers[0].status,\n          }]\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}>\n          <input \n          onChange={(e) => {\n            addAnswer({\n              id: item.id,\n              value: e.target.value,\n              status: item.status\n            }, props.selectedQuestionAnswer.question_id)\n          }}\n          type=\"text\" value={answeredValue()} \n          className={`px-3 py-2 rounded focus:outline-none focus:border-none ${checkAnswer(item) === true ? \"border-2 text-blue-600 font-bold border-blue-600\" : \"border text-gray-700 border-gray-500\"}`} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Numerical\n","import React, { useEffect } from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md'\nimport { QuestionAnswersStore } from '../../../../actions'\nimport { CalculatedMultipleChoiceQuestionAnswerInterface, questionTypeElementsType } from '../../../../interfaces/question'\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null, \n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined,\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n      if (check !== undefined) {\n        let x = check.answer.find(itm => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  }\n\n  const addAnswerItemFn = (newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers\n      });\n    }\n  }\n  const addAnswer = (item: CalculatedMultipleChoiceQuestionAnswerInterface, question_id: string | null) => {\n    let oldAnswers = props.available_answers.find(itm => itm.question_id === question_id);\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1) {\n        for (let t of oldAnswers.answer) {\n          temp = [...temp, {\n            id: t.id,\n            value: t.value,\n            status: false,\n          }]\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [...newAnswers, {\n            id: item.id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? true : !x.status,\n          }]\n        } else {\n          newAnswers = [...newAnswers, x]\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  }\n  useEffect(() => {\n    let test = props.available_answers.find(itm => itm.question_id === props.selectedQuestionAnswer.question_id);\n    if (test === undefined || (test !== undefined && test.answer.length === 0)) {\n      if (props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer !== undefined &&  props.selectedQuestionAnswer.question_id !== null) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of  props.selectedQuestionAnswer.answers) {\n          newAnswers = [...newAnswers, {\n            id: a.id,\n            value: a.value,\n            status: false\n          }]\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers\n        });\n      }\n    }\n  }, [props])\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n      props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.map((item) => (\n        <div onClick={() => addAnswer(item, props.selectedQuestionAnswer.question_id)} className={`px-2 py-2 border-b ${checkAnswer(item) === true ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\" : \"border-b bg-white border-gray-100 hover:bg-gray-100\"} flex flex-row justify-left items-center rounded cursor-pointer`}>\n          {checkAnswer(item) === true ?\n          <>\n          {props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ? \n          <MdRadioButtonChecked className=\"text-2xl\" /> : \n          <ImCheckboxChecked className=\"text-2xl\" />}\n          </>:\n          props.selectedQuestionAnswer.answers !== undefined && props.selectedQuestionAnswer.answers.filter(itm => itm.status === true).length === 1 ?\n          <MdRadioButtonUnchecked className=\"text-2xl\" />:\n          <ImCheckboxUnchecked className=\"text-2xl\" />}\n          <span className=\"ml-2\">{item.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default CalculatedMultipleChoice\n","import React, { useEffect, useState } from 'react'\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from 'react-icons/md';\nimport { QuestionInterface, QuestionItemInterface, QuestionLanguage, QuestionLanguages, questionTypeElementsType } from '../../../interfaces/index';\nimport { newAnswer } from '../DoExam';\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question';\nimport Loading from '../../../components/Loading/Loading';\nimport { LoadingType } from '../../../components/Loading/LoadingV2';\nimport MultipleChoice from './Answers/MultipleChoice';\nimport { toCalculatedMultipleChoice, toMatching, toMultipleChoice, toNumerical, toShortAnswer, toSimpleCalculated, toTrueFalse } from './ConvertingAnswers';\nimport { findQuestionType } from '../utils/utils';\nimport TrueFalse from './Answers/TrueFalse';\nimport Matching from './Answers/Matching';\nimport SimpleCalculated from './Answers/SimpleCalculated';\nimport ShortAnswer from './Answers/ShortAnswer';\nimport Numerical from './Answers/Numerical';\nimport CalculatedMultipleChoice from './Answers/CalculatedMultipleChoice';\nimport { BiWorld } from 'react-icons/bi';\nimport { AiFillCaretDown } from 'react-icons/ai';\nimport { FaTimes } from 'react-icons/fa';\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) =>void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined = props.candidateExam.candidate_exam.questions.find(itm => props.candidateExam.selected_question && itm.id === props.candidateExam.selected_question);\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  }\n  \n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res:QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(itm => itm.id === props.candidateExam.selected_question);\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  }\n  useEffect(() => {\n    if (props.questionTypes.questionTypes === null || props.questionTypes.questionTypes.length === 0) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props])\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ?\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n        <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n          <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n          <Loading type={LoadingType.white} />\n        </div>\n      </div>:\n      <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          {props.submitQuestionAnswer === true && \n          <div className=\"bg-blue-50 px-3 py-2 rounded text-blue-700 font-bold animate-pulse text-sm\">Saving your answer ...</div>}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              <div className=\"text-md flex flex-col w-full\">\n                <span className=\"text-sm text-gray-600\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.title}\n                </span>\n                <span className=\"text-lg text-gray-800 font-bold\">\n                  {QuestionData() !== null && QuestionData()?.question.find(itm => itm.language === props.candidateExam.selected_language)?.description}\n                </span>\n              </div>\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div onClick={() => setSelectLang(!selectLang)} className=\"flex flex-row items-center gap-2\">\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{width: '97px'}}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">Language</span>\n                    <span title={QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value} className=\"text-sm font-bold text-blue-600 truncate\" style={{width: '97px'}}>\n                      {QuestionLanguages.find(itm => itm.key === props.candidateExam.selected_language)?.value}\n                    </span>\n                  </div>\n                  <div className={`${selectLang === true ? \"bg-yellow-800 text-white\" : \"bg-gray-50 hover:bg-blue-600\"} h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}>\n                    {selectLang === true ? \n                    <FaTimes className=\"text-xl my-2 mx-2\" />:\n                    <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />}\n                  </div>\n                </div>\n                {selectLang === true &&\n                <div className=\"relative rounded overflow-hidden\" style={{width: '182px'}}>\n                  <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                    {QuestionLanguages.map((item, i) => (\n                      <span onClick={() => {props.setQuestionLanguage(item.key); setSelectLang(!selectLang)}} key={i + 1} \n                      className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${props.candidateExam.selected_language === item.key ? \"bg-blue-800 font-extrabold border-blue-800\" : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"}`}>\n                        {props.candidateExam.selected_language === item.key ? <MdRadioButtonChecked className=\"text-xl mr-2\" /> : <MdRadioButtonUnchecked className=\"text-xl mr-2\" />} {item.value}\n                      </span>\n                    ))}\n                  </div>\n                </div>}\n              </div>\n            </div>\n          </div>\n          <div className=\"my-4 py-2 px-2 bg-white rounded\" onClick={() => selectLang === true && setSelectLang(false)}>\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            (findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.MultipleChoice ||\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SingleMultiple) &&\n            <MultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.TrueFalse &&\n            <TrueFalse \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toTrueFalse(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Matching Question */}\n            {console.log(\"Type: \", findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes))}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Matching &&\n            <Matching \n              selectedLanguage={props.candidateExam.selected_language}\n              selectedExam={props.candidateExam.candidate_exam}\n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toMatching(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.SimpleCalculate &&\n            <SimpleCalculated \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toSimpleCalculated(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.ShortAnswer &&\n            <ShortAnswer \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toShortAnswer(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.Numeric &&\n            <Numerical \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toNumerical(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null && \n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) !== null &&\n            findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes) === questionTypeElementsType.CalculatedMultipleChoice &&\n            <CalculatedMultipleChoice \n              type={findQuestionType(props.candidateExam.candidate_exam?.questions.find(itm => itm.id === props.candidateExam.selected_question)?.type, props.questionTypes.questionTypes)}\n              available_answers={props.candidateExam.question_answers}\n              selectedQuestionAnswer={{\n                question_id: props.candidateExam.selected_question, \n                answers: toCalculatedMultipleChoice(findSelectedQuestionDetails().find(itm => itm.language === props.candidateExam.selected_language)!.answer),\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />}\n          </div>\n      </div>}\n    </div>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, questionTypes: questionTypes, };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;"],"sourceRoot":""}