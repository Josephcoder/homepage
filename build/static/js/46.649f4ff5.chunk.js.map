{"version":3,"sources":["actions/session.ts","components/Loading/TableLoading.tsx","containers/SessionSettings/SessionDetails.tsx","containers/SessionSettings/index.tsx","containers/SessionSettings/CalendarView.tsx","containers/SessionSettings/SessionSettings.tsx"],"names":["GetPlansTypes","callback","dispatch","a","setAxiosToken","axios","get","API","CLAIMING","res","console","log","GET_PLANS_TYPES","data","plan_types","status","length","type","ActionTypes","payload","error","errorToText","setSelectedPlanType","thisType","SELECT_PLAN_TYPE","getActiveSessionPlan","GET_ACTIVE_SESSION_PLANS","session_plan","undefined","is_active","GetAllSessionPlans","GET_ALL_SESSION_PLANS","session_data","createSessionPlan","CREATE_SESSION_PLAN","updateSessionPlan","UPDATE_SESSION_PLAN","sessionActivation","SESSION_ACTIVATION","deleteSessionPlan","DELETE_SESSION_PLAN","TableLoading","props","displayCols","colsArray","index","cols","push","map","element","className","isActivationAllowed","thisPlans","today","Date","end_date","getTime","getPlanTypeByKey","type_key","allPlanTypes","find","item","isPlanActive","viewThisSession","thisPlan","planEndDate","planStartDate","start_date","type_status","SessionPlanTypeStatus","CLOSED","SessionDetails","handlePlanActivation","session","newState","window","confirm","key","PushPopupAlert","title","theme","PopupAlertTheme","warning","newData","session_plan_name","period","plans","createdAt","updatedAt","session_plan_id","Object","prototype","hasOwnProperty","call","OPEN","type_id","type_title","allowed_claim_level","_id","history","setState","loadingRequest","put","setViewThisSession","info","state","id","this","colSpan","capitalizeFirstLetter","DATE","onClick","Component","connect","sessionSettingsTabs","allViews","localizer","momentLocalizer","moment","CalendarView","setLoading","loading","loadEvents","allSession","allEvents","n","thisSession","plan_key","thisTitle","PlansTypeKeys","APPLICATION","DOCUMENT_VALIDATION","EXAMINATION","MARKS_PUBLICATION","PLACEMENT_TRANSFER","allDay","start","toDate","end","events","componentDidMount","sessionPlan","allSessionPlans","msg","danger","popup","defaultDate","views","step","showMultiDayTimes","onSelectEvent","event","alert","startAccessor","endAccessor","SessionSettings","setCreateSession","createSession","setSessionTitle","sessionTitle","setSessionPeriod","sessionPeriod","setFormError","formError","planTypes","isCreateDefault","handleSessionActivation","isDateRangeValid","planType","level","thisDate","currentDate","dd","getDate","mm","getMonth","yyyy","getFullYear","date","toString","month","setPlansForUpdate","application_start","application_end","document_start","document_end","examination_start","examination_end","publication_start","publication_end","placement_start","placement_end","handleSubmit","e","preventDefault","isEmptyOrSpaces","createFormData","post","success","doAction","disabled","NoResult","NoResultThemes","Dark","value","component","onSubmit","onChange","target","min","auth","Index","setting_type","useParams","useState","calenderView","selectedTab","setSelectedTab","values","i"],"mappings":"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","file":"static/js/46.649f4ff5.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport { PlansTypeInterface, SessionPlanInterface } from \"../interfaces\";\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// GET ACTIVE PLAN TYPES\nexport interface GetPlansTypesAction {\n  type: ActionTypes.GET_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// GET INACTIVE PLAN TYPES\nexport interface GetDeletedPlansTypesAction {\n  type: ActionTypes.GET_DELETED_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// CREATE PLAN TYPE\nexport interface CreatePlansTypeAction {\n  type: ActionTypes.CREATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// UPDATE PLAN TYPE\nexport interface UpdatePlansTypeAction {\n  type: ActionTypes.UPDATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// DELETE PLAN TYPE\nexport interface DeletePlansTypeAction {\n  type: ActionTypes.DELETE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// SET PLAN TYPE =====================================\nexport interface setSelectedPlanTypeActions {\n  type: ActionTypes.SELECT_PLAN_TYPE;\n  payload: PlansTypeInterface | \"all\";\n}\n\n// GET ALL SESSION PLAN\nexport interface GetAllSessionPlansAction {\n  type: ActionTypes.GET_ALL_SESSION_PLANS;\n  payload: SessionPlanInterface[];\n}\n\n// GET ACTIVE SESSION PLAN\nexport interface GetActiveSessionPlanAction {\n  type: ActionTypes.GET_ACTIVE_SESSION_PLANS;\n  payload: SessionPlanInterface | \"none\";\n}\n\n// CREATE SESSION PLAN\nexport interface CreateSessionPlansAction {\n  type: ActionTypes.CREATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// UPDATE SESSION PLAN\nexport interface UpdateSessionPlansAction {\n  type: ActionTypes.UPDATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// ACTIVATE SESSION PLAN\nexport interface ActivateSessionPlansAction {\n  type: ActionTypes.SESSION_ACTIVATION;\n  payload: SessionPlanInterface;\n}\n\n// DELETE SESSION PLAN\nexport interface DeleteSessionPlanAction {\n  type: ActionTypes.DELETE_SESSION_PLAN;\n  payload: string;\n}\n\nexport type SessionActionType =\n  | GetPlansTypesAction\n  | GetDeletedPlansTypesAction\n  | CreatePlansTypeAction\n  | UpdatePlansTypeAction\n  | DeletePlansTypeAction\n  | GetAllSessionPlansAction\n  | GetActiveSessionPlanAction\n  | CreateSessionPlansAction\n  | UpdateSessionPlansAction\n  | ActivateSessionPlansAction\n  | DeleteSessionPlanAction\n  | setSelectedPlanTypeActions;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type`\n      );\n      console.log({ GET_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetPlansTypesAction>({\n        type: ActionTypes.GET_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetDeletedPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type/deleted`\n      );\n      console.log({ GET_DELETED_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetDeletedPlansTypesAction>({\n        type: ActionTypes.GET_DELETED_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE PLAN TYPE\nexport const createPlanType = (\n  data: PlansTypeInterface\n): CreatePlansTypeAction => {\n  return {\n    type: ActionTypes.CREATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// UPDATE PLAN TYPE\nexport const updatePlanType = (\n  data: PlansTypeInterface\n): UpdatePlansTypeAction => {\n  return {\n    type: ActionTypes.UPDATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// DELETE PLAN TYPE\nexport const deletePlanType = (\n  data: PlansTypeInterface\n): DeletePlansTypeAction => {\n  return {\n    type: ActionTypes.DELETE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// SELECT PLAN TYPES ==========================\nexport const setSelectedPlanType = (\n  thisType: PlansTypeInterface | \"all\"\n): setSelectedPlanTypeActions => {\n  console.log({ thisType });\n  return {\n    type: ActionTypes.SELECT_PLAN_TYPE,\n    payload: thisType,\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const getActiveSessionPlan = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface>(\n        `${API.CLAIMING}/session/active/`\n      );\n      console.log({ GET_ACTIVE_SESSION_PLANS: res.data });\n      let session_plan: SessionPlanInterface | undefined = undefined;\n      // if (res.status === 200) {\n      //   // setApplications(res.data);\n      // }\n      if (res.data && res.data.is_active !== undefined) {\n        session_plan = res.data;\n      }\n      console.log({ session_plan: res.data });\n\n      dispatch<GetActiveSessionPlanAction>({\n        type: ActionTypes.GET_ACTIVE_SESSION_PLANS,\n        payload: session_plan ? session_plan : \"none\",\n      });\n      callback(false, \"\", session_plan ? session_plan : \"none\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ALL PLAN TYPES ==========================\nexport const GetAllSessionPlans = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface[]>(\n        `${API.CLAIMING}/session/`\n      );\n      console.log({ GET_ALL_SESSION_PLANS: res.data });\n      let session_data: SessionPlanInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          session_data = res.data;\n        }\n      }\n      dispatch<GetAllSessionPlansAction>({\n        type: ActionTypes.GET_ALL_SESSION_PLANS,\n        payload: session_data,\n      });\n      callback(false, \"\", session_data);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE SESSION PLAN\nexport const createSessionPlan = (\n  data: SessionPlanInterface\n): CreateSessionPlansAction => {\n  return {\n    type: ActionTypes.CREATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// UPDATE SESSION PLAN\nexport const updateSessionPlan = (\n  data: SessionPlanInterface\n): UpdateSessionPlansAction => {\n  return {\n    type: ActionTypes.UPDATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// ACTIVATE SESSION PLAN\nexport const sessionActivation = (\n  data: SessionPlanInterface\n): ActivateSessionPlansAction => {\n  return {\n    type: ActionTypes.SESSION_ACTIVATION,\n    payload: data,\n  };\n};\n\n// DELETE SESSION PLAN\nexport const deleteSessionPlan = (data: string): DeleteSessionPlanAction => {\n  return {\n    type: ActionTypes.DELETE_SESSION_PLAN,\n    payload: data,\n  };\n};\n","import React from \"react\";\n\ntype TableLoadingProps = {\n  cols: number;\n};\nconst TableLoading: React.FC<TableLoadingProps> = (props) => {\n  const displayCols = (): JSX.Element[] => {\n    let colsArray: number[] = [];\n    for (let index = 0; index < props.cols; index++) {\n      colsArray.push(index);\n    }\n    let result = colsArray.map((element) => {\n      return (\n        <td className=\"p-3 text-center whitespace-nowrap\" key={element}>\n          <div className=\"w-full h-4 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </td>\n      );\n    });\n\n    return result;\n  };\n  return (\n    <>\n      <tr className=\"border-b border-gray-200\" key={228}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={22648}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={229768}>\n        {displayCols()}\n      </tr>\n    </>\n  );\n};\n\nexport default TableLoading;\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { VscLoading } from \"react-icons/vsc\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { updateSessionPlan } from \"../../actions/session\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport {\n  allPlanTypes,\n  PlansInterface,\n  PlansTypeInterface,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  SessionPlanTypeStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { DATE, errorToText } from \"../../utils/functions\";\n\nexport const isActivationAllowed = (thisPlans: PlansInterface): boolean => {\n  let today: Date = new Date(),\n    end_date = new Date(thisPlans.end_date);\n  if (end_date.getTime() >= today.getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport const getPlanTypeByKey = (\n  type_key: PlansTypeKeys\n): PlansTypeInterface | undefined => {\n  return allPlanTypes.find((item) => item.type_key === type_key);\n};\n\nexport const isPlanActive = (\n  viewThisSession: SessionPlanInterface,\n  thisPlan: PlansInterface\n): \"OPEN\" | \"CLOSED\" | \"WAITING\" => {\n  if (viewThisSession.is_active) {\n    let today = new Date(),\n      planEndDate = new Date(thisPlan.end_date),\n      planStartDate = new Date(thisPlan.start_date);\n    if (\n      planEndDate.getTime() >= today.getTime() &&\n      planStartDate.getTime() <= today.getTime() &&\n      thisPlan.type_status !== SessionPlanTypeStatus.CLOSED\n    ) {\n      return \"OPEN\";\n    } else if (\n      planStartDate.getTime() > today.getTime() &&\n      thisPlan.type_status !== SessionPlanTypeStatus.CLOSED\n    ) {\n      return \"WAITING\";\n    }\n  }\n  return \"CLOSED\";\n};\n\ntype SessionDetailsProps = {\n  viewThisSession: SessionPlanInterface;\n  setViewThisSession: (data: SessionPlanInterface) => void;\n\n  // REDUX ----------------\n  updateSessionPlan: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype SessionDetailsState = {\n  loadingRequest: string;\n};\n\nexport class SessionDetails extends Component<\n  SessionDetailsProps,\n  SessionDetailsState\n> {\n  constructor(props: SessionDetailsProps) {\n    super(props);\n\n    this.state = {\n      loadingRequest: \"\",\n    };\n  }\n\n  handlePlanActivation = async (\n    session: SessionPlanInterface,\n    thisPlan: PlansInterface\n  ) => {\n    const newState: \"open\" | \"close\" = session.is_active ? \"close\" : \"open\";\n\n    if (!window.confirm(`Are you sure you want to ${newState} this plan?`)) {\n      return true;\n    }\n\n    if (!isActivationAllowed(thisPlan)) {\n      this.props.PushPopupAlert({\n        title: `Opening/Closing plan which has been expired is not allowed!`,\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    let newData: SessionPlanInterface = {\n      session_plan_name: session.session_plan_name,\n      period: session.period,\n      is_active: session.is_active,\n      plans: [],\n      createdAt: session.createdAt,\n      updatedAt: session.updatedAt,\n      session_plan_id: session.session_plan_id,\n    };\n    for (const key in session.plans) {\n      if (Object.prototype.hasOwnProperty.call(session.plans, key)) {\n        const element = session.plans[key];\n        if (thisPlan.type_key === element.type_key) {\n          if (thisPlan.type_status === SessionPlanTypeStatus.OPEN) {\n            newData.plans.push({\n              type_id: thisPlan.type_id,\n              type_title: thisPlan.type_title,\n              type_key: thisPlan.type_key,\n              type_status: SessionPlanTypeStatus.CLOSED,\n              start_date: thisPlan.start_date,\n              end_date: thisPlan.end_date,\n              allowed_claim_level: thisPlan.allowed_claim_level,\n              _id: thisPlan._id,\n              history: thisPlan.history,\n            });\n          } else {\n            newData.plans.push({\n              type_id: thisPlan.type_id,\n              type_title: thisPlan.type_title,\n              type_key: thisPlan.type_key,\n              type_status: SessionPlanTypeStatus.OPEN,\n              start_date: thisPlan.start_date,\n              end_date: thisPlan.end_date,\n              allowed_claim_level: thisPlan.allowed_claim_level,\n              _id: thisPlan._id,\n              history: thisPlan.history,\n            });\n          }\n        } else {\n          newData.plans.push(element);\n        }\n      }\n    }\n\n    console.log(\"====================================\");\n    console.log({ newData });\n    console.log(\"====================================\");\n\n    this.setState({ loadingRequest: thisPlan.type_key });\n    try {\n      const res = await axios.put<SessionPlanInterface>(\n        `${API.CLAIMING}/session/${session.session_plan_id}`,\n        newData\n      );\n      this.props.updateSessionPlan(res.data);\n      this.props.setViewThisSession(res.data);\n      this.props.PushPopupAlert({\n        title: `Session ${newState}d successfully`,\n        theme: PopupAlertTheme.info,\n      });\n      this.setState({ loadingRequest: \"\" });\n      console.log(\"updateSessionPlan: \", res);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.warning,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <table className=\"w-full bg-white shadow p-5\" id=\"session_content\">\n        <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n          <tr>\n            <td className=\"p-2\">#</td>\n            <td className=\"p-2\">Plan Type</td>\n            <td className=\"p-2\">Start Date</td>\n            <td className=\"p-2\">End date</td>\n            {this.props.viewThisSession.is_active && (\n              <td className=\"p-2\" colSpan={2}>\n                Status\n              </td>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {/* WHILE DATA FOUND ====================== */}\n          {this.props.viewThisSession.plans.map((item, index) => (\n            <tr\n              key={index + item._id}\n              className={`border-b border-gray-200 hover:bg-gray-100`}\n            >\n              <td className=\"p-2 text-left whitespace-nowrap\">{index + 1}</td>\n              <td className=\"p-2 text-left\">\n                <span className=\"text-lg\">\n                  {getPlanTypeByKey(item.type_key) &&\n                    capitalizeFirstLetter(\n                      getPlanTypeByKey(item.type_key)!.type_title\n                    )}\n                </span>\n              </td>\n              <td className=\"p-2 text-left\">{DATE(item.start_date)}</td>\n              <td className=\"p-2 text-left\">{DATE(item.end_date)}</td>\n              {this.props.viewThisSession.is_active && (\n                <td>\n                  {isPlanActive(this.props.viewThisSession, item) === \"OPEN\" ? (\n                    <span className={`px-2 py-1 font-semibold text-green-700`}>\n                      Open\n                    </span>\n                  ) : isPlanActive(this.props.viewThisSession, item) ===\n                    \"WAITING\" ? (\n                    <span className={`px-2 py-1 font-semibold text-gray-700`}>\n                      Waiting\n                    </span>\n                  ) : (\n                    <span className={`px-2 py-1 font-semibold text-red-700`}>\n                      Closed\n                    </span>\n                  )}\n                </td>\n              )}\n              {this.props.viewThisSession.is_active && (\n                <td>\n                  {isActivationAllowed(item) && (\n                    <div className=\"flex items-center justify-center gap-1\">\n                      <div\n                        className={`relative ${\n                          this.state.loadingRequest.length > 0\n                            ? \"cursor-not-allowed\"\n                            : \"cursor-pointer\"\n                        }`}\n                        title={\n                          item.type_status === SessionPlanTypeStatus.OPEN\n                            ? \"Deactivating session\"\n                            : \"Activating session\"\n                        }\n                        onClick={() =>\n                          this.state.loadingRequest.length <= 0 &&\n                          this.handlePlanActivation(\n                            this.props.viewThisSession,\n                            item\n                          )\n                        }\n                      >\n                        <span className=\"block w-14 h-8 bg-gray-100 rounded-full shadow-inner\"></span>\n                        <span\n                          className={`absolute block w-6 h-6 mt-1 ml-1 rounded-full shadow inset-y-0 left-0 focus-within:shadow-outline transition-transform duration-500 ease-in-out ${\n                            item.type_status === SessionPlanTypeStatus.CLOSED\n                              ? \"bg-red-500\"\n                              : \"bg-green-500 transform translate-x-full\"\n                          }`}\n                        ></span>\n                      </div>\n                      {this.state.loadingRequest === item.type_key && (\n                        <VscLoading className=\"animate__animated animate__rotateIn animate__infinite\" />\n                      )}\n                    </div>\n                  )}\n                </td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default connect(null, {\n  updateSessionPlan,\n  PushPopupAlert,\n})(SessionDetails);\n","import React, { useState } from \"react\";\nimport { RiFolderSettingsFill } from \"react-icons/ri\";\nimport { useParams } from \"react-router-dom\";\nimport CalendarView from \"./CalendarView\";\nimport SessionSettings from \"./SessionSettings\";\n\nenum sessionSettingsTabs {\n  sessionPlan = \"Session Plans\",\n  calenderView = \"Calendar View\",\n}\n\nexport const Index = () => {\n  const { setting_type } = useParams<{ setting_type: string }>();\n  const [selectedTab, setSelectedTab] = useState<sessionSettingsTabs | null>(\n    setting_type === \"calendar\"\n      ? sessionSettingsTabs.calenderView\n      : sessionSettingsTabs.sessionPlan\n  );\n  return (\n    <div className=\"\">\n      <div className=\"mt-3 rounded flex flex-row justify-between items-center\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <RiFolderSettingsFill className=\"text-6xl text-blue-600\" />\n          <div className=\"flex flex-col\">\n            <span className=\"text-blue-600 text-2xl font-bold\">\n              Session settings\n            </span>\n          </div>\n        </div>\n        {/* <div className=\"flex flex-row\">\n          <Link\n            to=\"/method-add-question\"\n            className={`btn bg-blue-100 hover:bg-white text-blue-700 border-2 border-white`}\n          >\n            Add questions\n          </Link>\n          <div className=\"btn bg-black bg-opacity-30 text-white border-2 border-white\">\n            Change course\n          </div>\n        </div> */}\n      </div>\n      <div className=\"mt-3 mb-6 flex-col\">\n        <div className=\"bg-white w-full border border-white rounded\">\n          <div className=\"flex flex-row items-center\">\n            {Object.values(sessionSettingsTabs).map((item, i) => (\n              <div\n                key={i}\n                onClick={() => setSelectedTab(item)}\n                className={`animate__animated ${\n                  selectedTab === item\n                    ? \"bg-blue-100 border-blue-600 text-blue-600 animate__zoomIn\"\n                    : \"bg-white border-white text-gray-600\"\n                } hover:bg-blue-100 px-4 py-2 cursor-pointer font-bold border-b-4 hover:border-blue-600 hover:text-blue-600 rounded-t mt-1 mx-1`}\n              >\n                {item}\n              </div>\n            ))}\n          </div>\n          <div className=\"=rounded mx-1 mb-1\">\n            {selectedTab === sessionSettingsTabs.sessionPlan && (\n              <SessionSettings\n                isCreateDefault={setting_type === \"create-session\"}\n              />\n            )}\n            {selectedTab === sessionSettingsTabs.calenderView && (\n              <CalendarView />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { GetAllSessionPlans } from \"../../actions/session\";\nimport { StoreState } from \"../../reducers\";\nimport { SessionPlanReducerInterface } from \"../../reducers/session\";\nimport { Calendar, View, DateLocalizer } from \"react-big-calendar\";\nimport { momentLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from \"moment\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { PlansTypeKeys, SessionPlanInterface } from \"../../interfaces\";\n\ntype eventsInterface = {\n  id: number;\n  title: string;\n  allDay?: boolean;\n  start: Date;\n  end: Date;\n  desc?: string;\n};\n\ninterface CalendarViewProps {\n  //   REDUX ############################\n  sessionPlan: SessionPlanReducerInterface;\n  GetAllSessionPlans: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\ninterface CalendarViewState {\n  loading: boolean;\n  events: eventsInterface[] | null;\n}\n\nconst allViews: View[] = [\"month\", \"agenda\"];\nconst localizer: DateLocalizer = momentLocalizer(moment);\n\nclass CalendarView extends Component<CalendarViewProps, CalendarViewState> {\n  constructor(props: CalendarViewProps) {\n    super(props);\n\n    this.state = { loading: true, events: null };\n  }\n\n  setLoading = (state: boolean) => {\n    this.setState({ loading: state });\n  };\n\n  loadEvents = (allSession: SessionPlanInterface[]) => {\n    let allEvents: eventsInterface[] = [],\n      n: number = 1;\n    for (const key in allSession) {\n      if (Object.prototype.hasOwnProperty.call(allSession, key)) {\n        const thisSession = allSession[key];\n        for (const plan_key in thisSession.plans) {\n          if (\n            Object.prototype.hasOwnProperty.call(thisSession.plans, plan_key)\n          ) {\n            const thisPlan = thisSession.plans[plan_key];\n            const thisTitle: string =\n              thisPlan.type_key === PlansTypeKeys.APPLICATION\n                ? thisSession.session_plan_name + \" - Applications\"\n                : thisPlan.type_key === PlansTypeKeys.DOCUMENT_VALIDATION\n                ? thisSession.session_plan_name + \" - Document validation\"\n                : thisPlan.type_key === PlansTypeKeys.EXAMINATION\n                ? thisSession.session_plan_name + \" - Examination\"\n                : thisPlan.type_key === PlansTypeKeys.MARKS_PUBLICATION\n                ? thisSession.session_plan_name + \" - Marks publication\"\n                : thisPlan.type_key === PlansTypeKeys.PLACEMENT_TRANSFER\n                ? thisSession.session_plan_name + \" - Placement transfer\"\n                : thisSession.session_plan_name;\n            allEvents.push({\n              id: n,\n              title: thisTitle,\n              allDay: true,\n              start: moment(thisPlan.start_date).toDate(),\n              end: moment(thisPlan.end_date).toDate(),\n            });\n            n++;\n          }\n        }\n      }\n    }\n    this.setState({ events: allEvents });\n    n = 1;\n    allEvents = [];\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.sessionPlan.allSessionPlans === null ||\n      this.props.sessionPlan.allSessionPlans.length <= 0\n    ) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data: SessionPlanInterface[]) => {\n          this.setLoading(status);\n          if (!status && data) {\n            this.loadEvents(data);\n          }\n          if (!status && msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else {\n      this.loadEvents(this.props.sessionPlan.allSessionPlans);\n      this.setLoading(false);\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"my-3\">\n        {this.state.events && (\n          <Calendar\n            popup\n            localizer={localizer}\n            events={this.state.events}\n            defaultDate={new Date()}\n            views={allViews}\n            step={60}\n            showMultiDayTimes\n            onSelectEvent={(event) => alert(event.title)}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            className=\"min-h-screen\"\n            // style={{ height: \"100vh\" }}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  sessionPlan,\n}: StoreState): {\n  sessionPlan: SessionPlanReducerInterface;\n} => {\n  return {\n    sessionPlan,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  GetAllSessionPlans,\n  PushPopupAlert,\n})(CalendarView);\n","import axios from \"axios\";\nimport React, { Component, Fragment } from \"react\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport {\n  MdArrowBack,\n  MdEdit,\n  MdExpandLess,\n  MdExpandMore,\n} from \"react-icons/md\";\nimport { VscLoading } from \"react-icons/vsc\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../actions\";\nimport {\n  GetPlansTypes,\n  setSelectedPlanType,\n  GetAllSessionPlans,\n  createSessionPlan,\n  updateSessionPlan,\n  deleteSessionPlan,\n  sessionActivation,\n} from \"../../actions/session\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport TableLoading from \"../../components/Loading/TableLoading\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CreateSessionPlanInterface,\n  PlansInterface,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  SessionPlanTypeStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { SessionPlanReducerInterface } from \"../../reducers/session\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/functions\";\n// import FormSteps from \"./FormSteps\";\nimport SessionDetails from \"./SessionDetails\";\n\ninterface SessionSettingsProps {\n  isCreateDefault: boolean;\n\n  //   REDUX ############################\n  auth: Auth;\n  sessionPlan: SessionPlanReducerInterface;\n  GetPlansTypes: Function;\n  setSelectedPlanType: Function;\n  GetAllSessionPlans: Function;\n  createSessionPlan: Function;\n  updateSessionPlan: Function;\n  sessionActivation: Function;\n  deleteSessionPlan: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\ninterface SessionSettingsState {\n  loading: boolean;\n  createSession: boolean;\n  loadingRequest: string;\n  thisSession: SessionPlanInterface | null;\n  viewThisSession: SessionPlanInterface | null;\n  doAction: \"ACTIVATED\" | \"EDIT\" | \"DELETE\" | null;\n  sessionTitle: string;\n  sessionPeriod: string;\n  application_start: string;\n  application_end: string;\n  document_start: string;\n  document_end: string;\n  examination_start: string;\n  examination_end: string;\n  publication_start: string;\n  publication_end: string;\n  placement_start: string;\n  placement_end: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  // currentTab: \"ACTIVE\" | \"DELETED\";\n}\n\nexport class SessionSettings extends Component<\n  SessionSettingsProps,\n  SessionSettingsState\n> {\n  constructor(props: SessionSettingsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingRequest: \"\",\n      createSession: false,\n      thisSession: null,\n      viewThisSession: null,\n      doAction: null,\n      sessionTitle: \"\",\n      sessionPeriod: \"\",\n      application_start: \"\",\n      application_end: \"\",\n      document_start: \"\",\n      document_end: \"\",\n      examination_start: \"\",\n      examination_end: \"\",\n      publication_start: \"\",\n      publication_end: \"\",\n      placement_start: \"\",\n      placement_end: \"\",\n      formError: null,\n      // currentTab: \"ACTIVE\",\n    };\n  }\n\n  setLoading = (state: boolean) => {\n    this.setState({ loading: state });\n  };\n\n  setCreateSession = (state: boolean) => {\n    this.setState({ createSession: state });\n  };\n\n  setSessionTitle = (data: string) => {\n    this.setState({ sessionTitle: data });\n  };\n\n  setViewThisSession = (data: SessionPlanInterface) => {\n    if (this.state.viewThisSession === null) {\n      this.setState({ viewThisSession: data });\n    } else if (\n      this.state.viewThisSession.session_plan_id === data.session_plan_id\n    ) {\n      this.setState({ viewThisSession: null });\n    } else {\n      this.setState({ viewThisSession: data });\n    }\n  };\n\n  setSessionPeriod = (data: string) => {\n    this.setState({ sessionPeriod: data });\n  };\n\n  setFormError = (\n    data: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: data });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.sessionPlan.planTypes === null ||\n      this.props.sessionPlan.planTypes.length <= 0\n    ) {\n      this.props.GetPlansTypes((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status && msg.length > 0) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    }\n\n    if (\n      this.props.sessionPlan.planTypes !== null &&\n      this.props.sessionPlan.planTypes.length > 0\n    ) {\n      this.setLoading(false);\n    }\n\n    if (\n      this.props.sessionPlan.allSessionPlans === null ||\n      this.props.sessionPlan.allSessionPlans.length <= 0\n    ) {\n      this.props.GetAllSessionPlans((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status && msg.length > 0) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    }\n\n    if (!this.state.createSession) {\n      this.setCreateSession(this.props.isCreateDefault);\n    }\n  };\n\n  handleSessionActivation = async (session: SessionPlanInterface) => {\n    const newState: \"activate\" | \"deactivate\" = session.is_active\n      ? \"deactivate\"\n      : \"activate\";\n\n    if (!window.confirm(`Are you sure you want to ${newState} this session?`)) {\n      return true;\n    }\n\n    this.setState({ loadingRequest: session.session_plan_id });\n\n    try {\n      const res = await axios.put<SessionPlanInterface>(\n        `${API.CLAIMING}/session/active/${session.session_plan_id}`,\n        {\n          is_active: !session.is_active,\n        }\n      );\n      // this.props.sessionActivation(res.data);\n      this.props.GetAllSessionPlans((status: boolean, msg: string) => {\n        // this.setLoading(status);\n        if (!status && msg.length > 0) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n      this.props.PushPopupAlert({\n        title: `Session ${newState}d successfully`,\n        theme: PopupAlertTheme.info,\n      });\n      console.log(\"updateSessionPlan: \", res);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    this.setState({ loadingRequest: \"\" });\n  };\n\n  isDateRangeValid = (\n    planType:\n      | \"APPLICATION\"\n      | \"DOCUMENT\"\n      | \"EXAMINATION\"\n      | \"PUBLICATION\"\n      | \"PLACEMENT\",\n    level: \"START\" | \"END\",\n    thisDate: string\n  ): boolean => {\n    // let currentDate: Date = new Date(thisDate),\n    //   compareDate: Date;\n    // APPLICATION VALIDATION ============================\n    // if (planType === \"APPLICATION\") {\n    //   if (level === \"START\") {\n    //     compareDate = new Date(this.state.application_end);\n    //     let today = new Date(this.currentDate());\n    //     if (\n    //       this.state.thisSession !== null &&\n    //       currentDate.getTime() < today.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"application_period_start\",\n    //           msg: `Invalid date, application start period must be at least today ${this.currentDate()}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.application_end.length > 0 &&\n    //       currentDate.getTime() >= compareDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"application_period_end\",\n    //           msg: `Invalid date, must be greater than ${thisDate}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       this.state.formError.element === \"application_period_end\"\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return false;\n    //     }\n    //   } else {\n    //     compareDate = new Date(this.state.application_start);\n    //     if (\n    //       this.state.application_start.length > 0 &&\n    //       compareDate.getTime() >= currentDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"application_period_end\",\n    //           msg: `Invalid date, must be greater than ${this.state.application_start}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (isEmptyOrSpaces(this.state.application_start)) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"application_period_start\",\n    //           msg: `Application period start date is required`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       (this.state.formError.element === \"application_period_end\" ||\n    //         this.state.formError.element === \"application_period_start\")\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   }\n    // }\n\n    // DOCUMENT VALIDATION ============================\n    // if (planType === \"DOCUMENT\") {\n    //   if (level === \"START\") {\n    //     compareDate = new Date(this.state.document_end);\n    //     let application_end = new Date(this.state.application_end);\n    //     if (currentDate.getTime() <= application_end.getTime()) {\n    //       console.log({\n    //         currentDate: currentDate.getTime(),\n    //         application_end: application_end.getTime(),\n    //       });\n    //       this.setState({\n    //         formError: {\n    //           element: \"document_period_start\",\n    //           msg: `Invalid date, document validation must start after application period end`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.document_end.length > 0 &&\n    //       currentDate.getTime() >= compareDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"document_period_end\",\n    //           msg: `Invalid date, must be greater than ${thisDate}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       this.state.formError.element === \"document_period_end\"\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   } else {\n    //     compareDate = new Date(this.state.document_start);\n    //     if (\n    //       this.state.document_start.length > 0 &&\n    //       compareDate.getTime() >= currentDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"document_period_end\",\n    //           msg: `Invalid date, must be greater than ${this.state.document_start}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (isEmptyOrSpaces(this.state.document_start)) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"document_period_start\",\n    //           msg: `Document validation period start date is required`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       (this.state.formError.element === \"document_period_end\" ||\n    //         this.state.formError.element === \"document_period_start\")\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   }\n    // }\n\n    // EXAMINATION VALIDATION ============================\n    // if (planType === \"EXAMINATION\") {\n    //   if (level === \"START\") {\n    //     compareDate = new Date(this.state.examination_end);\n    //     let document_end = new Date(this.state.document_end);\n    //     if (currentDate.getTime() <= document_end.getTime()) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"examination_period_start\",\n    //           msg: `Invalid date, examination must start after document validation period end`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.examination_end.length > 0 &&\n    //       currentDate.getTime() >= compareDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"examination_period_end\",\n    //           msg: `Invalid date, must be greater than ${thisDate}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       this.state.formError.element === \"examination_period_end\"\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   } else {\n    //     compareDate = new Date(this.state.document_start);\n    //     if (\n    //       this.state.document_start.length > 0 &&\n    //       compareDate.getTime() >= currentDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"examination_period_end\",\n    //           msg: `Invalid date, must be greater than ${this.state.document_start}`,\n    //         },\n    //       });\n    //     } else if (isEmptyOrSpaces(this.state.document_start)) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"examination_period_start\",\n    //           msg: `Examination period start date is required`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       (this.state.formError.element === \"examination_period_end\" ||\n    //         this.state.formError.element === \"examination_period_start\")\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   }\n    // }\n\n    // PUBLICATION VALIDATION ============================\n    // if (planType === \"PUBLICATION\") {\n    //   if (level === \"START\") {\n    //     compareDate = new Date(this.state.publication_end);\n    //     let examination_end = new Date(this.state.examination_end);\n    //     if (currentDate.getTime() <= examination_end.getTime()) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"publication_period_start\",\n    //           msg: `Invalid date, marks publication must start after examination period end`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.publication_end.length > 0 &&\n    //       currentDate.getTime() >= compareDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"publication_period_end\",\n    //           msg: `Invalid date, must be greater than ${thisDate}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       this.state.formError.element === \"publication_period_end\"\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   } else {\n    //     compareDate = new Date(this.state.document_start);\n    //     if (\n    //       this.state.document_start.length > 0 &&\n    //       compareDate.getTime() >= currentDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"publication_period_end\",\n    //           msg: `Invalid date, must be greater than ${this.state.document_start}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (isEmptyOrSpaces(this.state.document_start)) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"publication_period_start\",\n    //           msg: `Marks publication period start date is required`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       (this.state.formError.element === \"publication_period_end\" ||\n    //         this.state.formError.element === \"publication_period_start\")\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   }\n    // }\n\n    // PLACEMENT VALIDATION ============================\n    // if (planType === \"PLACEMENT\") {\n    //   if (level === \"START\") {\n    //     compareDate = new Date(this.state.placement_end);\n    //     let publication_end = new Date(this.state.publication_end);\n    //     if (currentDate.getTime() <= publication_end.getTime()) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"placement_period_start\",\n    //           msg: `Invalid date, Placement must start after marks publication period end`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.placement_end.length > 0 &&\n    //       currentDate.getTime() >= compareDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"placement_period_end\",\n    //           msg: `Invalid date, must be greater than ${thisDate}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       this.state.formError.element === \"placement_period_end\"\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   } else {\n    //     compareDate = new Date(this.state.document_start);\n    //     if (\n    //       this.state.document_start.length > 0 &&\n    //       compareDate.getTime() >= currentDate.getTime()\n    //     ) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"placement_period_end\",\n    //           msg: `Invalid date, must be greater than ${this.state.document_start}`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (isEmptyOrSpaces(this.state.document_start)) {\n    //       this.setState({\n    //         formError: {\n    //           element: \"placement_period_start\",\n    //           msg: `Placement period start date is required`,\n    //         },\n    //       });\n    //       return false;\n    //     } else if (\n    //       this.state.formError &&\n    //       (this.state.formError.element === \"placement_period_end\" ||\n    //         this.state.formError.element === \"placement_period_start\")\n    //     ) {\n    //       this.setState({\n    //         formError: null,\n    //       });\n    //       return true;\n    //     }\n    //   }\n    // }\n\n    return true;\n  };\n\n  currentDate = (): string => {\n    let today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1; //January is 0!\n    let yyyy = today.getFullYear(),\n      date: string = dd.toString(),\n      month: string = mm.toString();\n\n    if (dd < 10) {\n      date = \"0\" + dd;\n    }\n\n    if (mm < 10) {\n      month = \"0\" + mm;\n    }\n\n    return yyyy + \"-\" + month + \"-\" + date;\n  };\n\n  setPlansForUpdate = (data: PlansInterface[]) => {\n    this.setState({\n      application_start: data.find(\n        (item) => item.type_key === PlansTypeKeys.APPLICATION\n      )\n        ? data.find((item) => item.type_key === PlansTypeKeys.APPLICATION)!\n            .start_date\n        : \"\",\n      application_end: data.find(\n        (item) => item.type_key === PlansTypeKeys.APPLICATION\n      )\n        ? data.find((item) => item.type_key === PlansTypeKeys.APPLICATION)!\n            .end_date\n        : \"\",\n      document_start: data.find(\n        (item) => item.type_key === PlansTypeKeys.DOCUMENT_VALIDATION\n      )\n        ? data.find(\n            (item) => item.type_key === PlansTypeKeys.DOCUMENT_VALIDATION\n          )!.start_date\n        : \"\",\n      document_end: data.find(\n        (item) => item.type_key === PlansTypeKeys.DOCUMENT_VALIDATION\n      )\n        ? data.find(\n            (item) => item.type_key === PlansTypeKeys.DOCUMENT_VALIDATION\n          )!.end_date\n        : \"\",\n      examination_start: data.find(\n        (item) => item.type_key === PlansTypeKeys.EXAMINATION\n      )\n        ? data.find((item) => item.type_key === PlansTypeKeys.EXAMINATION)!\n            .start_date\n        : \"\",\n      examination_end: data.find(\n        (item) => item.type_key === PlansTypeKeys.EXAMINATION\n      )\n        ? data.find((item) => item.type_key === PlansTypeKeys.EXAMINATION)!\n            .end_date\n        : \"\",\n      publication_start: data.find(\n        (item) => item.type_key === PlansTypeKeys.MARKS_PUBLICATION\n      )\n        ? data.find(\n            (item) => item.type_key === PlansTypeKeys.MARKS_PUBLICATION\n          )!.start_date\n        : \"\",\n      publication_end: data.find(\n        (item) => item.type_key === PlansTypeKeys.MARKS_PUBLICATION\n      )\n        ? data.find(\n            (item) => item.type_key === PlansTypeKeys.MARKS_PUBLICATION\n          )!.end_date\n        : \"\",\n      placement_start: data.find(\n        (item) => item.type_key === PlansTypeKeys.PLACEMENT_TRANSFER\n      )\n        ? data.find(\n            (item) => item.type_key === PlansTypeKeys.PLACEMENT_TRANSFER\n          )!.start_date\n        : \"\",\n      placement_end: data.find(\n        (item) => item.type_key === PlansTypeKeys.PLACEMENT_TRANSFER\n      )\n        ? data.find(\n            (item) => item.type_key === PlansTypeKeys.PLACEMENT_TRANSFER\n          )!.end_date\n        : \"\",\n    });\n  };\n\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (isEmptyOrSpaces(this.state.sessionTitle)) {\n      return this.setFormError({\n        element: \"title\",\n        msg: \"Please fill the session plan title\",\n      });\n    }\n    if (isEmptyOrSpaces(this.state.sessionPeriod)) {\n      return this.setFormError({\n        element: \"period\",\n        msg: \"Please fill session plan period\",\n      });\n    }\n\n    if (isEmptyOrSpaces(this.state.application_start)) {\n      return this.setFormError({\n        element: \"application_period_start\",\n        msg: \"Application period start date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\n        \"APPLICATION\",\n        \"START\",\n        this.state.application_start\n      )\n    ) {\n      return false;\n    }\n\n    if (isEmptyOrSpaces(this.state.application_end)) {\n      return this.setFormError({\n        element: \"application_period_end\",\n        msg: \"Application period end date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\"APPLICATION\", \"END\", this.state.application_end)\n    ) {\n      return true;\n    }\n\n    if (isEmptyOrSpaces(this.state.document_start)) {\n      return this.setFormError({\n        element: \"document_period_start\",\n        msg: \"Document validation period start date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\"DOCUMENT\", \"START\", this.state.document_start)\n    ) {\n      return false;\n    }\n\n    if (isEmptyOrSpaces(this.state.document_end)) {\n      return this.setFormError({\n        element: \"document_period_end\",\n        msg: \"Document validation period end date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\"DOCUMENT\", \"END\", this.state.document_end)\n    ) {\n      return true;\n    }\n\n    if (isEmptyOrSpaces(this.state.examination_start)) {\n      return this.setFormError({\n        element: \"examination_period_start\",\n        msg: \"Examination period start date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\n        \"EXAMINATION\",\n        \"START\",\n        this.state.examination_start\n      )\n    ) {\n      return false;\n    }\n\n    if (isEmptyOrSpaces(this.state.examination_end)) {\n      return this.setFormError({\n        element: \"examination_period_end\",\n        msg: \"Examination period end date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\"EXAMINATION\", \"END\", this.state.examination_end)\n    ) {\n      return true;\n    }\n\n    if (isEmptyOrSpaces(this.state.publication_start)) {\n      return this.setFormError({\n        element: \"publication_period_start\",\n        msg: \"Marks publication period start date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\n        \"PUBLICATION\",\n        \"START\",\n        this.state.publication_start\n      )\n    ) {\n      return false;\n    }\n\n    if (isEmptyOrSpaces(this.state.publication_end)) {\n      return this.setFormError({\n        element: \"publication_period_end\",\n        msg: \"Marks publication period end date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\"PUBLICATION\", \"END\", this.state.publication_end)\n    ) {\n      return true;\n    }\n\n    if (isEmptyOrSpaces(this.state.placement_start)) {\n      return this.setFormError({\n        element: \"placement_period_start\",\n        msg: \"Placement period start date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\"PLACEMENT\", \"START\", this.state.placement_start)\n    ) {\n      return false;\n    }\n\n    if (isEmptyOrSpaces(this.state.placement_end)) {\n      return this.setFormError({\n        element: \"placement_period_end\",\n        msg: \"Placement period end date is required\",\n      });\n    } else if (\n      !this.isDateRangeValid(\"PLACEMENT\", \"END\", this.state.placement_end)\n    ) {\n      return true;\n    }\n\n    let createFormData: CreateSessionPlanInterface = {\n      session_plan_name: this.state.sessionTitle,\n      period: this.state.sessionPeriod,\n      plans: [\n        {\n          type_key: PlansTypeKeys.APPLICATION,\n          type_status: SessionPlanTypeStatus.OPEN,\n          start_date: this.state.application_start,\n          end_date: this.state.application_end,\n        },\n        {\n          type_key: PlansTypeKeys.DOCUMENT_VALIDATION,\n          type_status: SessionPlanTypeStatus.OPEN,\n          start_date: this.state.document_start,\n          end_date: this.state.document_end,\n        },\n        {\n          type_key: PlansTypeKeys.EXAMINATION,\n          type_status: SessionPlanTypeStatus.OPEN,\n          start_date: this.state.examination_start,\n          end_date: this.state.examination_end,\n        },\n        {\n          type_key: PlansTypeKeys.MARKS_PUBLICATION,\n          type_status: SessionPlanTypeStatus.OPEN,\n          start_date: this.state.publication_start,\n          end_date: this.state.publication_end,\n        },\n        {\n          type_key: PlansTypeKeys.PLACEMENT_TRANSFER,\n          type_status: SessionPlanTypeStatus.OPEN,\n          start_date: this.state.placement_start,\n          end_date: this.state.placement_end,\n        },\n      ],\n    };\n\n    console.log(\"====================================\");\n    console.log({ createFormData });\n    console.log(\"====================================\");\n\n    this.setState({\n      loadingRequest: this.state.thisSession\n        ? this.state.thisSession.session_plan_id\n        : \"true\",\n    });\n\n    try {\n      // Update current\n      if (this.state.thisSession !== null) {\n        const res = await axios.put<SessionPlanInterface>(\n          `${API.CLAIMING}/session/${this.state.thisSession.session_plan_id}`,\n          {\n            session_plan_name: this.state.sessionTitle,\n            period: this.state.sessionPeriod,\n            is_active: this.state.thisSession.is_active,\n            plans: [\n              {\n                type_key: PlansTypeKeys.APPLICATION,\n                start_date: this.state.application_start,\n                // type_status:this.state.thisSession.\n                end_date: this.state.application_end,\n              },\n              {\n                type_key: PlansTypeKeys.DOCUMENT_VALIDATION,\n                start_date: this.state.document_start,\n                // type_status:this.state.thisSession.\n                end_date: this.state.document_end,\n              },\n              {\n                type_key: PlansTypeKeys.EXAMINATION,\n                start_date: this.state.examination_start,\n                // type_status:this.state.thisSession.\n                end_date: this.state.examination_end,\n              },\n              {\n                type_key: PlansTypeKeys.MARKS_PUBLICATION,\n                start_date: this.state.publication_start,\n                end_date: this.state.publication_end,\n              },\n              {\n                type_key: PlansTypeKeys.PLACEMENT_TRANSFER,\n                start_date: this.state.placement_start,\n                // type_status:this.state.thisSession.\n                end_date: this.state.placement_end,\n              },\n            ],\n          }\n        );\n        this.props.updateSessionPlan(res.data);\n        this.props.PushPopupAlert({\n          title: `Session Plan updated successfully`,\n          theme: PopupAlertTheme.info,\n        });\n        this.setState({\n          formError: null,\n          sessionTitle: \"\",\n          sessionPeriod: \"\",\n          application_start: \"\",\n          application_end: \"\",\n          document_start: \"\",\n          document_end: \"\",\n          examination_start: \"\",\n          examination_end: \"\",\n          publication_start: \"\",\n          publication_end: \"\",\n          placement_start: \"\",\n          placement_end: \"\",\n          thisSession: null,\n          createSession: false,\n        });\n        console.log(\"updateSessionPlan: \", res);\n      } else {\n        // Add new\n        const res = await axios.post<SessionPlanInterface>(\n          `${API.CLAIMING}/session`,\n          createFormData\n        );\n        this.props.createSessionPlan(res.data);\n        this.props.PushPopupAlert({\n          title: `Session plan created successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        this.setState({\n          formError: null,\n          sessionTitle: \"\",\n          sessionPeriod: \"\",\n          application_start: \"\",\n          application_end: \"\",\n          document_start: \"\",\n          document_end: \"\",\n          examination_start: \"\",\n          examination_end: \"\",\n          publication_start: \"\",\n          publication_end: \"\",\n          placement_start: \"\",\n          placement_end: \"\",\n          thisSession: null,\n          createSession: false,\n        });\n        console.log(\"createPlanType: \", res);\n      }\n    } catch (error) {\n      this.props.PushPopupAlert({\n        title: `${errorToText(error)}! Try again`,\n        theme: PopupAlertTheme.danger,\n      });\n      console.error(\"Err: \", { error });\n    }\n    this.setState({ loadingRequest: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"my-2\">\n        {/* HEADER TITLE ===================================== */}\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          {this.state.createSession && (\n            <div className=\"flex items-center gap-2\">\n              <button\n                className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                  this.state.loadingRequest.length > 0\n                    ? true\n                    : false\n                    ? \"cursor-not-allowed\"\n                    : \"cursor-pointer\"\n                } animate__animated animate__fadeIn`}\n                disabled={this.state.loadingRequest.length > 0 ? true : false}\n                onClick={() => {\n                  this.setState({\n                    formError: null,\n                    sessionTitle: \"\",\n                    sessionPeriod: \"\",\n                    thisSession: null,\n                    createSession: false,\n                    application_start: \"\",\n                    document_start: \"\",\n                    examination_start: \"\",\n                    publication_start: \"\",\n                    placement_start: \"\",\n                    application_end: \"\",\n                    document_end: \"\",\n                    examination_end: \"\",\n                    publication_end: \"\",\n                    placement_end: \"\",\n                  });\n                }}\n              >\n                <MdArrowBack className=\"w-7 h-7\" />\n              </button>\n\n              <div className=\"font-extrabold text-2xl text-gray-500\">\n                {this.state.thisSession !== null\n                  ? this.state.thisSession.session_plan_name\n                  : \"Add New Session Plan\"}\n              </div>\n            </div>\n          )}\n          {!this.state.createSession && (\n            <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n              Session plans\n              {/* SUB TABS ============================ */}\n              {/* <section className=\"flex items-start md:items-center justify-start md:justify-end gap-1 my-2\">\n              <span className=\"text-sm text-gray-600\">Status: </span>\n              <div\n                className={`w-auto ${\n                  this.state.currentTab === \"ACTIVE\"\n                    ? \"bg-blue-500 text-white font-bold cursor-default\"\n                    : \"bg-gray-100 text-gray-800 cursor-pointer\"\n                } hover:font-bold py-1 hover:bg-blue-400 hover:text-white --font-bold  px-2 rounded-md flex items-center animate__animated animate__zoomIn`}\n                onClick={() =>\n                  isEmptyOrSpaces(this.state.loadingRequest) &&\n                  this.state.currentTab !== \"ACTIVE\" &&\n                  this.setState({ currentTab: \"ACTIVE\" })\n                }\n              >\n                <div className=\"flex-1 text-xs\">\n                  <MdBrightness1 className=\"inline-block mr-1 text-xs\" />\n                  <span>Active</span>\n                </div>\n              </div>\n              <div\n                className={`w-auto ${\n                  this.state.currentTab === \"DELETED\"\n                    ? \"bg-red-500 text-white font-bold cursor-default\"\n                    : \"bg-gray-100 text-gray-800 cursor-pointer\"\n                } hover:font-bold py-1 hover:bg-red-400 hover:text-white --font-bold  px-2 rounded-md flex items-center animate__animated animate__zoomIn`}\n                onClick={() => {\n                  isEmptyOrSpaces(this.state.loadingRequest) &&\n                    this.state.currentTab !== \"DELETED\" &&\n                    this.setState({ currentTab: \"DELETED\" });\n                  this.loadDeletedPlanType();\n                }}\n              >\n                <div className=\"flex-1 text-xs\">\n                  <MdBrightness1 className=\"inline-block mr-1 text-xs\" />\n                  <span>Deleted</span>\n                </div>\n              </div>\n            </section> */}\n            </div>\n          )}\n          {this.state.loading === false && !this.state.createSession && (\n            <div\n              onClick={() => this.setCreateSession(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        {/* END HEADER TITLE ===================================== */}\n        {/* ###################################################################### */}\n        {/* CONTENT ===================================== */}\n        {!this.state.createSession && (\n          <div className=\"flex flex-col my-2\">\n            <table className=\"w-full shadow\" id=\"session_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Session title</td>\n                  <td className=\"px-2 py-2\">Period</td>\n                  <td className=\"px-2 py-2\">Status</td>\n                  {this.state.viewThisSession && (\n                    <td className=\"px-2 py-2\"></td>\n                  )}\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {/* WHILE STILL LOADING ====================== */}\n                {this.props.sessionPlan.allSessionPlans === null && (\n                  <TableLoading cols={5} />\n                )}\n                {/* WHILE NO DATA FOUND ====================== */}\n                {this.props.sessionPlan.allSessionPlans !== null &&\n                  !this.state.loading &&\n                  this.props.sessionPlan.allSessionPlans.length <= 0 && (\n                    <tr>\n                      <td colSpan={5} className=\"px-2 py-2\">\n                        <NoResult\n                          theme={NoResultThemes.Dark}\n                          value={\"No session plan found!\"}\n                          component={\n                            <div className=\"w-full mt-2 flex flex-row items-center justify-center\">\n                              <ul className=\"text-base py-2 text-blue-600 font-bold flex flex-row gap-2\">\n                                <li\n                                  onClick={() => this.setCreateSession(true)}\n                                  className=\"underline text-blue-600 cursor-pointer\"\n                                >\n                                  Create new session\n                                </li>\n                              </ul>\n                            </div>\n                          }\n                        />\n                      </td>\n                    </tr>\n                  )}\n                {/* WHILE NO DATA FOUND ====================== */}\n                {this.props.sessionPlan.allSessionPlans !== null &&\n                  !this.state.loading &&\n                  this.props.sessionPlan.allSessionPlans.length > 0 &&\n                  this.props.sessionPlan.allSessionPlans.map((item, index) => (\n                    <Fragment key={index + item.session_plan_id}>\n                      <tr\n                        className={`border-b border-gray-200 hover:bg-gray-100 group cursor-pointer ${\n                          this.state.viewThisSession &&\n                          this.state.viewThisSession.session_plan_id ===\n                            item.session_plan_id &&\n                          \"border-blue-600 bg-blue-200\"\n                        }`}\n                        onClick={() => {\n                          this.state.loadingRequest.length <= 0 &&\n                            this.setViewThisSession(item);\n                        }}\n                      >\n                        <td className=\"p-3 text-left whitespace-nowrap\">\n                          {index + 1}\n                        </td>\n                        <td className=\"p-3 text-left\">\n                          <span className=\"text-lg\">\n                            {capitalizeFirstLetter(item.session_plan_name)}\n                          </span>\n                        </td>\n                        <td className=\"p-3 text-left\">{item.period}</td>\n                        <td>\n                          {item.is_active ? (\n                            <span\n                              className={`px-2 py-1 font-semibold text-green-700`}\n                            >\n                              Active\n                            </span>\n                          ) : (\n                            <span\n                              className={`px-2 py-1 font-semibold text-red-700`}\n                            >\n                              Inactive\n                            </span>\n                          )}\n                        </td>\n                        {this.state.viewThisSession &&\n                          this.state.viewThisSession.session_plan_id ===\n                            item.session_plan_id && (\n                            <td>\n                              <div className=\"flex items-center justify-center gap-1\">\n                                <div\n                                  className={`relative ${\n                                    this.state.loadingRequest.length > 0 ||\n                                    item.is_active\n                                      ? \"cursor-not-allowed\"\n                                      : \"cursor-pointer\"\n                                  }`}\n                                  title={\n                                    item.is_active\n                                      ? \"Activate another session to close this one!\"\n                                      : \"Activation of a session\"\n                                  }\n                                  onClick={() =>\n                                    this.state.loadingRequest.length <= 0 &&\n                                    !item.is_active &&\n                                    this.handleSessionActivation(item)\n                                  }\n                                >\n                                  <span className=\"block w-14 h-8 bg-gray-100 rounded-full shadow-inner\"></span>\n                                  <span\n                                    className={`absolute block w-6 h-6 mt-1 ml-1 rounded-full shadow inset-y-0 left-0 focus-within:shadow-outline transition-transform duration-500 ease-in-out ${\n                                      !item.is_active\n                                        ? \"bg-red-500\"\n                                        : \"bg-green-500 transform translate-x-full\"\n                                    }`}\n                                  ></span>\n                                </div>\n                                {this.state.loadingRequest ===\n                                  item.session_plan_id &&\n                                  this.state.doAction &&\n                                  this.state.doAction === \"ACTIVATED\" && (\n                                    <VscLoading className=\"animate__animated animate__rotateIn animate__infinite\" />\n                                  )}\n                              </div>\n                            </td>\n                          )}\n                        <td\n                          className=\"px-5 text-center\"\n                          colSpan={\n                            this.state.viewThisSession &&\n                            this.state.viewThisSession.session_plan_id !==\n                              item.session_plan_id\n                              ? 2\n                              : 0\n                          }\n                        >\n                          <div className=\"flex flex-row items-center gap-2 justify-end\">\n                            {this.state.viewThisSession &&\n                              this.state.viewThisSession.session_plan_id ===\n                                item.session_plan_id && (\n                                <div className=\"flex items-center gap-2\">\n                                  <div\n                                    onClick={() => {\n                                      this.state.loadingRequest.length <= 0 &&\n                                        this.setState({\n                                          thisSession: item,\n                                          createSession: true,\n                                          sessionTitle: item.session_plan_name,\n                                          sessionPeriod: item.period,\n                                        });\n                                      this.setPlansForUpdate(item.plans);\n                                    }}\n                                    className={`bg-gray-50 hover:bg-blue-200 rounded-full px-1 py-1 ${\n                                      this.state.loadingRequest.length > 0\n                                        ? \"cursor-not-allowed\"\n                                        : \"cursor-pointer\"\n                                    }`}\n                                  >\n                                    <MdEdit className=\"text-3xl text-blue-700\" />\n                                  </div>\n                                  <div\n                                    // onClick={() => this.deletePlanType(item)}\n                                    className={`bg-gray-50 hover:bg-red-200 flex items-center rounded-full px-1 py-1 ${\n                                      this.state.loadingRequest.length > 0\n                                        ? \"cursor-not-allowed\"\n                                        : \"cursor-pointer\"\n                                    }`}\n                                  >\n                                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                                    {this.state.loadingRequest ===\n                                      item.session_plan_id &&\n                                      this.state.doAction &&\n                                      this.state.doAction === \"DELETE\" && (\n                                        <VscLoading className=\"animate__animated animate__rotateIn animate__infinite\" />\n                                      )}\n                                  </div>\n                                </div>\n                              )}\n                            <div\n                              onClick={() => {\n                                this.state.loadingRequest.length <= 0 &&\n                                  this.setViewThisSession(item);\n                              }}\n                              className={`bg-gray-50 group-hover:bg-blue-200 rounded-full px-1 py-1 ${\n                                this.state.loadingRequest.length > 0\n                                  ? \"cursor-not-allowed\"\n                                  : \"cursor-pointer\"\n                              }`}\n                            >\n                              {this.state.viewThisSession &&\n                              this.state.viewThisSession.session_plan_id ===\n                                item.session_plan_id ? (\n                                <MdExpandLess className=\"text-3xl text-gray-700\" />\n                              ) : (\n                                <MdExpandMore className=\"text-3xl text-gray-700\" />\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                      {this.state.viewThisSession &&\n                        this.state.viewThisSession.session_plan_id ===\n                          item.session_plan_id && (\n                          <tr className=\"bg-gray-200\">\n                            <td colSpan={6} className=\"px-3 py-2\">\n                              <SessionDetails\n                                viewThisSession={this.state.viewThisSession}\n                                setViewThisSession={this.setViewThisSession}\n                              />\n                            </td>\n                          </tr>\n                        )}\n                    </Fragment>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n        {/* END CONTENT ===================================== */}\n        {/* PLAN TYPES FORM =========================================== */}\n        {this.state.createSession && (\n          <section className=\"grid grid-cols-1 sm:grid-cols-4 gap-4\">\n            {/* TESTING ================== */}\n            {/* <FormSteps /> */}\n            <div className=\"col-span-1 sm:col-span-4 flex flex-col mx-4 my-6\">\n              <form onSubmit={this.handleSubmit} className=\"-mt-2\">\n                <div className=\"flex flex-col mb-2\">\n                  <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                    Session title\n                  </span>\n                  <input\n                    disabled={\n                      this.state.loadingRequest.length > 0 ? true : false\n                    }\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      this.setSessionTitle(e.target.value);\n                      this.setFormError(null);\n                    }}\n                    type=\"text\"\n                    value={this.state.sessionTitle}\n                    className={`input-white border-2 ${\n                      this.state.formError !== null &&\n                      this.state.formError.element === \"title\"\n                        ? \"border-red-500\"\n                        : \"border-gray-500\"\n                    }`}\n                  />\n                  {this.state.formError !== null &&\n                    this.state.formError.element === \"title\" && (\n                      <span className=\"text-red-600 font-bold text-xs\">\n                        {this.state.formError.msg}\n                      </span>\n                    )}\n                </div>\n                <div className=\"flex flex-col mb-2\">\n                  <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                    Session period\n                  </span>\n                  <input\n                    disabled={\n                      this.state.loadingRequest.length > 0 ? true : false\n                    }\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      this.setSessionPeriod(e.target.value);\n                      this.setFormError(null);\n                    }}\n                    type=\"text\"\n                    value={this.state.sessionPeriod}\n                    className={`input-white border-2 ${\n                      this.state.formError !== null &&\n                      this.state.formError.element === \"period\"\n                        ? \"border-red-500\"\n                        : \"border-gray-500\"\n                    }`}\n                  />\n                  {this.state.formError !== null &&\n                    this.state.formError.element === \"period\" && (\n                      <span className=\"text-red-600 font-bold text-xs\">\n                        {this.state.formError.msg}\n                      </span>\n                    )}\n                </div>\n                <div className=\"w-full mb-2\">\n                  <h6 className=\"text-blueGray-400 text-sm mt-3 mb-1 font-bold uppercase\">\n                    Application Session period\n                  </h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 my-1 gap-2\">\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        Start\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ application_start: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"APPLICATION\",\n                            \"START\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.application_start}\n                        min={this.state.thisSession ? \"\" : this.currentDate()}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"application_period_start\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"application_period_start\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        End\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ application_end: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"APPLICATION\",\n                            \"END\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.application_end}\n                        // min={this.state.application_start}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"application_period_end\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"application_period_end\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"w-full mb-2\">\n                  <h6 className=\"text-blueGray-400 text-sm mt-3 mb-1 font-bold uppercase\">\n                    Document Validation Session period\n                  </h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 my-1 gap-2\">\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        Start{\" \"}\n                        {this.state.formError !== null &&\n                          this.state.formError.element}\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ document_start: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"DOCUMENT\",\n                            \"START\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.document_start}\n                        // min={this.state.application_end}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"document_period_start\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"document_period_start\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        End\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ document_end: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"DOCUMENT\",\n                            \"END\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.document_end}\n                        // min={this.state.document_start}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element === \"document_period_end\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"document_period_end\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"w-full mb-2\">\n                  <h6 className=\"text-blueGray-400 text-sm mt-3 mb-1 font-bold uppercase\">\n                    Examination Session period\n                  </h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 my-1 gap-2\">\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        Start\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ examination_start: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"EXAMINATION\",\n                            \"START\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.examination_start}\n                        // min={this.state.document_end}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"examination_period_start\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"examination_period_start\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        End\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ examination_end: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"EXAMINATION\",\n                            \"END\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.examination_end}\n                        // min={this.state.examination_start}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"examination_period_end\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"examination_period_end\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"w-full mb-2\">\n                  <h6 className=\"text-blueGray-400 text-sm mt-3 mb-1 font-bold uppercase\">\n                    Marks Publication Session period\n                  </h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 my-1 gap-2\">\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        Start\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ publication_start: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"PUBLICATION\",\n                            \"START\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.publication_start}\n                        // min={this.state.examination_end}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"publication_period_start\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"publication_period_start\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        End\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ publication_end: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"PUBLICATION\",\n                            \"END\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.publication_end}\n                        // min={this.state.publication_start}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"publication_period_end\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"publication_period_end\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"w-full mb-2\">\n                  <h6 className=\"text-blueGray-400 text-sm mt-3 mb-1 font-bold uppercase\">\n                    Placement & Transfer Session period\n                  </h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 my-1 gap-2\">\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        Start\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ placement_start: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"PLACEMENT\",\n                            \"START\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.placement_start}\n                        // min={this.state.publication_end}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"placement_period_start\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"placement_period_start\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    <div className=\"w-full\">\n                      <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                        End\n                      </span>\n                      <input\n                        disabled={\n                          this.state.loadingRequest.length > 0 ? true : false\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({ placement_end: e.target.value });\n                          this.setFormError(null);\n                          this.isDateRangeValid(\n                            \"PLACEMENT\",\n                            \"END\",\n                            e.target.value\n                          );\n                        }}\n                        type=\"date\"\n                        value={this.state.placement_end}\n                        // min={this.state.placement_start}\n                        className={`input-white border-2 ${\n                          this.state.formError !== null &&\n                          this.state.formError.element ===\n                            \"placement_period_end\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        }`}\n                      />\n                      {this.state.formError !== null &&\n                        this.state.formError.element ===\n                          \"placement_period_end\" && (\n                          <span className=\"text-red-600 font-bold text-xs\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-row justify-between items-center\">\n                  <button\n                    disabled={\n                      this.state.loadingRequest.length > 0 ? true : false\n                    }\n                    type=\"button\"\n                    className={`btn bg-gray-500 hover:bg-gray-700 text-white`}\n                    onClick={() => {\n                      this.setState({\n                        formError: null,\n                        sessionTitle: \"\",\n                        sessionPeriod: \"\",\n                        thisSession: null,\n                        createSession: false,\n                        application_start: \"\",\n                        document_start: \"\",\n                        examination_start: \"\",\n                        publication_start: \"\",\n                        placement_start: \"\",\n                        application_end: \"\",\n                        document_end: \"\",\n                        examination_end: \"\",\n                        publication_end: \"\",\n                        placement_end: \"\",\n                      });\n                    }}\n                  >\n                    Close\n                  </button>\n\n                  <button\n                    disabled={\n                      this.state.loadingRequest.length > 0 ? true : false\n                    }\n                    type=\"submit\"\n                    className={`btn btn-blue text-white ${\n                      this.state.loadingRequest.length > 0\n                        ? \"animate__animated animate__flash animate__infinite cursor-wait\"\n                        : \"\"\n                    }`}\n                  >\n                    {this.state.loadingRequest.length > 0\n                      ? \"Please wait...\"\n                      : this.state.thisSession !== null\n                      ? \"Update\"\n                      : \"Create\"}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </section>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n}: StoreState): {\n  auth: Auth;\n  sessionPlan: SessionPlanReducerInterface;\n} => {\n  return {\n    auth,\n    sessionPlan,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  GetPlansTypes,\n  setSelectedPlanType,\n  GetAllSessionPlans,\n  createSessionPlan,\n  updateSessionPlan,\n  sessionActivation,\n  deleteSessionPlan,\n  PushPopupAlert,\n})(SessionSettings);\n"],"sourceRoot":""}