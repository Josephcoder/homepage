{"version":3,"sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/QuestionBank/AddQuestion/UploadQuestion/UploadedQuestions/UploadedQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/Upload.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/UploadQuestion.tsx"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","UploadedQuestions","connect","auth","course","schoolLevels","questionBank","prepareExam","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","setSelectedCourse","addExamQuestion","IncrementQuestionBank","props","useState","loading","setLoading","redirect","setRedirect","setExam","setSetExam","useEffect","questionTypes","loadQuestionTypes","to","className","uploadedQuestions","insertedData","selectedCourse","course_id","courses","find","itm","course_name","onClick","selected","returnToCourse","insertedCount","window","confirm","selected_course","questions","x","addToExam","selectedQuestion","clearUploadedQuestionsStore","Loading","map","item","selectQuestion","id","type","title","question","description","Upload","loadQuestionBank","setQuestions","formError","setFormError","upload_percentage","set_upload_percentage","showQuestionEdit","setShowQuestionEdit","validateExcelFile","file","a","element","msg","submitQuestion","e","preventDefault","size","setUploadingStatus","formData","FormData","append","axios","post","API","QBank","onUploadProgress","progressEvent","number_percentage","loaded","total","res","status","data","console","log","response","errors","message","course_code","onSubmit","onChange","target","files","name","Math","round","Alert","theme","AlertInterface","danger","style","width","EditQuestion","questionsList","unSelectQuestion","_UploadQuestion","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","showFilter","setSchoolLevelFilterFn","filteredCourses","searched","filtered","filter","school_levels","itm1","school_level_id","item2","uploadingStatus","componentDidMount","state","searchCourseInput","this","Courses","selected_course_id","Modal","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","SchoolLevelsFilter","educationCategories","education_categories","Component","UploadQuestion"],"mappings":"yJAGA,IAAIA,EACAC,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAKH,KAGHA,EAAoC,qBAAXI,QAA0BA,OAAOJ,iBAAmBI,OAAOJ,gBAAgBK,KAAKD,SAA+B,qBAAbE,UAAgE,oBAA7BA,SAASN,iBAAkCM,SAASN,gBAAgBK,KAAKC,WAGrO,MAAM,IAAIC,MAAM,4GAIpB,OAAOP,EAAgBC,GCjBV,4HCQf,ICFeO,MAJf,SAAkBC,GAChB,MAAuB,kBAATA,GAAqBC,EAAMC,KAAKF,IDG5CG,EAAY,GAEPC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,OAAO,IAoBlCC,MAjBf,SAAmBC,GACjB,IAAIC,EAASC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAG7EX,GAAQG,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,MAAMI,cAMzf,IAAKf,EAASC,GACZ,MAAMe,UAAU,+BAGlB,OAAOf,GEHMgB,IApBf,SAAYC,EAASC,EAAKR,GAExB,IAAIS,GADJF,EAAUA,GAAW,IACFG,SAAWH,EAAQvB,KAAOA,KAK7C,GAHAyB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPR,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBc,EAAIR,EAASN,GAAKe,EAAKf,GAGzB,OAAOc,EAGT,OAAOV,EAAUW,K,uTC4IJE,EAZWC,aAVF,SAAC,GAOvB,MAAO,CAAEC,KADmL,EAL5LA,KAMqBC,OADuK,EAJ5LA,OAKqCC,aADuJ,EAH5LA,aAIiEC,aAD2H,EAF5LA,aAG6FC,YAD+F,EAD5LA,eAKiD,CACjDC,iBACAC,sBACAC,6BACAC,kCACAC,4BACAC,0BACAC,uBACAC,qBACAC,2BATwBd,EA5GC,SAACe,GAAmC,IAAD,IAC5D,EAA8BC,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,oBAAkB,GAAlD,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,oBAAkB,GAAhD,mBAAOK,EAAP,KAAgBC,EAAhB,KAiDA,OALAC,qBAAU,WACkC,OAAtCR,EAAMS,cAAcA,eAAuE,IAA7CT,EAAMS,cAAcA,cAAclC,QAClFyB,EAAMU,kBAAkBP,KAEzB,CAACH,KACY,IAAZM,EACK,cAAC,IAAD,CAAUK,GAAG,mBAEL,IAAbP,EACK,cAAC,IAAD,CAAUO,GAAG,mBAGpB,qBAAKC,UAAU,iGAAf,SAC4C,OAAzCZ,EAAMX,aAAawB,mBAA8Bb,EAAMX,aAAawB,kBAAkBC,aAAa,GAAG3B,SAAWa,EAAMe,eAAeC,UACvI,sBAAKJ,UAAU,qFAAf,sCAC2B,uBACzB,qBAAKA,UAAU,sIAAf,SAA+K,OAAzBZ,EAAMb,OAAO8B,UAAb,UAAiCjB,EAAMb,OAAO8B,QAAQC,MAAK,SAAAC,GAAG,aAAIA,EAAIH,aAAJ,UAAkBhB,EAAMX,aAAawB,yBAArC,aAAkB,EAAsCC,aAAa,GAAG3B,kBAA1I,aAAiC,EAAkHiC,eACzS,qBAAKC,QAAS,kBA5DG,WACrB,GAA6C,OAAzCrB,EAAMX,aAAawB,mBAA8Bb,EAAMX,aAAawB,kBAAkBC,aAAa,GAAG3B,SAAWa,EAAMe,eAAeC,WACpIhB,EAAMb,OAAO8B,QAAS,CACxB,IAAIK,EAAWtB,EAAMb,OAAO8B,QAAQC,MAAK,SAAAC,GAAG,OAAInB,EAAMX,aAAawB,mBAAqBM,EAAIH,YAAchB,EAAMX,aAAawB,kBAAkBC,aAAa,GAAG3B,eAC9IX,IAAb8C,GACFtB,EAAMH,kBAAkByB,IAuDNC,IAAkBX,UAAU,4CAAhD,6BAEF,qCACA,sBAAKA,UAAU,6CAAf,UACE,sBAAKA,UAAU,wEAAf,UACE,cAAC,IAAD,CAAkBA,UAAU,aAC5B,uEAAgCZ,EAAMX,aAAawB,yBAAnD,aAAgC,EAAsCW,cAAtE,UAEF,sBAAKZ,UAAU,mCAAf,UACE,qBAAKS,QAAS,kBAhDJ,WAChB,IAAmE,IAA/DI,OAAOC,QAAQ,6CAC4B,OAAzC1B,EAAMX,aAAawB,mBAA8Bb,EAAMX,aAAawB,kBAAkBC,aAAavC,OAAS,GACzE,OAAjCyB,EAAMb,OAAOwC,gBAA0B,CAAC,IAAD,gBAC3B3B,EAAMV,YAAYsC,WADS,IACzC,2BAA2C,CAAC,IAAnCC,EAAkC,QACzC7B,EAAMF,gBAAgB+B,IAFiB,8BAIzC,GAA2C,IAAvC7B,EAAMV,YAAYsC,UAAUrD,OAAc,CAAC,IAAD,gBAC5ByB,EAAMX,aAAawB,kBAAkBC,cADT,IAC5C,2BAAmE,CAAC,IAA3DK,EAA0D,QACjEnB,EAAMF,gBAAgBqB,GACtBnB,EAAMD,sBAAsBoB,IAHc,+BAMmB,IAA7DnB,EAAMX,aAAawB,kBAAkBC,aAAavC,SACpDyB,EAAMJ,qBAAqB,MAC3BW,GAAW,KAiCOuB,IAAalB,UAAU,6GAA3C,6BACA,qBAAKS,QAAS,kBA5Dc,WAClC,GAAII,OAAOC,QAAQ,2CAA4C,CAC7D,GAA6C,OAAzC1B,EAAMX,aAAawB,mBAA8Bb,EAAMX,aAAawB,kBAAkBC,aAAavC,OAAS,EAAG,CAAC,IAAD,gBACpFyB,EAAMX,aAAawB,kBAAkBC,cAD+C,IACjH,2BAAgF,CAAC,IAAxEiB,EAAuE,QAC9E/B,EAAMD,sBAAsBgC,IAFmF,8BAIjH/B,EAAMJ,qBAAqB,MAE7BS,GAAY,IAoDY2B,IAA+BpB,UAAU,iDAA7D,6BAGS,IAAZV,EAAmB,cAAC+B,EAAA,EAAD,IACqB,OAAzCjC,EAAMX,aAAawB,kBAA6B,0DAA2F,OAAtDb,EAAMX,aAAawB,kBAAkBC,aAAwB,cAACmB,EAAA,EAAD,IACrF,IAA7DjC,EAAMX,aAAawB,kBAAkBC,aAAavC,OAAe,yDACjEyB,EAAMX,aAAawB,kBAAkBC,aAAaoB,KAAI,SAACC,EAAMpE,GAAP,aACpD,qBAAKsD,QAAS,kBAAMrB,EAAMoC,eAAeD,IAAkBvB,UAAU,yMAArE,SACE,sBAAKA,UAAU,mCAAf,UACE,qBAAKA,UAAU,oGAAf,SAAoH7C,EAAI,IACxH,sBAAK6C,UAAU,yBAAf,UACE,sBAAMA,UAAU,wCAAhB,SAAyDZ,EAAMS,cAAcA,gBAApB,UAAqCT,EAAMS,cAAcA,cAAcS,MAAK,SAAAC,GAAG,OAAIA,EAAIkB,IAAMlB,EAAIkB,KAAOF,EAAKG,eAA7G,aAAqC,EAA+EC,SAC7K,sBAAM3B,UAAU,YAAhB,SAA6BuB,EAAKK,SAAS,GAAGD,QAC9C,sBAAM3B,UAAU,mBAAhB,SAAoCuB,EAAKK,SAAS,GAAGC,qBANN1E,EAAI,c,SCiHlD2E,EAXAzD,aAVS,SAAC,GAOvB,MAAO,CAAEC,KADsL,EAL/LA,KAMqBC,OAD0K,EAJ/LA,OAKqCC,aAD0J,EAH/LA,aAIiEC,aAD8H,EAF/LA,aAG6FoB,cADkG,EAD/LA,iBAKsC,CACtClB,iBACAC,sBACAC,6BACAC,kCACAC,4BACAC,0BACAc,uBACAiC,uBARa1D,EAtLC,SAACe,GAA4B,IAAD,EAC1C,EAAkCC,mBAAsB,MAAxD,mBAAO2B,EAAP,KAAkBgB,EAAlB,KACA,EAAkC3C,mBAAoC,MAAtE,mBAAO4C,EAAP,KAAkBC,EAAlB,KACA,EAA8B7C,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAmDF,mBAAiB,GAApE,mBAAO8C,EAAP,KAA0BC,EAA1B,KACA,EAAgD/C,mBAAyE,MAAzH,mBAAOgD,EAAP,KAAyBC,EAAzB,KAEMC,EAAiB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACN,sEAAdD,EAAKd,MAA8F,6BAAdc,EAAKd,MAAqD,aAAdc,EAAKd,KADlH,yCAEfQ,EAAa,CAClBQ,QAAS,YACTC,IAAK,wDAJe,gCAOf,MAPe,2CAAH,sDAWjBC,EAAc,uCAAG,WAAOC,GAAP,iBAAAJ,EAAA,yDACrBI,EAAEC,iBAEFZ,EAAa,MACK,OAAdlB,EAJiB,yCAKZkB,EAAa,CAClBQ,QAAS,YACTC,IAAK,0BAPY,UASS,IAAnB3B,EAAU+B,KATA,0CAUZb,EAAa,CAClBQ,QAAS,YACTC,IAAK,6CAZY,WAcS,sEAAnB3B,EAAUU,MAAmG,6BAAnBV,EAAUU,MAA0D,aAAnBV,EAAUU,KAd3I,0CAeZQ,EAAa,CAClBQ,QAAS,YACTC,IAAK,wDAjBY,eAoBnBpD,GAAW,GACXH,EAAM4D,oBAAmB,GArBN,WAuBXC,EAAW,IAAIC,UACZC,OAAO,SAAU/D,EAAMe,eAAeC,WAC/C6C,EAASE,OAAO,OAAQnC,GAzBP,UA0BCoC,IAAMC,KAAN,UAAcC,IAAIC,MAAlB,aAAoCN,EAAU,CAC9DO,iBAAkB,SAACC,GACjB,IAAIC,IAAqB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAeE,SAAUF,EAAcG,MAAS,IAC1ExB,EAAsBsB,MA7BT,QAgCE,OANbG,EA1BW,QAgCTC,QACN1E,EAAMJ,qBAAqB6E,EAAIE,MAEjCC,QAAQC,IAAI,cAAeJ,GAnCV,mDAqCjBG,QAAQC,IAAI,QAAZ,sBACI,KAAMC,UACJ,KAAMA,SAASH,MACb,KAAMG,SAASH,KAAKI,QACtBjC,EAAa,CACXQ,QAAS,YACTC,IAAK,KAAMuB,SAASH,KAAKI,OAAO,GAAGC,UA3C1B,QAiDnB7E,GAAW,GACXH,EAAM4D,oBAAmB,GAlDN,2DAAH,sDA4EpB,OARApD,qBAAU,WAC6B,OAAjCR,EAAMX,aAAauC,WACgB,OAAjC5B,EAAMb,OAAOwC,iBACf3B,EAAM2C,iBAAiB3C,EAAMb,OAAOwC,gBAAgBX,UAAWb,KAGlE,CAACH,IAGF,cAAC,WAAD,UAC4C,OAAzCA,EAAMX,aAAawB,kBACpB,sBAAKD,UAAU,OAAf,UACE,sBAAKA,UAAU,iHAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,sBAAMA,UAAU,2CAAhB,SAA6F,OAAjCZ,EAAMb,OAAOwC,iBAA4B3B,EAAMb,OAAOwC,gBAAgBP,cAClI,uBAAMR,UAAU,2CAAhB,0BAAyEZ,EAAMb,OAAOwC,iBAAmB3B,EAAMb,OAAOwC,gBAAgBsD,kBAExI,qBAAKrE,UAAU,qFAAf,kCAEF,uBAAMsE,SAAU1B,EAAhB,UACE,qBAAK5C,UAAS,OAAd,SACE,wBAAOA,UAAS,6GAAmH,IAAZV,EAAmB,iEAAmE,0FAA7M,UACE,cAAC,IAAD,CAAiBU,UAAU,aAC3B,sBAAMA,UAAU,gCAAhB,UAA6D,IAAZV,EAAmB,0BAA4B,4BACnF,IAAZA,GACD,uBAAOiF,SAAU,SAAC1B,GAChBX,EAAa,MACTW,EAAE2B,OAAOC,OAAS5B,EAAE2B,OAAOC,MAAM9G,OAAS,IAAiB,IAAZ2B,IAC/C0C,EAAaa,EAAE2B,OAAOC,MAAM,IAC5BlC,EAAkBM,EAAE2B,OAAOC,MAAM,MAEpC/C,KAAK,OAAO1B,UAAU,gBAGd,OAAdgB,GACD,sBAAKhB,UAAU,uGAAf,UACE,sBAAKA,UAAU,mCAAf,UACE,cAAC,IAAD,CAAYA,UAAU,2BACtB,sBAAKA,UAAU,gBAAf,UACE,uBAAMA,UAAU,mCAAhB,mBAA0DgB,EAAU0D,QACpE,uBAAM1E,UAAU,iCAAhB,wBAA6DgB,EAAUU,QACvE,uBAAM1B,UAAU,wBAAhB,mBAA+C2E,KAAKC,MAAM5D,EAAU+B,KAAK,MAAzE,iBAGS,IAAZzD,GAAqB,qBAAKmB,QAAS,WAAOuB,EAAa,MAAOE,EAAa,OAAQlC,UAAU,2FAAxE,uBAET,OAAdiC,GAA4C,cAAtBA,EAAUS,SACjC,qBAAKjC,QAAS,kBAAMyB,EAAa,OAAOlC,UAAU,OAAlD,SACE,cAAC6E,EAAA,EAAD,CACElD,MAAM,UACNE,YAAaI,EAAUU,IACvBmC,MAAOC,IAAeC,YAGb,IAAZ1F,GAAkC,OAAd0B,GACrB,qBAAKhB,UAAU,sCAAf,SACE,sBAAKA,UAAU,uJAAuJiF,MAAO,CAACC,MAAM,GAAD,OAAK/C,EAAL,MAAnL,UACE,sBAAMnC,UAAU,SAAhB,uCACA,iCAAOmC,EAAP,aAGS,IAAZ7C,EAAmB,qBAAKU,UAAU,OAAf,SAAsB,cAACqB,EAAA,EAAD,MAC1C,sBAAKrB,UAAU,kDAAf,UACE,qBAAKS,QAAS,kBAAMrB,EAAMH,kBAAkB,OAAOe,UAAU,iCAA7D,kBACA,wBAAQ0B,KAAK,SAAS1B,UAAU,4CAAhC,qCAIe,OAArBqC,IAAyD,IAA5BA,EAAiByB,QAAiD,OAA9BzB,EAAiBT,WAAlF,UAAuGxC,EAAMX,aAAawB,yBAA1H,aAAuG,EAAsCC,cAC7I,cAACiF,EAAA,EAAD,CACEhE,iBAAkBkB,EAAiBT,SACnCwD,cAAehG,EAAMX,aAAawB,kBAAkBC,aACpDmF,iBA/EmB,WACvB/C,EAAoB,CAClBwB,QAAQ,EACRlC,SAAU,UA8EV,cAAC,EAAD,CACEzB,eAAgBf,EAAMe,eACtBqB,eA1FiB,SAACI,GACtBU,EAAoB,CAClBwB,QAAQ,EACRlC,SAAUA,KAwFR/B,cAAeT,EAAMS,cACrBC,kBAAmBV,EAAMU,yB,QCzJ3BwF,E,kDACJ,WAAYlG,GAA6B,IAAD,8BACxC,cAAMA,IAWNG,WAAa,SAACuE,GACZ,EAAKyB,SAAS,CAAEjG,QAASwE,KAba,EAgBxC0B,eAAiB,SACfC,EACAC,GAEA,EAAKH,SAAS,CACZI,YAAa,CACXF,kBAAmBA,EACnBC,YAAaA,KAGbD,GACF,EAAKrG,MAAMN,6BAA6B2G,GAEtCC,IACF,EAAKtG,MAAML,uBAAuB2G,GAClC,EAAKH,SAAS,CAAEK,YAAY,MA/BQ,EAmCxCC,uBAAyB,SAAC/B,GACxB,EAAKyB,SAAS,CAAEK,WAAY9B,KApCU,EAuCxCgC,gBAAkB,SAACzF,EAAmB0F,GACpC,IAAIC,EAAqB3F,EA4BzB,OA3BiB,OAAb0F,IAC2B,OAAzBA,EAASL,YACXM,EAAW3F,EAAQ4F,QAAO,SAAC1F,GACzB,GAAIA,EAAI2F,cAAc5F,MAAK,SAAA6F,GAAI,aAAIA,KAAI,UAAKJ,EAASL,mBAAd,aAAK,EAAsBU,oBAAkB,CAClF,IADkF,EAC9EtC,GAAS,EADqE,cAEhEvD,EAAI2F,eAF4D,2BAEzEG,EAFyE,SAGhF,UAAIN,EAASN,yBAAb,aAAI,EAA4BS,cAAc5F,MAAK,SAAAnD,GAAC,OAAIA,IAAMkJ,QAC5DvC,GAAS,IAFb,2BAAsC,IAF4C,8BAOlF,OAAkB,IAAXA,EAAkBvD,EAAM,KAE/B,OAAO,QAG6B,OAA/BwF,EAASN,oBAClBO,EAAW3F,EAAQ4F,QAAO,SAAC1F,GACzB,IADiC,EAC7BuD,GAAS,EADoB,cAEfvD,EAAI2F,eAFW,2BAExBG,EAFwB,SAG/B,UAAIN,EAASN,yBAAb,aAAI,EAA4BS,cAAc5F,MAAK,SAAAnD,GAAC,OAAIA,IAAMkJ,QAC5DvC,GAAS,IAFb,2BAAsC,IAFL,8BAOjC,OAAkB,IAAXA,EAAkBvD,EAAM,UAI9ByF,GApE+B,EAuExChD,mBAAqB,SAACc,GACpB,EAAKyB,SAAS,CAAEe,gBAAiBxC,KAxEK,EA2ExCyC,kBAAoB,WACgB,OAA9B,EAAKnH,MAAMb,OAAO8B,SAAyD,IAArC,EAAKjB,MAAMb,OAAO8B,QAAQ1C,QAClE,EAAKyB,MAAMT,YAAY,EAAKY,aA1EhC,EAAKiH,MAAQ,CACTlH,SAAS,EACTqG,YAAa,KACbC,YAAY,EACZU,iBAAiB,EACjBG,kBAAmB,IARiB,E,0CAiFxC,WAAU,IAAD,OACP,OACE,eAAC,WAAD,WACE,sBAAKzG,UAAU,GAAf,UACE,sBAAKA,UAAU,kDAAf,UACE,sBAAKA,UAAU,mCAAf,UACE,cAAC,IAAD,CAAiBA,UAAU,2BAC3B,sBAAKA,UAAU,gBAAf,UACE,sBAAMA,UAAU,wCAAhB,8BACA,qBAAKA,UAAU,gBAAf,SACyC,OAAtC0G,KAAKtH,MAAMb,OAAOwC,gBACnB,sBAAKf,UAAU,OAAf,UACE,uBAAMA,UAAU,oCAAhB,UAAqD0G,KAAKtH,MAAMb,OAAOwC,gBAAgBsD,YAAvF,QACA,sBAAMrE,UAAU,oCAAhB,SAAqD0G,KAAKtH,MAAMb,OAAOwC,gBAAgBP,iBAEzF,sBAAKR,UAAU,UAAf,sGAAkH,kCAIxH,qBAAKA,UAAU,gBAAf,SACE,eAAC,IAAD,CAAMD,GAAG,iBAAiBC,UAAU,mEAApC,UACE,cAAC,IAAD,CAAgBA,UAAU,aAC1B,yDAIN,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,4BAAf,UACiD,OAA9C0G,KAAKtH,MAAMX,aAAawB,mBACzB,qBAAKD,UAAS,4BAA6D,OAAtC0G,KAAKtH,MAAMb,OAAOwC,gBAA2B,gBAAkB,wDAAtF,mCAAd,SACE,cAAC4F,EAAA,EAAD,CACE1H,kBAAmByH,KAAKtH,MAAMH,kBAC9B2H,mBAAoBF,KAAKtH,MAAMb,OAAOwC,iBAAmB2F,KAAKtH,MAAMb,OAAOwC,gBAAgBX,cAExD,OAAtCsG,KAAKtH,MAAMb,OAAOwC,iBACnB,qBAAKf,UAAS,UAAmD,OAA9C0G,KAAKtH,MAAMX,aAAawB,kBAA6B,gBAAkB,gBAA5E,wCAAd,SACE,cAAC,EAAD,CAAQE,eAAgBuG,KAAKtH,MAAMb,OAAOwC,gBAAiBiC,mBAAoB0D,KAAK1D,mBAAoB/D,kBAAmByH,KAAKtH,MAAMH,+BAKnH,IAA1ByH,KAAKF,MAAMZ,YACZ,cAACiB,EAAA,EAAD,CACElF,MAAM,kCACNmF,UAAU,EACVhC,MAAOiC,IAAOC,QACdC,MAAO,kBAAM,EAAK1B,SAAS,CAAEK,YAAY,KACzCsB,eAAe,EACfC,eAAgBC,IAAUC,OAC1BC,cAAc,EACdC,QAAS,CAAC5F,OAAO,GARnB,SAUE,cAAC6F,EAAA,EAAD,CACEC,oBAAqBf,KAAKtH,MAAMZ,aAAakJ,qBAC7ClJ,aAAckI,KAAKtH,MAAMZ,aAAa0H,cACtCP,YAAae,KAAKF,MAAMb,YACxBH,eAAgBkB,KAAKlB,eACrBK,uBAAwBa,KAAKb,kC,GA3IX8B,aA4JjBC,EAAiBvJ,aATN,SAAC,GAMvB,MAAO,CAAEC,KAD0I,EAJnJA,KAKqBC,OAD8H,EAHnJA,OAIqCC,aAD8G,EAFnJA,aAGiEC,aADkF,EADnJA,gBAKqD,CACrDE,iBACAM,uBACAL,sBACAC,6BACAC,kCACAC,6BAN4BV,CAO3BiH","file":"static/js/17.e61793e7.chunk.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { useEffect, useState } from 'react'\nimport Loading from '../../../../../components/Loading/Loading'\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  IncrementQuestionBank,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { course } from '../../../../../interfaces/course';\nimport { QuestionInterface, uploadQuestionsResponse } from '../../../../../interfaces/question';\nimport { VscListSelection } from 'react-icons/vsc';\nimport { Redirect } from 'react-router-dom';\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  selectQuestion: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  IncrementQuestionBank: (question: QuestionInterface) => void;\n}\n\nconst _UploadedQuestions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [redirect, setRedirect] = useState<boolean>(false);\n  const [setExam, setSetExam] = useState<boolean>(false);\n  const returnToCourse = () => {\n    if (props.questionBank.uploadedQuestions !== null && props.questionBank.uploadedQuestions.insertedData[0].course !== props.selectedCourse.course_id) {\n      if (props.course.courses) {\n        let selected = props.course.courses.find(itm => props.questionBank.uploadedQuestions && itm.course_id === props.questionBank.uploadedQuestions.insertedData[0].course);\n        if (selected !== undefined) {\n          props.setSelectedCourse(selected);\n        }\n      }\n    }\n  }\n  const clearUploadedQuestionsStore = () => {\n    if (window.confirm(\"Have you completed to modify questions?\")) {\n      if (props.questionBank.uploadedQuestions !== null && props.questionBank.uploadedQuestions.insertedData.length > 0) {\n        for (let selectedQuestion of props.questionBank.uploadedQuestions.insertedData) {\n          props.IncrementQuestionBank(selectedQuestion);\n        }\n        props.setUploadedQuestions(null);\n      }\n      setRedirect(true);\n    }\n  }\n  const addToExam = () => {\n    if (window.confirm(\"Are you sure do you want to add to exam?\") === true) {\n      if (props.questionBank.uploadedQuestions !== null && props.questionBank.uploadedQuestions.insertedData.length > 0) {\n        if (props.course.selected_course !== null) {\n          for (let x of props.prepareExam.questions) {\n            props.addExamQuestion(x);\n          }\n          if (props.prepareExam.questions.length === 0) {\n            for (let itm of props.questionBank.uploadedQuestions.insertedData) {\n              props.addExamQuestion(itm);\n              props.IncrementQuestionBank(itm);\n            }\n          }\n          if (props.questionBank.uploadedQuestions.insertedData.length !== 0) {\n            props.setUploadedQuestions(null);\n            setSetExam(true);\n          }\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (props.questionTypes.questionTypes === null || props.questionTypes.questionTypes.length === 0) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  if (setExam === true) {\n    return <Redirect to=\"/prepare-exam\" />\n  }\n  if (redirect === true) {\n    return <Redirect to=\"/question-bank\" />\n  }\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 my-4 rounded\">\n      {props.questionBank.uploadedQuestions !== null && props.questionBank.uploadedQuestions.insertedData[0].course !== props.selectedCourse.course_id ? \n      <div className=\"text-center flex flex-col items-center text-gray-500 py-6 rounded bg-gray-100 mt-5\">\n        You have changed course! <br />\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded-full text-center w-max px-3 border border-blue-200 flex items-center justify-center mb-3\">{props.course.courses !== null && props.course.courses.find(itm => itm.course_id === props.questionBank.uploadedQuestions?.insertedData[0].course)?.course_name}</div>\n        <div onClick={() => returnToCourse()} className=\"btn bg-blue-600 text-white cursor-pointer\">Back to list</div>\n      </div> :\n      <>\n      <div className=\"flex flex-row items-center justify-between\">\n        <div className=\"text-blue-600 font-bold mb-2 flex flex-row items-center gap-2 text-xl\">\n          <VscListSelection className=\"text-2xl\" />\n          <span>Uploaded questions list ({props.questionBank.uploadedQuestions?.insertedCount})</span>\n        </div>\n        <div className=\"flex flex-row items-center gap-2\">\n          <div onClick={() => addToExam()} className=\"btn border bg-blue-50 hover:bg-blue-600 border-blue-600 text-blue-600 hover:text-white mb-2 cursor-pointer\">Make it an exam</div>\n          <div onClick={() => clearUploadedQuestionsStore()} className=\"btn bg-blue-600 text-white mb-2 cursor-pointer\">Continue</div>\n        </div>\n      </div>\n      {loading === true ? <Loading /> :\n      props.questionBank.uploadedQuestions === null ? <div>Please upload questions</div> : props.questionBank.uploadedQuestions.insertedData === null ? <Loading /> :\n      props.questionBank.uploadedQuestions.insertedData.length === 0 ? <div>No questions uploaded!</div> :\n      props.questionBank.uploadedQuestions.insertedData.map((item, i) => (\n        <div onClick={() => props.selectQuestion(item)} key={i + 1}className=\"bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 hover:bg-blue-50 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between mb-2 gap-4 hover:border-blue-600 mb-3\">\n          <div className=\"flex flex-row items-center gap-3\">\n            <div className=\"rounded-full bg-blue-100 text-blue-600 h-8 w-8 flex items-center justify-center text-xl font-bold\">{i + 1}</div>\n            <div className=\"flex flex-col truncate\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">{props.questionTypes.questionTypes && props.questionTypes.questionTypes.find(itm => itm.id && itm.id === item.type)?.title}</span>\n              <span className=\"font-bold\">{item.question[0].title}</span>\n              <span className=\"truncate text-xs\">{item.question[0].description}</span>\n            </div>\n          </div>\n        </div>\n      ))}\n      </>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  prepareExam,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; prepareExam: PrepareExamsStoreInterface; } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, prepareExam: prepareExam };\n};\n\nconst UploadedQuestions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  addExamQuestion,\n  IncrementQuestionBank,\n})(_UploadedQuestions);\n\nexport default UploadedQuestions;\n","import axios from 'axios';\nimport React, { Fragment, useEffect, useState } from 'react'\nimport { FiFileText } from 'react-icons/fi';\nimport { IoMdCloudUpload } from 'react-icons/io'\nimport Alert, { AlertInterface } from '../../../../components/Alert/Alert';\nimport Loading from '../../../../components/Loading/Loading';\nimport { course, QuestionInterface, uploadQuestionsResponse } from '../../../../interfaces'\nimport { formErrorInterface } from '../../../../interfaces/form';\nimport { API } from '../../../../utils/api';\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n} from \"../../../../actions\";\nimport { StoreState } from \"../../../../reducers\";\nimport UploadedQuestions from './UploadedQuestions/UploadedQuestions';\nimport EditQuestion from './EditQuestion/EditQuestion';\n\ninterface UploadInterface {\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (course: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (course_id: string, callback: (loading: boolean) => void) => void;\n}\n\nconst _Upload = (props: UploadInterface) => {\n  const [questions, setQuestions] = useState<File | null>(null);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [upload_percentage, set_upload_percentage] = useState<number>(0);\n  const [showQuestionEdit, setShowQuestionEdit] = useState<{ status: boolean, question: QuestionInterface | null } | null>(null)\n\n  const validateExcelFile = async (file: File) => {\n    if (file.type !== \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" && file.type !== \"application/vnd.ms-excel\" && file.type !== \"text/csv\") {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose excel file or svg file\"\n      });\n    } else {\n      return null;\n    }\n  }\n\n  const submitQuestion = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // Validation\n    setFormError(null);\n    if (questions === null) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Please select a file\"\n      })\n    } else if (questions.size === 0) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose a real file\"\n      })\n    } else if (questions.type !== \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" && questions.type !== \"application/vnd.ms-excel\" && questions.type !== \"text/csv\") {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose excel file or svg file\"\n      });\n    } else {\n      setLoading(true);\n      props.setUploadingStatus(true);\n      try {\n        const formData = new FormData();\n        formData.append(\"course\", props.selectedCourse.course_id);\n        formData.append(\"file\", questions);\n        const res = await axios.post(`${API.QBank}/question`, formData, {\n          onUploadProgress: (progressEvent: any) => {\n            let number_percentage = (+progressEvent?.loaded / +progressEvent.total) * 100;\n            set_upload_percentage(number_percentage)\n          },\n        });\n        if (res.status === 201) {\n          props.setUploadedQuestions(res.data);\n        }\n        console.log(\"Questions: \", res);\n      } catch (error: any) {\n        console.log(\"Err: \", {...error});\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors) {\n              setFormError({\n                element: \"questions\",\n                msg: error.response.data.errors[0].message\n              });\n            }\n          }\n        }\n      }\n      setLoading(false);\n      props.setUploadingStatus(false);\n    }\n  }\n\n  const selectQuestion = (question: QuestionInterface) => {\n    setShowQuestionEdit({\n      status: true,\n      question: question\n    })\n  }\n\n  const unSelectQuestion = () => {\n    setShowQuestionEdit({\n      status: false,\n      question: null\n    })\n  }\n\n  useEffect(() => {\n    if (props.questionBank.questions === null) {\n      if (props.course.selected_course !== null) {\n        props.loadQuestionBank(props.course.selected_course.course_id, setLoading);\n      }\n    }\n  }, [props])\n  \n  return (\n    <Fragment>\n      {props.questionBank.uploadedQuestions === null ?\n      <div className=\"my-4\">\n        <div className=\"flex flex-row justify-between items-center rounded px-3 py-2 bg-white animate__animated animate__fadeIn shadow\">\n          <div className=\"flex flex-col\">\n            <span className=\"font-bold text-blue-600 text-lg truncate\">{props.course.selected_course !== null && props.course.selected_course.course_name}</span>\n            <span className=\"text-xs font-bold text-gray-500 truncate\">Course code: {props.course.selected_course && props.course.selected_course.course_code}</span>\n          </div>\n          <div className=\"btn bg-blue-50 text-blue-500 hover:bg-blue-100 hover:text-blue-700  cursor-pointer\">Download template</div>\n        </div>\n        <form onSubmit={submitQuestion}>\n          <div className={`my-2`}>\n            <label className={`w-full flex flex-col items-center px-4 py-6 tracking-wide rounded border border-gray-400 bg-white ${loading === true ? \"cursor-not-allowed hover:bg-gray-100 bg-gray-100 text-gray-400\" : \"cursor-pointer hover:border-blue-600 border-gray-100 text-blue-600 hover:text-blue-700\"}`}>\n              <IoMdCloudUpload className=\"text-4xl\" />\n              <span className=\"mt-2 text-base leading-normal\">{loading === true ? \"Loading, Please wait...\" : \"Click to select a file\"}</span>\n              {loading === false &&\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setFormError(null);\n                if (e.target.files && e.target.files.length > 0 && loading === false) {\n                    setQuestions(e.target.files[0]);\n                    validateExcelFile(e.target.files[0]);\n                }\n              }} type='file' className=\"hidden\" />}\n            </label>\n          </div>\n          {questions !== null && \n          <div className=\"rounded bg-blue-50 px-3 py-2 flex flex-row items-center justify-between gap-2 border border-blue-500\">\n            <div className=\"flex flex-row gap-2 items-center\">\n              <FiFileText className=\"text-5xl text-blue-600\" />\n              <div className=\"flex flex-col\">\n                <span className=\"font-bold text-blue-600 truncate\">File: {questions.name}</span>\n                <span className=\"text-gray-500 text-xs truncate\">File type: {questions.type}</span>\n                <span className=\"text-gray-500 text-xs\">Size: {Math.round(questions.size/1024)} Kbs</span>\n              </div>\n            </div>\n            {loading === false && <div onClick={() => {setQuestions(null); setFormError(null)}} className=\"btn text-sm bg-red-50 text-red-600 border border-red-200 cursor-pointer hover:bg-red-100\">Delete</div>}\n          </div>}\n          {formError !== null && formError.element === \"questions\" && \n          <div onClick={() => setFormError(null)} className=\"mt-2\">\n            <Alert \n              title=\"Invalid\"\n              description={formError.msg}\n              theme={AlertInterface.danger}\n            />\n          </div>}\n          {loading === true && questions !== null &&\n          <div className=\"bg-blue-200 h-6 w-full rounded mt-2\">\n            <div className=\"h-full rounded bg-blue-500 flex flex-row items-center justify-between px-2 truncate text-xs text-white font-bold animate__animated animate__delay-1s\" style={{width: `${upload_percentage}%`}}>\n              <span className=\"italic\">Uploading, Please wait...</span>\n              <span>{upload_percentage}%</span>\n            </div>\n          </div>}\n          {loading === true ? <div className=\"mt-5\"><Loading /></div> :\n          <div className=\"flex flex-row items-center justify-between my-2\">\n            <div onClick={() => props.setSelectedCourse(null)} className=\"btn cursor-pointer bg-gray-100\">Back</div>\n            <button type=\"submit\" className=\"btn cursor-pointer bg-blue-600 text-white\">Save questions</button>\n          </div>}\n        </form>\n      </div> : \n      showQuestionEdit !== null && showQuestionEdit.status === true && showQuestionEdit.question !== null && props.questionBank.uploadedQuestions?.insertedData ?\n      <EditQuestion \n        selectedQuestion={showQuestionEdit.question} \n        questionsList={props.questionBank.uploadedQuestions.insertedData}\n        unSelectQuestion={unSelectQuestion} \n      /> :\n      <UploadedQuestions \n        selectedCourse={props.selectedCourse} \n        selectQuestion={selectQuestion} \n        questionTypes={props.questionTypes}\n        loadQuestionTypes={props.loadQuestionTypes}\n      />\n      }\n    </Fragment>\n  );\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, questionTypes: questionTypes };\n};\n\nconst Upload = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n})(_Upload);\n\nexport default Upload;\n","import React, { Component, Fragment } from 'react'\nimport { FiExternalLink, FiFilter } from 'react-icons/fi';\nimport { IoMdCloudUpload } from 'react-icons/io';\nimport { Link } from \"react-router-dom\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport searchData from \"../../../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n} from \"../../../../actions\";\nimport { StoreState } from \"../../../../reducers\";\nimport { course } from '../../../../interfaces/course';\nimport Loading from '../../../../components/Loading/Loading';\nimport Modal, { ModalSize, Themes } from '../../../../components/Modal/Modal';\nimport SchoolLevelsFilter from '../../../Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter';\nimport { searchItem } from '../../../Application/ApplicationPositions/ApplicationPositions';\nimport { FaAngleRight } from 'react-icons/fa';\nimport Upload from './Upload';\nimport Courses from '../../../../components/Courses/Courses';\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nclass _UploadQuestion extends Component<UploadQuestionProps, UploadQuestionState> {\n  constructor(props: UploadQuestionProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n\t\t};\n\t}\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filteredCourses = (courses: course[], searched: searchItem | null): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (itm.school_levels.find(itm1 => itm1 === searched.schoolLevel?.school_level_id)) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (searched.educationCategory?.school_levels.find(i => i === item2)) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        })\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (searched.educationCategory?.school_levels.find(i => i === item2)) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        })\n      }\n    }\n    return filtered;\n  }\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status});\n  }\n\n  componentDidMount = () => {\n    if (this.props.course.courses === null || this.props.course.courses.length === 0) {\n      this.props.loadCourses(this.setLoading);\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"\">\n          <div className=\"mt-3 flex flex-row justify-between items-center\">\n            <div className=\"flex flex-row items-center gap-3\">\n              <IoMdCloudUpload className=\"text-gray-600 text-6xl\" />\n              <div className=\"flex flex-col\">\n                <span className=\"text-gray-700 text-3xl font-extrabold\">Upload questions</span>\n                <div className=\"text-gray-600\">\n                  {this.props.course.selected_course !== null ?\n                  <div className=\"mt-1\">\n                    <span className=\"text-blue-600 font-bold underline\">{this.props.course.selected_course.course_code} -</span>\n                    <span className=\"font-bold text-blue-600 underline\">{this.props.course.selected_course.course_name}</span>\n                  </div>: \n                  <div className=\"text-sm\">Please make sure you have downloaded the format template before writing list of questions<br/></div>}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex flex-row\">\n              <Link to=\"/question-bank\" className=\"btn bg-white text-blue-600 mr-1 flex flex-row items-center gap-2\">\n                <FiExternalLink className=\"text-2xl\" />\n                <span>Question bank</span>\n              </Link>\n            </div>\n          </div>\n          <div className=\"flex-col\">\n            <div className=\"grid md:grid-cols-5 gap-2\">\n              {this.props.questionBank.uploadedQuestions === null &&\n              <div className={`animate__animated ${this.props.course.selected_course === null ? \"md:col-span-5\" : \"md:col-span-2 transition-all duration-500 ease-in-out\"} md:flex md:flex-col min-h-full`}>\n                <Courses \n                  setSelectedCourse={this.props.setSelectedCourse} \n                  selected_course_id={this.props.course.selected_course && this.props.course.selected_course.course_id} />\n              </div>}\n              {this.props.course.selected_course !== null &&\n              <div className={`${this.props.questionBank.uploadedQuestions === null ? \"md:col-span-3\" : \"md:col-span-5\"} md:flex flex-col min-h-full rounded`}>\n                <Upload selectedCourse={this.props.course.selected_course} setUploadingStatus={this.setUploadingStatus} setSelectedCourse={this.props.setSelectedCourse} />\n              </div>}\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true &&\n        <Modal\n          title=\"Filter courses by school levels\"\n          backDrop={true}\n          theme={Themes.default}\n          close={() => this.setState({ showFilter: false })}\n          backDropClose={true}\n          widthSizeClass={ModalSize.medium}\n          displayClose={true}\n          padding={{title: true,}}\n        >\n          <SchoolLevelsFilter \n            educationCategories={this.props.schoolLevels.education_categories}\n            schoolLevels={this.props.schoolLevels.school_levels}\n            searchLevel={this.state.searchLevel}\n            setSearchLevel={this.setSearchLevel}\n            setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n          />\n        </Modal>}\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank };\n};\n\nexport const UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n"],"sourceRoot":""}