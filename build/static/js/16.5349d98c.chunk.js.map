{"version":3,"sources":["containers/QuestionBank/AddQuestion/ChooseMethod/ChooseMethod.tsx","containers/QuestionBank/QuestionsList/QuestionsList.tsx"],"names":["ChooseMethod","props","className","undefined","close","to","_QuestionsList","setLoading","status","setState","loading","setAddQuestion","addQuestion","chooseCourse","course","setSelectedCourse","loadQuestionBank","course_id","selectCourse","answerQuestionFn","answer","setSelectedQuestion","question","componentDidMount","questionTypes","length","loadQuestionTypes","courses","loadCourses","selected_course","questionBank","questions","setEditQuestion","item","editQuestion","unSelectQuestion","state","searchQuestionInput","preview","this","course_code","course_name","onClick","type","placeholder","colSpan","map","i","title","description","getQuestionType","marks","selectedQuestion","LoadingType","dark","questionsList","backDrop","theme","Themes","default","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","questionAnswers","large","selected_course_id","Component","QuestionsList","connect","auth","schoolLevels","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel"],"mappings":"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","file":"static/js/16.5349d98c.chunk.js","sourcesContent":["import React from 'react'\nimport { FaEdit } from 'react-icons/fa'\nimport { IoMdArrowRoundBack } from 'react-icons/io'\nimport { SiMicrosoftexcel } from 'react-icons/si'\nimport { Link } from 'react-router-dom'\n\ninterface ChooseMethodProps {\n  close?: (state: boolean) => void;\n}\n\nexport const ChooseMethod = (props: ChooseMethodProps) => {\n  return (\n    <div className=\"px-2 py-2\">\n      <div className=\"flex flex-row items-center gap-3\">\n        {props.close === undefined &&\n        <Link to=\"/question-bank\">\n          <IoMdArrowRoundBack className={`text-blue-600 text-4xl rounded-full bg-gray-100 cursor-pointer animate__animated animate__lightSpeedInLeft`} />\n        </Link>}\n        {props.close === undefined &&\n        <div className=\"flex flex-col\">\n          <span className=\"text-gray-800 text-3xl font-extrabold\">Choose method</span>\n          <span className=\"text-gray-600 text-sm\">Prepare question bank by adding questions through two main methods</span>\n        </div>}\n      </div>\n      <div className={`${props.close === undefined ? \"mt-6\" : \"-mt-6\"} grid md:grid-cols-2 bg-white px-4 py-4 rounded`}>\n        <div className=\"col-span-1\">\n          <Link to=\"/add-question\">\n            <div className={`bg-blue-50 hover:bg-blue-100 border border-white px-6 py-6 rounded text-2xl mr-2 flex flex-col justify-center items-center ${props.close === undefined && \"animate__animated animate__zoomIn animate__fast\"}`}>\n              <FaEdit className=\"text-8xl text-primary\" />\n              <span className=\"text-primary font-bold\">Add manually</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                This option allows you to prepare one question at time using system's interface\n              </span>\n            </div>\n          </Link>\n        </div>\n        <div className=\"col-span-1\">\n          <Link to=\"/upload-questions\">\n            <div className={`bg-white hover:bg-gray-100 border border-gray-300 hover:border-gray-600 px-6 py-6 rounded text-2xl ml-2 flex flex-col justify-center items-center ${props.close === undefined && \"animate__animated animate__zoomIn animate__fast\"}`}>\n              <SiMicrosoftexcel className=\"text-8xl text-gray-600\" />\n              <span className=\"text-gray-600 font-bold\">Upload excel</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                The option of uploading list of questions through excel file. You can also upload the exam at time\n              </span>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}","import React, { Component, Fragment } from 'react'\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport * as Interfaces from \"../../../interfaces/index\";\nimport searchData from \"../../../utils/search\";\nimport { course, QuestionInterface, question_answer } from '../../../interfaces/index';\nimport Loading from '../../../components/Loading/Loading';\nimport { getQuestionType } from '../../../utils/question_bank';\nimport Modal, { ModalSize, Themes } from '../../../components/Modal/Modal';\nimport Courses from '../../../components/Courses/Courses';\nimport { ChooseMethod } from '../AddQuestion/ChooseMethod/ChooseMethod';\nimport EditQuestion from '../AddQuestion/UploadQuestion/EditQuestion/EditQuestion';\nimport { LoadingType } from '../../../components/Loading/LoadingV2';\nimport QuestionDetails from '../../DoExam/QuestionDetails/QuestionDetails';\nimport { exam_question } from '../../../interfaces/exam_question';\n\ninterface QuestionsListProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  loadQuestionBank: (course_id : string, callback: (loading: boolean) => void) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n}\ninterface QuestionsListState {\n  loading: boolean;\n  searchQuestionInput: string;\n  selectCourse: boolean;\n  addQuestion: boolean;\n  editQuestion: QuestionInterface | null;\n  preview: QuestionInterface | null;\n}\n\nclass _QuestionsList extends Component<QuestionsListProps, QuestionsListState> {\n  constructor(props: QuestionsListProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      loading: false,\n      searchQuestionInput: \"\",\n      selectCourse: false,\n      addQuestion: false,\n      editQuestion: null,\n      preview: null,\n\t\t};\n\t}\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n  setAddQuestion = (status: boolean) => {\n    this.setState({ addQuestion: status });\n  }\n\n  chooseCourse = (course: course | null) => {\n    this.props.setSelectedCourse(course);\n    if (course !== null) {\n      this.props.loadQuestionBank(course.course_id, this.setLoading);\n    }\n    this.setState({ selectCourse: false })\n  }\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {}\n  setSelectedQuestion = (question: exam_question) => {}\n\n  componentDidMount = () => {\n    if (this.props.questionTypes.questionTypes === null || this.props.questionTypes.questionTypes.length === 0) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (this.props.course.courses === null || this.props.course.courses.length === 0) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true })\n    } else {\n      this.setState({ selectCourse: false })\n    }\n    if (this.props.questionBank.questions === null || this.props.questionBank.questions.length === 0) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(this.props.course.selected_course.course_id, this.setLoading);\n      }\n    }\n  }\n\n  setEditQuestion = (item: QuestionInterface) => {\n    this.props.setSelectedQuestion(item);\n    this.setState({ editQuestion: item });\n  }\n\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  }\n\n  render() {\n    return (\n      <Fragment>\n      {this.state.editQuestion === null ?\n      <div className=\"\">\n        <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n          <div className=\"flex flex-row items center justify-between\">\n            <div className=\"flex flex-col px-1\">\n              <span className=\"text-gray-600 text-3xl font-bold\">Question Bank</span>\n              <span className=\"text-blue-600 text-sm font-bold\">Course: {this.props.course.selected_course === null ? <span className=\"text-yellow-700 italic\">Not selected!</span> : (`${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`)}</span>\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              {this.props.questionBank.questions !== null && this.props.questionBank.questions.length > 0 &&\n              <div onClick={() => this.setState({ selectCourse: true })} className={`btn cursor-pointer ${this.props.course.selected_course === null ? \"bg-yellow-50 hover:bg-yellow-100  text-yellow-700 border border-yellow-200\" : \"bg-blue-50 hover:bg-blue-100  text-blue-600\"} h-max flex items-center justify-center h-10`}>{this.props.course.selected_course === null ? \"Choose course\" : \"Change course\"}</div>}\n              <div onClick={() => this.setState({ addQuestion: true })} className=\"btn cursor-pointer bg-white hover:bg-blue-100 border border-blue-600 text-blue-600 h-max flex items-center justify-center h-10\">\n                Add questions\n              </div>\n            </div>\n          </div>\n          <input type=\"text\" className=\"input-white border h-10 text-sm border-gray-400\" placeholder=\"Search question by title or description\" />\n        </div>\n        <div className=\"flex-col\">\n          <div className=\"flex my-2 flex-row justify-between items-center\">\n            <span className=\"text-xl font-bold text-blue-600\">List of questions</span>\n            <div className=\"underline font-bold text-blue-700 bg-white rounded-full px-3 py-1\">{this.props.questionBank.questions && this.props.questionBank.questions.length} questions</div>\n          </div>\n          <div className=\"flex flex-col\">\n            <div className=\"bg-white flex rounded\">\n              <table className=\"table-auto w-full\">\n                <thead>\n                  <tr className=\"text-left bg-blue-50 border-b-2 border-blue-500 text-blue-600\">\n                    <th className=\"p-3 w-1/12 pl-10\">#</th>\n                    <th className=\"p-3\">Question</th>\n                    <th>Category</th>\n                    <th>Marks</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.loading === true ? \n                  <tr>\n                    <td colSpan={5} className=\"pt-6\"><Loading /></td>\n                  </tr> :\n                  this.props.course.selected_course === null ? \n                  <tr>\n                    <td colSpan={5}>\n                      <div className=\"bg-gray-100 flex flex-col items-center text-center gap-3 rounded px-3 py-3\">\n                        <span className=\"text-xl font-bold\">No course selected!</span>\n                        <div onClick={() => this.setState({ selectCourse: true })} className=\"btn bg-yellow-50 text-yellow-800 cursor-pointer hover:bg-white border border-white shadow hover:shadow-none hover:border-yellow-600\">Choose a course</div>\n                      </div>\n                    </td>\n                  </tr> :\n                  this.props.questionBank.questions === null ?\n                  <tr>\n                    <td colSpan={5} className=\"pt-6\">\n                      <Loading />\n                    </td>\n                  </tr> :\n                  this.props.questionBank.questions.length === 0 ? \n                  <tr>\n                    <td colSpan={5}><span className=\"font-bold text-yellow-900 text-2xl\">No questions available!</span></td>\n                  </tr>:\n                  this.props.questionTypes.questionTypes !== null && this.props.questionTypes.questionTypes.length > 0 &&\n                  this.props.questionBank.questions.map((item, i) => (\n                    <tr key={i + 1} className=\"shadow-sm cursor-pointer border-none\">\n                      <td className=\"flex items-center justify-center\">\n                        <div className=\"py-1 rounded-full my-3\">\n                          <span className=\"text-xl italic text-blue-600\">{i < 9 && 0}{i + 1}</span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"py-2 px-3 flex flex-col\">\n                          <span className=\"text-sm text-gray-600 font-bold w-96 truncate\">\n                            {item.question[0].title}\n                          </span>\n                          <span className=\"text-xs text-gray-500 w-96 truncate\">\n                            {item.question[0].description}\n                          </span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"text-xs font-bold text-gray-700 w-80 truncate\">\n                          {getQuestionType(this.props.questionTypes.questionTypes, item.type) === null ? \n                          <span className=\"text-yellow-700\">Invalid type</span> : \n                          <span className=\"text-blue-600\">{getQuestionType(this.props.questionTypes.questionTypes, item.type)}</span>}\n                        </div>\n                      </td>\n                      <td>\n                        <span className=\"text-xs text-gray-500\">{item.marks}</span>\n                      </td>\n                      <td>\n                        <div className=\"flex justify-end pr-1\">\n                          <div onClick={() => this.setState({ preview: item })} className=\"border border-gray-200 btn bg-gray-100 px-3 py-1 rounded text-gray-600 text-sm flex items-center\">\n                            <span>View</span>\n                          </div>\n                          <div onClick={() => this.setEditQuestion(item)} className=\"border border-blue-200 btn bg-blue-50 px-3 py-1 rounded text-blue-600 text-sm flex items-center ml-1\">\n                            <span>Edit</span>\n                          </div>\n                          <div className=\"border border-red-200 btn px-3 py-1 rounded bg-red-50 text-red-600 text-sm flex items-center ml-1\">\n                            <span>Delete</span>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div> :\n      <div>\n        {this.props.course.selected_course !== null &&\n        <div className=\"bg-white px-2 py-2 mt-4 flex flex-col rounded-t\">\n          <span className=\"text-sm text-gray-600 font-bold\">Course</span>\n          <span className=\"font-bold text-xl text-blue-600\">{this.props.course.selected_course.course_code} - {this.props.course.selected_course.course_name}</span>\n        </div>\n        }\n        {this.props.questionBank.questions === null || this.props.questionBank.selectedQuestion === null? \n        <div className=\"mt-4 px-4 py-4 rounded bg-white\"><Loading type={LoadingType.dark} /></div>\n        :\n        <EditQuestion \n          selectedQuestion={this.state.editQuestion} \n          questionsList={this.props.questionBank.questions}\n          unSelectQuestion={this.unSelectQuestion} \n        />}\n      </div>}\n      {this.state.preview !== null &&\n      <Modal\n        title=\"Question preview\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ preview: null })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.extraLarge}\n        displayClose={true}\n        padding={{title: true,}}>\n        <QuestionDetails\n          questionAnswers={undefined}\n          answerQuestionFn={this.answerQuestionFn}\n          selectedQuestion={null}\n          setSelectedQuestion={this.setSelectedQuestion}\n          preview={false}\n        />\n      </Modal>}\n      {this.state.selectCourse === true &&\n      <Modal\n        title=\"Choose a course\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ selectCourse: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n        <Courses setSelectedCourse={this.chooseCourse} selected_course_id={this.props.course.selected_course && this.props.course.selected_course.course_id} />\n      </Modal>}\n      {this.state.addQuestion === true &&\n      <Modal\n        title={\n          <div className=\"flex flex-col\">\n            <span className=\"text-gray-800 text-3xl font-extrabold\">Choose method</span>\n            <span className=\"text-gray-600 text-sm\">Prepare question bank by adding questions through two main methods</span>\n          </div>\n        }\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ addQuestion: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n        <ChooseMethod close={this.setAddQuestion} />\n      </Modal>}\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, questionTypes: questionTypes };\n};\n\nexport const QuestionsList = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n})(_QuestionsList);\n"],"sourceRoot":""}