{"version":3,"sources":["components/Navigation/SideNavigation.tsx","containers/Claimings/ClaimDocView.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx"],"names":["_SideNavigation","props","componentDidMount","PageHasSubNav","componentWillUnmount","state","loading","this","auth","isAuthenticated","navActive","system","navigation","className","children","React","Component","SideNavigation","connect","NavToogle","MainItem","title","icon","MdBrightness1","active","count","IconDefined","isReclaimAllowed","thisClaim","claim_level","_thisClaim","claims","find","item","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","memo","createReClaim","PushPopupAlert","FC_CompleteClaim","handleSubmit","a","isEmptyOrSpaces","reClaimingMsg","setFormError","element","msg","theme","PopupAlertTheme","warning","setLoadingRequest","setAxiosToken","axios","put","API","CLAIMING","_id","reason","res","console","log","data","status","success","setReClaimingMsg","setReClaiming","error","errorToText","danger","getReasonById","reason_id","claimReasons","id","ClaimGetDocTitle","documentCategories","thisDoc","main","type","onClick","setViewImage","viewImage","validation_status","capitalizeFirstLetter","validated_by","comment","src","AUTH_FILES","files","alt","length","map","claim","index","default_claim_resaons","showDate","createdAt","toLocaleLowerCase","evaluation_comment","reClaiming","last_claim_status","PENDING","DELETED","disabled","loadingRequest","window","confirm","placeholder","cols","rows","formError","style","resize","value","onChange","e","target","filterClaimsByClaimType","claimList","claimType","filter","type_key","claiming","GetClaimingTypes","setSelectedClaimType","getAllClaims","useState","setLoading","loadingClaimTypes","setLoadingClaimTypes","useEffect","claimTypes","countClaims","thisType","result","allClaims","Fragment","loadingClaims","selectedClaimType","selected_claim_type","PlansTypeKeys","APPLICATION","DOCUMENT_VALIDATION","EXAMINATION","ClaimHeaderTitle","isLoading","loadingSession","periodChanged","headerTitle","thisPeriod","sessions","period_id","application_sessions","selectPeriod","setThisPeriod","setLoadingSession","onPeriodChange","session","session_plan_name","ClaimTypesEnum","thisApplication","position","position_title","setViewPosition","viewPosition","previous","ApplicationStates","Rejected","DATE","dangerouslySetInnerHTML","__html","school_level_id","school_level_name","education_institute_id","education_category_title","courses","course_name","course_code","course_id","DisplayCompetence","competence","description","requirements","FC_ApplicationPositionDistinctCategory","DistinctCategoriesTemp","category_title","ViewRequirements","PositionsTemp","req","category_id","NoResult","NoResultThemes","Dark","questionTypes","loadQuestionTypes","thisExam","CandidateAnswersDetails","showAnswers","exam_id","claimShowAnswer","thisExamSheet","myPlacement","placed","school","school_name","district_id","district_name","getMyRejectedApplications","getMyRejectedDocuments","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","candidateApplications","user","user_id","candidateDocuments","myClaims","COMPLETED","getDocumentById","document_id","doc_id","whichClaimType","application","document","exam","MARKS_PUBLICATION","marks_publication","PLACEMENT_TRANSFER","placement","whichClaimStatus","classes","getClaimById","claim_id","getApplicationById","application_id","displayDocClaimTitle","claiming_on_id","displayClaimTitle","documentReducer","allCourse","myAnswer","thisAnswer","getCourseIdBySheetId","getCourseById","course","Index","setState","setViewClaim","viewClaim","setPeriodChanged","setClaimForm","claimForm","setClaimId","claimId","setSearchClaim","searchClaim","loadClaims","getMyClaims","setSession","thisSession","is_active","loadExamAnswers","activeSessionPlan","getMyAnswers","getClaimReasons","loadCourses","GetAllSessionPlans","documentCategory","getDocumentCategory","documentSubCategory","getDocumentSubCategory","documentFields","getDocumentFields","getMyPlacement","isDeleteAllowed","thisCLaim","colSpan","Light","search","ClaimApplView","ClaimExamView","ClaimForm","formState","setFormState","CandidateClaim","sessionPlan","allSessionPlans"],"mappings":"kTAoBMA,E,kDACJ,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IAORC,kBAAoB,kBAAM,EAAKD,MAAME,eAAc,IARtB,EAS7BC,qBAAuB,kBAAM,EAAKH,MAAME,eAAc,IANpD,EAAKE,MAAQ,CACXC,SAAS,GAJgB,E,0CAW7B,WAGE,IAAwB,IAFAC,KAAKN,MAAMO,KAAKC,gBAGtC,OAAO,KAGT,IAAMC,EAAYH,KAAKN,MAAMU,OAAOC,WACpC,OACE,qBACEC,UAAS,2DACO,IAAdH,EAAqB,sBAAwB,uBADtC,kGADX,SAKGH,KAAKN,MAAMa,e,GA1BUC,IAAMC,WAuCvBC,EAAiBC,aAPN,SAAC,GAIvB,MAAO,CAAEV,KADuC,EAFhDA,KAGqBG,OAD2B,EADhDA,UAKqD,CACrDQ,eACAhB,oBAF4Be,CAG3BlB,GAwCUoB,EAA2C,SAAC,GAKpC,IAAD,IAJlBC,aAIkB,MAJV,GAIU,MAHlBC,YAGkB,MAHXC,IAGW,MAFlBC,cAEkB,aADlBC,aACkB,MADV,EACU,EACZC,EAAcJ,EACpB,OACE,0BACET,UAAS,WACI,IAAXW,EACI,mCACA,4BAHG,+HADX,UAOE,0BAASX,UAAU,SAAnB,UACE,cAACa,EAAD,CAAab,UAAU,8BACvB,+BAAOQ,OAGRI,EAAQ,EACP,sBAAMZ,UAAU,0DAAhB,SACGY,IAED,U,oPCnGJE,EAAmB,SAACC,GACxB,GAA8B,IAA1BA,EAAUC,YAAmB,CAC/B,IAAMC,EAAaF,EAAUG,OAAOC,MAAK,SAACC,GAAD,OAAyB,IAAfA,EAAKC,SACxD,GAAIJ,GACEA,EAAWK,wBAA0BC,IAAoBC,SAC3D,OAAO,EAIb,OAAO,GAGIC,EAAmB,SAC9BV,EACAM,GAMA,QAJmBN,EAAUG,OAAOC,MAClC,SAACC,GAAD,OACEA,EAAKC,QAAUA,GAASD,EAAKM,eAAiBC,IAAYC,cAkVjD1B,QAAM2B,KACnBxB,YAAQ,KAAM,CACZyB,kBACAC,oBACAC,sBAHF3B,EA5SgD,SAACjB,GACjD,IAAM6C,EAAY,uCAAG,4BAAAC,EAAA,0DACfC,YAAgB/C,EAAMgD,eADP,yCAEVhD,EAAMiD,aAAa,CACxBC,QAAS,UACTC,IAAK,gCAJU,UAOdnD,EAAM2B,UAPQ,yCAQV3B,EAAM2C,eAAe,CAC1BvB,MAAO,wBACPgC,MAAOC,IAAgBC,WAVR,cAcnBtD,EAAMuD,mBAAkB,GAdL,SAgBjBC,cAhBiB,SAiBCC,IAAMC,IAAN,UACbC,IAAIC,SADS,yBACgB5D,EAAM2B,UAAUkC,KAChD,CACEC,OAAQ9D,EAAMgD,gBApBD,OAiBXe,EAjBW,OAuBjBC,QAAQC,IAAI,CAAEF,IAAKA,EAAIG,OACJ,MAAfH,EAAII,QAAiC,MAAfJ,EAAII,SAC5BnE,EAAM0C,cAAcqB,EAAIG,MACxBlE,EAAM2C,eAAe,CACnBvB,MAAO,wBACPgC,MAAOC,IAAgBe,UAEzBpE,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,IA/BL,kDAkCjBN,QAAQO,MAAM,CAAEA,MAAK,OACrBvE,EAAM2C,eAAe,CACnBvB,MAAOoD,YAAY,EAAD,IAClBpB,MAAOC,IAAgBoB,SArCR,QAwCnBzE,EAAMuD,mBAAkB,GAxCL,0DAAH,qDAyDZmB,EAAgB,SACpBC,GAEA,GAAI3E,EAAM4E,aACR,OAAO5E,EAAM4E,aAAa7C,MAAK,SAACC,GAAD,OAAUA,EAAK6C,KAAOF,MAKzD,OACE,0BAAS/D,UAAU,GAAnB,UACE,sBAAKA,UAAU,iDAAf,UAEE,0BAASA,UAAU,gBAAnB,UACE,sBAAKA,UAAU,oCAAf,UACE,sBAAKA,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,oBACA,sBAAMA,UAAU,kCAAhB,SACGkE,YAAiB9E,EAAM+E,mBAAoB/E,EAAMgF,SAASC,UAG/D,wBACEC,KAAK,SACLtE,UAAU,uGACVuE,QAAS,kBAAMnF,EAAMoF,cAAcpF,EAAMqF,YAH3C,SAKGrF,EAAMqF,UAAY,OAAS,YAGhC,sBAAKzE,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBACEA,UAAS,oBAC6B,aAApCZ,EAAMgF,QAAQM,kBACV,kBACA,gBAHG,sBADX,SAOGC,YAAsBvF,EAAMgF,QAAQM,wBASzC,sBAAK1E,UAAU,+CAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBAAMA,UAAU,cAAhB,SACGZ,EAAMgF,QAAQQ,aAAaC,aAK/BzF,EAAMqF,WACL,qBAAKzE,UAAU,gDAAf,SACE,qBACE8E,IAAG,UAAK/B,IAAIgC,WAAT,YAAuB3F,EAAMgF,QAAQY,OACxCC,IAAI,WACJjF,UAAS,kDAWhBZ,EAAM2B,UAAUG,OAAOgE,OAAS,GAC/B9F,EAAM2B,UAAUG,OAAOiE,KAAI,SAACC,EAAOC,GAAR,OACzB,0BACErF,UAAU,0BADZ,UAKE,sBAAKA,UAAU,kCAAf,UACE,sBAAKA,UAAU,wDAAf,UACE,cAAC,IAAD,IACC8D,EAAc1E,EAAM2B,UAAUuE,uBAC3BxB,EAAc1E,EAAM2B,UAAUuE,uBAC3BpC,OACH,GAAK9D,EAAM2B,UAAUuE,yBAE3B,4BAAIF,EAAMlC,SACV,sBAAMlD,UAAU,wBAAhB,SACGuF,YAASH,EAAMI,gBAKnB/D,EAAiBrC,EAAM2B,UAAWqE,EAAM/D,QACvC,0BAASrB,UAAU,OAAnB,UACE,uBAAMA,UAAU,qCAAhB,6BACmBqF,EAAQ,EAD3B,OAGA,sBAAKrF,UAAU,aAAf,UACE,sBAAKA,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBACEA,UAAS,oBACPoF,EAAM9D,wBACNC,IAAoBC,SAChB,kBACA,gBAJG,sBADX,SAQGmD,YACCS,EAAM9D,sBAAsBmE,0BAUlC,sBAAKzF,UAAU,+CAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBAAMA,UAAU,cAAhB,SACGoF,EAAMM,gCAhDZL,EAAQD,EAAMnC,WA2D3B,qCACI7D,EAAMuG,YACN,sBAAK3F,UAAU,gDAAf,UACE,sBACEA,UAAS,UACPZ,EAAM2B,UAAU6E,oBAAsBjE,IAAYkE,QAC9C,kBACAzG,EAAM2B,UAAU6E,oBAAsBjE,IAAYmE,QAClD,eACA,iBALG,yBADX,SASGnB,YACCvF,EAAM2B,UAAU6E,kBAAkBH,uBAIrC3E,EAAiB1B,EAAM2B,YACtB,sBAAKf,UAAU,qDAAf,UACE,sBAAKA,UAAU,OAAf,UACE,cAAC,IAAD,CAAWA,UAAU,wBACrB,gCACE,sBAAMA,UAAU,cAAhB,wBADF,8CAKF,sBAAKA,UAAU,0CAAf,UACE,wBACEA,UAAU,sEACVuE,QAAS,kBAAMnF,EAAMsE,eAAc,IACnCqC,SAAU3G,EAAM4G,eAHlB,yBAOA,wBACEhG,UAAU,oEACVuE,QAAS,kBAAuBnF,EAAM2B,gBAvLS,IAA3DkF,OAAOC,QAAQ,yCACjB9G,EAAM4C,kBAAiB,SAACuB,EAAiBhB,GACvCnD,EAAMuD,mBAAkB,GACnBR,YAAgBI,IACnBnD,EAAM2C,eAAe,CACnBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,cAkLfkC,SAAU3G,EAAM4G,eAHlB,gCAaT5G,EAAMuG,YACL,sBAAK3F,UAAU,kEAAf,UACE,sBAAKA,UAAU,cAAf,UACE,0BACEmG,YAAW,6BACXC,KAAM,GACNC,KAAM,EACNrG,UAAS,wBACPZ,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,QAC/B,MACA,OAHG,oDAKTiE,MAAO,CAAEC,OAAQ,QACjBC,MAAOrH,EAAMgD,cACbsE,SAAU,SAACC,GACTvH,EAAMqE,iBAAiBkD,EAAEC,OAAOH,OAChCrH,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,iBAEjB5G,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,SAClC,mBAAGtC,UAAU,eAAb,SAA6BZ,EAAMkH,UAAU/D,SAGjD,sBAAKvC,UAAU,kDAAf,UACE,yBACEA,UAAU,iIACVuE,QAAS,WACPnF,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,GACpBtE,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,eAPlB,UASE,cAAC,IAAD,CAAmBhG,UAAU,YAC7B,2CAEF,wBACEA,UAAU,iIACV+F,SAAU3G,EAAM4G,eAChBzB,QAAS,kBAAMtC,KAHjB,SAKG7C,EAAM4G,eACL,qBAAKhG,UAAU,GAAf,wBAEA,sBAAKA,UAAU,2CAAf,UACE,cAAC,IAAD,CAAkBA,UAAU,YAC5B,iE,qJC/VP6G,EAA0B,SACrCC,EACAC,GAEA,MAAkB,QAAdA,EACKD,EAGFA,EAAUE,QAAO,SAAC5F,GAAD,OAAUA,EAAK6F,WAAaF,MA4LvC7G,QAAM2B,KACnBxB,aARsB,SAAC,GAIvB,MAAO,CAAEV,KADsD,EAF/DA,KAGeuH,SADgD,EAD/DA,YAMyB,CACvBC,qBACAC,yBACAC,iBACAtF,qBAJF1B,EA5K0D,SAACjB,GAC3D,MAA8BkI,oBAAkB,GAAhD,mBAAO7H,EAAP,KAAgB8H,EAAhB,KACA,EAAkDD,oBAAkB,GAApE,mBAAOE,EAAP,KAA0BC,EAA1B,KAEAC,qBAAU,WAC0B,OAA9BtI,EAAM8H,SAASS,WACjBvI,EAAM+H,kBAAiB,SAAC5D,EAAiBhB,IACxB,IAAXgB,IACEhB,EAAI2C,OAAS,GACf9F,EAAM2C,eAAe,CACnBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,SAG3B4D,GAAqB,GACrBF,GAAW,OAGNC,IACTC,GAAqB,GACrBF,GAAW,MAEZ,CAACC,EAAmBpI,IAEvB,IAAMwI,EAAc,SAClBV,EACAW,GAEA,IAAIC,EAAiB,EAerB,OAbIZ,EAASa,WAA0B,QAAbF,IACxBC,EAASZ,EAASa,UAAUf,QAC1B,SAAC5F,GAAD,OAAUA,EAAKwE,oBAAsBjE,IAAYkE,WACjDX,QAEAgC,EAASa,WAA0B,QAAbF,IACxBC,EAASZ,EAASa,UAAUf,QAC1B,SAAC5F,GAAD,OACEA,EAAK6F,WAAaY,GAClBzG,EAAKwE,oBAAsBjE,IAAYkE,WACzCX,QAGG4C,GAGT,OACE,eAAC,IAAME,SAAP,WACE,sBAAMhI,UAAU,eAAhB,mCAEEP,GAAWL,EAAM6I,gBACjB,0BAASjI,UAAU,YAAnB,UACE,qBAAKA,UAAU,wGACf,qBAAKA,UAAU,wGACf,qBAAKA,UAAU,wGACf,qBAAKA,UAAU,4GAMjBP,IAAYL,EAAM6I,eAAiB7I,EAAM8H,SAASS,YAClD,oCAEE,qBACE3H,UAAU,OACVuE,QAAS,WAEPnF,EAAMgI,qBAAqB,QAJ/B,SAOE,cAAC,IAAD,CACE5G,MAAM,MACNG,OAA6C,QAArCvB,EAAM8H,SAASgB,kBACvBtH,MAAOgH,EAAYxI,EAAM8H,SAAU,YAIrC9H,EAAM+I,qBACN,qBACEnI,UAAU,OACVuE,QAAS,WAEPnF,EAAMgI,qBAAqBgB,IAAcC,cAJ7C,SAOE,cAAC,IAAD,CACE7H,MAAO,cACPG,OACuC,QAArCvB,EAAM8H,SAASgB,mBACf9I,EAAM8H,SAASgB,oBAAsBE,IAAcC,YAErDzH,MAAOgH,EAAYxI,EAAM8H,SAAUkB,IAAcC,kBAKrDjJ,EAAM+I,qBACN,qBACEnI,UAAU,OACVuE,QAAS,WACPnF,EAAMgI,qBAAqBgB,IAAcE,sBAH7C,SAME,cAAC,IAAD,CACE9H,MAAO,WACPG,OACuC,QAArCvB,EAAM8H,SAASgB,mBACf9I,EAAM8H,SAASgB,oBACbE,IAAcE,oBAElB1H,MAAOgH,EACLxI,EAAM8H,SACNkB,IAAcE,0BAMpBlJ,EAAM+I,qBACN,qBACEnI,UAAU,OACVuE,QAAS,WACPnF,EAAMgI,qBAAqBgB,IAAcG,cAH7C,SAME,cAAC,IAAD,CACE/H,MAAO,OACPG,OACuC,QAArCvB,EAAM8H,SAASgB,mBACf9I,EAAM8H,SAASgB,oBAAsBE,IAAcG,YAErD3H,MAAOgH,EAAYxI,EAAM8H,SAAUkB,IAAcG,kBAItD,a,iCCpLX,oCAwBMC,EAAoD,SAACpJ,GACzD,IAAMqJ,EAAY,WAChB,SAAIrJ,EAAMK,SAAWL,EAAMsJ,gBAAkBtJ,EAAMuJ,gBAMrD,OACE,sBAAK3I,UAAU,wEAAf,UACE,sBAAKA,UAAU,wCAAf,UACE,cAAC,IAAD,CAAiBA,UAAU,2CAC3B,qBAAKA,UAAU,gBAAf,SACE,sBAAMA,UAAU,mCAAhB,SACGZ,EAAMwJ,mBAMb,yBAAS5I,UAAU,gCAAnB,SACE,8BACE,wBACEA,UAAS,uFACPyI,IAAc,cAAgB,kBAEhChC,MAAOrH,EAAMyJ,WAAazJ,EAAMyJ,WAAW5F,IAAM,GACjD8C,SAAU0C,IACV/B,SAAU,SAACC,GApCF,IACnBmC,EACAC,EADAD,EAqCc1J,EAAM4J,qBApCpBD,EAqCcpC,EAAEC,OAAOH,OAFXwC,EAGE7J,EAAM8J,eAnCNJ,EAAS9B,QAAO,SAAC5F,GAAD,OAAUA,EAAK6B,MAAQ8F,KAAW,IAqCpD3J,EAAM+J,mBAAkB,GACxB/J,EAAMgK,eAAezC,EAAEC,OAAOH,QAblC,SAgBGrH,EAAM4J,qBAAqB7D,KAAI,SAACkE,EAASjI,GAAV,OAC9B,wBAAiCqF,MAAO4C,EAAQpG,IAAhD,SACGoG,EAAQC,mBADED,EAAQpG,IAAM7B,gBAY1BlB,QAAM2B,KAAK2G,I,weC7Bde,E,qSCjBNzI,EAAmB,SAACC,GACxB,GAA8B,IAA1BA,EAAUC,YAAmB,CAC/B,IAAMC,EAAaF,EAAUG,OAAOC,MAAK,SAACC,GAAD,OAAyB,IAAfA,EAAKC,SACxD,GAAIJ,GACEA,EAAWK,wBAA0BC,IAAoBC,SAC3D,OAAO,EAIb,OAAO,GA6bMtB,MAAM2B,KACnBxB,YAAQ,KAAM,CACZyB,kBACAC,oBACAC,sBAHF3B,EA7ZgD,SAACjB,GACjD,IAAM6C,EAAY,uCAAG,4BAAAC,EAAA,0DACfC,YAAgB/C,EAAMgD,eADP,yCAEVhD,EAAMiD,aAAa,CACxBC,QAAS,UACTC,IAAK,gCAJU,UAOdnD,EAAM2B,UAPQ,yCAQV3B,EAAM2C,eAAe,CAC1BvB,MAAO,oBACPgC,MAAOC,IAAgBC,WAVR,cAcnBtD,EAAMuD,mBAAkB,GAdL,SAgBjBC,cAhBiB,SAiBCC,IAAMC,IAAN,UACbC,IAAIC,SADS,yBACgB5D,EAAM2B,UAAUkC,KAChD,CACEC,OAAQ9D,EAAMgD,gBApBD,OAiBXe,EAjBW,OAuBjBC,QAAQC,IAAI,CAAEF,IAAKA,EAAIG,OACJ,MAAfH,EAAII,QAAiC,MAAfJ,EAAII,SAC5BnE,EAAM0C,cAAcqB,EAAIG,MACxBlE,EAAM2C,eAAe,CACnBvB,MAAO,wBACPgC,MAAOC,IAAgBe,UAEzBpE,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,IA/BL,kDAkCjBN,QAAQO,MAAM,CAAEA,MAAK,OACrBvE,EAAM2C,eAAe,CACnBvB,MAAOoD,YAAY,EAAD,IAClBpB,MAAOC,IAAgBoB,SArCR,QAwCnBzE,EAAMuD,mBAAkB,GAxCL,0DAAH,qDAyDZmB,EAAgB,SACpBC,GAEA,GAAI3E,EAAM4E,aACR,OAAO5E,EAAM4E,aAAa7C,MAAK,SAACC,GAAD,OAAUA,EAAK6C,KAAOF,MAKzD,OACE,0BAAS/D,UAAU,GAAnB,UACE,sBAAKA,UAAU,iDAAf,UAEE,0BAASA,UAAU,gBAAnB,UACE,sBAAKA,UAAU,oCAAf,UACE,sBAAMA,UAAU,mCAAhB,SACGZ,EAAMoK,gBAAgBC,SAASC,iBAElC,wBACEpF,KAAK,SACLtE,UAAU,uGACVuE,QAAS,kBAAMnF,EAAMuK,iBAAiBvK,EAAMwK,eAH9C,SAKGxK,EAAMwK,aAAe,OAAS,YAGnC,sBAAK5J,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBACEA,UAAS,oBACPZ,EAAM2B,UAAU8I,SAAStG,SAAWuG,IAAkBC,SAClD,kBACA,gBAHG,sBADX,SAOGpF,YAAsBvF,EAAM2B,UAAU8I,SAAStG,cASnD,EAWD,sBAAKvD,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,mBACA,sBAAMA,UAAU,+BAAhB,SACGgK,YAAK5K,EAAMoK,gBAAgBhE,gBAGhC,sBAAKxF,UAAU,+CAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBACEA,UAAU,cACViK,wBAAyB,CACvBC,OAAQ9K,EAAM2B,UAAU8I,SAAS3G,aAMtC9D,EAAMwK,cACL,qBAAK5J,UAAU,wDAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,wCAAf,8BAYA,sBAAKA,UAAU,kDAAf,UACE,sBAAMA,UAAS,SAAf,2BACA,sBAAMA,UAAU,gBAAhB,SAEIZ,EAAMoK,gBAAgBC,SAASU,gBAC5BC,uBAIT,sBAAKpK,UAAU,kDAAf,UACE,sBAAMA,UAAS,SAAf,wBACA,sBAAMA,UAAU,gBAAhB,SAEIZ,EAAMoK,gBAAgBC,SAASY,uBAC5BC,8BAIT,sBAAKtK,UAAU,kDAAf,UACE,sBAAMA,UAAS,SAAf,sBACA,sBAAMA,UAAU,0BAAhB,SACGZ,EAAMoK,gBAAgBC,SAASc,QAAQpF,KACtC,SAAC/D,EAAMiE,GAAP,OACE,sBAEErF,UAAU,0BAFZ,UAIE,sBAAMA,UAAU,gBAAhB,SACGoB,EAAKoJ,cAER,uBAAMxK,UAAU,gBAAhB,cACIoB,EAAKqJ,YADT,OAGCpF,IACCjG,EAAMoK,gBAAgBC,SAASc,QAAQrF,OAAS,GAChD,MAXGG,EAAQjE,EAAKsJ,mBAkB5B,qBAAK1K,UAAU,wCAAf,kCAIA,8BACE,cAAC2K,EAAA,EAAD,CACEC,WAAYxL,EAAMoK,gBAAgBC,SAASoB,gBAK/C,qBAAK7K,UAAU,wCAAf,mCAGCZ,EAAMoK,gBAAgBC,SAASqB,aAAa5F,OAAS,EACpD6F,YACE3L,EAAMoK,gBAAgBC,SACtBrK,EAAM+E,oBACN6G,uBAAuB7F,KAAI,SAAC/D,EAAMiE,GAAP,OAC3B,sBACErF,UAAU,wDADZ,UAIE,sBAAKA,UAAU,2DAAf,UACE,cAAC,KAAD,IACA,+BAAOoB,EAAK6J,oBAEd,qBAAKjL,UAAU,uBAAf,SACE,cAACkL,EAAA,EAAD,CACEJ,aAAcC,YACZ3L,EAAMoK,gBAAgBC,SACtBrK,EAAM+E,oBACNgH,cAAcnE,QACd,SAACoE,GAAD,OAASA,EAAIC,cAAgBjK,EAAKiK,qBAZnChG,EAAQjE,EAAKiK,gBAmBtB,cAACC,EAAA,EAAD,CACE9I,MAAO+I,IAAeC,KACtB/E,MAAO,4BAalBrH,EAAM2B,UAAUG,OAAOgE,OAAS,GAC/B9F,EAAM2B,UAAUG,OAAOiE,KAAI,SAACC,EAAOC,GAAR,OACzB,0BACErF,UAAU,0BADZ,UAKE,sBAAKA,UAAU,kCAAf,UACE,sBAAKA,UAAU,wDAAf,UACE,cAAC,IAAD,IACC8D,EAAc1E,EAAM2B,UAAUuE,uBAC3BxB,EAAc1E,EAAM2B,UAAUuE,uBAC3BpC,OACH,MAEN,4BAAIkC,EAAMlC,SACV,sBAAMlD,UAAU,wBAAhB,SACGuF,YAASH,EAAMI,gBAKnB/D,YAAiBrC,EAAM2B,UAAWqE,EAAM/D,QACvC,0BAASrB,UAAU,OAAnB,UACE,uBAAMA,UAAU,qCAAhB,6BACmBqF,EAAQ,EAD3B,OAGA,sBAAKrF,UAAU,aAAf,UACE,sBAAKA,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBACEA,UAAS,oBACPoF,EAAM9D,wBACNC,IAAoBC,SAChB,kBACA,gBAJG,sBADX,SAQGmD,YACCS,EAAM9D,sBAAsBmE,0BAUlC,sBAAKzF,UAAU,+CAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBAAMA,UAAU,cAAhB,SACGoF,EAAMM,gCAhDZL,EAAQD,EAAMnC,WA2D3B,qCACI7D,EAAMuG,YACN,sBAAK3F,UAAU,gDAAf,UACE,sBACEA,UAAS,UACPZ,EAAM2B,UAAU6E,oBAAsBjE,IAAYkE,QAC9C,kBACAzG,EAAM2B,UAAU6E,oBAAsBjE,IAAYmE,QAClD,eACA,iBALG,yBADX,SASGnB,YACCvF,EAAM2B,UAAU6E,kBAAkBH,uBAIrC3E,EAAiB1B,EAAM2B,YACtB,sBAAKf,UAAU,qDAAf,UACE,sBAAKA,UAAU,OAAf,UACE,cAAC,IAAD,CAAWA,UAAU,wBACrB,gCACE,sBAAMA,UAAU,cAAhB,6BADF,8CAKF,sBAAKA,UAAU,0CAAf,UACE,wBACEA,UAAU,sEACVuE,QAAS,kBAAMnF,EAAMsE,eAAc,IACnCqC,SAAU3G,EAAM4G,eAHlB,yBAOA,wBACEhG,UAAU,oEACVuE,QAAS,kBAAuBnF,EAAM2B,gBAxSS,IAA3DkF,OAAOC,QAAQ,yCACjB9G,EAAM4C,kBAAiB,SAACuB,EAAiBhB,GACvCnD,EAAMuD,mBAAkB,GACnBR,YAAgBI,IACnBnD,EAAM2C,eAAe,CACnBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,cAmSfkC,SAAU3G,EAAM4G,eAHlB,gCAaT5G,EAAMuG,YACL,sBAAK3F,UAAU,kEAAf,UACE,sBAAKA,UAAU,cAAf,UACE,0BACEmG,YAAW,6BACXC,KAAM,GACNC,KAAM,EACNrG,UAAS,wBACPZ,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,QAC/B,MACA,OAHG,oDAKTiE,MAAO,CAAEC,OAAQ,QACjBC,MAAOrH,EAAMgD,cACbsE,SAAU,SAACC,GACTvH,EAAMqE,iBAAiBkD,EAAEC,OAAOH,OAChCrH,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,iBAEjB5G,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,SAClC,mBAAGtC,UAAU,eAAb,SAA6BZ,EAAMkH,UAAU/D,SAGjD,sBAAKvC,UAAU,kDAAf,UACE,yBACEA,UAAU,iIACVuE,QAAS,WACPnF,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,GACpBtE,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,eAPlB,UASE,cAAC,IAAD,CAAmBhG,UAAU,YAC7B,2CAEF,wBACEA,UAAU,iIACV+F,SAAU3G,EAAM4G,eAChBzB,QAAS,kBAAMtC,KAHjB,SAKG7C,EAAM4G,eACL,qBAAKhG,UAAU,GAAf,wBAEA,sBAAKA,UAAU,2CAAf,UACE,cAAC,IAAD,CAAkBA,UAAU,YAC5B,gE,0BCvbdc,EAAmB,SAACC,GACxB,GAA8B,IAA1BA,EAAUC,YAAmB,CAC/B,IAAMC,EAAaF,EAAUG,OAAOC,MAAK,SAACC,GAAD,OAAyB,IAAfA,EAAKC,SACxD,GAAIJ,GACEA,EAAWK,wBAA0BC,IAAoBC,SAC3D,OAAO,EAIb,OAAO,GA8UMtB,MAAM2B,KACnBxB,aATsB,SAAC,GAKvB,MAAO,CAAEoL,cADN,EAHHA,iBAQyB,CACvBC,uBACA5J,kBACAC,oBACAC,sBAJF3B,EA5SgD,SAACjB,GACjD,MAA8BkI,oBAAS,GAAvC,mBAAO7H,EAAP,KAAgB8H,EAAhB,KAEAG,qBAAU,YAEgC,OAAtCtI,EAAMqM,cAAcA,eAC0B,IAA7CrM,EAAMqM,cAAcA,cAAcvG,QAAgBzF,IAEnDL,EAAMsM,kBAAkBnE,KAEzB,CAAC9H,EAASL,IAEb,IAAM6C,EAAY,uCAAG,4BAAAC,EAAA,0DACfC,YAAgB/C,EAAMgD,eADP,yCAEVhD,EAAMiD,aAAa,CACxBC,QAAS,UACTC,IAAK,gCAJU,UAOdnD,EAAM2B,UAPQ,yCAQV3B,EAAM2C,eAAe,CAC1BvB,MAAO,oBACPgC,MAAOC,IAAgBC,WAVR,cAcnBtD,EAAMuD,mBAAkB,GAdL,SAgBjBC,cAhBiB,SAiBCC,IAAMC,IAAN,UACbC,IAAIC,SADS,yBACgB5D,EAAM2B,UAAUkC,KAChD,CACEC,OAAQ9D,EAAMgD,gBApBD,OAiBXe,EAjBW,OAuBjBC,QAAQC,IAAI,CAAEF,IAAKA,EAAIG,OACJ,MAAfH,EAAII,QAAiC,MAAfJ,EAAII,SAC5BnE,EAAM0C,cAAcqB,EAAIG,MACxBlE,EAAM2C,eAAe,CACnBvB,MAAO,wBACPgC,MAAOC,IAAgBe,UAEzBpE,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,IA/BL,kDAkCjBN,QAAQO,MAAM,CAAEA,MAAK,OACrBvE,EAAM2C,eAAe,CACnBvB,MAAOoD,YAAY,EAAD,IAClBpB,MAAOC,IAAgBoB,SArCR,QAwCnBzE,EAAMuD,mBAAkB,GAxCL,0DAAH,qDAyDZmB,EAAgB,SACpBC,GAEA,GAAI3E,EAAM4E,aACR,OAAO5E,EAAM4E,aAAa7C,MAAK,SAACC,GAAD,OAAUA,EAAK6C,KAAOF,MAKzD,OACE,0BAAS/D,UAAU,GAAnB,UACE,sBAAKA,UAAU,iDAAf,UAEE,0BAASA,UAAU,gBAAnB,UACE,sBAAKA,UAAU,oCAAf,UACE,uBAAMA,UAAU,mCAAhB,qBACWZ,EAAMuM,SAASnB,YAAa,OAEvC,wBACElG,KAAK,SACLtE,UAAU,uGACVuE,QAAS,kBAAMnF,EAAMuK,iBAAiBvK,EAAMwK,eAH9C,SAKGxK,EAAMwK,aAAe,OAAS,YAKlCxK,EAAMwK,cACL,qBAAK5J,UAAU,mCAAf,SACE,cAAC4L,EAAA,EAAD,CACEC,aAAa,EACbC,QAASC,YACP3M,EAAM4M,cACN5M,EAAMuM,SAASnB,oBAYxBpL,EAAM2B,UAAUG,OAAOgE,OAAS,GAC/B9F,EAAM2B,UAAUG,OAAOiE,KAAI,SAACC,EAAOC,GAAR,OACzB,0BACErF,UAAU,0BADZ,UAKE,sBAAKA,UAAU,kCAAf,UACE,sBAAKA,UAAU,wDAAf,UACE,cAAC,IAAD,IACC8D,EAAc1E,EAAM2B,UAAUuE,uBAC3BxB,EAAc1E,EAAM2B,UAAUuE,uBAC3BpC,OACH,MAEN,4BAAIkC,EAAMlC,SACV,sBAAMlD,UAAU,wBAAhB,SACGuF,YAASH,EAAMI,gBAKnB/D,YAAiBrC,EAAM2B,UAAWqE,EAAM/D,QACvC,0BAASrB,UAAU,OAAnB,UACE,uBAAMA,UAAU,qCAAhB,6BACmBqF,EAAQ,EAD3B,OAGA,sBAAKrF,UAAU,aAAf,UACE,sBAAKA,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBACEA,UAAS,oBACPoF,EAAM9D,wBACNC,IAAoBC,SAChB,kBACA,gBAJG,sBADX,SAQGmD,YACCS,EAAM9D,sBAAsBmE,0BAgBlC,sBAAKzF,UAAU,+CAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBAAMA,UAAU,cAAhB,SACGoF,EAAMM,gCAtDZL,EAAQD,EAAMnC,WAiE3B,qCACI7D,EAAMuG,YACN,sBAAK3F,UAAU,gDAAf,UACE,sBACEA,UAAS,UACPZ,EAAM2B,UAAU6E,oBAAsBjE,IAAYkE,QAC9C,kBACAzG,EAAM2B,UAAU6E,oBAAsBjE,IAAYmE,QAClD,eACA,iBALG,yBADX,SASGnB,YACCvF,EAAM2B,UAAU6E,kBAAkBH,uBAIrC3E,EAAiB1B,EAAM2B,YACtB,sBAAKf,UAAU,qDAAf,UACE,sBAAKA,UAAU,OAAf,UACE,cAAC,IAAD,CAAWA,UAAU,wBACrB,gCACE,sBAAMA,UAAU,cAAhB,6BADF,8CAKF,sBAAKA,UAAU,0CAAf,UACE,wBACEA,UAAU,sEACVuE,QAAS,kBAAMnF,EAAMsE,eAAc,IACnCqC,SAAU3G,EAAM4G,eAHlB,yBAOA,wBACEhG,UAAU,oEACVuE,QAAS,kBAAuBnF,EAAM2B,gBApKS,IAA3DkF,OAAOC,QAAQ,yCACjB9G,EAAM4C,kBAAiB,SAACuB,EAAiBhB,GACvCnD,EAAMuD,mBAAkB,GACnBR,YAAgBI,IACnBnD,EAAM2C,eAAe,CACnBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,cA+JfkC,SAAU3G,EAAM4G,eAHlB,gCAaT5G,EAAMuG,YACL,sBAAK3F,UAAU,kEAAf,UACE,sBAAKA,UAAU,cAAf,UACE,0BACEmG,YAAW,6BACXC,KAAM,GACNC,KAAM,EACNrG,UAAS,wBACPZ,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,QAC/B,MACA,OAHG,oDAKTiE,MAAO,CAAEC,OAAQ,QACjBC,MAAOrH,EAAMgD,cACbsE,SAAU,SAACC,GACTvH,EAAMqE,iBAAiBkD,EAAEC,OAAOH,OAChCrH,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,iBAEjB5G,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,SAClC,mBAAGtC,UAAU,eAAb,SAA6BZ,EAAMkH,UAAU/D,SAGjD,sBAAKvC,UAAU,kDAAf,UACE,yBACEA,UAAU,iIACVuE,QAAS,WACPnF,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,GACpBtE,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,eAPlB,UASE,cAAC,IAAD,CAAmBhG,UAAU,YAC7B,2CAEF,wBACEA,UAAU,iIACV+F,SAAU3G,EAAM4G,eAChBzB,QAAS,kBAAMtC,KAHjB,SAKG7C,EAAM4G,eACL,qBAAKhG,UAAU,GAAf,wBAEA,sBAAKA,UAAU,2CAAf,UACE,cAAC,IAAD,CAAkBA,UAAU,YAC5B,gE,SC9Udc,EAAmB,SAACC,GACxB,GAA8B,IAA1BA,EAAUC,YAAmB,CAC/B,IAAMC,EAAaF,EAAUG,OAAOC,MAAK,SAACC,GAAD,OAAyB,IAAfA,EAAKC,SACxD,GAAIJ,GACEA,EAAWK,wBAA0BC,IAAoBC,SAC3D,OAAO,EAIb,OAAO,GA0QMtB,MAAM2B,KACnBxB,YAAQ,KAAM,CACZyB,kBACAC,qBAFF1B,EAjO4D,SAACjB,GAC7D,IAAM6C,EAAY,uCAAG,4BAAAC,EAAA,0DACfC,YAAgB/C,EAAMgD,eADP,yCAEVhD,EAAMiD,aAAa,CACxBC,QAAS,UACTC,IAAK,gCAJU,UAOdnD,EAAM2B,UAPQ,yCAQV3B,EAAM2C,eAAe,CAC1BvB,MAAO,wBACPgC,MAAOC,IAAgBC,WAVR,cAcnBtD,EAAMuD,mBAAkB,GAdL,SAgBjBC,cAhBiB,SAiBCC,IAAMC,IAAN,UACbC,IAAIC,SADS,yBACgB5D,EAAM2B,UAAUkC,KAChD,CACEC,OAAQ9D,EAAMgD,gBApBD,OAiBXe,EAjBW,OAuBjBC,QAAQC,IAAI,CAAEF,IAAKA,EAAIG,OACJ,MAAfH,EAAII,QAAiC,MAAfJ,EAAII,SAC5BnE,EAAM0C,cAAcqB,EAAIG,MACxBlE,EAAM2C,eAAe,CACnBvB,MAAO,wBACPgC,MAAOC,IAAgBe,UAEzBpE,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,IA/BL,kDAkCjBN,QAAQO,MAAM,CAAEA,MAAK,OACrBvE,EAAM2C,eAAe,CACnBvB,MAAOoD,YAAY,EAAD,IAClBpB,MAAOC,IAAgBoB,SArCR,QAwCnBzE,EAAMuD,mBAAkB,GAxCL,0DAAH,qDA2ClB,OACE,0BAAS3C,UAAU,GAAnB,UACE,sBAAKA,UAAU,iDAAf,UAEE,0BAASA,UAAU,gBAAnB,UACE,qBAAKA,UAAU,oCAAf,SACE,sBAAKA,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBAAMA,UAAU,kCAAhB,SACGZ,EAAM6M,YAAYC,OAAOC,OAAOC,mBAYvC,qBAAKpM,UAAU,oBAAf,SACE,sBAAKA,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,uBACA,sBAAMA,UAAU,kCAAhB,SACGZ,EAAM6M,YAAYC,OAAOC,OAAOE,YAAYC,wBAUpDlN,EAAM2B,UAAUG,OAAOgE,OAAS,GAC/B9F,EAAM2B,UAAUG,OAAOiE,KAAI,SAACC,EAAOC,GAAR,OACzB,0BACErF,UAAU,0BADZ,UAKE,sBAAKA,UAAU,kCAAf,UACE,4BAAIoF,EAAMlC,SACV,sBAAMlD,UAAU,wBAAhB,SACGuF,YAASH,EAAMI,iBA/HhCzE,EAoI8B3B,EAAM2B,UAnIpCM,EAmI+C+D,EAAM/D,QAjIlCN,EAAUG,OAAOC,MAClC,SAACC,GAAD,OACEA,EAAKC,QAAUA,GAASD,EAAKM,eAAiBC,IAAYC,cAgIhD,0BAAS5B,UAAU,OAAnB,UACE,uBAAMA,UAAU,qCAAhB,6BACmBqF,EAAQ,EAD3B,OAGA,sBAAKrF,UAAU,aAAf,UACE,sBAAKA,UAAU,gDAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBACEA,UAAS,oBACPoF,EAAM9D,wBACNC,IAAoBC,SAChB,kBACA,gBAJG,sBADX,SAQGmD,YACCS,EAAM9D,sBAAsBmE,0BAUlC,sBAAKzF,UAAU,+CAAf,UACE,sBAAMA,UAAS,SAAf,qBACA,sBAAMA,UAAU,cAAhB,SACGoF,EAAMM,iCAzCZL,EAAQD,EAAMnC,KA1HD,IAC9BlC,EACAM,QA4KI,qCACIjC,EAAMuG,YACN,sBAAK3F,UAAU,mDAAf,UACE,sBACEA,UAAS,UACPZ,EAAM2B,UAAU6E,oBAAsBjE,IAAYkE,QAC9C,kBACAzG,EAAM2B,UAAU6E,oBAAsBjE,IAAYmE,QAClD,eACA,iBALG,yBADX,SASGnB,YACCvF,EAAM2B,UAAU6E,kBAAkBH,uBAIrC3E,EAAiB1B,EAAM2B,YACtB,wBACEf,UAAU,eACVuE,QAAS,kBAAMnF,EAAMsE,eAAc,IACnCqC,SAAU3G,EAAM4G,eAHlB,wBAWL5G,EAAMuG,YACL,sBAAK3F,UAAU,kEAAf,UACE,sBAAKA,UAAU,cAAf,UACE,0BACEmG,YAAW,4BACXC,KAAM,GACNC,KAAM,EACNrG,UAAS,wBACPZ,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,QAC/B,MACA,OAHG,oDAKTiE,MAAO,CAAEC,OAAQ,QACjBC,MAAOrH,EAAMgD,cACbsE,SAAU,SAACC,GACTvH,EAAMqE,iBAAiBkD,EAAEC,OAAOH,OAChCrH,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,iBAEjB5G,EAAMkH,WAAyC,YAA5BlH,EAAMkH,UAAUhE,SAClC,mBAAGtC,UAAU,eAAb,SAA6BZ,EAAMkH,UAAU/D,SAGjD,sBAAKvC,UAAU,kDAAf,UACE,yBACEA,UAAU,iIACVuE,QAAS,WACPnF,EAAMqE,iBAAiB,IACvBrE,EAAMsE,eAAc,GACpBtE,EAAMiD,aAAa,OAErB0D,SAAU3G,EAAM4G,eAPlB,UASE,cAAC,IAAD,CAAmBhG,UAAU,YAC7B,2CAEF,wBACEA,UAAU,iIACV+F,SAAU3G,EAAM4G,eAChBzB,QAAS,kBAAMtC,KAHjB,SAKG7C,EAAM4G,eACL,qBAAKhG,UAAU,GAAf,wBAEA,sBAAKA,UAAU,2CAAf,UACE,cAAC,IAAD,CAAkBA,UAAU,YAC5B,gE,QCDLE,MAAM2B,KACnBxB,aARsB,SAAC,GAIvB,MAAO,CAAEV,KADsD,EAF/DA,KAGeuH,SADgD,EAD/DA,YAMyB,CACvBC,qBACAC,yBACAmF,8BACAC,2BACAzK,qBALF1B,EAvPgD,SAACjB,GACjD,MAA8BkI,oBAAkB,GAAhD,mBAAO7H,EAAP,KAAgB8H,EAAhB,KACA,EACED,oBAAkB,GADpB,mBAAOmF,EAAP,KAAoCC,EAApC,KAEA,EACEpF,oBAAkB,GADpB,mBAAOqF,EAAP,KAAiCC,EAAjC,KAEA,EAAkDtF,oBAAkB,GAApE,mBAAOE,EAAP,KAA0BC,EAA1B,KAEAC,qBAAU,WACqC,OAAzCtI,EAAM8H,SAAS2F,sBACjBzN,EAAMmN,0BACJnN,EAAMO,KAAKmN,KAAKC,SAChB,SAACxJ,EAAiBhB,IACD,IAAXgB,IACEhB,EAAI2C,OAAS,GACf9F,EAAM2C,eAAe,CACnBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,SAG3B6I,GAA+B,OAI5BD,GACTC,GAA+B,GAGS,OAAtCtN,EAAM8H,SAAS8F,oBACjB5J,QAAQC,IAAI,sDACZjE,EAAMoN,wBAAuB,SAACjJ,EAAiBhB,IAC9B,IAAXgB,IACEhB,EAAI2C,OAAS,GACf9F,EAAM2C,eAAe,CACnBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,SAG3B+I,GAA4B,QAGvBD,GACTC,GAA4B,GAGI,OAA9BxN,EAAM8H,SAASS,WACjBvI,EAAM+H,kBAAiB,SAAC5D,EAAiBhB,IACxB,IAAXgB,IACEhB,EAAI2C,OAAS,GACf9F,EAAM2C,eAAe,CACnBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,SAG3B4D,GAAqB,OAGhBD,GACTC,GAAqB,GAIpBgF,GACAE,GACAnF,IACD/H,GAEA8H,GAAW,KAEZ,CACD9H,EACA+H,EACAiF,EACAE,EACAvN,IAGF,IAAMwI,EAAc,SAClBV,EACAW,GAEA,IAAIC,EAAiB,EAkBrB,OAhBIZ,EAAS+F,UAAyB,QAAbpF,IACvBC,EAASZ,EAAS+F,SAASjG,QACzB,SAAC5F,GAAD,OACEA,EAAKwE,oBAAsBjE,IAAYmE,SACvC1E,EAAKwE,oBAAsBjE,IAAYuL,aACzChI,QAEAgC,EAAS+F,UAAyB,QAAbpF,IACvBC,EAASZ,EAAS+F,SAASjG,QACzB,SAAC5F,GAAD,OACEA,EAAK6F,WAAaY,GAClBzG,EAAKwE,oBAAsBjE,IAAYmE,SACvC1E,EAAKwE,oBAAsBjE,IAAYuL,aACzChI,QAGG4C,GAGT,OACE,eAAC,IAAME,SAAP,WACE,sBAAMhI,UAAU,eAAhB,mCAEEP,GAAWL,EAAM6I,gBACjB,0BAASjI,UAAU,YAAnB,UACE,qBAAKA,UAAU,wGACf,qBAAKA,UAAU,wGACf,qBAAKA,UAAU,wGACf,qBAAKA,UAAU,4GAMjBP,IAAYL,EAAM6I,eAClB,oCAEE,qBACEjI,UAAU,OACVuE,QAAS,WAEPnF,EAAMgI,qBAAqB,QAJ/B,SAOE,cAAC,IAAD,CACE5G,MAAM,MACNG,OAA6C,QAArCvB,EAAM8H,SAASgB,kBACvBtH,MAAOgH,EAAYxI,EAAM8H,SAAU,WAIvC,qBACElH,UAAU,OACVuE,QAAS,WAEPnF,EAAMgI,qBAAqBgB,IAAcC,cAJ7C,SAOE,cAAC,IAAD,CACE7H,MAAO,cACPG,OACuC,QAArCvB,EAAM8H,SAASgB,mBACf9I,EAAM8H,SAASgB,oBAAsBE,IAAcC,YAErDzH,MAAOgH,EAAYxI,EAAM8H,SAAUkB,IAAcC,iBAIrD,qBACErI,UAAU,OACVuE,QAAS,WACPnF,EAAMgI,qBAAqBgB,IAAcE,sBAH7C,SAME,cAAC,IAAD,CACE9H,MAAO,WACPG,OACuC,QAArCvB,EAAM8H,SAASgB,mBACf9I,EAAM8H,SAASgB,oBACbE,IAAcE,oBAElB1H,MAAOgH,EACLxI,EAAM8H,SACNkB,IAAcE,yBAKpB,qBACEtI,UAAU,OACVuE,QAAS,WACPnF,EAAMgI,qBAAqBgB,IAAcG,cAH7C,SAME,cAAC,IAAD,CACE/H,MAAO,OACPG,OACuC,QAArCvB,EAAM8H,SAASgB,mBACf9I,EAAM8H,SAASgB,oBAAsBE,IAAcG,YAErD3H,MAAOgH,EAAYxI,EAAM8H,SAAUkB,IAAcG,kBAIpD,Y,kBJ/KCgB,K,0BAAAA,E,oBAAAA,E,YAAAA,E,sCAAAA,E,uBAAAA,M,KAQL,IAAM4D,EAAkB,SAC7BH,EACAI,GAEA,IAAItF,EAAwCkF,EAAmB7L,MAC7D,SAACC,GAAD,OAAUA,EAAKiM,SAAWD,KAE5B,OAAOtF,GAAkB,MAGdwF,GAAiB,SAC5BvM,GAEA,OAAIA,EAAUkG,WAAamB,IAAcC,YAChCkB,EAAegE,YAEpBxM,EAAUkG,WAAamB,IAAcE,oBAChCiB,EAAeiE,SAEpBzM,EAAUkG,WAAamB,IAAcG,YAChCgB,EAAekE,KAEpB1M,EAAUkG,WAAamB,IAAcsF,kBAChCnE,EAAeoE,kBAEpB5M,EAAUkG,WAAamB,IAAcwF,mBAChCrE,EAAesE,eADxB,GAKWC,GAAmB,SAC9B/M,GAKA,IAAIgN,EAAiBxK,EACrB,OAAQxC,EAAU6E,mBAChB,KAAKjE,IAAYuL,UACfa,EAAU,qCACVxK,EAASoB,YAAsBhD,IAAYuL,UAAUzH,qBACrD,MACF,KAAK9D,IAAYC,UACfmM,EAAU,sCACVxK,EAASoB,YAAsBhD,IAAYC,UAAU6D,qBACrD,MAEF,KAAK9D,IAAYmE,QACfiI,EAAU,oCACVxK,EAASoB,YAAsBhD,IAAYmE,QAAQL,qBACnD,MAEF,QACEsI,EAAU,uCACVxK,EAASoB,YAAsBhD,IAAYkE,QAAQJ,qBAIvD,MAAO,CAAEsI,UAASxK,WAGPyK,GAAe,SAC1BlH,EACAmH,GAKA,IAAInG,EAA8ChB,EAAU3F,MAC1D,SAACC,GAAD,OAAUA,EAAK6B,MAAQgL,KAEzB,OAAOnG,GAAkB,MAGdoG,GAAqB,SAChCrB,EACAsB,GAEA,IAAIrG,EACF+E,EAAsB1L,MACpB,SAACC,GAAD,OAAUA,EAAK+M,iBAAmBA,KAEtC,OAAOrG,GAAkB,MAGdsG,GAAuB,SAClCjK,EACA6I,EACAjM,GAEA,IAAI+G,EAAiB,GAGrB,GAAI/G,EAAUkG,WAAamB,IAAcE,oBAAqB,CAC5D,IAAIlE,EAAU+I,EAAgBH,EAAoBjM,EAAUsN,gBAC5DvG,EAAS1D,EACLF,YAAiBC,EAAoBC,GAASC,KAC9C,qBAGN,OAAOyD,GAGIwG,GAAoB,SAC/BpH,EACAqH,EACAC,EACAzN,GAEA,IAAI+G,EAAiB/G,EAAUsN,eAY/B,GATEtN,EAAUkG,WAAamB,IAAcE,qBACrCpB,EAAS8F,qBAETlF,EAASsG,GACPG,EACArH,EAAS8F,mBACTjM,IAIFA,EAAUkG,WAAamB,IAAcC,aACrCnB,EAAS2F,sBACT,CACA,IAAIrD,EAAkB0E,GACpBhH,EAAS2F,sBACT9L,EAAUsN,gBAGVvG,EADE0B,EACOA,EAAgBC,SAASC,eAEzB,wBAIb,GACE3I,EAAUkG,WAAamB,IAAcG,aACrCiG,GACAtH,EAASuH,SACT,CACA,IAAIC,EAAaC,YACfzH,EAASuH,SACT1N,EAAUsN,gBAGVvG,EADE4G,GAAcE,YAAcJ,EAAWE,EAAWG,QAC3CD,YAAcJ,EAAWE,EAAWG,QAASrE,YAE7C,iBAUb,OANIzJ,EAAUkG,WAAamB,IAAcwF,qBACvC9F,EAASZ,EAAS+E,YACd,aAAe/E,EAAS+E,YAAYC,OAAOC,OAAOC,YAClD,uBAGCtE,GA4CHgH,G,kDACJ,WAAY1P,GAAkB,IAAD,8BAC3B,cAAMA,IAqBRmI,WAAa,SAACd,GACZ,EAAKsI,SAAS,CAAEtP,QAASgH,KAvBE,EA0B7B0C,kBAAoB,SAAC1C,GACnB,EAAKsI,SAAS,CAAErG,eAAgBjC,KA3BL,EA8B7BuI,aAAe,SAACvI,GACd,EAAKsI,SAAS,CAAEE,UAAWxI,KA/BA,EAkC7ByI,iBAAmB,SAACzI,GAClB,EAAKsI,SAAS,CAAEpG,cAAelC,KAnCJ,EAsC7B0I,aAAe,SAAC1I,GACd,EAAKsI,SAAS,CAAEK,UAAW3I,KAvCA,EA0C7BjC,aAAe,SAACiC,GACd,EAAKsI,SAAS,CAAEtK,UAAWgC,KA3CA,EA8C7B9D,kBAAoB,SAAC8D,GACnB,EAAKsI,SAAS,CAAE/I,eAAgBS,KA/CL,EAkD7B/C,cAAgB,SAAC+C,GACf,EAAKsI,SAAS,CAAEpJ,WAAYc,KAnDD,EAsD7BpE,aAAe,SACboE,GAKA,EAAKsI,SAAS,CAAEzI,UAAWG,KA5DA,EA+D7BhD,iBAAmB,SAACgD,GAClB,EAAKsI,SAAS,CAAE3M,cAAeqE,KAhEJ,EAmE7B4I,WAAa,SAAC5I,GACZ,EAAKsI,SAAS,CAAEO,QAAS7I,KApEE,EAuE7ByC,cAAgB,SAACzC,GACf,EAAKsI,SAAS,CAAElG,WAAYpC,KAxED,EA2E7B8I,eAAiB,SAAC9I,GAChB,EAAKsI,SAAS,CAAES,YAAa/I,KA5EF,EA+E7BgJ,WAAa,SAAC5G,GAEyB,OAAjC,EAAKzJ,MAAM8H,SAAS+F,UAAoC,OAAfpE,EAC3C,EAAKzJ,MAAMsQ,YACT,EAAKtQ,MAAMO,KAAKmN,KAAKC,QACrBlE,EAAW5F,KACX,SAACM,EAAiBhB,IACfgB,GAAU,EAAKgE,WAAWhE,IACZ,IAAXA,GAAoBhB,EAAI2C,QAC1B,EAAK9F,MAAM2C,eAAe,CACxBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,YAKtBgF,GAAc,EAAKrJ,MAAMC,SAClC,EAAK8H,YAAW,IAhGS,EAoG7BoI,WAAa,SAAC7G,GAEZ,GAA8B,OAA1B,EAAKtJ,MAAMqJ,YAAuBC,EAAS5D,OAAS,EAAG,CACzD,IAAI0K,EAAc9G,EAAS3H,MAAK,SAACC,GAAD,OAA6B,IAAnBA,EAAKyO,aAC/C,EAAK3G,cAAc0G,GAA4B9G,EAAS,IACxD,EAAK2G,WAAWG,GAA4B9G,EAAS,IACrD,EAAKgH,gBACHF,GAA4B9G,EAAS,GACrC,EAAK1J,MAAMO,KAAKmN,KAAKC,WA5GE,EAiH7B+C,gBAAkB,SAChBC,EACAhD,GAEA,EAAK3N,MAAM4Q,aACTD,EAAkB9M,IAClB8J,GACA,SAACxJ,EAAiBhB,EAAae,GAC7B,EAAKiE,WAAWhE,IACXA,GAAUhB,EAAI2C,QACjB,EAAK9F,MAAM2C,eAAe,CACxBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,SAGvBP,IACFF,QAAQC,IAAI,wCACZD,QAAQC,IAAI,CAAEyM,gBAAiBxM,IAC/BF,QAAQC,IAAI,4CAIuB,OAArC,EAAKjE,MAAM8H,SAASlD,cACtB,EAAK5E,MAAM6Q,iBAAgB,SAAC1M,EAAiBhB,GAC3C,EAAKgF,WAAWhE,GACXA,GACChB,EAAI2C,OAAS,GACf,EAAK9F,MAAM2C,eAAe,CACxBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,aA9IN,EAsJ7BxE,kBAAoB,WAEO,OAAvB,EAAKD,MAAMmL,SACoB,IAA9B,EAAKnL,MAAMmL,QAAQrF,QAAgB,EAAK1F,MAAMC,SAE/C,EAAKL,MAAM8Q,YAAY,EAAK3I,YAC5B,EAAKA,YAAW,IAEhB,EAAKA,YAAW,GAIsB,OAApC,EAAKnI,MAAM4J,qBACb,EAAK5J,MAAM+Q,oBACT,SAAC5M,EAAiBhB,EAAae,GACxBC,IACH,EAAK4F,mBAAkB,GACnB5G,EAAI2C,QACN,EAAK9F,MAAM2C,eAAe,CACxBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,SAGvBP,GAAQA,EAAK4B,OAAS,GAEM,OAA1B,EAAK1F,MAAMqJ,YACb,EAAK8G,WAAWrM,QAO1B,EAAKqM,WAAW,EAAKvQ,MAAM4J,sBAC3B,EAAKG,mBAAkB,IAGpB,EAAK/J,MAAMmP,gBAAgB6B,iBAGrB,EAAK5Q,MAAMC,SACpB,EAAK8H,YAAW,IAHhB,EAAKnI,MAAMiR,sBACX,EAAK9I,YAAW,KAIb,EAAKnI,MAAMmP,gBAAgB+B,qBAAuB,EAAK9Q,MAAMC,SAChE,EAAKL,MAAMmR,yBACX,EAAKhJ,YAAW,IACP,EAAK/H,MAAMC,SACpB,EAAK8H,YAAW,IAGb,EAAKnI,MAAMmP,gBAAgBiC,gBAAkB,EAAKhR,MAAMC,SAC3D,EAAKL,MAAMqR,oBACX,EAAKlJ,YAAW,IACP,EAAK/H,MAAMC,SACpB,EAAK8H,YAAW,GAGsB,OAApC,EAAKnI,MAAM8H,SAAS+E,aACtB,EAAK7M,MAAMsR,eACT,EAAKtR,MAAMO,KAAKmN,KAAKC,SACrB,SAACxJ,EAAiBhB,GAChB,EAAKgF,WAAWhE,GACXA,GACChB,EAAI2C,QACN,EAAK9F,MAAM2C,eAAe,CACxBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,aAxNR,EAiO7B8M,gBAAkB,SAACC,GACjB,OAAKnP,YAAiBmP,EAAW,IAlON,EAwO7BxH,eAAiB,SAACL,GAChB,EAAKmG,kBAAiB,GACtB,EAAK9P,MAAMsQ,YACT,EAAKtQ,MAAMO,KAAKmN,KAAKC,QACrBhE,GACA,SAACxF,EAAiBhB,GAChB,EAAKI,kBAAkBY,IACtBA,GAAU,EAAK2L,kBAAiB,IAClB,IAAX3L,GAAoBhB,EAAI2C,QAC1B,EAAK9F,MAAM2C,eAAe,CACxBvB,MAAO+B,EACPC,MAAOC,IAAgBoB,aAhP/B,EAAKrE,MAAQ,CACXC,SAAS,EACTiJ,gBAAgB,EAChBG,WAAY,KACZF,eAAe,EACfsG,WAAW,EACXK,QAAS,KACTF,WAAW,EACXI,YAAa,GAGb/K,WAAW,EACXuB,gBAAgB,EAChBL,YAAY,EACZvD,cAAe,GACfkE,UAAW,MAlBc,E,0CA0P7B,WAAU,IAAD,OACP,OAAwC,OAApC5G,KAAKN,MAAM4J,qBAEX,qBAAKhJ,UAAU,kEAAf,6BAM2C,IAA3CN,KAAKN,MAAM4J,qBAAqB9D,OAEhC,sBAAKlF,UAAU,oHAAf,UACE,cAAC,IAAD,CAAeA,UAAU,yBACzB,sBAAKA,UAAU,4BAAf,UACE,sBAAMA,UAAU,sCAAhB,+BAGA,sBAAMA,UAAU,UAAhB,mGAS6B,OAAjCN,KAAKN,MAAM8H,SAAS+F,SAEpB,qBAAKjN,UAAU,kEAAf,6BAOF,iCAEIN,KAAKF,MAAMyP,WACX,eAAC7O,EAAA,EAAD,WAgBE,qBAAKJ,UAAU,uFAAf,2BAKA,cAAC,EAAD,CAAciI,cAAevI,KAAKF,MAAMwG,qBAS1CtG,KAAKF,MAAMyP,WACX,cAACzG,EAAA,EAAD,CACEI,YAAW,UACiC,QAA1ClJ,KAAKN,MAAM8H,SAASgB,kBAChB,MACAxI,KAAKN,MAAM8H,SAASgB,oBACpBE,IAAcE,oBACd,YACA5I,KAAKN,MAAM8H,SAASgB,oBACpBE,IAAcC,YACd,eACA3I,KAAKN,MAAM8H,SAASgB,oBACpBE,IAAcG,YACd,OACA7I,KAAKN,MAAM8H,SAASgB,oBACpBE,IAAcsF,kBACd,oBACAhO,KAAKN,MAAM8H,SAASgB,oBACpBE,IAAcwF,mBACd,aACA,GAlBK,aAoBXnO,QAASC,KAAKF,MAAMC,QACpBiJ,eAAgBhJ,KAAKF,MAAMkJ,eAC3BG,WAAYnJ,KAAKF,MAAMqJ,WACvBK,cAAexJ,KAAKwJ,cACpBC,kBAAmBzJ,KAAKyJ,kBACxBH,qBAAsBtJ,KAAKN,MAAM4J,qBACjCI,eAAgB1J,KAAK0J,eACrBT,cAAejJ,KAAKF,MAAMmJ,iBAO5BjJ,KAAKF,MAAMyP,WACX,0BAASjP,UAAU,sBAAnB,UAEE,yBAASA,UAAU,mEAAnB,SACE,qBAAKA,UAAU,SAAf,SACE,uBACE0G,SAAU,SAACC,GAAD,OACR,EAAK4I,eAAe5I,EAAEC,OAAOH,QAE/BnC,KAAK,OACLtE,UAAU,iFACVmG,YAAW,gCACXM,MAAO/G,KAAKF,MAAMgQ,YAClBzJ,WACEc,YACEnH,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKN,MAAM8H,SAASgB,mBACpBhD,OAAS,SAQnB,wBAAOlF,UAAU,gBAAgBiE,GAAG,iBAApC,UACE,uBAAOjE,UAAU,sEAAjB,SACE,+BACE,oBAAIA,UAAU,YAAd,eACA,oBAAIA,UAAU,YAAd,yBAC2C,QAA1CN,KAAKN,MAAM8H,SAASgB,mBACnB,oBAAIlI,UAAU,YAAd,wBAEF,oBAAIA,UAAU,YAAd,yBACA,oBAAIA,UAAU,YAAd,0BACA,oBAAIA,UAAU,mBAGlB,gCACG6G,YACCnH,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKN,MAAM8H,SAASgB,mBACpBhD,QAAU,EACV,oBACElF,UAAU,iEADZ,SAIE,oBAAIA,UAAU,YAAY6Q,QAAS,EAAnC,SACE,cAACvF,EAAA,EAAD,CACE9I,MAAO+I,IAAeuF,MACtBrK,MAAO,uBALP,WASJsK,YACAlK,YACEnH,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKN,MAAM8H,SAASgB,mBAEtBxI,KAAKF,MAAMgQ,aACXtK,QAAU,EACZ,oBACElF,UAAU,iEADZ,SAIE,oBAAIA,UAAU,YAAY6Q,QAAS,EAAnC,SACE,cAACvF,EAAA,EAAD,CACE9I,MAAO+I,IAAeuF,MACtBrK,MAAO,sBALP,WAUNsK,YACElK,YACEnH,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKN,MAAM8H,SAASgB,mBAEtBxI,KAAKF,MAAMgQ,aACXrK,KAAI,SAACC,EAAgCC,GAAjC,OACJ,qBACErF,UAAU,iEAEVuE,QAAS,WACP,EAAKyK,cAAa,GAClB,EAAKK,WAAWjK,EAAMnC,MAL1B,UAQE,oBAAIjD,UAAU,8BAAd,SACGqF,EAAQ,IAEX,oBAAIrF,UAAU,8BAAd,SACGoF,EAAM5E,QAEkC,QAA1C,EAAKpB,MAAM8H,SAASgB,mBACnB,oBAAIlI,UAAU,8BAAd,SACGsN,GAAelI,GACZT,YAAsB2I,GAAelI,IACrC,MAGR,qBAAIpF,UAAU,qCAAd,mBACSoF,EAAMpE,eAEf,oBAAIhB,UAAU,8BAAd,SACE,sBACEA,UAAS,iFACP8N,GAAiB1I,GAAO2I,SAF5B,SAKGD,GAAiB1I,GAAO7B,WAG7B,oBAAIvD,UAAU,0CAAd,SACE,wBAAQA,UAAU,qDAAlB,sBAhCGqF,EAAQD,EAAMnC,gBA8ChCvD,KAAKF,MAAMyP,WACVvP,KAAKN,MAAM8H,SAAS+F,UACpBvN,KAAKF,MAAM8P,SACXtB,GAAatO,KAAKN,MAAM8H,SAAS+F,SAAUvN,KAAKF,MAAM8P,UACpD,0BAAStP,UAAU,2BAAnB,UAEE,0BAASA,UAAU,wCAAnB,UACE,wBACEA,UAAS,sFACPN,KAAKF,MAAMwG,eACP,qBACA,iBAHG,sCAKTD,SAAUrG,KAAKF,MAAMwG,eACrBzB,QAAS,WACP,EAAKyK,cAAa,GAClB,EAAKxK,cAAa,GAClB,EAAK7B,mBAAkB,GACvB,EAAKN,aAAa,MAClB,EAAKqB,eAAc,GACnB,EAAKD,iBAAiB,KAb1B,SAgBE,cAAC,IAAD,CAAazD,UAAU,cAExBN,KAAKiR,gBACJ3C,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,WAGb,wBACEtP,UAAS,iFACPN,KAAKF,MAAMwG,eACP,qBACA,iBAHG,6CAKTD,SAAUrG,KAAKF,MAAMwG,eANvB,SAWE,cAAC,IAAD,CAAUhG,UAAU,iBAK1B,0BAASA,UAAU,OAAnB,UAEGgO,GAAatO,KAAKN,MAAM8H,SAAS+F,SAAUvN,KAAKF,MAAM8P,SACpDrI,WAAamB,IAAcE,qBAC9B5I,KAAKN,MAAM8H,SAAS8F,oBACpBG,EACEzN,KAAKN,MAAM8H,SAAS8F,mBACpBgB,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,gBAEH,cAAC,IAAD,CACEjK,QACE+I,EACEzN,KAAKN,MAAM8H,SAAS8F,mBACpBgB,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,gBAGPlK,mBAAoBzE,KAAKN,MAAMmP,gBAC/BxN,UACEiN,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SAGf7K,UAAW/E,KAAKF,MAAMiF,UACtBD,aAAc9E,KAAK8E,aACnBwB,eAAgBtG,KAAKF,MAAMwG,eAC3BrD,kBAAmBjD,KAAKiD,kBACxBgD,WAAYjG,KAAKF,MAAMmG,WACvBjC,cAAehE,KAAKgE,cACpBtB,cAAe1C,KAAKF,MAAM4C,cAC1BqB,iBAAkB/D,KAAK+D,iBACvB6C,UAAW5G,KAAKF,MAAM8G,UACtBjE,aAAc3C,KAAK2C,aACnB2B,aAActE,KAAKN,MAAM8H,SAASlD,eAGpCgK,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVrI,WAAamB,IAAcE,qBAC5B,cAACgD,EAAA,EAAD,CACE9I,MAAO+I,IAAeC,KACtB/E,MAAO,uBASZuH,GAAatO,KAAKN,MAAM8H,SAAS+F,SAAUvN,KAAKF,MAAM8P,SACpDrI,WAAamB,IAAcC,aAC9B3I,KAAKN,MAAM8H,SAAS2F,uBACpBqB,GACExO,KAAKN,MAAM8H,SAAS2F,sBACpBmB,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,gBAEH,cAAC2C,EAAD,CACExH,gBACE0E,GACExO,KAAKN,MAAM8H,SAAS2F,sBACpBmB,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,gBAGPlK,mBAAoBzE,KAAKN,MAAMmP,gBAC/BxN,UACEiN,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SAGf1F,aAAclK,KAAKF,MAAMiF,UACzBkF,gBAAiBjK,KAAK8E,aACtBwB,eAAgBtG,KAAKF,MAAMwG,eAC3BrD,kBAAmBjD,KAAKiD,kBACxBgD,WAAYjG,KAAKF,MAAMmG,WACvBjC,cAAehE,KAAKgE,cACpBtB,cAAe1C,KAAKF,MAAM4C,cAC1BqB,iBAAkB/D,KAAK+D,iBACvB6C,UAAW5G,KAAKF,MAAM8G,UACtBjE,aAAc3C,KAAK2C,aACnB2B,aAActE,KAAKN,MAAM8H,SAASlD,eAGpCgK,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVrI,WAAamB,IAAcC,aAC5B,cAACiD,EAAA,EAAD,CACE9I,MAAO+I,IAAeC,KACtB/E,MAAO,0BAOZuH,GAAatO,KAAKN,MAAM8H,SAAS+F,SAAUvN,KAAKF,MAAM8P,SACpDrI,WAAamB,IAAcG,aAC9B7I,KAAKN,MAAM8H,SAASuH,UACpB/O,KAAKN,MAAMmL,SACXoE,YACEjP,KAAKN,MAAM8H,SAASuH,SACpBT,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,iBAELO,YACElP,KAAKN,MAAMmL,QACXoE,YACEjP,KAAKN,MAAM8H,SAASuH,SACpBT,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,gBACFQ,QAEH,cAACoC,EAAD,CACEtF,SACEiD,YACElP,KAAKN,MAAMmL,QACXoE,YACEjP,KAAKN,MAAM8H,SAASuH,SACpBT,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,gBACFQ,QAGP9N,UACEiN,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SAGf1F,aAAclK,KAAKF,MAAMiF,UACzBkF,gBAAiBjK,KAAK8E,aACtBwB,eAAgBtG,KAAKF,MAAMwG,eAC3BrD,kBAAmBjD,KAAKiD,kBACxBgD,WAAYjG,KAAKF,MAAMmG,WACvBjC,cAAehE,KAAKgE,cACpBtB,cAAe1C,KAAKF,MAAM4C,cAC1BqB,iBAAkB/D,KAAK+D,iBACvB6C,UAAW5G,KAAKF,MAAM8G,UACtBjE,aAAc3C,KAAK2C,aACnB2J,cACE2C,YACEjP,KAAKN,MAAM8H,SAASuH,SACpBT,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVjB,gBAGPrK,aAActE,KAAKN,MAAM8H,SAASlD,eAGpCgK,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVrI,WAAamB,IAAcG,aAC5B,cAAC+C,EAAA,EAAD,CACE9I,MAAO+I,IAAeC,KACtB/E,MAAO,mBAQZuH,GAAatO,KAAKN,MAAM8H,SAAS+F,SAAUvN,KAAKF,MAAM8P,SACpDrI,WAAamB,IAAcwF,oBAC9BlO,KAAKN,MAAM8H,SAAS+E,YAClB,cAAC,EAAD,CACElL,UACEiN,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SAGftJ,eAAgBtG,KAAKF,MAAMwG,eAC3BrD,kBAAmBjD,KAAKiD,kBACxBgD,WAAYjG,KAAKF,MAAMmG,WACvBjC,cAAehE,KAAKgE,cACpBtB,cAAe1C,KAAKF,MAAM4C,cAC1BqB,iBAAkB/D,KAAK+D,iBACvB6C,UAAW5G,KAAKF,MAAM8G,UACtBjE,aAAc3C,KAAK2C,aACnB4J,YAAavM,KAAKN,MAAM8H,SAAS+E,cAGnC+B,GACEtO,KAAKN,MAAM8H,SAAS+F,SACpBvN,KAAKF,MAAM8P,SACVrI,WAAamB,IAAcwF,oBAC5B,cAACtC,EAAA,EAAD,CACE9I,MAAO+I,IAAeC,KACtB/E,MAAO,8BAYpB/G,KAAKF,MAAM4P,WACV,cAAC8B,EAAA,EAAD,CACEC,UAAWzR,KAAKF,MAAM4P,UACtBgC,aAAc1R,KAAKyP,sB,GAtvBXhP,aAoxBPkR,GAAiBhR,aAtBN,SAAC,GAYnB,IAXJV,EAWG,EAXHA,KACA2R,EAUG,EAVHA,YACApK,EASG,EATHA,SACAsG,EAQG,EARHA,SACAqB,EAOG,EAPHA,OAQA,MAAO,CACLlP,KAAMA,EACNuH,WACA8B,qBAAsBsI,EAAYC,gBAClChD,gBAAiBf,EACjBjD,QAASsE,EAAOtE,WAImC,CACrDmF,gBACAS,uBACAF,oBACAC,iBACAQ,mBACAV,iBACAK,wBACAE,2BACAE,sBACA1O,qBAV4B1B,CAW3ByO","file":"static/js/36.10e7d9dd.chunk.js","sourcesContent":["import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, System } from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { NavToogle, PageHasSubNav } from \"../../actions\";\nimport { MdBrightness1, MdSearch } from \"react-icons/md\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  system: System;\n  PageHasSubNav: Function;\n  NavToogle: Function;\n  children: ReactNode;\n}\n//\ninterface AppState {\n  loading: boolean;\n}\n\nclass _SideNavigation extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n    };\n  }\n\n  componentDidMount = () => this.props.PageHasSubNav(true);\n  componentWillUnmount = () => this.props.PageHasSubNav(false);\n\n  render() {\n    const isAuthenticated = this.props.auth.isAuthenticated;\n\n    if (isAuthenticated === false) {\n      return null;\n    }\n\n    const navActive = this.props.system.navigation;\n    return (\n      <div\n        className={`fixed w-48 p-1 pr-2 pl-6 text-gray-700 bg-white ${\n          navActive === true ? \"lg:left-16  left-16\" : \" -left-72 lg:left-16\"\n        }  top-0 bottom-0 pt-20 z-30 shadow-lg  transition-all duration-500 ease-in-out overflow-y-auto`}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  system,\n}: StoreState): { auth: Auth; system: System } => {\n  return { auth: auth, system: system };\n};\n\nexport const SideNavigation = connect(mapStateToProps, {\n  NavToogle,\n  PageHasSubNav,\n})(_SideNavigation);\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SearchComponentInterface = {\n  data: any[];\n};\n\nexport const Search: FC<SearchComponentInterface> = ({\n  data,\n}): ReactElement => {\n  return (\n    <div className=\"m-1 rounded-md shadow-md border border-blue-400 bg-white p-1 flex \">\n      <label htmlFor=\"search-text\" className=\"inline-block text-2xl\">\n        <MdSearch className=\"inline-block text-blue-400\" />\n      </label>\n      <input\n        type=\"search\"\n        className=\"outline-none bg-transparent flex-1 pl-1\"\n        placeholder=\"Search\"\n        id=\"search-text\"\n      />\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype MainItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const MainItem: FC<MainItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n  return (\n    <section\n      className={`${\n        active === true\n          ? \"bg-blue-500 text-white font-bold\"\n          : \"bg-blue-100 text-blue-800\"\n      } mb-1 hover:font-bold py-1 hover:bg-blue-400 hover:text-white --font-bold  px-2 rounded-md flex cursor-pointer items-center`}\n    >\n      <section className=\"flex-1\">\n        <IconDefined className=\"inline-block mr-1 text-xs\" />\n        <span>{title}</span>\n      </section>\n\n      {count > 0 ? (\n        <span className=\"px-0.5 my-1 text-xs bg-blue-600 text-white rounded-full\">\n          {count}\n        </span>\n      ) : null}\n    </section>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemContainerComponentInterface = {\n  children: ReactNode;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const SubItemContainer: FC<SubItemContainerComponentInterface> = ({\n  children,\n}): ReactElement => {\n  return (\n    <div className=\"ml-3 overflow-y-auto border-l-2 border-blue-200 -mt-1 pt-2 mb-2 pl-1 cursor-pointer\">\n      {children}\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n * @important Remenber to use these components inside the <SubItemContainer>...</SubItemContainer>\n */\nexport const SubItem: FC<SubItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n\n  return (\n    <div\n      className={`animate__animated animate__zoomIn animate__faster ${\n        active === true ? \"bg-blue-500 text-white font-bold\" : \" text-blue-800\"\n      } text-blue-800 bg-blue-200 rounded-md px-1 mb-1 flex items-center py-1 font-bold`}\n    >\n      <IconDefined\n        className={`inline-block mr-0.1 text-xs ${\n          active === true ? \"text-white\" : \"\"\n        }`}\n      />\n      <span\n        className={`inline-block pl-1 ${active === true ? \"text-white\" : \"\"}`}\n      >\n        {title}\n      </span>\n      {count >= 1 ? (\n        <span\n          className={`text-sm fint-bold ${active === true ? \"text-white\" : \"\"}`}\n        >\n          {count}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { TiWarning } from \"react-icons/ti\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport {\n  createReClaim,\n  DocumentClaimUser,\n  FC_CompleteClaim,\n} from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n  FC_CompleteClaim: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const FC_CompleteClaim = (this_claim: CandidateClaimInterface) => {\n    if (window.confirm(\"Are you satisfied with the decision?\") === true) {\n      props.FC_CompleteClaim((status: boolean, msg: string) => {\n        props.setLoadingRequest(true);\n        if (!isEmptyOrSpaces(msg)) {\n          props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    }\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div> */}\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section\n              className=\"flex flex-col px-2 pt-3\"\n              key={index + claim._id}\n            >\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\" + props.thisClaim.default_claim_resaons}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div> */}\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-end justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <div className=\"bg-gray-100 rounded-lg p-4 text-base text-gray-700\">\n                <div className=\"flex\">\n                  <TiWarning className=\"w-5 h-5 inline mr-3\" />\n                  <div>\n                    <span className=\"font-medium\">Important!</span> Are you\n                    satisfied with the response?\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 w-max mt-2 ml-8\">\n                  <button\n                    className=\"btn hover:bg-yellow-900 bg-yellow-700 text-white focus:outline-none\"\n                    onClick={() => props.setReClaiming(true)}\n                    disabled={props.loadingRequest}\n                  >\n                    No, I'm not\n                  </button>\n                  <button\n                    className=\"btn hover:bg-green-800 bg-green-600 text-white focus:outline-none\"\n                    onClick={() => FC_CompleteClaim(props.thisClaim)}\n                    disabled={props.loadingRequest}\n                  >\n                    Yes, I am\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Why are you not satisfied?`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(\n  connect(null, {\n    createReClaim,\n    PushPopupAlert,\n    FC_CompleteClaim,\n  })(ClaimDocView)\n);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n  selected_claim_type?: PlansTypeKeys | null;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          {!props.selected_claim_type && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n                props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n              }}\n            >\n              <MainItem\n                title={\"Application\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n                }\n                count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n              />\n            </div>\n          )}\n          {/* DOCUMENT ================================= */}\n          {!props.selected_claim_type && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n              }}\n            >\n              <MainItem\n                title={\"Document\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.DOCUMENT_VALIDATION\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                )}\n              />\n            </div>\n          )}\n          {/* EXAMINATION ================================= */}\n          {!props.selected_claim_type && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n              }}\n            >\n              <MainItem\n                title={\"Exam\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n                }\n                count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n              />\n            </div>\n          )}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getAllClaims,\n    PushPopupAlert,\n  })(AdminFilterByType)\n);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(sessions.filter((item) => item._id === period_id)[0]);\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod._id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option key={session._id + item} value={session._id}>\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default React.memo(ClaimHeaderTitle);\n","import React, { Component } from \"react\";\nimport { MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport search from \"../../../utils/search\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  // console.log(\"====================================\");\n  // console.log({ claimList, claim_id });\n  // console.log(\"====================================\");\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getClaimReasons: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  searchClaim: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n      searchClaim: \"\",\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  setSearchClaim = (value: string) => {\n    this.setState({ searchClaim: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod._id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n      this.loadExamAnswers(\n        thisSession ? thisSession : sessions[0],\n        this.props.auth.user.user_id\n      );\n    }\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan._id,\n      user_id,\n      (status: boolean, msg: string, data: SessionPlanInterface | \"none\") => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n    if (this.props.claiming.claimReasons === null) {\n      this.props.getClaimReasons((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status) {\n          if (msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            {/* <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => {\n                this.setClaimForm(true);\n                // alert(\"clicked\");\n              }}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button> */}\n            <div className=\"bg-gray-200 text-gray-600 font-bold text-center rounded px-3 py-2 cursor-not-allowed\">\n              Can not claim\n            </div>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            {/* FILTER FORM =================================== */}\n            <section className=\"flex flex-col-reverse sm:flex-row items-center gap-2 w-full my-2\">\n              <div className=\"w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setSearchClaim(e.target.value)\n                  }\n                  type=\"text\"\n                  className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500 w-full\"\n                  placeholder={`Search claim by title or type`}\n                  value={this.state.searchClaim}\n                  disabled={\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ).length > 0\n                      ? false\n                      : true\n                  }\n                />\n              </div>\n            </section>\n            {/* END FILTER FORM =================================== */}\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim level</td>\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"Nothing found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).map((claim: CandidateClaimInterface, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {claim.title}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap italic\">\n                        Level {claim.claim_level}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.PLACEMENT_TRANSFER && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Placement not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  getClaimReasons,\n  loadCourses,\n  getMyPlacement,\n  getMyAnswers,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline, MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { TiWarning } from \"react-icons/ti\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, FC_CompleteClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { DATE, errorToText, showDate } from \"../../utils/functions\";\nimport DisplayCompetence from \"../Positions/DisplayCompetence\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n  FC_CompleteClaim: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const FC_CompleteClaim = (this_claim: CandidateClaimInterface) => {\n    if (window.confirm(\"Are you satisfied with the decision?\") === true) {\n      props.FC_CompleteClaim((status: boolean, msg: string) => {\n        props.setLoadingRequest(true);\n        if (!isEmptyOrSpaces(msg)) {\n          props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    }\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div> */}\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span\n              className=\"font-normal\"\n              dangerouslySetInnerHTML={{\n                __html: props.thisClaim.previous.reason,\n              }}\n            ></span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                {/* <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    <DisplayCompetence\n                      competence={props.thisApplication.position.description}\n                      // displayType=\"text-one\"\n                    />\n                  </span>\n                </div> */}\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position competences\n                </div>\n\n                <div>\n                  <DisplayCompetence\n                    competence={props.thisApplication.position.description}\n                    // displayType=\"text-one\"\n                  />\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section\n              className=\"flex flex-col px-2 pt-3\"\n              key={index + claim._id}\n            >\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div> */}\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-end justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <div className=\"bg-gray-100 rounded-lg p-4 text-base text-gray-700\">\n                <div className=\"flex\">\n                  <TiWarning className=\"w-5 h-5 inline mr-3\" />\n                  <div>\n                    <span className=\"font-medium\">Claim response!</span> Are you\n                    satisfied with the response?\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 w-max mt-2 ml-8\">\n                  <button\n                    className=\"btn hover:bg-yellow-900 bg-yellow-700 text-white focus:outline-none\"\n                    onClick={() => props.setReClaiming(true)}\n                    disabled={props.loadingRequest}\n                  >\n                    No, I'm not\n                  </button>\n                  <button\n                    className=\"btn hover:bg-green-800 bg-green-600 text-white focus:outline-none\"\n                    onClick={() => FC_CompleteClaim(props.thisClaim)}\n                    disabled={props.loadingRequest}\n                  >\n                    Yes, I am\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Why are you not satisfied?`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(\n  connect(null, {\n    createReClaim,\n    PushPopupAlert,\n    FC_CompleteClaim,\n  })(ClaimDocView)\n);\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { TiWarning } from \"react-icons/ti\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim, FC_CompleteClaim } from \"../../actions/claiming\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  ClaimStatus,\n  course,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { claimShowAnswer } from \"./Candidate/ExaminationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  claimReasons: claimReasonInterface[] | null;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n  FC_CompleteClaim: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const FC_CompleteClaim = (this_claim: CandidateClaimInterface) => {\n    if (window.confirm(\"Are you satisfied with the decision?\") === true) {\n      props.FC_CompleteClaim((status: boolean, msg: string) => {\n        props.setLoadingRequest(true);\n        if (!isEmptyOrSpaces(msg)) {\n          props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    }\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <CandidateAnswersDetails\n                showAnswers={false}\n                exam_id={claimShowAnswer(\n                  props.thisExamSheet,\n                  props.thisExam.course_name\n                )}\n              />\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section\n              className=\"flex flex-col px-2 pt-3\"\n              key={index + claim._id}\n            >\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.user.user_info.fname +\n                          \" \" +\n                          props.thisClaim.user.user_info.lname\n                        )}\n                      </span>\n                    </div> */}\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-end justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <div className=\"bg-gray-100 rounded-lg p-4 text-base text-gray-700\">\n                <div className=\"flex\">\n                  <TiWarning className=\"w-5 h-5 inline mr-3\" />\n                  <div>\n                    <span className=\"font-medium\">Claim response!</span> Are you\n                    satisfied with the response?\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 w-max mt-2 ml-8\">\n                  <button\n                    className=\"btn hover:bg-yellow-900 bg-yellow-700 text-white focus:outline-none\"\n                    onClick={() => props.setReClaiming(true)}\n                    disabled={props.loadingRequest}\n                  >\n                    No, I'm not\n                  </button>\n                  <button\n                    className=\"btn hover:bg-green-800 bg-green-600 text-white focus:outline-none\"\n                    onClick={() => FC_CompleteClaim(props.thisClaim)}\n                    disabled={props.loadingRequest}\n                  >\n                    Yes, I am\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Why are you not satisfied?`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    loadQuestionTypes,\n    createReClaim,\n    PushPopupAlert,\n    FC_CompleteClaim,\n  })(ClaimDocView)\n);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section\n              className=\"flex flex-col px-2 pt-3\"\n              key={index + claim._id}\n            >\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div> */}\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(\n  connect(null, {\n    createReClaim,\n    PushPopupAlert,\n  })(ClaimPlacementView)\n);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getMyRejectedApplications,\n    getMyRejectedDocuments,\n    PushPopupAlert,\n  })(FilterByType)\n);\n"],"sourceRoot":""}