{"version":3,"sources":["containers/PrepareExam/ExamsList/ExamDetails.tsx","containers/PrepareExam/ExamsList/ExamsList.tsx","containers/PrepareExam/EditExam/EditExam.tsx"],"names":["ExamDetails","props","selected_course","course","courses","find","itm","course_id","exam","className","course_code","course_name","onClick","setSelectedExam","style","height","exam_total_marks","DATE","exam_date","start_time","end_time","duration","questions","length","periods","applicationPeriods","_id","period","session_plan_name","discription","dangerouslySetInnerHTML","__html","termes","rules","allow_to_leave_browser","copy_enabled","paste_enabled","right_click_enabled","stop_candidate_when_comeback","validateExamDate","ExamTimeStatus","Online","createdAt","undefined","setSelectedExamEdit","setSelectedCourse","Waiting","alert","_ExamsList","setLoading","status","setState","loading","addQuestionToPaper","question","addExamQuestion","removeToQuestionPaper","window","confirm","showPeriodFilter","selectPeriod","chooseCourse","myCourse","conf","prepareExam","x","selectCourse","examQuestionsIds","ids","question_id","examsByPeriod","Exam","temp","filter","item","selected_period","newRes","push","exam_status","questions_per_page","number_format","updatedAt","id","GetExamsByPeriod","setSelectedPeriod","loadExamsListByPeriod","componentDidMount","schoolLevels","showInstitutes","setShowInstitutes","questionTypes","loadQuestionTypes","loadApplicationPeriods","loadCourses","questionBank","loadQuestionBank","selectedEducationCategory","session_plan","setSelectedExamItem","selectedExam","examToEdit","setUploadingStatus","state","addQuestionModal","formErr","element","msg","QuestionNumberFormat","NUMBER","search","this","is_active","to","Loading","colSpan","onChange","e","target","value","type","placeholder","examsList","searchData","map","i","title","EditExam","selectedCourse","loadExamsList","setLoadingProps","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","large","displayClose","padding","Courses","selected_course_id","Questions","callBack","questionsList","questionPaper","ApplicationPeriods","InitializeInstitution","setSelectedEducationCategory","data","onSelect","Component","ExamsList","connect","auth","system","loadSchoolLevels","loadEducationCategories","setSelectedSchoolLevel","setUploadedQuestions","PushPopupAlert","getHoursList","hrs","getMinutesList","mins","_EditExam","changeProctoringRule","key","proctoringRules","rule","newData","selected","caption","addEditExamQuestion","setStep","step","PrepareExamStepsEnum","Step2","validateTwoTime","duration_hours","duration_minutes","currentStep","StepStatus","Step1","submitExamPreparation","a","axios","put","API","QBank","PrepareExamStatus","Created","redirectToExams","description","PopupAlertTheme","success","response","errors","message","console","log","findExamDetails","unSelectQuestion","editQuestion","findTotalMarks","total","marks","handleChangeTermes","setSelectCourse","setSelectPeriod","submitExam","stepStatus","actionType","PrepareActionTypes","DATE_DATA","parseInt","disabled","EXAM_QUESTIONS_NUMBERING","NoResultThemes","Dark","select","number","AlertInterface","danger","selectedQuestion","extraLarge","body"],"mappings":"4XAiQeA,EA5OK,SAACC,GAA6B,IAAD,QACzCC,EAAe,UAAGD,EAAME,OAAOC,eAAhB,aAAG,EAAsBC,MAC5C,SAACC,GAAD,OAASA,EAAIC,YAAcN,EAAMO,KAAKL,UAExC,OACE,qBAAKM,UAAU,kKAAf,SACE,sBAAKA,UAAU,qIAAf,UACE,sBAAKA,UAAU,uGAAf,UACE,gCACE,sBAAMA,UAAU,YAAhB,SACGR,EAAME,OAAOC,UAAb,UACCH,EAAME,OAAOC,QAAQC,MACnB,SAACC,GAAD,OAASA,EAAIC,YAAcN,EAAMO,KAAKL,iBAFzC,aACC,EAEGO,eALT,IAQGT,EAAME,OAAOC,UAAb,UACCH,EAAME,OAAOC,QAAQC,MACnB,SAACC,GAAD,OAASA,EAAIC,YAAcN,EAAMO,KAAKL,iBAFzC,aACC,EAEGQ,gBAEP,qBACEC,QAAS,kBAAMX,EAAMY,gBAAgB,OACrCJ,UAAU,yFAFZ,SAIE,cAAC,IAAD,SAGJ,sBACEA,UAAU,gDACVK,MAAO,CAAEC,OAAQ,QAFnB,UAIE,sBAAKN,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,8BACA,sBAAMA,UAAU,wDAAhB,SACGR,EAAMO,KAAKQ,sBAGhB,sBAAKP,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,uBACA,sBAAMA,UAAU,0BAAhB,SACGQ,YAAKhB,EAAMO,KAAKU,gBAGrB,sBAAKT,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,6BACA,sBAAMA,UAAU,0BAAhB,SACGR,EAAMO,KAAKW,gBAGhB,sBAAKV,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,8BACA,sBAAMA,UAAU,0BAAhB,SACGR,EAAMO,KAAKY,cAGhB,sBAAKX,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,2BACA,uBAAMA,UAAU,0BAAhB,UACGR,EAAMO,KAAKa,SADd,aAIF,sBAAKZ,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,sCACA,sBAAMA,UAAU,0BAAhB,SACGR,EAAMO,KAAKc,UAAUC,YAG1B,sBAAKd,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,yBACA,sBAAMA,UAAU,0BAAhB,SACGR,EAAMuB,QAAQC,qBAAd,UACCxB,EAAMuB,QAAQC,mBAAmBpB,MAC/B,SAACC,GAAD,OAASA,EAAIoB,MAAQzB,EAAMO,KAAKmB,iBAFnC,aACC,EAEGC,wBAGT,sBAAKnB,UAAU,8BAAf,UACE,sBAAMA,UAAU,gBAAhB,8BACA,sBAAMA,UAAU,0BAAhB,SACGR,EAAMO,KAAKqB,iBAGhB,sBAAKpB,UAAU,8BAAf,UACE,sBAAMA,UAAU,gBAAhB,sCACA,qBACEqB,wBAAyB,CAAEC,OAAQ9B,EAAMO,KAAKwB,QAC9CvB,UAAU,+BAGd,sBAAKA,UAAU,8BAAf,UACE,sBAAMA,UAAU,qBAAhB,wBACA,sBAAKA,UAAU,2CAAf,UACE,sBAAKA,UAAU,yEAAf,UACE,iDACA,sBACEA,UAAS,WACqC,IAA5CR,EAAMO,KAAKyB,MAAMC,uBACb,gBACA,mBAJR,UAO+C,IAA5CjC,EAAMO,KAAKyB,MAAMC,uBACd,UACA,gBAGR,sBAAKzB,UAAU,yEAAf,UACE,wCACA,sBACEA,UAAS,WAC2B,IAAlCR,EAAMO,KAAKyB,MAAME,aACb,gBACA,mBAJR,UAOqC,IAAlClC,EAAMO,KAAKyB,MAAME,aACd,UACA,gBAGR,sBAAK1B,UAAU,yEAAf,UACE,yCACA,sBACEA,UAAS,WAC4B,IAAnCR,EAAMO,KAAKyB,MAAMG,cACb,gBACA,mBAJR,UAOsC,IAAnCnC,EAAMO,KAAKyB,MAAMG,cACd,UACA,gBAGR,sBAAK3B,UAAU,yEAAf,UACE,+CACA,sBACEA,UAAS,WACkC,IAAzCR,EAAMO,KAAKyB,MAAMI,oBACb,gBACA,mBAJR,UAO4C,IAAzCpC,EAAMO,KAAKyB,MAAMI,oBACd,UACA,gBAGR,sBAAK5B,UAAU,yEAAf,UACE,gEACA,sBACEA,UAAS,WAC2C,IAAlDR,EAAMO,KAAKyB,MAAMK,6BACb,gBACA,mBAJR,UAOqD,IAAlDrC,EAAMO,KAAKyB,MAAMK,6BACd,UACA,sBAKZ,sBAAK7B,UAAU,2DAAf,UACE,sBAAMA,UAAU,gBAAhB,yBACA,sBACEA,UAAS,UACP8B,YACEtC,EAAMO,KAAKU,UACXjB,EAAMO,KAAKW,WACXlB,EAAMO,KAAKY,YACPoB,IAAeC,OACjB,wCACA,0CAPG,2BADX,SAWGF,YACCtC,EAAMO,KAAKU,UACXjB,EAAMO,KAAKW,WACXlB,EAAMO,KAAKY,eAKjB,sBAAKX,UAAU,kDAAf,UACE,sBAAMA,UAAU,gBAAhB,6BACA,sBAAMA,UAAU,0BAAhB,SACGQ,YAAKhB,EAAMO,KAAKkC,mBAIvB,qBAAKjC,UAAU,4DAAf,SAEI,sBAAKA,UAAU,6CAAf,UACE,sBACEG,QAAS,gBACiB+B,IAApBzC,IACFD,EAAM2C,oBAAoB3C,EAAMO,MAChCP,EAAM4C,kBAAkB3C,KAG5BO,UAAU,qKAPZ,UASE,8BACE,cAAC,IAAD,CAAQA,UAAU,eAEpB,sBAAMA,UAAU,YAAhB,qBAEF,wBACC8B,YACCtC,EAAMO,KAAKU,UACXjB,EAAMO,KAAKW,WACXlB,EAAMO,KAAKY,YACPoB,IAAeM,QACnB,sBACElC,QAAS,kBAAMmC,MAAM,YACrBtC,UAAU,iNAFZ,UAIE,8BACE,cAAC,IAAD,CAAYA,UAAU,eAExB,sBAAMA,UAAU,YAAhB,uBAGF,mC,0BC5IVuC,E,kDACJ,WAAY/C,GAAwB,IAAD,8BACjC,cAAMA,IAuBRgD,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEC,QAASF,KAzBQ,EA2BnCG,mBAAqB,SAACC,GACpB,EAAKrD,MAAMsD,gBAAgBD,IA5BM,EA8BnCE,sBAAwB,SAACF,GAErBG,OAAOC,QACL,mEAGF,EAAKzD,MAAMsD,gBAAgBD,IApCI,EAuCnCK,iBAAmB,SAACT,GAClB,EAAKC,SAAS,CAAES,aAAcV,KAxCG,EA2CnCW,aAAe,SAACC,GACd,IAAIC,GAAgB,EAMpB,GALgD,IAA5C,EAAK9D,MAAM+D,YAAY1C,UAAUC,SACnCwC,EAAON,OAAOC,QACZ,uFAGS,IAATK,EAAe,CAAC,IAAD,gBACH,EAAK9D,MAAM+D,YAAY1C,WADpB,IACjB,2BAAgD,CAAC,IAAxC2C,EAAuC,QAC9C,EAAKhE,MAAMsD,gBAAgBU,IAFZ,8BAIjB,EAAKhE,MAAM4C,kBAAkBiB,GAEiB,IAA5C,EAAK7D,MAAM+D,YAAY1C,UAAUC,QACnC,EAAKtB,MAAM4C,kBAAkBiB,GAE/B,EAAKX,SAAS,CAAEe,cAAc,KA3DG,EA8DnCC,iBAAmB,SAAC7C,GAClB,IAD+D,EAC3D8C,EAAgB,GAD2C,cAE1C9C,GAF0C,IAE/D,2BAAgC,CAAC,IAAxBgC,EAAuB,QAC9Bc,EAAG,sBAAOA,GAAP,CAAYd,EAASe,eAHqC,8BAK/D,OAAOD,GAnE0B,EAsEnCE,cAAgB,SAACC,GACf,IADoE,EAChEC,EAAOD,EAAKE,QACd,SAACC,GAAD,aAAUA,EAAK/C,UAAL,UAAgB,EAAK1B,MAAMuB,QAAQmD,uBAAnC,aAAgB,EAAoCjD,QAE5DkD,EAAiC,GAJ+B,cAKnDJ,GALmD,yBAK3DE,EAL2D,QAMlEE,EAAOC,KAAK,CACVvD,UAAWoD,EAAKpD,UAChBN,iBAAkB0D,EAAK1D,iBACvBkC,OAAQwB,EAAKxB,OACbvB,OAAQ+C,EAAK/C,OACbxB,OAAQuE,EAAKvE,OACbI,UAAWmE,EAAKvE,OAChBO,YACgC,OAA9B,EAAKT,MAAME,OAAOC,cAIRuC,IAFN,EAAK1C,MAAME,OAAOC,QAAQC,MACxB,SAACC,GAAD,OAASA,EAAIC,YAAcmE,EAAKvE,UAFlC,GAKA,EAAKF,MAAME,OAAOC,QAAQC,MACxB,SAACC,GAAD,OAASA,EAAIC,YAAcmE,EAAKvE,UAC/BO,YACTC,YACgC,OAA9B,EAAKV,MAAME,OAAOC,cAIRuC,IAFN,EAAK1C,MAAME,OAAOC,QAAQC,MACxB,SAACC,GAAD,OAASA,EAAIC,YAAcmE,EAAKvE,UAFlC,GAKA,EAAKF,MAAME,OAAOC,QAAQC,MACxB,SAACC,GAAD,OAASA,EAAIC,YAAcmE,EAAKvE,UAC/BQ,YACTmE,YAAaJ,EAAKI,YAClB9C,OAAQ0C,EAAK1C,OACb+C,mBAAoBL,EAAKK,mBACzB7D,UAAWwD,EAAKxD,UAChBC,WAAYuD,EAAKvD,WACjBC,SAAUsD,EAAKtD,SACfC,SAAUqD,EAAKrD,SACf2D,cAAeN,EAAKM,cACpBnD,YAAa6C,EAAK7C,YAClBa,UAAWgC,EAAKhC,UAChBuC,UAAWP,EAAKO,UAChBC,GAAIR,EAAKQ,GACTjD,MAAOyC,EAAKzC,SAxChB,2BAAwB,IAL4C,8BAgDpE,OAAO2C,GAtH0B,EAyHnCO,iBAAmB,SAACxD,GAClB,EAAK1B,MAAMmF,kBAAkBzD,GAC7B,EAAK1B,MAAMoF,sBAAsB1D,EAAOD,IAAK,EAAKuB,aA3HjB,EA8HnCqC,kBAAoB,YAC6B,IAA3C,EAAKrF,MAAMsF,aAAaC,gBAC1B,EAAKvF,MAAMwF,mBAAkB,GAGc,OAA3C,EAAKxF,MAAMyF,cAAcA,eACyB,IAAlD,EAAKzF,MAAMyF,cAAcA,cAAcnE,QAEvC,EAAKtB,MAAM0F,kBAAkB,EAAK1C,YAGQ,OAA1C,EAAKhD,MAAMuB,QAAQC,oBAC8B,IAAjD,EAAKxB,MAAMuB,QAAQC,mBAAmBF,QAEtC,EAAKtB,MAAM2F,uBAAuB,EAAK3C,YAGT,OAA9B,EAAKhD,MAAME,OAAOC,SACmB,IAArC,EAAKH,MAAME,OAAOC,QAAQmB,QAE1B,EAAKtB,MAAM4F,YAAY,EAAK5C,YAMU,OAAtC,EAAKhD,MAAM6F,aAAaxE,WACqB,IAA7C,EAAKrB,MAAM6F,aAAaxE,UAAUC,QAEQ,OAAtC,EAAKtB,MAAME,OAAOD,iBACpB,EAAKD,MAAM8F,iBACT,EAAK9F,MAAME,OAAOD,gBAAgBK,UAClC,EAAK0C,YAKgC,OAAvC,EAAKhD,MAAMuB,QAAQmD,gBACrB,EAAK1E,MAAMoF,sBACT,EAAKpF,MAAMuB,QAAQmD,gBAAgBjD,IACnC,EAAKuB,YAG+C,OAAtD,EAAKhD,MAAMsF,aAAaS,2BAEpB,OADF,EAAK/F,MAAMsF,aAAaS,0BAA0BC,cAElD,EAAKhG,MAAMoF,sBACT,EAAKpF,MAAMsF,aAAaS,0BAA0BC,aAAavE,IAC/D,EAAKuB,aA9KsB,EAmLnCiD,oBAAsB,SAAC1F,GACrB,EAAK2C,SAAS,CAAEgD,aAAc3F,KApLG,EAsLnCoC,oBAAsB,SAACpC,GACrB,EAAK2C,SAAS,CAAEiD,WAAY5F,IACf,OAATA,GACF,EAAK2C,SAAS,CAAEgD,aAAc,QAzLC,EA4LnCE,mBAAqB,SAACnD,GACpBH,MAAM,UA1LN,EAAKuD,MAAQ,CACXlD,SAAS,EACTc,cAAc,EACdN,cAAc,EACd2C,kBAAkB,EAClBC,QAAS,CACPC,QAAS,GACTC,IAAK,IAEP3B,mBAAoB,EACpB7D,UAAW,GACXC,WAAY,GACZE,SAAU,EACV2D,cAAe2B,IAAqBC,OACpC/E,YAAa,GACbG,OAAQ,GACRmE,aAAc,KACdC,WAAY,KACZS,OAAQ,IArBuB,E,0CA+LnC,WAAU,IAAD,OACP,OACE,eAAC,WAAD,WAC6B,OAA1BC,KAAKR,MAAMF,WACV,gCACE,qBAAK3F,UAAU,sDAAf,SACE,sBAAKA,UAAU,6CAAf,UACE,qBAAKA,UAAU,6BAAf,SAEE,sBAAKA,UAAU,qBAAf,UACE,sBAAMA,UAAU,mCAAhB,2BAGA,uBAAMA,UAAU,uCAAhB,oBACU,IACgC,OAAvCqG,KAAK7G,MAAMuB,QAAQmD,gBAClB,sBAAMlE,UAAU,yBAAhB,2BADD,UAMGqG,KAAK7G,MAAMuB,QAAQmD,gBAAgB/C,kBANtC,eAQoD,IAAjDkF,KAAK7G,MAAMuB,QAAQmD,gBAAgBoC,UAC/B,SACA,sBAgBd,sBAAKtG,UAAU,mCAAf,UACE,qBACEG,QAAS,kBAAM,EAAKuC,SAAS,CAAES,cAAc,KAC7CnD,UAAS,cACgC,OAAvCqG,KAAK7G,MAAMuB,QAAQmD,gBACf,4EACA,oEAHG,+DAFX,SAQ0C,OAAvCmC,KAAK7G,MAAMuB,QAAQmD,gBAChB,gBACA,kBAEN,cAAC,IAAD,CACEqC,GAAG,eACHvG,UAAS,wFAFX,mCASkB,IAAvBqG,KAAKR,MAAMlD,QACV,sBAAK3C,UAAU,kCAAf,UACE,qBAAKA,UAAU,0BAAf,gDAGA,cAACwG,EAAA,EAAD,OAGF,qBAAKxG,UAAU,wCAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,wBAAOA,UAAU,SAAjB,UACE,uBAAOA,UAAU,qCAAjB,SACE,+BACE,oBAAIA,UAAU,sBAAd,eACA,oBAAIA,UAAU,OAAd,oBACA,oBAAIA,UAAU,OAAd,uBACA,oBAAIA,UAAU,OAAd,wBACA,oBAAIA,UAAU,OAAd,sBACA,oBAAIA,UAAU,OAAd,2BACA,oBAAIA,UAAU,OAAd,uBAGJ,kCACE,6BACE,oBAAIyG,QAAS,EAAb,SACE,uBACEC,SAAU,SACRC,GADQ,OAEL,EAAKjE,SAAS,CAAE0D,OAAQO,EAAEC,OAAOC,SACtCC,KAAK,OACL9G,UAAU,0CACV+G,YAAY,SACZF,MAAOR,KAAKR,MAAMO,aAIc,OAArCC,KAAK7G,MAAM+D,YAAYyD,UACtB,6BACE,oBAAIP,QAAS,EAAb,SACE,cAACD,EAAA,EAAD,QAMS,IAHXS,YACAZ,KAAKxC,cAAcwC,KAAK7G,MAAM+D,YAAYyD,WAC1CX,KAAKR,MAAMO,QACXtF,OACF,6BACE,oBAAI2F,QAAS,EAAb,SACE,qBAAKzG,UAAU,iEAAf,iCAMJiH,YACEZ,KAAKxC,cAAcwC,KAAK7G,MAAM+D,YAAYyD,WAC1CX,KAAKR,MAAMO,QACXc,KAAI,SAACjD,EAAMkD,GAAP,OACJ,qBACEC,MAAM,wBACNjH,QAAS,kBACP,EAAKuC,SAAS,CAAEgD,aAAczB,KAGhCjE,UAAS,yFANX,UAQE,oBAAIA,UAAU,sBAAd,SAAqCmH,EAAI,IACzC,qBAAInH,UAAU,OAAd,UACE,sBAAMA,UAAU,YAAhB,SACGiE,EAAKhE,cAFV,IAIIgE,EAAK/D,eAET,oBAAIF,UAAU,OAAd,SACGQ,YAAKyD,EAAKxD,UAAW,gBAExB,oBAAIT,UAAU,OAAd,SAAsBiE,EAAKvD,aAC3B,oBAAIV,UAAU,OAAd,SAAsBiE,EAAKtD,WAC3B,qBAAIX,UAAU,+BAAd,UACGiE,EAAKrD,SADR,UAGA,oBAAIZ,UAAU,OAAd,SACG8B,YACCmC,EAAKxD,UACLwD,EAAKvD,WACLuD,EAAKtD,cAtBJwG,EAAI,YA8BU,OAA5Bd,KAAKR,MAAMH,cACV,cAAC,EAAD,CACEhG,OAAQ2G,KAAK7G,MAAME,OACnBqB,QAASsF,KAAK7G,MAAMuB,QACpBhB,KAAMsG,KAAKR,MAAMH,aACjBtF,gBAAiBiG,KAAKZ,oBACtBtD,oBAAqBkE,KAAKlE,oBAC1BC,kBAAmBiE,KAAK7G,MAAM4C,4BAQ1CiE,KAAK7G,MAAME,OAAOC,cAKZuC,IAJNmE,KAAK7G,MAAME,OAAOC,QAAQC,MACxB,SAACC,GAAD,OACE,EAAKgG,MAAMF,YACX9F,EAAIC,YAAc,EAAK+F,MAAMF,WAAWjG,WAE1C,cAAC2H,EAAA,SAAD,CACEC,eACEjB,KAAK7G,MAAME,OAAOC,QAAQC,MACxB,SAACC,GAAD,OACE,EAAKgG,MAAMF,YACX9F,EAAIC,YAAc,EAAK+F,MAAMF,WAAWjG,UAG9CgG,aAAcW,KAAKR,MAAMF,WACzBvF,gBAAiBiG,KAAKlE,oBACtByD,mBAAoBS,KAAKT,mBACzB2B,cAAelB,KAAK7G,MAAM+H,cAC1BC,gBAAiBnB,KAAK7D,cAIC,IAA5B6D,KAAKR,MAAMpC,cACV,cAACgE,EAAA,EAAD,CACEL,MAAM,kBACNM,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM,EAAKpF,SAAS,CAAEe,cAAc,KAC3CsE,eAAe,EACfC,eAAgBC,IAAUC,MAC1BC,cAAc,EACdC,QAAS,CAAEhB,OAAO,GARpB,SAUE,cAACiB,EAAA,EAAD,CACEjG,kBAAmBiE,KAAKjD,aACxBkF,mBACEjC,KAAK7G,MAAME,OAAOD,iBAClB4G,KAAK7G,MAAME,OAAOD,gBAAgBK,eAKT,IAAhCuG,KAAKR,MAAMC,kBACV,cAAC2B,EAAA,EAAD,CACEL,MACE,sBAAKpH,UAAU,mCAAf,UACyC,OAAtCqG,KAAK7G,MAAM6F,aAAaxE,WACvBwF,KAAK7G,MAAM6F,aAAaxE,UAAUC,OAAS,GACzC,cAAC,IAAD,CACEyF,GAAI,oBACJvG,UAAU,iEAFZ,wBAOJ,yDAGJ0H,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM,EAAKpF,SAAS,CAAEoD,kBAAkB,KAC/CiC,eAAe,EACfC,eAAgBC,IAAUC,MAC1BC,cAAc,EACdC,QAAS,CAAEhB,OAAO,GArBpB,SAuByC,OAAtCf,KAAK7G,MAAM6F,aAAaxE,UACvB,cAAC2F,EAAA,EAAD,IACwC,OAAtCH,KAAK7G,MAAME,OAAOD,gBACpB,yDAEA,cAAC8I,EAAA,EAAD,CACEjB,eAAgBjB,KAAK7G,MAAME,OAAOD,gBAClC+I,SAAUnC,KAAKzD,mBACf6F,cAAepC,KAAK7G,MAAM6F,aAAaxE,UACvC6H,cAAerC,KAAK7G,MAAM+D,YAAY1C,eAKjB,IAA5BwF,KAAKR,MAAM1C,cACV,cAACsE,EAAA,EAAD,CACEL,MAAM,kBACNM,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM,EAAKpF,SAAS,CAAES,cAAc,KAC3C4E,eAAe,EACfC,eAAgBC,IAAUC,MAC1BC,cAAc,EACdC,QAAS,CAAEhB,OAAO,GARpB,SAUE,qBAAKpH,UAAU,OAAf,SACE,cAAC2I,EAAA,EAAD,CACE3H,mBAAoBqF,KAAK7G,MAAMuB,QAAQC,mBACvC2D,kBAAmB0B,KAAK3B,iBACxBxB,iBAAkBmD,KAAKnD,wBAKP,IAAvBmD,KAAKR,MAAMlD,SAC4C,OAAtD0D,KAAK7G,MAAMsF,aAAaS,4BACmB,IAA3Cc,KAAK7G,MAAMsF,aAAaC,gBACtB,cAAC6D,EAAA,EAAD,CACE9D,aAAcuB,KAAK7G,MAAMsF,aACzB+D,6BAA8B,SAACC,GAC7B,EAAKtJ,MAAMqJ,6BAA6BC,GACd,OAAtBA,EAAKtD,aACP,EAAKd,iBAAiBoE,EAAKtD,cAE3B,EAAK9C,SAAS,CAAES,cAAc,IAEhC,EAAK3D,MAAMwF,mBAAkB,IAE/B+D,SAAU,WACR,EAAKvJ,MAAMwF,mBAAkB,a,GA9dpBgE,aAsgBZC,EAAYC,aA/BD,SAAC,GAmBvB,MAAO,CACLC,KAFC,EAjBHA,KAoBEzJ,OAHC,EAhBHA,OAoBEoF,aAJC,EAfHA,aAoBEO,aALC,EAdHA,aAoBEJ,cANC,EAbHA,cAoBE1B,YAPC,EAZHA,YAoBExC,QARC,EAXHA,QAoBEqI,OATC,EAVHA,UAuBgD,CAChDhE,iBACAiE,sBACAC,6BACAT,kCACAU,4BACAC,0BACAtE,uBACAI,sBACAlD,uBACAU,qBACAqC,4BACAR,uBACA8E,oBACAlC,mBACA3C,2BACAxE,qBACA4E,wBAjBuBkE,CAkBtB3G,I,yfChkBUmH,EAAe,WAE1B,IADA,IAAIC,EAAgB,GACXnG,EAAI,EAAGA,GAAK,GAAIA,IACvBmG,EAAG,sBAAOA,GAAP,CAAYnG,IAEjB,OAAOmG,GAEIC,EAAiB,WAE5B,IADA,IAAIC,EAAiB,GACZrG,EAAI,EAAGA,GAAK,GAAIA,IACvBqG,EAAI,sBAAOA,GAAP,CAAarG,IAEnB,OAAOqG,GAmEHC,E,kDACJ,WAAYtK,GAAuB,IAAD,8BAChC,cAAMA,IAqDRuK,qBAAuB,SAACC,GAEtB,QAAa9H,IADF,EAAK2D,MAAMoE,gBAAgBrK,MAAK,SAACC,GAAD,OAASA,EAAIqK,OAASF,KACzC,CACtB,IADsB,EAClBG,EAAgE,GAD9C,cAED,EAAKtE,MAAMoE,iBAFV,IAEtB,2BAAiD,CAAC,IAAzCG,EAAwC,QAE7CD,EADEC,EAASF,OAASF,EACb,sBACFG,GADE,CAEL,CACED,KAAMF,EACNvH,QAAS2H,EAAS3H,OAClB4H,QAASD,EAASC,WAIf,sBAAOF,GAAP,CAAgBC,KAbL,8BAgBtB,EAAK1H,SAAS,CAAEuH,gBAAiBE,MAxEH,EA2ElC3H,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEC,QAASF,KA5EO,EA8ElCG,mBAAqB,SAACC,GAElBf,YACE,EAAKtC,MAAMkG,aAAajF,UACxB,EAAKjB,MAAMkG,aAAahF,WACxB,EAAKlB,MAAMkG,aAAa/E,YACpBoB,IAAeM,SACwB,IAA7C,EAAK7C,MAAMkG,aAAa7E,UAAUC,OAElC,EAAKtB,MAAM8K,oBAAoBzH,GAE/BP,MACE,sEA1F4B,EA8FlCS,sBAAwB,SAACF,GAErBf,YACE,EAAKtC,MAAMkG,aAAajF,UACxB,EAAKjB,MAAMkG,aAAahF,WACxB,EAAKlB,MAAMkG,aAAa/E,YACpBoB,IAAeM,SACwB,IAA7C,EAAK7C,MAAMkG,aAAa7E,UAAUC,QAK1B,IAFNkC,OAAOC,QACL,+EAGF,EAAKzD,MAAM8K,oBAAoBzH,GAGjCP,MACE,yEAhH4B,EAoHlCY,iBAAmB,SAACT,GAClB,EAAKC,SAAS,CAAES,aAAcV,KArHE,EAuHlC8H,QAAU,SAACC,GACT,GAAIA,IAASC,IAAqBC,MAAO,CACvC,GACyC,OAAvC,EAAKlL,MAAMuB,QAAQmD,kBAC8B,IAAjD,EAAK1E,MAAMuB,QAAQmD,gBAAgBoC,UAEnC,OAAO,EAAK5D,SAAS,CACnBqD,QAAS,CACPC,QAAS,SACTC,IAAK,+BAEP9C,cAAc,IAGlB,GAAkC,OAA9B,EAAK3D,MAAM8H,eACb,OAAO,EAAK5E,SAAS,CACnBqD,QAAS,CACPC,QAAS,SACTC,IAAK,2BAEPxC,cAAc,IAGlB,GAA6B,KAAzB,EAAKoC,MAAMpF,UACb,OAAO,EAAKiC,SAAS,CACnBqD,QAAS,CACPC,QAAS,YACTC,IAAK,6BAIX,GAA8B,KAA1B,EAAKJ,MAAMnF,WACb,OAAO,EAAKgC,SAAS,CACnBqD,QAAS,CACPC,QAAS,aACTC,IAAK,iCAIX,GAA4B,KAAxB,EAAKJ,MAAMlF,SACb,OAAO,EAAK+B,SAAS,CACnBqD,QAAS,CACPC,QAAS,WACTC,IAAK,kCAIX,IACkE,IAAhE0E,YAAgB,EAAK9E,MAAMnF,WAAY,EAAKmF,MAAMlF,UAElD,OAAO,EAAK+B,SAAS,CACnBqD,QAAS,CACPC,QAAS,WACTC,IAAK,uDAIX,GACgC,IAA9B,EAAKJ,MAAM+E,gBACqB,IAAhC,EAAK/E,MAAMgF,iBAEX,OAAO,EAAKnI,SAAS,CACnBqD,QAAS,CACPC,QAAS,iBACTC,IAAK,+BAIX,GAAI,EAAKJ,MAAMvB,mBAAqB,EAClC,OAAO,EAAK5B,SAAS,CACnBqD,QAAS,CACPC,QAAS,qBACTC,IAAK,8CAIX,GAAiC,KAA7B,EAAKJ,MAAMtB,cACb,OAAO,EAAK7B,SAAS,CACnBqD,QAAS,CACPC,QAAS,gBACTC,IAAK,4CAIX,GAA+B,KAA3B,EAAKJ,MAAMzE,YACb,OAAO,EAAKsB,SAAS,CACnBqD,QAAS,CACPC,QAAS,cACTC,IAAK,kCAKb,EAAKvD,SAAS,CAAEoI,YAAaN,KApNG,EAuNlCO,WAAa,SAACP,GACZ,GAAIA,IAASC,IAAqBO,MAAO,CACvC,GAA6B,KAAzB,EAAKnF,MAAMpF,UACb,OAAO,EAET,GAA8B,KAA1B,EAAKoF,MAAMnF,WACb,OAAO,EAET,GAA4B,KAAxB,EAAKmF,MAAMlF,SACb,OAAO,EAET,GACgC,IAA9B,EAAKkF,MAAM+E,gBACqB,IAAhC,EAAK/E,MAAMgF,iBAEX,OAAO,EAET,GAAI,EAAKhF,MAAMvB,mBAAqB,EAClC,OAAO,EAET,GAAiC,KAA7B,EAAKuB,MAAMtB,cACb,OAAO,EAET,GAA+B,KAA3B,EAAKsB,MAAMzE,YACb,OAAO,EAET,GAA0B,KAAtB,EAAKyE,MAAMtE,OACb,OAAO,EAIX,GAAIiJ,IAASC,IAAqBC,MAAO,CACvC,GACyC,OAAvC,EAAKlL,MAAMuB,QAAQmD,kBAC8B,IAAjD,EAAK1E,MAAMuB,QAAQmD,gBAAgBoC,UAEnC,OAAO,EAET,GAAkC,OAA9B,EAAK9G,MAAM8H,eACb,OAAO,EAET,GAC0C,OAAxC,EAAK9H,MAAM+D,YAAYmC,cACkC,IAAzD,EAAKlG,MAAM+D,YAAYmC,aAAa7E,UAAUC,OAE9C,OAAO,EAIX,OAAO,GAxQyB,EA2QlCsC,aAAe,SAACC,GAUd,GAA4C,OAAxC,EAAK7D,MAAM+D,YAAYmC,aAAwC,CAAC,IAAD,gBACnD,EAAKlG,MAAM+D,YAAYmC,aAAa7E,WADe,IACjE,2BAA6D,CAAC,IAArD2C,EAAoD,QAC3D,EAAKhE,MAAM8K,oBAAoB9G,IAFgC,8BAIjE,EAAKhE,MAAM4C,kBAAkBiB,GAC7B,EAAKX,SAAS,CAAEoI,YAAaL,IAAqBO,QAGX,MAAvC,EAAKxL,MAAM+D,YAAYmC,cACkC,IAAzD,EAAKlG,MAAM+D,YAAYmC,aAAa7E,UAAUC,QACR,OAAtC,EAAKtB,MAAME,OAAOD,iBAElB,EAAKD,MAAM4C,kBAAkBiB,GAE/B,EAAKX,SAAS,CAAEe,cAAc,IACb,OAAbJ,GACF,EAAK7D,MAAM8F,iBAAiBjC,EAASvD,UAAW,EAAK0C,aArSvB,EAySlCkB,iBAAmB,SAAC7C,GAClB,IAD+D,EAC3D8C,EAAgB,GAD2C,cAE1C9C,GAF0C,IAE/D,2BAAgC,CAAC,IAAxBgC,EAAuB,QAC9Bc,EAAG,sBAAOA,GAAP,CAAYd,EAASe,eAHqC,8BAK/D,OAAOD,GA9SyB,EAiTlCsH,sBAjTkC,sBAiTV,0CAAAC,EAAA,yDACtB,EAAKxI,SAAS,CAAEqD,QAAS,OAEgB,OAAvC,EAAKvG,MAAMuB,QAAQmD,kBAC8B,IAAjD,EAAK1E,MAAMuB,QAAQmD,gBAAgBoC,UAJf,yCAMb,EAAK5D,SAAS,CACnBqD,QAAS,CACPC,QAAS,SACTC,IAAK,+BAEP9C,cAAc,KAXI,UAcY,OAA9B,EAAK3D,MAAM8H,eAdO,yCAeb,EAAK5E,SAAS,CACnBqD,QAAS,CACPC,QAAS,SACTC,IAAK,2BAEPxC,cAAc,KApBI,UAuBO,KAAzB,EAAKoC,MAAMpF,UAvBO,yCAwBb,EAAKiC,SAAS,CACnBqD,QAAS,CACPC,QAAS,YACTC,IAAK,8BA3BW,UA+BQ,KAA1B,EAAKJ,MAAMnF,WA/BO,yCAgCb,EAAKgC,SAAS,CACnBqD,QAAS,CACPC,QAAS,aACTC,IAAK,kCAnCW,UAuCM,KAAxB,EAAKJ,MAAMlF,SAvCO,0CAwCb,EAAK+B,SAAS,CACnBqD,QAAS,CACPC,QAAS,WACTC,IAAK,mCA3CW,YA+C8C,IAAhE0E,YAAgB,EAAK9E,MAAMnF,WAAY,EAAKmF,MAAMlF,UA/ChC,0CAgDb,EAAK+B,SAAS,CACnBqD,QAAS,CACPC,QAAS,WACTC,IAAK,wDAnDW,WAuDY,IAA9B,EAAKJ,MAAM+E,gBAAwD,IAAhC,EAAK/E,MAAMgF,iBAvD5B,0CAwDb,EAAKnI,SAAS,CACnBqD,QAAS,CACPC,QAAS,iBACTC,IAAK,gCA3DW,aA+DlB,EAAKJ,MAAMvB,mBAAqB,GA/Dd,0CAgEb,EAAK5B,SAAS,CACnBqD,QAAS,CACPC,QAAS,qBACTC,IAAK,+CAnEW,WAuEW,KAA7B,EAAKJ,MAAMtB,cAvEO,0CAwEb,EAAK7B,SAAS,CACnBqD,QAAS,CACPC,QAAS,gBACTC,IAAK,6CA3EW,WA+ES,KAA3B,EAAKJ,MAAMzE,YA/EO,0CAgFb,EAAKsB,SAAS,CACnBqD,QAAS,CACPC,QAAS,cACTC,IAAK,mCAnFW,WAwFoB,OAAxC,EAAKzG,MAAM+D,YAAYmC,cACkC,IAAzD,EAAKlG,MAAM+D,YAAYmC,aAAa7E,UAAUC,OAzF1B,0CA2Fb,EAAK4B,SAAS,CACnBqD,QAAS,CACPC,QAAS,YACTC,IAAK,8BA9FW,WAkGI,KAAtB,EAAKJ,MAAMtE,OAlGO,0CAmGb,EAAKmB,SAAS,CACnBqD,QAAS,CACPC,QAAS,SACTC,IAAK,4CAtGW,eA0GtB,EAAKvD,SAAS,CAAEC,SAAS,IA1GH,oBA4GdwI,IAAMC,IAAN,UAAaC,IAAIC,MAAjB,iBAA+B,EAAK9L,MAAMkG,aAAajB,IAAM,CACjEvD,OAAQ,EAAK1B,MAAMuB,QAAQmD,gBAAgBjD,IAC3CvB,OAAQ,EAAKF,MAAM8H,eAAexH,UAClCe,UAAW,EAAK6C,iBACd,EAAKlE,MAAM+D,YAAYmC,aAAa7E,WAEtCwD,YAAakH,IAAkBC,QAC/BjK,OAAQ,EAAKsE,MAAMtE,OACnB+C,mBAAoB,EAAKuB,MAAMvB,mBAC/B7D,UAAW,EAAKoF,MAAMpF,UACtBC,WAAY,EAAKmF,MAAMnF,WACvBC,SAAU,EAAKkF,MAAMlF,SACrBC,SAAU,EAAKiF,MAAMgF,iBAA+C,GAA5B,EAAKhF,MAAM+E,eACnDrG,cAAe,EAAKsB,MAAMtB,cAC1BnD,YAAa,EAAKyE,MAAMzE,YACxBI,MAAO,CACLI,oBAAmB,UAAE,EAAKiE,MAAMoE,gBAAgBrK,MAC9C,SAACC,GAAD,MAAsB,wBAAbA,EAAIqK,eADI,aAAE,EAElBzH,OACHf,aAAY,UAAE,EAAKmE,MAAMoE,gBAAgBrK,MACvC,SAACC,GAAD,MAAsB,iBAAbA,EAAIqK,eADH,aAAE,EAEXzH,OACHd,cAAa,UAAE,EAAKkE,MAAMoE,gBAAgBrK,MACxC,SAACC,GAAD,MAAsB,kBAAbA,EAAIqK,eADF,aAAE,EAEZzH,OACHZ,6BAA4B,UAAE,EAAKgE,MAAMoE,gBAAgBrK,MACvD,SAACC,GAAD,MAAsB,iCAAbA,EAAIqK,eADa,aAAE,EAE3BzH,OACHhB,uBAAsB,UAAE,EAAKoE,MAAMoE,gBAAgBrK,MACjD,SAACC,GAAD,MAAsB,2BAAbA,EAAIqK,eADO,aAAE,EAErBzH,UA1Ia,sBA6IN,EAAKjD,MAAM+D,YAAYmC,aAAa7E,WA7I9B,IA6IpB,2BAAS2C,EAAoD,QAC3D,EAAKhE,MAAM8K,oBAAoB9G,GA9Ib,8BAgJpB,EAAKhE,MAAM4C,kBAAkB,MACc,OAAvC,EAAK5C,MAAMuB,QAAQmD,gBACrB,EAAK1E,MAAMoF,sBACT,EAAKpF,MAAMuB,QAAQmD,gBAAgBjD,IACnC,EAAKzB,MAAMgI,iBAGyC,OAAtD,EAAKhI,MAAMsF,aAAaS,2BAEpB,OADF,EAAK/F,MAAMsF,aAAaS,0BAA0BC,cAElD,EAAKhG,MAAMoF,sBACT,EAAKpF,MAAMsF,aAAaS,0BAA0BC,aAAavE,IAC/D,EAAKzB,MAAMgI,iBAGjB,EAAK9E,SAAS,CAAE+I,iBAAiB,IACjC,EAAKjM,MAAMY,gBAAgB,MAC3B,EAAKZ,MAAMiK,eAAe,CACxBrC,MAAO,UACPsE,YAAa,iCACb/D,MAAOgE,IAAgBC,UApKL,mDAuKhB,KAAMC,WACJ,KAAMA,SAAS/C,WACkB5G,IAA/B,KAAM2J,SAAS/C,KAAKgD,QAClB,KAAMD,SAAS/C,KAAKgD,OAAOhL,OAAS,EACtC,EAAK4B,SAAS,CACZqD,QAAS,CACPC,QAAS,OACTC,IAAK,KAAM4F,SAAS/C,KAAKgD,OAAO,GAAGC,WAc3C,EAAKrJ,SAAS,CACZqD,QAAS,CAAEC,QAAS,OAAQC,IAAK,iCAIvC+F,QAAQC,IAAI,aAAZ,sBAjMoB,QAmMtB,EAAKvJ,SAAS,CAAEC,SAAS,IAnMH,2DAjTU,EAuflCkC,kBAAoB,WAgBlB,GAd6C,OAA3C,EAAKrF,MAAMyF,cAAcA,eACyB,IAAlD,EAAKzF,MAAMyF,cAAcA,cAAcnE,QAEvC,EAAKtB,MAAM0F,kBAAkB,EAAK1C,YAGQ,OAA1C,EAAKhD,MAAMuB,QAAQC,oBAC8B,IAAjD,EAAKxB,MAAMuB,QAAQC,mBAAmBF,QAEtC,EAAKtB,MAAM2F,uBAAuB,EAAK3C,YAEP,OAA9B,EAAKhD,MAAM8H,gBACb,EAAK5E,SAAS,CAAEe,cAAc,IAGA,OAA9B,EAAKjE,MAAME,OAAOC,SACoB,OAAtC,EAAKH,MAAME,OAAOD,gBAClB,CACA,IAAI4D,EAAW,EAAK7D,MAAME,OAAOC,QAAQC,MACvC,SAACC,GAAD,OAASA,EAAIC,YAAc,EAAKN,MAAMkG,aAAahG,eAEpCwC,IAAbmB,IACF,EAAK7D,MAAM4C,kBAAkBiB,GAC7B,EAAKD,aAAaC,IAEpB,EAAK7D,MAAM0M,gBAAgB,EAAK1M,MAAMkG,aAAajB,GAAI,EAAKjC,YAE5B,OAA9B,EAAKhD,MAAM8H,gBACb,EAAK9H,MAAM0M,gBAAgB,EAAK1M,MAAMkG,aAAajB,GAAI,EAAKjC,aArhB9B,EAwhBlC2J,iBAAmB,WACjB,EAAKzJ,SAAS,CAAE0J,aAAc,QAzhBE,EA2hBlCC,eAAiB,SAACxL,GAChB,IADmD,EAC/CyL,EAAQ,EADuC,cAE9BzL,GAF8B,IAEnD,2BAAgC,CAC9ByL,GAD8B,QACLC,OAHwB,8BAKnD,OAAOD,GAhiByB,EAkiBlCE,mBAAqB,SAAC3F,GAEpB,EAAKnE,SAAS,CACZnB,OAAQsF,EACRd,QAAS,QAtiBqB,EAyiBlC0G,gBAAkB,SAAChK,GACjB,EAAKC,SAAS,CAAEe,aAAchB,KA1iBE,EA4iBlCiK,gBAAkB,SAACjK,GACjB,EAAKC,SAAS,CAAES,aAAcV,KA7iBE,EA+iBlCiC,iBAAmB,SAACxD,GAClB,EAAK1B,MAAMmF,kBAAkBzD,GAC7B,EAAK1B,MAAMoF,sBAAsB1D,EAAOD,IAAK,EAAKuB,aA9iBlD,EAAKqD,MAAQ,CACXlD,SAAS,EACTc,cAAc,EACdN,cAAc,EACd2C,kBAAkB,EAClBC,QAAS,CACPC,QAAS,GACTC,IAAK,IAEP3B,mBAAoB,EAAK9E,MAAMkG,aAAapB,mBAC5C7D,UAAW,EAAKjB,MAAMkG,aAAajF,UACnCC,WAAY,EAAKlB,MAAMkG,aAAahF,WACpCC,SAAU,EAAKnB,MAAMkG,aAAa/E,SAClCiK,eAAiB,EAAKpL,MAAMkG,aAAa9E,SAAW,GAAM,EAC1DiK,iBAAkB,EAAKrL,MAAMkG,aAAa9E,SAAW,GACrD2D,cAAe2B,IAAqBC,OACpC/E,YAAa,EAAK5B,MAAMkG,aAAatE,YACrCG,OAAQ,EAAK/B,MAAMkG,aAAanE,OAChCkK,iBAAiB,EACjBW,aAAc,KACdtB,YAAaL,IAAqBC,MAClCT,gBAAiB,CACf,CACEC,KAAM,sBACNzH,OAAQ,EAAKjD,MAAMkG,aAAalE,MAAMI,oBACtCyI,QAAS,sBAEX,CACEH,KAAM,eACNzH,OAAQ,EAAKjD,MAAMkG,aAAalE,MAAME,aACtC2I,QAAS,eAEX,CACEH,KAAM,gBACNzH,OAAQ,EAAKjD,MAAMkG,aAAalE,MAAMG,cACtC0I,QAAS,gBAEX,CACEH,KAAM,+BACNzH,OAAQ,EAAKjD,MAAMkG,aAAalE,MAAMK,6BACtCwI,QAAS,qCAEX,CACEH,KAAM,yBACNzH,OAAQ,EAAKjD,MAAMkG,aAAalE,MAAMC,uBACtC4I,QAAS,4BAGbsC,YAAY,GAnDkB,E,0CAmjBlC,WAAU,IAAD,OACP,OAAmC,IAA/BtG,KAAKR,MAAM4F,gBACN,cAAC,IAAD,CAAUlF,GAAG,eAGpB,eAAC,WAAD,WAC+B,OAA5BF,KAAKR,MAAMuG,aACV,gCACE,cAAC,IAAD,CACEtB,YAAazE,KAAKR,MAAMiF,YACxBP,QAASlE,KAAKkE,QACd7K,OAAQ2G,KAAK7G,MAAME,OAAOD,gBAC1BsB,QAASsF,KAAK7G,MAAMuB,QACpB0L,gBAAiBpG,KAAKoG,gBACtBC,gBAAiBrG,KAAKqG,gBACtBE,WAAYvG,KAAK0E,WACjB8B,WAAYC,qBAAmBzF,YAET,IAAvBhB,KAAKR,MAAMlD,QACV,sBAAK3C,UAAU,kCAAf,UACE,qBAAKA,UAAU,0BAAf,+CAGA,cAAC,IAAD,OAGF,sBAAKA,UAAU,wCAAf,UACGqG,KAAKR,MAAMiF,cAAgBL,IAAqBO,OAC/C,sBAAKhL,UAAU,6BAAf,UACE,sBAAKA,UAAU,8BAAf,UACE,sBAAMA,UAAU,8BAAhB,uBAGA,uBACE0G,SAAU,SAACC,GACT,EAAKjE,SAAS,CACZjC,UAAWkG,EAAEC,OAAOC,MACpBd,QAAS,QAGbc,MAAOkG,YAAU1G,KAAKR,MAAMpF,UAAW,cACvCqG,KAAK,OACL9G,UAAS,2CACgB,OAAvBqG,KAAKR,MAAME,SACoB,cAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,YAGgB,OAAvBK,KAAKR,MAAME,SACqB,cAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,8BAAf,UACE,sBAAMA,UAAU,8BAAhB,6BAGA,wBACE0G,SAAU,SAACC,GACT,EAAKjE,SAAS,CACZkI,eAAgBoC,SAASrG,EAAEC,OAAOC,OAClCd,QAAS,QAGbc,MAAOR,KAAKR,MAAM+E,eAClB5K,UAAS,2CACgB,OAAvBqG,KAAKR,MAAME,SACoB,mBAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,UAZR,SAeG0D,IAAexC,KAAI,SAACjD,EAAMkD,GAAP,OAClB,wBAAQN,MAAO5C,EAAf,SACGA,GADuBkD,EAAI,QAKV,OAAvBd,KAAKR,MAAME,SACqB,mBAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,8BAAf,UACE,sBAAMA,UAAU,8BAAhB,+BAGA,wBACE0G,SAAU,SAACC,GACT,EAAKjE,SAAS,CACZmI,iBAAkBmC,SAASrG,EAAEC,OAAOC,OACpCd,QAAS,QAGbc,MAAOR,KAAKR,MAAMgF,iBAClB7K,UAAS,2CACgB,OAAvBqG,KAAKR,MAAME,SACoB,qBAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,UAZR,SAeG4D,IAAiB1C,KAAI,SAACjD,EAAMkD,GAAP,OACpB,wBAAQN,MAAO5C,EAAf,SACGA,GADuBkD,EAAI,QAKV,OAAvBd,KAAKR,MAAME,SACqB,qBAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,8BAAf,UACE,sBAAMA,UAAU,8BAAhB,6BAGA,uBACE0G,SAAU,SAACC,GACT,EAAKjE,SAAS,CACZhC,WAAYiG,EAAEC,OAAOC,MACrBd,QAAS,QAGbc,MAAOR,KAAKR,MAAMnF,WAClBoG,KAAK,OACL9G,UAAS,2CACgB,OAAvBqG,KAAKR,MAAME,SACoB,eAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,YAGgB,OAAvBK,KAAKR,MAAME,SACqB,eAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,8BAAf,UACE,sBAAMA,UAAU,8BAAhB,8BAGA,uBACE0G,SAAU,SAACC,GACT,EAAKjE,SAAS,CACZ/B,SAAUgG,EAAEC,OAAOC,MACnBd,QAAS,QAGbc,MAAOR,KAAKR,MAAMlF,SAClBmG,KAAK,OACL9G,UAAS,2CACgB,OAAvBqG,KAAKR,MAAME,SACoB,aAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,YAGgB,OAAvBK,KAAKR,MAAME,SACqB,aAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,gCAAf,UACE,sBAAMA,UAAU,8BAAhB,0CAGA,uBACEiN,UAAU,EACVvG,SAAU,SAACC,GACT,EAAKjE,SAAS,CACZ4B,mBAAoB0I,SAASrG,EAAEC,OAAOC,OACtCd,QAAS,QAGbc,MAAOR,KAAKR,MAAMvB,mBAClBwC,KAAK,SACL9G,UAAS,6DACgB,OAAvBqG,KAAKR,MAAME,SACoB,uBAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,YAGgB,OAAvBK,KAAKR,MAAME,SACqB,uBAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,gCAAf,UACE,uBAAMA,UAAU,8BAAhB,sCAC4BqG,KAAKR,MAAMtB,iBAEvC,yBACEmC,SAAU,SAACC,GACT,EAAKjE,SAAS,CACZ6B,cAAeoC,EAAEC,OAAOC,MACxBd,QAAS,QAGbkH,UAAU,EACVjN,UAAS,6DACgB,OAAvBqG,KAAKR,MAAME,SACoB,kBAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,UAZR,UAeE,wBAAQa,MAAM,GAAd,qCACCqG,IAAyBhG,KAAI,SAACjD,EAAMkD,GAAP,OAC5B,wBACEiD,SACEnG,EAAK+F,MAAQ,EAAKnE,MAAMtB,cAK1BsC,MAAO5C,EAAK+F,IAPd,SASG/F,EAAK4C,OAHDM,EAAI,SAOS,OAAvBd,KAAKR,MAAME,SACqB,kBAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,+BAAf,UACE,sBAAMA,UAAU,8BAAhB,8BAGA,0BACE0G,SAAU,SACRC,GAEA,EAAKjE,SAAS,CACZtB,YAAauF,EAAEC,OAAOC,MACtBd,QAAS,QAGbc,MAAOR,KAAKR,MAAMzE,YAClBpB,UAAS,8CACgB,OAAvBqG,KAAKR,MAAME,SACoB,gBAA/BM,KAAKR,MAAME,QAAQC,QACf,0BACA,YAGgB,OAAvBK,KAAKR,MAAME,SACqB,gBAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,wCAAf,SACGqG,KAAKR,MAAME,QAAQE,SAI5B,sBAAKjG,UAAU,+BAAf,UAEE,sBAAMA,UAAU,8BAAhB,uCAYA,cAAC,IAAD,CACE6G,MAAOR,KAAKR,MAAMtE,OAClBvB,UAAU,gBACV0G,SAAUL,KAAKmG,qBAEO,OAAvBnG,KAAKR,MAAME,SACqB,WAA/BM,KAAKR,MAAME,QAAQC,SACjB,qBAAKhG,UAAU,6CAAf,SACGqG,KAAKR,MAAME,QAAQE,YAM/BI,KAAKR,MAAMiF,cAAgBL,IAAqBC,OAC/C,sBAAK1K,UAAU,gCAAf,UACE,sBAAKA,UAAU,6CAAf,UACE,sBAAMA,UAAU,gCAAhB,4BAGA,sBAAKA,UAAU,sBAAf,UACE,uBAAMA,UAAU,wFAAhB,yBACe,IAC4B,OAAxCqG,KAAK7G,MAAM+D,YAAYmC,cACtBW,KAAKgG,eACHhG,KAAK7G,MAAM+D,YAAYmC,aAAa7E,eAGxCiB,YACAuE,KAAK7G,MAAMkG,aAAajF,UACxB4F,KAAK7G,MAAMkG,aAAahF,WACxB2F,KAAK7G,MAAMkG,aAAa/E,YACpBoB,IAAeM,SAC0B,IAA7CgE,KAAK7G,MAAMkG,aAAa7E,UAAUC,SAClC,sBACEX,QAAS,kBACuB,OAA9B,EAAKX,MAAM8H,eACP,EAAK5E,SAAS,CAAEe,cAAc,IAC9B,EAAKf,SAAS,CAAEoD,kBAAkB,KAExC9F,UAAU,2FANZ,UAQE,cAAC,IAAD,CAAOA,UAAU,aARnB,yBAaN,qBAAKA,UAAU,qBAAf,SAC2C,OAAxCqG,KAAK7G,MAAM+D,YAAYmC,aACtB,6CAEc,IADZW,KAAK7G,MAAM+D,YAAYmC,aAAa7E,UACnCC,OACH,qBACEd,UAAS,UACgB,OAAvBqG,KAAKR,MAAME,SACoB,cAA/BM,KAAKR,MAAME,QAAQC,QACf,iDACA,cAJG,iBADX,SAQE,cAAC,IAAD,CACE2B,MAAOwF,IAAeC,KACtBvG,MAAO,iCAIXR,KAAK7G,MAAMyF,eACXoB,KAAK7G,MAAM+D,YAAYmC,aAAa7E,UAAUqG,KAC5C,SAACjD,EAAMkD,GAAP,OACE,cAAC,IAAD,CAEEtE,SAAUoB,EACVuE,SAAU,EAAKzF,sBACfN,QAAQ,EACRwC,cAAe,EAAKzF,MAAMyF,cAC1BoI,QAAQ,EACRC,OAAQnG,EAAI,EACZsB,cACE,EAAKjJ,MAAM+D,YAAYmC,aAAc7E,WARlCsG,EAAI,WAiBvB,qBACEnH,UAAU,OACVG,QAAS,kBAAM,EAAKuC,SAAS,CAAEqD,QAAS,QAF1C,SAI0B,OAAvBM,KAAKR,MAAME,SACqB,KAA/BM,KAAKR,MAAME,QAAQC,SACjB,cAAC,IAAD,CACEoB,MAAO,eACPsE,YAAarF,KAAKR,MAAME,QAAQE,IAChC0B,MAAO4F,IAAeC,WAI9B,sBAAKxN,UAAU,kDAAf,UACGqG,KAAKR,MAAMiF,cAAgBL,IAAqBO,MAC/C,wBACE7K,QAAS,kBAAM,EAAKX,MAAMY,gBAAgB,OAC1C0G,KAAK,SACL9G,UAAU,4BAHZ,oBAQA,qBACEG,QAAS,kBAAM,EAAKoK,QAAQE,IAAqBO,QACjDhL,UAAU,4BAFZ,6BAODqG,KAAKR,MAAMiF,cAAgBL,IAAqBO,MAC/C,qBAAKhL,UAAU,6BAAf,SACE,qBACEG,QAAS,kBAAM,EAAKoK,QAAQE,IAAqBC,QACjD1K,UAAU,4CAFZ,wBAQF,qBAAKA,UAAU,6BAAf,SACE,qBACEG,QAAS,kBAAM,EAAKuC,SAAS,CAAEiK,YAAY,KAC3C3M,UAAU,4CAFZ,sCAY4B,OAAtCqG,KAAK7G,MAAM6F,aAAaxE,UAC1B,cAAC,IAAD,IAC+C,IAA7CwF,KAAK7G,MAAM6F,aAAaxE,UAAUC,OACpC,0DAEA,cAAC,IAAD,CACE2M,iBAAkBpH,KAAKR,MAAMuG,aAC7B3D,cAAepC,KAAK7G,MAAM6F,aAAaxE,UACvCsL,iBAAkB9F,KAAK8F,oBAGE,IAA5B9F,KAAKR,MAAMpC,cACV,cAAC,IAAD,CACE2D,MAAM,gBACNM,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM,EAAKpF,SAAS,CAAEe,cAAc,KAC3CsE,eAAe,EACfC,eAAgBC,IAAUC,MAC1BC,cAAc,EACdC,QAAS,CAAEhB,OAAO,GARpB,SAUE,qBAAKpH,UAAU,QAAf,SACE,cAAC,IAAD,CACEoC,kBAAmBiE,KAAKjD,aACxBkF,mBACEjC,KAAK7G,MAAM8H,gBACXjB,KAAK7G,MAAM8H,eAAexH,iBAMH,IAAhCuG,KAAKR,MAAMC,kBACV,eAAC,IAAD,CACEsB,MACE,sBAAKpH,UAAU,mCAAf,UACyC,OAAtCqG,KAAK7G,MAAM6F,aAAaxE,WACvBwF,KAAK7G,MAAM6F,aAAaxE,UAAUC,OAAS,GACzC,cAAC,IAAD,CACEyF,GAAI,oBACJvG,UAAU,iEAFZ,wBAOJ,yDAGJ0H,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM,EAAKpF,SAAS,CAAEoD,kBAAkB,KAC/CiC,eAAe,EACfC,eAAgBC,IAAUyF,WAC1BvF,cAAc,EACdC,QAAS,CAAEhB,OAAO,GArBpB,UAuBiC,OAA9Bf,KAAK7G,MAAM8H,eACV,yDACwC,OAAtCjB,KAAK7G,MAAM6F,aAAaxE,UAC1B,cAAC,IAAD,IAEA,cAAC,IAAD,CACEyG,eAAgBjB,KAAK7G,MAAM8H,eAC3BkB,SAAUnC,KAAKzD,mBACf6F,cAAepC,KAAK7G,MAAM6F,aAAaxE,UACvC6H,cAC8C,IAA5CrC,KAAK7G,MAAM+D,YAAY1C,UAAUC,QACjCuF,KAAK7G,MAAM+D,YAAYmC,cACvBW,KAAK7G,MAAM+D,YAAYmC,aAAa7E,UAAUC,OAAS,EACnDuF,KAAK7G,MAAM+D,YAAYmC,aAAa7E,UACpCwF,KAAK7G,MAAM+D,YAAY1C,YAIhCwF,KAAK7G,MAAM+D,YAAY1C,UAAUC,WAGT,IAA5BuF,KAAKR,MAAM1C,cACV,cAAC,IAAD,CACEiE,MAAM,kBACNM,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM,EAAKpF,SAAS,CAAES,cAAc,KAC3C4E,eAAe,EACfC,eAAgBC,IAAUC,MAC1BC,cAAc,EACdC,QAAS,CAAEhB,OAAO,GARpB,SAUE,qBAAKpH,UAAU,YAAf,SACE,cAAC,IAAD,CACEgB,mBAAoBqF,KAAK7G,MAAMuB,QAAQC,mBACvC2D,kBAAmB0B,KAAK3B,iBACxBxB,iBAAkBmD,KAAKnD,wBAKJ,IAA1BmD,KAAKR,MAAM8G,YACV,eAAC,IAAD,CACEvF,MACE,qBAAKpH,UAAU,kCAAf,0BAIF0H,UAAU,EACVC,MAAOC,IAAOC,QACdC,MAAO,kBAAM,EAAKpF,SAAS,CAAEiK,YAAY,KACzC5E,eAAe,EACfC,eAAgBC,IAAUC,MAC1BC,cAAc,EACdC,QAAS,CAAEhB,OAAO,EAAMuG,MAAM,GAZhC,UAcE,qBAAK3N,UAAU,aAAf,SACE,qBAAKA,UAAU,+BAAf,SACE,sBAAKA,UAAU,0BAAf,UACE,sBAAMA,UAAU,kCAAhB,mCAGA,qBAAKA,UAAU,2CAAf,SACGqG,KAAKR,MAAMoE,gBAAgB/C,KAAI,SAACjD,EAAMkD,GAAP,OAC9B,sBAEEnH,UAAS,qDACP,EAAK6F,MAAMoE,gBAAgBnJ,SAAWqG,EAAI,EACtC,GACA,WAHG,aAKS,IAAhBlD,EAAKxB,OACD,0BACA,gBAPG,SAFX,UAYE,qBAAKzC,UAAU,gBAAf,SACE,sBAAKA,UAAU,mCAAf,UACE,cAAC,IAAD,CAAgBA,UAAU,YAC1B,sBAAMA,UAAU,GAAhB,SAAoBiE,EAAKoG,eAG7B,sBAAKrK,UAAU,+CAAf,UACE,sBACEA,UAAS,mBACS,IAAhBiE,EAAKxB,OACD,0BACA,iBAJR,UAOmB,IAAhBwB,EAAKxB,OAAkB,UAAY,gBAEtC,cAAC,IAAD,CACEoE,MAAO5C,EAAKxB,OACZiE,SAAU,kBACR,EAAKqD,qBAAqB9F,EAAKiG,cA9BhC/C,EAAI,eAwCrB,qBACEnH,UAAU,OACVG,QAAS,kBAAM,EAAKuC,SAAS,CAAEqD,QAAS,QAF1C,SAI0B,OAAvBM,KAAKR,MAAME,SACqB,KAA/BM,KAAKR,MAAME,QAAQC,SACjB,cAAC,IAAD,CACEoB,MAAO,eACPsE,YAAarF,KAAKR,MAAME,QAAQE,IAChC0B,MAAO4F,IAAeC,WAI9B,sBAAKxN,UAAU,6CAAf,UACE,qBAAKA,UAAU,kCAAf,SACE,qBACEG,QAAS,kBAAM,EAAKuC,SAAS,CAAEiK,YAAY,KAC3C3M,UAAU,mDAFZ,sBAOF,qBAAKA,UAAU,kCAAf,SAQE,qBACEG,QAAS,kBAAM,EAAK8K,yBACpBjL,UAAU,4CAFZ,8C,GA7pCQgJ,aA8sCX3B,EAAW6B,aA/BA,SAAC,GAmBvB,MAAO,CACLC,KAFC,EAjBHA,KAoBEzJ,OAHC,EAhBHA,OAoBEoF,aAJC,EAfHA,aAoBEO,aALC,EAdHA,aAoBEJ,cANC,EAbHA,cAoBE1B,YAPC,EAZHA,YAoBExC,QARC,EAXHA,QAoBEqI,OATC,EAVHA,UAuB+C,CAC/ChE,iBACAiE,sBACAC,6BACAT,kCACAU,4BACAC,0BACAtE,uBACAI,sBACAlD,uBACAkI,yBACAnF,4BACAR,uBACA8E,oBACAyC,qBACAtH,4BAfsBsE,CAgBrBY","file":"static/js/51.6887dd4c.chunk.js","sourcesContent":["import React from \"react\";\nimport { GoTrashcan } from \"react-icons/go\";\nimport { MdClose, MdEdit } from \"react-icons/md\";\nimport {\n  applicationPeriodsStoreInterface,\n  courseStoreInterface,\n} from \"../../../actions\";\nimport { course } from \"../../../interfaces\";\nimport { ExamItemResponse } from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\ninterface ExamDetailsProps {\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  exam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  setSelectedExamEdit: (exam: ExamItemResponse | null) => void;\n  setSelectedCourse: (course_added: course) => void;\n}\n\nconst ExamDetails = (props: ExamDetailsProps) => {\n  const selected_course = props.course.courses?.find(\n    (itm) => itm.course_id === props.exam.course\n  );\n  return (\n    <div className=\"fixed h-full w-full bg-black bg-opacity-50 top-0 left-0 flex items-center justify-center z-50 animate__animated animate__fadeIn animate__faster overflow-y-auto\">\n      <div className=\"group absolute right-0 bg-white shadow-xl w-3/4 md:w-2/4 border z-50 h-full animate__animated animate__fadeInRight animate__faster\">\n        <div className=\"bg-white text-blue-700 font-bold text-2xl flex flex-row justify-between gap-3 items-center px-3 py-3\">\n          <div>\n            <span className=\"font-bold\">\n              {props.course.courses &&\n                props.course.courses.find(\n                  (itm) => itm.course_id === props.exam.course\n                )?.course_code}\n            </span>\n            -\n            {props.course.courses &&\n              props.course.courses.find(\n                (itm) => itm.course_id === props.exam.course\n              )?.course_name}\n          </div>\n          <div\n            onClick={() => props.setSelectedExam(null)}\n            className=\"text-2xl text-red-600 bg-red-50 group-hover:bg-red-100 rounded-full p-1 cursor-pointer\"\n          >\n            <MdClose />\n          </div>\n        </div>\n        <div\n          className=\"px-3 py-6 text-sm overflow-y-auto bg-gray-100\"\n          style={{ height: \"80vh\" }}\n        >\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam total marks</span>\n            <span className=\"text-blue-800 font-bold bg-blue-100 rounded-full px-2\">\n              {props.exam.exam_total_marks}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam date</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.exam_date)}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam start time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.start_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam ending time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.end_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam duration</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.duration}mins\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam number of questions</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.questions.length}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam period</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.periods.applicationPeriods &&\n                props.periods.applicationPeriods.find(\n                  (itm) => itm._id === props.exam.period\n                )?.session_plan_name}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam description</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.discription}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam terms and conitions</span>\n            <div\n              dangerouslySetInnerHTML={{ __html: props.exam.termes }}\n              className=\"text-blue-600 font-bold\"\n            ></div>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600 mb-2\">Exam rules</span>\n            <div className=\"text-blue-600 font-bold bg-white rounded\">\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Leave browser</span>\n                <span\n                  className={`${\n                    props.exam.rules.allow_to_leave_browser === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.allow_to_leave_browser === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Copy</span>\n                <span\n                  className={`${\n                    props.exam.rules.copy_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.copy_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Paste</span>\n                <span\n                  className={`${\n                    props.exam.rules.paste_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.paste_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Right click</span>\n                <span\n                  className={`${\n                    props.exam.rules.right_click_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.right_click_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Come back after leaving room</span>\n                <span\n                  className={`${\n                    props.exam.rules.stop_candidate_when_comeback === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.stop_candidate_when_comeback === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam status</span>\n            <span\n              className={`${\n                validateExamDate(\n                  props.exam.exam_date,\n                  props.exam.start_time,\n                  props.exam.end_time\n                ) === ExamTimeStatus.Online\n                  ? \"text-green-600 font-bold bg-green-100\"\n                  : \"text-yellow-600 font-bold bg-yellow-100\"\n              } rounded-full px-3 py-1`}\n            >\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              )}\n            </span>\n          </div>\n\n          <div className=\"flex flex-row items-center justify-between py-3\">\n            <span className=\"text-gray-600\">Exam created at</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.createdAt)}\n            </span>\n          </div>\n        </div>\n        <div className=\"bg-white p-3 pt-0 rounded-b mt-5 absolute bottom-0 w-full\">\n          {\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 my-2\">\n              <div\n                onClick={() => {\n                  if (selected_course !== undefined) {\n                    props.setSelectedExamEdit(props.exam);\n                    props.setSelectedCourse(selected_course);\n                  }\n                }}\n                className=\"bg-blue-100 hover:bg-blue-600 hover:text-white rounded p-3 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-blue-800\"\n              >\n                <div>\n                  <MdEdit className=\"text-2xl\" />\n                </div>\n                <span className=\"text-base\">Edit</span>\n              </div>\n              <div></div>\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              ) === ExamTimeStatus.Waiting ? (\n                <div\n                  onClick={() => alert(\"Deleted\")}\n                  className=\"bg-red-50 hover:bg-red-600 hover:text-white rounded p-3 border border-red-50 group-hover:border-red-100 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-red-800\"\n                >\n                  <div>\n                    <GoTrashcan className=\"text-2xl\" />\n                  </div>\n                  <span className=\"text-base\">Remove</span>\n                </div>\n              ) : (\n                <div></div>\n              )}\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExamDetails;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n  setShowInstitutes,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport {\n  ExamItemResponse,\n  ExamItemResponseFull,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { Link } from \"react-router-dom\";\nimport ExamDetails from \"./ExamDetails\";\nimport { EditExam } from \"../EditExam/EditExam\";\nimport { validateExamDate } from \"../../../utils/question_bank\";\nimport searchData from \"../../../utils/search\";\nimport InitializeInstitution from \"../../../components/InitializeInstitution/InitializeInstitution\";\nimport { education_category } from \"../../../interfaces\";\n\ninterface ExamsListProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  schoolLevels: schoolLevelsStoreInterface;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedExam: (exam: ExamItemResponse) => void;\n  setShowInstitutes: (status: boolean) => void;\n  setSelectedEducationCategory: (data: education_category) => void;\n}\ninterface ExamsListState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  selectedExam: ExamItemResponse | null;\n  examToEdit: ExamItemResponse | null;\n  search: string;\n}\n\nclass _ExamsList extends Component<ExamsListProps, ExamsListState> {\n  constructor(props: ExamsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      duration: 1,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      selectedExam: null,\n      examToEdit: null,\n      search: \"\",\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  examsByPeriod = (Exam: ExamItemResponse[]): ExamItemResponseFull[] => {\n    let temp = Exam.filter(\n      (item) => item.period === this.props.periods.selected_period?._id\n    );\n    let newRes: ExamItemResponseFull[] = [];\n    for (let item of temp) {\n      newRes.push({\n        questions: item.questions,\n        exam_total_marks: item.exam_total_marks,\n        status: item.status,\n        period: item.period,\n        course: item.course,\n        course_id: item.course,\n        course_code:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_code,\n        course_name:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_name,\n        exam_status: item.exam_status,\n        termes: item.termes,\n        questions_per_page: item.questions_per_page,\n        exam_date: item.exam_date,\n        start_time: item.start_time,\n        end_time: item.end_time,\n        duration: item.duration,\n        number_format: item.number_format,\n        discription: item.discription,\n        createdAt: item.createdAt,\n        updatedAt: item.updatedAt,\n        id: item.id,\n        rules: item.rules,\n      });\n    }\n    return newRes;\n  };\n\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period._id, this.setLoading);\n  };\n\n  componentDidMount = () => {\n    if (this.props.schoolLevels.showInstitutes === true) {\n      this.props.setShowInstitutes(false);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    // if (this.props.course.selected_course === null) {\n    //   this.setState({ selectCourse: true });\n    // }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n    // if (this.props.prepareExam.examsList === null || this.props.prepareExam.examsList.length === 0) {\n    if (this.props.periods.selected_period !== null) {\n      this.props.loadExamsListByPeriod(\n        this.props.periods.selected_period._id,\n        this.setLoading\n      );\n    } else {\n      this.props.schoolLevels.selectedEducationCategory !== null &&\n        this.props.schoolLevels.selectedEducationCategory.session_plan !==\n          null &&\n        this.props.loadExamsListByPeriod(\n          this.props.schoolLevels.selectedEducationCategory.session_plan._id,\n          this.setLoading\n        );\n    }\n    // }\n  };\n  setSelectedExamItem = (exam: ExamItemResponse | null) => {\n    this.setState({ selectedExam: exam });\n  };\n  setSelectedExamEdit = (exam: ExamItemResponse | null) => {\n    this.setState({ examToEdit: exam });\n    if (exam === null) {\n      this.setState({ selectedExam: null });\n    }\n  };\n  setUploadingStatus = (status: boolean) => {\n    alert(\"Hello\");\n  };\n  render() {\n    return (\n      <Fragment>\n        {this.state.examToEdit === null ? (\n          <div>\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-row items-center\">\n                  {/* <RiFilePaperFill className=\"text-7xl text-blue-600\" /> */}\n                  <div className=\"flex flex-col px-2\">\n                    <span className=\"text-gray-600 text-2xl font-bold\">\n                      List of exams\n                    </span>\n                    <span className=\"text-blue-600 text-sm font-bold mt-1\">\n                      Period:{\" \"}\n                      {this.props.periods.selected_period === null ? (\n                        <span className=\"text-yellow-700 italic\">\n                          Not selected!\n                        </span>\n                      ) : (\n                        `${\n                          this.props.periods.selected_period.session_plan_name\n                        } - ${\n                          this.props.periods.selected_period.is_active === true\n                            ? \"Active\"\n                            : \"Not valid!\"\n                        }`\n                      )}\n                    </span>\n                    {/* <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span> */}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.setState({ selectPeriod: true })}\n                    className={`btn ${\n                      this.props.periods.selected_period === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 border border-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    {this.props.periods.selected_period === null\n                      ? \"Choose period\"\n                      : \"Change period\"}\n                  </div>\n                  <Link\n                    to=\"prepare-exam\"\n                    className={`btn bg-blue-600 text-white h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    Prepare exam\n                  </Link>\n                </div>\n              </div>\n            </div>\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Loading exams list, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                <div className=\"w-full overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-blue-50 font-bold text-gray-800\">\n                      <tr>\n                        <td className=\"py-2 pl-2 font-bold\">#</td>\n                        <td className=\"py-2\">Course</td>\n                        <td className=\"py-2\">Exam date</td>\n                        <td className=\"py-2\">Start time</td>\n                        <td className=\"py-2\">End time</td>\n                        <td className=\"py-2\">Exam duration</td>\n                        <td className=\"py-2\">Exam</td>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td colSpan={7}>\n                          <input\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => this.setState({ search: e.target.value })}\n                            type=\"text\"\n                            className=\"input-white border border-gray-500 my-2\"\n                            placeholder=\"Search\"\n                            value={this.state.search}\n                          />\n                        </td>\n                      </tr>\n                      {this.props.prepareExam.examsList === null ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).length === 0 ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <div className=\"rounded bg-gray-100 px-3 py-3 flex items-center justify-center\">\n                              No exams found!\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).map((item, i) => (\n                          <tr\n                            title=\"Click to view details\"\n                            onClick={() =>\n                              this.setState({ selectedExam: item })\n                            }\n                            key={i + 1}\n                            className={`border-b border-gray-300 text-sm hover:bg-blue-50 cursor-pointer hover:border-blue-300`}\n                          >\n                            <td className=\"pl-2 px-2 font-bold\">{i + 1}</td>\n                            <td className=\"py-2\">\n                              <span className=\"font-bold\">\n                                {item.course_code}\n                              </span>\n                              -{item.course_name}\n                            </td>\n                            <td className=\"py-2\">\n                              {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                            </td>\n                            <td className=\"py-2\">{item.start_time}</td>\n                            <td className=\"py-2\">{item.end_time}</td>\n                            <td className=\"py-2 font-bold text-blue-600\">\n                              {item.duration}mins\n                            </td>\n                            <td className=\"py-2\">\n                              {validateExamDate(\n                                item.exam_date,\n                                item.start_time,\n                                item.end_time\n                              )}\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                  {this.state.selectedExam !== null && (\n                    <ExamDetails\n                      course={this.props.course}\n                      periods={this.props.periods}\n                      exam={this.state.selectedExam}\n                      setSelectedExam={this.setSelectedExamItem}\n                      setSelectedExamEdit={this.setSelectedExamEdit}\n                      setSelectedCourse={this.props.setSelectedCourse}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          this.props.course.courses &&\n          this.props.course.courses.find(\n            (itm) =>\n              this.state.examToEdit &&\n              itm.course_id === this.state.examToEdit.course\n          ) !== undefined && (\n            <EditExam\n              selectedCourse={\n                this.props.course.courses.find(\n                  (itm) =>\n                    this.state.examToEdit &&\n                    itm.course_id === this.state.examToEdit.course\n                )!\n              }\n              selectedExam={this.state.examToEdit}\n              setSelectedExam={this.setSelectedExamEdit}\n              setUploadingStatus={this.setUploadingStatus}\n              loadExamsList={this.props.loadExamsList}\n              setLoadingProps={this.setLoading}\n            />\n          )\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-row items-center gap-3\">\n                {this.props.questionBank.questions !== null &&\n                  this.props.questionBank.questions.length > 0 && (\n                    <Link\n                      to={\"/upload-questions\"}\n                      className=\"btn bg-blue-100 hover:bg-blue-200 text-blue-700 cursor-pointer\"\n                    >\n                      Upload new\n                    </Link>\n                  )}\n                <span>Add Exam Questions</span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.loading === false &&\n          this.props.schoolLevels.selectedEducationCategory === null &&\n          this.props.schoolLevels.showInstitutes === false && (\n            <InitializeInstitution\n              schoolLevels={this.props.schoolLevels}\n              setSelectedEducationCategory={(data: education_category) => {\n                this.props.setSelectedEducationCategory(data);\n                if (data.session_plan !== null) {\n                  this.GetExamsByPeriod(data.session_plan);\n                } else {\n                  this.setState({ selectPeriod: true });\n                }\n                this.props.setShowInstitutes(false);\n              }}\n              onSelect={() => {\n                this.props.setShowInstitutes(false);\n              }}\n            />\n          )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const ExamsList = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n  setShowInstitutes,\n})(_ExamsList);\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addEditExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addEditExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting ||\n      this.props.selectedExam.questions.length === 0\n    ) {\n      this.props.addEditExamQuestion(question);\n    } else {\n      alert(\n        \"You can not add questions while its time has ended or being done!\"\n      );\n    }\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting ||\n      this.props.selectedExam.questions.length === 0\n    ) {\n      if (\n        window.confirm(\n          \"Are you sure do you want to remove question from the exam questions paper?\"\n        ) === true\n      ) {\n        this.props.addEditExamQuestion(question);\n      }\n    } else {\n      alert(\n        \"You can not remove questions while its time has ended or being done!\"\n      );\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.state.exam_date === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"exam_date\",\n            msg: \"Please choose exam date\",\n          },\n        });\n      }\n      if (this.state.start_time === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"start_time\",\n            msg: \"Please fill exam start time\",\n          },\n        });\n      }\n      if (this.state.end_time === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"end_time\",\n            msg: \"Please fill exam ending time\",\n          },\n        });\n      }\n      if (\n        validateTwoTime(this.state.start_time, this.state.end_time) === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"end_time\",\n            msg: \"Please end time should be greater than start time\",\n          },\n        });\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"duration_hours\",\n            msg: \"Please fill exam duration\",\n          },\n        });\n      }\n      if (this.state.questions_per_page < 1) {\n        return this.setState({\n          formErr: {\n            element: \"questions_per_page\",\n            msg: \"Please fill number of questions per page\",\n          },\n        });\n      }\n      if (this.state.number_format === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"number_format\",\n            msg: \"Please fill questions numbering format\",\n          },\n        });\n      }\n      if (this.state.discription === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"discription\",\n            msg: \"Please fill exam description\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = true;\n    // if (\n    //   this.props.prepareExam.selectedExam === null ||\n    //   this.props.prepareExam.selectedExam.questions.length !== 0\n    // ) {\n    //   conf = window.confirm(\n    //     \"Are you sure do you want to change course? You will loose your selected questions\"\n    //   );\n    // }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0 ||\n      this.props.course.selected_course === null\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period._id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period._id,\n          this.props.setLoadingProps\n        );\n      } else {\n        this.props.schoolLevels.selectedEducationCategory !== null &&\n          this.props.schoolLevels.selectedEducationCategory.session_plan !==\n            null &&\n          this.props.loadExamsListByPeriod(\n            this.props.schoolLevels.selectedEducationCategory.session_plan._id,\n            this.props.setLoadingProps\n          );\n      }\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (\n      this.props.course.courses !== null &&\n      this.props.course.selected_course === null\n    ) {\n      let myCourse = this.props.course.courses.find(\n        (itm) => itm.course_id === this.props.selectedExam.course\n      );\n      if (myCourse !== undefined) {\n        this.props.setSelectedCourse(myCourse);\n        this.chooseCourse(myCourse);\n      }\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period._id, this.setLoading);\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course.selected_course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-black text-2xl\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        {(validateExamDate(\n                          this.props.selectedExam.exam_date,\n                          this.props.selectedExam.start_time,\n                          this.props.selectedExam.end_time\n                        ) === ExamTimeStatus.Waiting ||\n                          this.props.selectedExam.questions.length === 0) && (\n                          <div\n                            onClick={() =>\n                              this.props.selectedCourse === null\n                                ? this.setState({ selectCourse: true })\n                                : this.setState({ addQuestionModal: true })\n                            }\n                            className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                          >\n                            <MdAdd className=\"text-2xl\" /> Add question\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to details\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-row items-center gap-3\">\n                {this.props.questionBank.questions !== null &&\n                  this.props.questionBank.questions.length > 0 && (\n                    <Link\n                      to={\"/upload-questions\"}\n                      className=\"btn bg-blue-100 hover:bg-blue-200 text-blue-700 cursor-pointer\"\n                    >\n                      Upload new\n                    </Link>\n                  )}\n                <span>Add Exam Questions</span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={\n                  this.props.prepareExam.questions.length === 0 &&\n                  this.props.prepareExam.selectedExam &&\n                  this.props.prepareExam.selectedExam.questions.length > 0\n                    ? this.props.prepareExam.selectedExam.questions\n                    : this.props.prepareExam.questions\n                }\n              />\n            )}\n            {this.props.prepareExam.questions.length}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Editing Exam\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                {/* {this.props.prepareExam.selectedExam &&\n                (validateExamDate(\n                  this.props.prepareExam.selectedExam!.exam_date,\n                  this.props.prepareExam.selectedExam!.start_time,\n                  this.props.prepareExam.selectedExam!.end_time\n                ) === ExamTimeStatus.Waiting ||\n                  this.props.selectedExam.questions.length === 0) ? ( */}\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Confirm edit exam\n                </div>\n                {/* ) : (\n                  <div>Can not edit</div>\n                )} */}\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addEditExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n})(_EditExam);\n"],"sourceRoot":""}