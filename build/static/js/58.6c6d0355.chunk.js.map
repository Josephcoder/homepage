{"version":3,"sources":["utils/question_bank.ts","containers/CandidateExams/CandidateExams.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","console","log","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","_CandidateExams","props","setLoading","setState","loading","loadCandidateExams","user","period","a","setAxiosToken","axios","get","API","QBank","candidateExams","data","alert","errorToText","loadUserProfileDetails","FC_GetProfileDetails","auth","InitializationFn","application","application_period","position","exams","application_session","loadUserApplications","APPLICATION","candidateApplications","candidate_applications","AddUserApplication","componentDidMount","loadApplicationPeriods","sex","removeDuplicatesExams","temp","item","_id","removeDuplicatesNotPreparedExams","setTimeOut","exam_id","temps","state","activeExams","selectApplication","applications","FC_Access","this","UserAccessList","MY_APPLICATION","view","selected_exam_id","to","className","title","preparedExam","map","course_name","DATE","user_status","UserExamStatus","Editing","Paused","application_status","ApplicationStates","Shortlisted","onClick","setSelectedPosition","setSelectedCourse","setSelectedCandidateExam","Done","Removed","Math","round","user_marks","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","Component","CandidateExams","connect","LoadCandidateApplications"],"mappings":"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","file":"static/js/58.6c6d0355.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport {\n  questionType,\n  questionTypeElements,\n  questionTypeElementsType,\n} from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  console.log(\n    \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  );\n  console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI } from \"../../interfaces\";\nimport {\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (exam_id: string) => void;\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  InitializationFn = (application: GetApplicationsAPI) => {\n    this.props.loadExamsDone(\n      application.application_period,\n      this.props.auth.user.user_id,\n      this.setLoading\n    );\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          this.props.InitializeExamDetails(\n            application.application_session.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            application.position.position_id,\n            this.setLoading\n          );\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.setLoading(true);\n    try {\n      const res = await axios.get<GetApplicationsAPI[]>(\n        `${API.APPLICATION}/application/${this.props.auth.user.user_id}`\n      );\n      if (res.status === 200) {\n        this.setState({ candidateApplications: res.data });\n        for (let application of res.data) {\n          this.InitializationFn(application);\n        }\n        if (\n          this.props.candidateApplications.candidate_applications === null ||\n          this.props.candidateApplications.candidate_applications.length === 0\n        ) {\n          for (let application of res.data) {\n            this.props.AddUserApplication(application);\n          }\n        }\n      }\n    } catch (error: any) {\n      console.log(\"Appl ex Err: \", { ...error });\n    }\n    this.setLoading(false);\n  };\n  componentDidMount = () => {\n    this.props.loadApplicationPeriods(this.setLoading);\n\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    this.loadUserApplications();\n    if (this.props.auth.application_session !== null) {\n      this.loadCandidateExams(\n        this.props.auth.user.user_id,\n        this.props.auth.application_session.session_plan_id\n      );\n    }\n    if (this.props.auth.application_session !== null) {\n      this.props.loadExamsDone(\n        this.props.auth.application_session.session_plan_id,\n        this.props.auth.user.user_id,\n        this.setLoading\n      );\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    for (let item of exams) {\n      if (temp.find((itm) => itm._id === item._id) === undefined) {\n        temp = [...temp, item];\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    for (let item of exams) {\n      if (temp.find((itm) => itm.course === item.course) === undefined) {\n        temp = [...temp, item];\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string\n  ): GetApplicationsAPI | null => {\n    if (applications !== null) {\n      let temp = applications.find(\n        (item) => item.position.position_id === position_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (this.props.candidateExam.selected_exam_id !== null) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <div className=\"mt-2\">\n        <div className=\"rounded mt-2\">\n          <div className=\"flex flex-row items-center gap-3\">\n            <Link\n              to=\"/apps-page\"\n              title=\"Back to menus\"\n              className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n            >\n              <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n            </Link>\n            <div className=\"flex flex-col\">\n              <span className=\"font-extrabold text-3xl\">My exams</span>\n              <span className=\"text-gray-600 text-sm\">\n                List of exams that are assigned to me\n              </span>\n            </div>\n          </div>\n        </div>\n        {this.state.loading === true ||\n        this.state.candidateExams === null ||\n        this.state.candidateApplications == null ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : this.removeDuplicatesExams(this.state.candidateExams.preparedExam)\n            .length === 0 ? (\n          <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n            No exams found\n          </div>\n        ) : (\n          this.removeDuplicatesExams(\n            this.state.candidateExams.preparedExam\n          ).map((item, i) => (\n            <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n              <div className=\"flex flex-row items-center justify-between\">\n                <div className=\"flex flex-row items-center gap-2 w-full\">\n                  <div>\n                    <BsFillFileEarmarkTextFill className=\"text-4xl text-gray-600 group-hover:text-blue-600\" />\n                  </div>\n                  <div className=\"flex flex-col w-full\">\n                    <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                      {item.course_name}\n                    </span>\n                    <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                      <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                        Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                      </div>\n                      <div className=\"text-sm bg-gray-100 underline text-gray-500 group-hover:text-blue-600 font-bold rounded-full px-2\">\n                        Start time: {item.start_time}\n                      </div>\n                      <div className=\"text-sm bg-blue-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2\">\n                        Status: {item.user_status}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"w-full flex flex-row items-center justify-end\">\n                  {this.state.activeExams.find((itm) => itm === item._id) !==\n                    undefined ||\n                  item.user_status === UserExamStatus.Editing ||\n                  item.user_status === UserExamStatus.Paused ? (\n                    validateExamDate(\n                      item.exam_date,\n                      item.start_time,\n                      item.end_time\n                    ) !== ExamTimeStatus.Expired ? (\n                      this.selectApplication(\n                        this.state.candidateApplications,\n                        item.position,\n                        item.course\n                      )?.application_status !==\n                      ApplicationStates.Shortlisted ? (\n                        <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                          Not shortlisted\n                        </div>\n                      ) : (\n                        <div\n                          onClick={() => {\n                            let application = this.selectApplication(\n                              this.state.candidateApplications,\n                              item.position,\n                              item.course\n                            );\n                            if (application !== null) {\n                              if (\n                                application.application_status ===\n                                ApplicationStates.Shortlisted\n                              ) {\n                                // Select exam\n                                this.props.setSelectedPosition(\n                                  application.position\n                                );\n                                this.props.setSelectedCourse(\n                                  application.position.courses.find(\n                                    (itm) => itm.course_id === item.course\n                                  )!\n                                );\n                                this.props.setSelectedCandidateExam(item._id);\n                              } else {\n                                alert(\n                                  \"Corresponding application is not shortlisted!\"\n                                );\n                              }\n                            } else {\n                              alert(\"Invalid exam!\");\n                            }\n                          }}\n                          className={`${\n                            item.user_status === UserExamStatus.Editing ||\n                            item.user_status === UserExamStatus.Paused\n                              ? \"bg-green-600 group-hover:bg-green-800\"\n                              : \"bg-blue-600 group-hover:bg-blue-800\"\n                          } btn  text-white cursor-pointer w-max`}\n                        >\n                          {item.user_status === UserExamStatus.Editing\n                            ? \"Back to Exam\"\n                            : item.user_status === UserExamStatus.Paused\n                            ? \"Paused, back to exam\"\n                            : \"Start Exam\"}\n                        </div>\n                      )\n                    ) : item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Done ||\n                      item.user_status === UserExamStatus.Paused ||\n                      item.user_status === UserExamStatus.Removed ? (\n                      <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                        <span>Marks</span>\n                        <span className=\"text-2xl font-extrabold -mt-2\">\n                          {Math.round(item.user_marks)}%\n                        </span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                        Expired\n                      </div>\n                    )\n                  ) : item.found === false ? (\n                    <div\n                      title=\"Please wait for the exam time\"\n                      className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                    >\n                      <CountDown\n                        start_time={new Date(today.toString()).toString()}\n                        duration_min={getMinutesFromTwoDates(\n                          new Date(today.toString()),\n                          new Date(\n                            DATE(item.exam_date, \"MM/DD/YYYY\") +\n                              \" \" +\n                              item.start_time\n                          )\n                        )}\n                        timeout={() => this.setTimeOut(item._id)}\n                        returnString={true}\n                        labels={true}\n                        days\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                      <span>Marks</span>\n                      <span className=\"text-2xl font-extrabold -mt-2\">\n                        {Math.round(item.user_marks)}%\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n        {/* Not prepared exams */}\n        {this.state.candidateExams !== null &&\n          this.removeDuplicatesNotPreparedExams(\n            this.state.candidateExams.notPreparedExam\n          ).length > 0 &&\n          this.removeDuplicatesNotPreparedExams(\n            this.state.candidateExams.notPreparedExam\n          ).map((item, i) => (\n            <div key={i + 1} className=\"my-2 rounded bg-white p-2 py-3 group\">\n              <div className=\"flex flex-row items-center justify-between\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div>\n                    <BsFillFileEarmarkTextFill className=\"text-4xl text-gray-300 group-hover:text-blue-600\" />\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-base text-gray-500 font-bold group-hover:text-blue-600\">\n                      {item.course_name}\n                    </span>\n                    <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                      <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                        Not prepared\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                  Not prepared\n                </div>\n              </div>\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n"],"sourceRoot":""}