{"version":3,"sources":["components/Buttons/ButtonTypes.ts","components/Buttons/Button.tsx","containers/CreateCenterRoom/CreateRoomHeader.tsx","components/Inputs/InputTypes.ts","components/Inputs/TextInput.tsx","containers/CreateCenterRoom/AddUsersToTheList.tsx","containers/CreateCenterRoom/CreateCenterRoom.tsx"],"names":["ButtonSize","key","ColorsForButtons","Func","Button","onClick","children","theme","type","full","disabled","className","size","loading","CreateRoomHeader","selectedExam","cleanExam","createAttendance","loading_create_room","room_is_ready","course_name","exam_date","start_time","end_time","InputSize","TextInput","onChange","value","error","label","placeholder","name","Input_className","Label_className","InputContainer_className","MainContainer_className","max","useState","showPass","setShowPass","htmlFor","maxLength","bind","AddUsersToTheList","addNewCandidate","candidates","removeCandidate","course_id","exam_is_ready","openModal","setOpenModal","search","setSearch","loading_search","setLoading","results","setResults","setError","Modal","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","large","displayClose","title","padding","body","footer","e","target","length","undefined","find","cand","n_id","FC_SearchCandidate","status","data","Alert","AlertInterface","danger","user_info","fname","lname","email","phone_number","colSpan","map","el","i","_id","defaultError","msg","_CreateCenterRoom","props","loadData","setState","FC_GetAvailableExams","exams","selected_exam","clearError","selectExam","exam","state","this","setTimeout","FC_CreateRoom","application_session_id","district","exam_id","group_id","isExpired","room_id","description","createRoom","candidate","id","window","confirm","filter","completeExam","user_id","reason","stopCandidate","Spinner","course_code","React","Component","CreateCenterRoom","connect","auth"],"mappings":"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","file":"static/js/58.e5571c76.chunk.js","sourcesContent":["export type ColorsList =\n  | \"danger\"\n  | \"success\"\n  | \"primary\"\n  | \"accent\"\n  | \"default\"\n  | \"success-light\"\n  | \"accent-light\"\n  | \"danger-light\"\n  | \"primary-light\";\n\nexport type ButtonSizeType = \"lg\" | \"sm\" | \"md\";\n\nexport const ButtonSize = (key: ButtonSizeType): string => {\n  switch (key) {\n    case \"sm\":\n      return \"py-1 px-2 text-sm\";\n    case \"md\":\n      return \"py-2 px-4 text-md\";\n    case \"lg\":\n      return \"py-3 px-5 text-lg\";\n    default:\n      return \"\";\n  }\n};\n\nexport const ColorsForButtons = (key: ColorsList): string => {\n  switch (key) {\n    case \"accent\":\n      return \"bg-accent-800 text-black hover:bg-opacity-90\";\n    case \"accent-light\":\n      return \"bg-yellow-100 border border-yellow-300 text-yellow-900 hover:bg-accent-800 hover:text-black\";\n    case \"danger\":\n      return \"bg-red-500 hover:bg-red-600  text-white\";\n    case \"danger-light\":\n      return \"bg-red-100 hover:bg-red-600 text-red-800 hover:text-white\";\n    case \"primary\":\n      return \"bg-blue-600 hover:bg-opacity-90  text-white\";\n    case \"primary-light\":\n      return \"bg-blue-100 text-blue-800 hover:bg-blue-800  hover:text-white\";\n    case \"success\":\n      return \"bg-green-500 hover:bg-green-600  text-white\";\n    case \"success-light\":\n      return \"bg-green-100 text-green-800 hover:text-white hover:bg-green-600  text-white\";\n    case \"default\":\n      return \"bg-gray-100 hover:bg-gray-200  text-black\";\n    default:\n      return \"\";\n  }\n};\n","import React, { FC, ReactElement } from \"react\";\nimport {\n  ButtonSize,\n  ButtonSizeType,\n  ColorsForButtons,\n  ColorsList,\n} from \"./ButtonTypes\";\nimport { AiOutlineLoading3Quarters } from \"react-icons/ai\";\n\ntype ButtonProps = {\n  onClick?: (event: any) => void;\n  children: React.ReactNode;\n  type?: \"submit\" | \"button\";\n  full?: boolean;\n  disabled?: boolean;\n  theme?: ColorsList;\n  className?: string;\n  size?: ButtonSizeType;\n  loading?: boolean;\n};\nconst Func = () => {};\n\nconst Button: FC<ButtonProps> = ({\n  onClick = Func,\n  children,\n  theme = \"primary\",\n  type = \"submit\",\n  full = false,\n  disabled = false,\n  className = \"\",\n  size = \"md\",\n  loading = false,\n}): ReactElement => {\n  return (\n    <button\n      className={`\n      ${ButtonSize(size)} \n      ${full ? \"w-full\" : \"\"} \n      font-bold rounded \n      ${ColorsForButtons(theme)} \n      ${className}`}\n      disabled={disabled || loading}\n      type={type}\n      onClick={onClick}\n    >\n      {loading ? (\n        <>\n          <section className=\"block h-0 opacity-0\">{children}</section>\n          <AiOutlineLoading3Quarters className=\"loading-animate text-2xl inline\" />\n        </>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\nexport default Button;\n","import { FC, ReactElement } from \"react\";\nimport { AvailableExams } from \"../../actions\";\nimport Button from \"../../components/Buttons/Button\";\n\ntype CreateRoomHeaderProps = {\n  selectedExam: AvailableExams | null;\n  cleanExam: () => void;\n  createAttendance?: () => void;\n  loading_create_room: boolean;\n  room_is_ready: boolean;\n};\n\nconst CreateRoomHeader: FC<CreateRoomHeaderProps> = ({\n  selectedExam,\n  cleanExam,\n  createAttendance,\n  loading_create_room,\n  room_is_ready,\n}): ReactElement => {\n  return (\n    <div className=\"container mx-auto p-3 rounded mb-2 bg-white mt-4\">\n      <div className=\"flex items-center\">\n        {!room_is_ready && (\n          <section className=\"pr-3\">\n            <Button theme=\"default\" onClick={cleanExam}>\n              Back\n            </Button>\n          </section>\n        )}\n        <section className=\"flex-1\">\n          <h1 className=\"text-2xl font-bold\">\n            {room_is_ready ? \"Attendance\" : \"Create Attendance\"}\n          </h1>\n          {selectedExam !== null && (\n            <div className=\"p-1\">\n              <p className=\"text-gray-600\">\n                Exam: <b className=\"font-bold\">{selectedExam.course_name}</b>\n              </p>\n\n              {room_is_ready && (\n                <>\n                  <p className=\"text-gray-600\">\n                    Exam date:{\" \"}\n                    <b className=\"font-bold\">{selectedExam.exam_date}</b>\n                  </p>\n                  <p className=\"text-gray-600\">\n                    Start time:{\" \"}\n                    <b className=\"font-bold\">{selectedExam.start_time}</b>\n                  </p>\n                  <p className=\"text-gray-600\">\n                    End time:{\" \"}\n                    <b className=\"font-bold\">{selectedExam.end_time}</b>\n                  </p>\n                </>\n              )}\n            </div>\n          )}\n        </section>\n\n        <section>\n          {createAttendance && (\n            <Button\n              onClick={createAttendance}\n              size={\"lg\"}\n              theme=\"success\"\n              loading={loading_create_room}\n            >\n              Create room\n            </Button>\n          )}\n        </section>\n      </div>\n    </div>\n  );\n};\nexport default CreateRoomHeader;\n","export type InputSizeType = \"lg\" | \"sm\" | \"md\" | \"xs\";\n\nexport const InputSize = (key: InputSizeType): string => {\n  switch (key) {\n    case \"sm\":\n      return \"p-1 text-sm\";\n    case \"md\":\n      return \"p-2 px-4 text-md\";\n    case \"lg\":\n      return \"p-3 px-5 text-lg\";\n    case \"xs\":\n      return \"p-0.5 text-xs\";\n    default:\n      return \"\";\n  }\n};\n","import React, { ChangeEvent, useState, FC, ReactElement } from \"react\";\nimport { IoMdEye, IoMdEyeOff } from \"react-icons/io\";\nimport { InputSize, InputSizeType } from \"./InputTypes\";\n\ntype TextInputProps = {\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value: string | number;\n  error: string;\n  label: string;\n  placeholder: string;\n  type?: \"email\" | \"password\" | \"date\" | \"text\" | \"number\" | \"search\";\n  disabled?: boolean;\n  name: string;\n  className?: string;\n  size?: InputSizeType;\n  Input_className?: string;\n  Label_className?: string;\n  InputContainer_className?: string;\n  MainContainer_className?: string;\n  max?: number;\n};\n\nconst TextInput: FC<TextInputProps> = ({\n  onChange,\n  value,\n  error,\n  label,\n  placeholder,\n  type = \"text\",\n  disabled = false,\n  name,\n  Input_className = \"\",\n  Label_className = \"\",\n  InputContainer_className = \"\",\n  MainContainer_className = \"\",\n  size = \"md\",\n  max,\n}): ReactElement => {\n  const [showPass, setShowPass] = useState(false);\n\n  /* function body */\n  return (\n    <>\n      <div className={`w-full my-2 ${MainContainer_className}`}>\n        {label !== \"\" && (\n          <label\n            htmlFor=\"login-form-email\"\n            className={`text-primary-900 dark:text-primary-100 ${Label_className}`}\n          >\n            {label}\n          </label>\n        )}\n        <div className={`rounded relative ${InputContainer_className}`}>\n          <input\n            type={showPass ? \"text\" : type}\n            name={name}\n            placeholder={placeholder}\n            onChange={onChange}\n            className={`\n                w-full text-lg rounded border-2 \n                ${InputSize(size)}\n                ${\n                  error !== \"\"\n                    ? \"border-red-500 dark:text-white bg-red-100 dark:bg-red-900 dark:bg-opacity-30\"\n                    : \"border-primary-800 dark:text-white bg-white dark:bg-primary-900 \"\n                }\n                px-3 ${Input_className}`}\n            value={value}\n            disabled={disabled}\n            maxLength={max}\n          />\n\n          {type === \"password\" && (\n            <button\n              className=\"absolute -ml-11 p-1 mt-0.5 text-accent-800\"\n              type=\"button\"\n              onClick={setShowPass.bind(this, !showPass)}\n            >\n              {showPass ? (\n                <IoMdEye className=\"text-4xl\" />\n              ) : (\n                <IoMdEyeOff className=\"text-4xl\" />\n              )}\n            </button>\n          )}\n\n          {error !== \"\" && (\n            <p className=\"text-sm text-red-600 dark:text-red-500\">{error}</p>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\nexport default TextInput;\n","import React, { FC, ReactElement, useState } from \"react\";\nimport { MdAccountCircle } from \"react-icons/md\";\nimport {\n  FC_SearchCandidate,\n  ProctoringAttendanceCandidates,\n} from \"../../actions\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport Button from \"../../components/Buttons/Button\";\nimport TextInput from \"../../components/Inputs/TextInput\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\n\ntype AddUsersToTheListProps = {\n  addNewCandidate: (data: ProctoringAttendanceCandidates) => void;\n  candidates: ProctoringAttendanceCandidates[];\n  removeCandidate: (id: string) => void;\n  course_id: string;\n  exam_is_ready: boolean;\n  completeExam: (user_id: string, reason: string) => void;\n  stopCandidate: (user_id: string, reason: string) => void;\n};\n\nconst AddUsersToTheList: FC<AddUsersToTheListProps> = ({\n  addNewCandidate,\n  candidates,\n  removeCandidate,\n  course_id,\n  exam_is_ready,\n}): ReactElement => {\n  const [openModal, setOpenModal] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [loading_search, setLoading] = useState(false);\n  const [results, setResults] = useState<null | ProctoringAttendanceCandidates>(\n    null\n  );\n  const [error, setError] = useState(\"\");\n\n  const searchCandidateById = () => {\n    if (search.length !== 16) {\n      return setError(\"Please use a valid NID\");\n    }\n\n    if (candidates.find((cand) => cand.n_id === search) !== undefined) {\n      return setError(\"NID already exist on the list\");\n    }\n\n    setResults(null);\n    setLoading(true);\n    FC_SearchCandidate(search, course_id, (status, data, error) => {\n      if (status === true && data !== null) setResults(data);\n      if (status === false) setError(error);\n      setLoading(false);\n    });\n  };\n  /* function body */\n\n  return (\n    <>\n      {openModal === true && (\n        <Modal\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setOpenModal(false)}\n          backDropClose={false}\n          widthSizeClass={ModalSize.large}\n          displayClose={true}\n          title=\"Search candidate\"\n          padding={{\n            title: true,\n            body: false,\n            footer: false,\n          }}\n        >\n          <div className=\"border-t p-2 \">\n            <div className=\"flex items-center\">\n              <TextInput\n                onChange={(e) => {\n                  setSearch(e.target.value);\n                  setError(\"\");\n                }}\n                value={search}\n                error={\"\"}\n                label={\"\"}\n                placeholder={\"NID Number\"}\n                name={\"\"}\n                disabled={loading_search}\n                type=\"number\"\n              />\n              <div className=\"py-0\">\n                <Button\n                  theme=\"primary\"\n                  size=\"lg\"\n                  className=\"px-4\"\n                  loading={loading_search}\n                  onClick={searchCandidateById}\n                >\n                  Search\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"pt-4\">\n              {error !== \"\" && (\n                <Alert title={error} theme={AlertInterface.danger} />\n              )}\n\n              {results !== null && (\n                <div className=\"p-2 items-center bg-gray-100 rounded border flex\">\n                  <div className=\"p-2 text-7xl text-gray-600\">\n                    <MdAccountCircle />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-gray-500 pb-0.5\">\n                      Names:{\" \"}\n                      <b className=\"text-black font-bold\">\n                        {results.user_info?.fname} {results.user_info?.lname}\n                      </b>\n                    </p>\n                    <p className=\"text-gray-500 pb-0.5\">\n                      Email:{\" \"}\n                      <b className=\"text-black font-bold\">{results.email}</b>\n                    </p>\n                    <p className=\"text-gray-500 pb-0.5\">\n                      Phone:{\" \"}\n                      <b className=\"text-black font-bold\">\n                        {results.phone_number}\n                      </b>\n                    </p>\n                    <p className=\"text-gray-500 pb-0.5\">\n                      NID:{\" \"}\n                      <b className=\"text-black font-bold\">{results.n_id}</b>\n                    </p>\n                  </div>\n                  <div className=\"w-32\">\n                    {exam_is_ready === true ? (\n                      <></>\n                    ) : (\n                      <Button\n                        theme=\"success\"\n                        onClick={() => {\n                          addNewCandidate(results);\n                          setResults(null);\n                          setSearch(\"\");\n                        }}\n                      >\n                        Add to the room\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </Modal>\n      )}\n\n      <div className=\"container mx-auto mt-2 bg-white rounded animate__animated animate__zoomIn animate__faster\">\n        <div className=\"p-1 px-2 pt-2 flex pb-3 border-b items-center\">\n          <h2 className=\"text-2xl flex-1\">Candidates on the list</h2>\n          <div className=\"w-64 text-right\">\n            {/* {!exam_is_ready && ( */}\n            <Button onClick={() => setOpenModal(true)}>Add candidate</Button>\n            {/* )} */}\n          </div>\n        </div>\n        <div className=\"flex p-2\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"text-left\">\n                <th className=\"border p-2\">#</th>\n                <th className=\"border p-2\">NID</th>\n                <th className=\"border p-2\">Names</th>\n                <th className=\"border p-2\">Email</th>\n                <th className=\"border p-2\">Phone</th>\n                <th className=\"border p-2\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {candidates.length <= 0 ? (\n                <tr>\n                  {\" \"}\n                  <td\n                    colSpan={9}\n                    className=\"p-4 text-2xl text-gray-500 text-center\"\n                  >\n                    No Candidate on the list\n                  </td>{\" \"}\n                </tr>\n              ) : (\n                candidates.map((el, i) => (\n                  <tr key={i} className=\"hover:bg-blue-100\">\n                    <td className=\"border p-2\">{i + 1}</td>\n                    <td className=\"border p-2\">{el.n_id}</td>\n                    <td className=\"border p-2\">\n                      {el.user_info?.fname} {el.user_info?.lname}\n                    </td>\n                    <td className=\"border p-2\">{el.email}</td>\n                    <td className=\"border p-2\">{el.phone_number}</td>\n                    <td className=\"border p-2\">\n                      {exam_is_ready === true ? (\n                        <>\n                          <Button\n                            theme=\"success-light\"\n                            size=\"sm\"\n                            onClick={removeCandidate.bind(this, el._id)}\n                          >\n                            Completed\n                          </Button>{\" \"}\n                          <Button theme=\"danger\" size=\"sm\" onClick={() => {}}>\n                            Add minutes\n                          </Button>\n                        </>\n                      ) : (\n                        <Button\n                          theme=\"danger-light\"\n                          onClick={removeCandidate.bind(this, el._id)}\n                        >\n                          Remove on list\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default AddUsersToTheList;\n","import React from \"react\";\nimport { MdRefresh } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  AvailableExams,\n  FC_CreateRoom,\n  FC_GetAvailableExams,\n  ProctoringAttendanceCandidates,\n} from \"../../actions\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport { StoreState } from \"../../reducers\";\nimport CreateRoomHeader from \"./CreateRoomHeader\";\nimport AddUsersToTheList from \"./AddUsersToTheList\";\nimport Spinner from \"../../components/Loading/Spinner\";\n// props for the component\ninterface AppProps {\n  auth: Auth;\n}\n\ninterface AppState {\n  loading: boolean;\n  error: {\n    target: \"main-success\" | \"main-error\" | \"locations-error\" | null;\n    msg: string;\n  };\n  exams: AvailableExams[];\n  selected_exam: AvailableExams | null;\n  candidates: ProctoringAttendanceCandidates[];\n  room_is_ready: boolean;\n  loading_create_room: boolean;\n}\n\nconst defaultError = {\n  target: null,\n  msg: \"\",\n};\nclass _CreateCenterRoom extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selected_exam: null,\n      error: defaultError,\n      exams: [],\n      candidates: [],\n      room_is_ready: false,\n      loading_create_room: false,\n    };\n  }\n\n  componentDidMount(): void {\n    this.loadData();\n  }\n\n  clearError() {\n    setTimeout(() => {\n      this.setState({\n        error: defaultError,\n      });\n    }, 3000);\n  }\n\n  loadData = () => {\n    this.setState({\n      loading: true,\n      error: defaultError,\n    });\n\n    FC_GetAvailableExams((status, data, error) => {\n      this.setState({\n        loading: false,\n        exams: data,\n        selected_exam: null,\n        error: status\n          ? defaultError\n          : {\n              target: \"main-error\",\n              msg: error,\n            },\n      });\n      this.clearError();\n    });\n  };\n\n  selectExam = (exam: AvailableExams | null) => {\n    this.setState({\n      selected_exam: exam,\n    });\n  };\n\n  createRoom() {\n    // this.setState({\n    //   room_is_ready: true,\n    // });\n\n    if (this.state.selected_exam === null)\n      return this.setState({\n        error: {\n          target: \"main-error\",\n          msg: \"Select an exam\",\n        },\n      });\n    FC_CreateRoom(\n      {\n        application_session_id: \"3245345\",\n        candidates: this.state.candidates,\n        course_id: this.state.selected_exam?.course_id,\n        district: null,\n        exam: this.state.selected_exam,\n        exam_id: this.state.selected_exam?._id,\n        group_id: \"A\",\n        isExpired: false,\n        room_id: \"324652345325\",\n      },\n      (status, error) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n            room_is_ready: true,\n          });\n        } else {\n          this.setState({\n            loading: false,\n            error: {\n              target: \"main-success\",\n              msg: `Failed to create room: ${error}`,\n            },\n          });\n        }\n      }\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container mx-auto\">\n          {this.state.error.target === \"main-error\" && (\n            <Alert\n              theme={AlertInterface.danger}\n              title={\"this.state.error.msg\"}\n              description={this.state.error.msg}\n            />\n          )}\n\n          {this.state.error.target === \"main-success\" && (\n            <Alert\n              theme={AlertInterface.danger}\n              title={this.state.error.msg}\n              description={this.state.error.msg}\n            />\n          )}\n        </div>\n\n        <CreateRoomHeader\n          cleanExam={this.selectExam.bind(this, null)}\n          selectedExam={this.state.selected_exam}\n          loading_create_room={this.state.loading_create_room}\n          createAttendance={\n            this.state.room_is_ready\n              ? undefined\n              : this.state.candidates.length > 0\n              ? () => this.createRoom()\n              : undefined\n          }\n          room_is_ready={this.state.room_is_ready}\n        />\n\n        {this.state.selected_exam !== null && (\n          <AddUsersToTheList\n            addNewCandidate={(candidate) =>\n              this.setState({\n                candidates: [...this.state.candidates, candidate],\n              })\n            }\n            exam_is_ready={this.state.room_is_ready}\n            candidates={this.state.candidates}\n            course_id={this.state.selected_exam.course_id}\n            removeCandidate={(id: string) => {\n              if (\n                window.confirm(\n                  \"Are you sure you want to remove the candidate??\"\n                )\n              ) {\n                this.setState({\n                  candidates: this.state.candidates.filter(\n                    (el) => el._id !== id\n                  ),\n                });\n              }\n            }}\n            completeExam={function (user_id: string, reason: string): void {}}\n            stopCandidate={function (user_id: string, reason: string): void {}}\n          />\n        )}\n\n        {this.state.selected_exam === null && (\n          <>\n            <div className=\"container mx-auto p-2\">\n              <div className=\"border-b p-2 flex\">\n                <h2 className=\"text-3xl flex-1 font-bold\">Ready exams</h2>\n                <button\n                  className=\"text-2xl p-2 rounded flex button-blue\"\n                  onClick={this.loadData}\n                >\n                  <MdRefresh className=\"\" />{\" \"}\n                  <span className=\"text-base inline-block pl-1\">Reload</span>\n                </button>\n              </div>\n\n              {this.state.loading === true ? (\n                <div className=\"\">\n                  <Spinner />\n                  <div className=\"text-center\">Loading...</div>\n                </div>\n              ) : (\n                <>\n                  {this.state.exams.length === 0 ? (\n                    <p className=\"py-5 text-center text-lg text-gray-600\">\n                      No data found!\n                    </p>\n                  ) : (\n                    <table className=\" w-full bg-white\">\n                      <thead>\n                        <tr className=\"text-left\">\n                          <th className=\"p-2 w-9 border border-gray-300\">#</th>\n                          <th className=\"p-2 border border-gray-300\">Title</th>\n                          <th className=\"p-2 border border-gray-300\">\n                            Position name\n                          </th>\n                          <th className=\"p-2 border border-gray-300\"></th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.state.exams.map((el, i) => (\n                          <tr key={i} className=\"hover:bg-blue-100\">\n                            <td className=\"p-2 border border-gray-300\">\n                              {i + 1}\n                            </td>\n                            <td className=\"p-2 border border-gray-300 font-bold\">\n                              {el.course_name}\n                            </td>\n                            <td className=\"p-2 border border-gray-300\">\n                              {el.course_code}\n                            </td>\n                            <td className=\"p-2 border border-gray-300 w-40\">\n                              <button\n                                className=\"button-blue px-2 py-1 w-full rounded\"\n                                onClick={this.selectExam.bind(this, el)}\n                              >\n                                Select exam\n                              </button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  )}\n                </>\n              )}\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: StoreState): { auth: Auth } => {\n  return { auth: auth };\n};\n\nexport const CreateCenterRoom = connect(mapStateToProps, {})(_CreateCenterRoom);\n"],"sourceRoot":""}