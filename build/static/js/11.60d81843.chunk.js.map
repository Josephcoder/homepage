{"version":3,"sources":["components/AnswersDetails/AnswersDetails.tsx","containers/DoExam/DoExamTitle/FindAnswer.tsx","containers/DoExam/DoExamTitle/FindAnswerHybrid.tsx"],"names":["_AnswersDetails","props","setLoading","status","setState","loading","setLoadingStatus","loadingStatus","componentDidMount","questionTypes","length","loadQuestionTypes","exam_id","check","candidateExam","user_exams_done","find","itm","course","period","DATE","exam_date","undefined","allAnswers","loadExamsDone","auth","user","user_id","item","exam_paper","requestUserAnswers","userAnswersTotalMarks","user_answers","total","user_marks","state","user_exam_details","this","className","dangerouslySetInnerHTML","__html","course_name","discription","termes","map","i","questions","question_id","question","test","language","description","selectedLanguage","is_deleted","type","chapters","customNumber","marks","answers","answersList","showCorrectAnswer","showAnswers","onClick","toFixed","total_marks","exam_total_marks","Component","AnswersDetails","connect","candidateApplications","FC_GetProfileDetails","LoadCandidateApplications","setSelectedCandidateExam","setSelectedCourse","setSelectedPosition","InitializeExamDetails","AddUserApplication","loadApplicationPeriods","resultDiv","question_answers","subQuestionType","findQuestionType","questionTypeElementsType","MultipleChoice","userAnswer","toMultipleChoice","filter","value","SingleMultiple","userAnswerSingle","CalculatedMultipleChoice","userAnswer1","toCalculatedMultipleChoice","toString","Matching","userAnswerMatch","toMatching","TrueFalse","userAnswerTureFalse","toTrueFalse","Numeric","userAnswerNumerical","toNumerical","SimpleCalculate","userAnswerSimpleCalculate","toSimpleCalculated","ShortAnswer","userAnswerShortAnswer","toShortAnswer","Essay","userAnswerEssay","toEssay","Embedded","Hybrid","FindAnswer","answer","UserAnswersSel","SubQ","sub_question","findQType","typeShort","reference","user_answer","testQ","_id","changed","QuestionForHybrid","Calculated","FindAnswerHybrid","submitQuestionAnswer","style","maxHeight","console","log","wholeQuestion","stri","String","fromCharCode","charCodeAt","EmbeddedQuestion","data"],"mappings":"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","file":"static/js/11.60d81843.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport FindAnswer from \"../../containers/DoExam/DoExamTitle/FindAnswer\";\nimport { ExamAnswerSheetDone } from \"../../interfaces/exam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  requestUserAnswers,\n  loadQuestionTypes,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { DATE } from \"../../utils/functions\";\nimport { AiOutlineFileText } from \"react-icons/ai\";\nimport { ExamDoneDetailsAnswers } from \"../../containers/CandidateExams/CandidateExams\";\nimport Loading from \"../Loading/Loading\";\n\ninterface AnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n  allAnswers?: ExamAnswerSheetDone[];\n  user_id?: string;\n  questionTypes: questionTypesStoreInterface;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AnswersDetailsState {\n  loading: boolean;\n  loadingStatus: boolean;\n}\n\nexport class _AnswersDetails extends Component<\n  AnswersDetailsProps,\n  AnswersDetailsState\n> {\n  constructor(props: AnswersDetailsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingStatus: false,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setLoadingStatus = (status: boolean) => {\n    this.setState({ loadingStatus: status });\n  };\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (this.props.exam_id) {\n      let check = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.course === this.props.exam_id.course &&\n          itm.period === this.props.exam_id.period &&\n          DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n      );\n      // Check if user exams loaded\n      if (\n        (this.props.candidateExam.user_exams_done.length === 0 ||\n          check === undefined) &&\n        this.props.allAnswers === undefined\n      ) {\n        this.props.loadExamsDone(\n          this.props.exam_id.period,\n          this.props.auth.user.user_id,\n          this.setLoadingStatus\n        );\n      }\n      if (check !== undefined) {\n        if (\n          this.props.candidateExam.user_exams_done.find(\n            (item) => item.exam_paper === check?.exam_paper\n          ) === undefined\n        ) {\n          this.props.requestUserAnswers(\n            check.exam_paper,\n            this.props.user_id === undefined\n              ? this.props.auth.user.user_id\n              : this.props.user_id,\n            this.setLoading\n          );\n        }\n      }\n    }\n  };\n  userAnswersTotalMarks = (user_answers: ExamAnswerSheetDone) => {\n    let total: number = 0;\n    for (let item of user_answers.user_answers) {\n      total += item.user_marks;\n    }\n    return total;\n  };\n  render() {\n    let user_exam_details: ExamAnswerSheetDone | undefined =\n      this.props.allAnswers === undefined\n        ? this.props.candidateExam.user_exams_done.find(\n            (itm) =>\n              itm.course === this.props.exam_id.course &&\n              itm.period === this.props.exam_id.period &&\n              DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n          )\n        : this.props.allAnswers.find(\n            (itm) =>\n              itm.course === this.props.exam_id.course &&\n              itm.period === this.props.exam_id.period &&\n              DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n          );\n    if (this.state.loading === true || this.state.loadingStatus === true) {\n      return (\n        <div className=\"my-6 rounded bg-white p-3\">\n          <Loading />\n        </div>\n      );\n    }\n    if (user_exam_details === undefined) {\n      return (\n        <div className=\"my-6 rounded bg-white p-3\">\n          <span className=\"text-4xl font-bold\">Exam details not found!</span>\n        </div>\n      );\n    }\n    return (\n      <div className=\"p-2 bg-gray-100\">\n        <div className=\"mb-5 -mt-5\">\n          {user_exam_details !== undefined && (\n            <div className=\"mt-5\">\n              <div className=\"px-3 mb-2 flex flex-row items-center gap-3\">\n                <div>\n                  <AiOutlineFileText className=\"text-5xl text-gray-500\" />\n                </div>\n                <div\n                  className=\"text-2xl font-extrabold\"\n                  dangerouslySetInnerHTML={{\n                    __html: \"Exam for \" + this.props.exam_id.course_name,\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white rounded-t mb-0 border-b\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam date:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: DATE(this.props.exam_id.exam_date),\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white mb-0 border-b\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam description:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.exam_id.discription,\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white rounded-b mb-0\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam terms and conditions:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.exam_id.termes,\n                  }}\n                ></div>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"text-2xl font-extrabold text-blue-600 px-2 mb-3\">\n          Exam answers & marks\n        </div>\n        {user_exam_details === undefined\n          ? \"Not Found\"\n          : user_exam_details.user_answers.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"bg-white hover:bg-white border border-white hover:border-blue-400 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast group mb-2\"\n              >\n                <div className=\"grid md:grid-cols-11 w-full\">\n                  <div className=\"col-span-12 flex flex-row items-center gap-3\">\n                    <div\n                      key={i + 1}\n                      className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\"\n                    >\n                      {i + 1}\n                    </div>\n                    {user_exam_details &&\n                      user_exam_details.questions.find(\n                        (itm) => itm.question_id === item.question\n                      ) !== undefined && (\n                        <div className=\"text-sm w-full\">\n                          <div\n                            className=\"font-bold text-gray-700 text-base\"\n                            dangerouslySetInnerHTML={{\n                              __html: user_exam_details.questions\n                                .find(\n                                  (itm) => itm.question_id === item.question\n                                )!\n                                .question.find(\n                                  (test) => test.language === item.language\n                                )!.description,\n                            }}\n                          ></div>\n                          <div className=\"text-blue-700 font-bold text-sm w-full\">\n                            Answer:&nbsp;{\" \"}\n                            {this.props.questionTypes.questionTypes !== null &&\n                              user_exam_details.user_answers.find(\n                                (itm) => itm.question === item.question\n                              ) && (\n                                <div className=\"mb-2\">\n                                  <FindAnswer\n                                    selectedLanguage={item.language}\n                                    question={{\n                                      is_deleted:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.is_deleted,\n                                      question_id: item.question,\n                                      course: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.course,\n                                      question:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.question,\n                                      type: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.type,\n                                      chapters:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.chapters,\n                                      customNumber:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.customNumber,\n                                      marks: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.marks,\n                                      answers: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.answers,\n                                    }}\n                                    answersList={[\n                                      {\n                                        question_id: item.question,\n                                        status: true,\n                                        answers:\n                                          user_exam_details.user_answers.find(\n                                            (itm) =>\n                                              itm.question === item.question\n                                          )!.answers,\n                                      },\n                                    ]}\n                                    questionTypes={\n                                      this.props.questionTypes.questionTypes\n                                    }\n                                    showCorrectAnswer={this.props.showAnswers}\n                                    onClick={() => {}}\n                                  />\n                                </div>\n                              )}\n                          </div>\n                        </div>\n                      )}\n                  </div>\n                </div>\n                <div className=\"col-span-1 flex items-center justify-between\">\n                  <div></div>\n\n                  <div className=\"w-max flex flex-col items-end justify-center bg-blue-50 rounded-md px-3 py-1 group-hover:bg-blue-100\">\n                    <div className=\"text-sm font-semibold text-gray-700\">\n                      Marks\n                    </div>\n                    <div className=\"text-sm font-extrabold text-gray-900 -mt-1\">\n                      <span className=\"text-blue-500\">\n                        {item.user_marks.toFixed(2)}\n                      </span>{\" \"}\n                      /{\" \"}\n                      {user_exam_details &&\n                        user_exam_details.questions.find(\n                          (itm) => itm.question_id === item.question\n                        )?.marks}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n        <div className=\"flex flex-row items-center justify-between gap-3 mb-10\">\n          <div className=\"bg-blue-100 p-3 pr-3 text-blue-700 flex flex-col items-start justify-center rounded-lg border-2 border-white\">\n            <span className=\"text-gray-700\">Total marks percentage</span>\n            <span className=\"text-3xl font-extrabold\">\n              {user_exam_details && user_exam_details.total_marks.toFixed(2)}%\n            </span>\n          </div>\n          <div>\n            <div className=\"bg-white rounded-lg p-3\">\n              <div className=\"text-gray-500 font-bold text-base text-right\">\n                Exam total marks\n              </div>\n              {user_exam_details !== undefined && (\n                <div className=\"font-extrabold text-3xl text-gray-900 text-right\">\n                  {this.userAnswersTotalMarks(user_exam_details).toFixed(2)} /{\" \"}\n                  {user_exam_details.exam_total_marks}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    questionTypes: questionTypes,\n  };\n};\n\nexport const AnswersDetails = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  requestUserAnswers,\n  loadQuestionTypes,\n})(_AnswersDetails);\n","import React from \"react\";\nimport {\n  BsCheckSquareFill,\n  BsCheckCircleFill,\n  BsArrowRightSquareFill,\n  BsArrowRightCircleFill,\n} from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionInterface,\n  questionType,\n  TrueFalseQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  QuestionLanguage,\n  LanguageInterface,\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionAnswerFormat,\n} from \"../../../interfaces\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../QuestionDetails/ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { findQType } from \"./FindAnswerHybrid\";\n\ninterface FindAnswerProps {\n  question: QuestionInterface;\n  answersList: QuestionAnswersStore[];\n  selectedLanguage: QuestionLanguage | LanguageInterface;\n  questionTypes: questionType[];\n  showCorrectAnswer: boolean;\n  subQuestionType?: questionTypeElementsType;\n  reference?: number;\n  onClick: () => void;\n}\n\nconst resultDiv = (\n  user_answers: QuestionAnswerFormat[],\n  question_answers: QuestionAnswerFormat[],\n  props: FindAnswerProps\n): JSX.Element => {\n  switch (\n    props.subQuestionType === undefined\n      ? findQuestionType(props.question.type, props.questionTypes)\n      : props.subQuestionType\n  ) {\n    case questionTypeElementsType.MultipleChoice:\n      const userAnswer: MultipleChoiceQuestionAnswerInterface[] =\n        toMultipleChoice(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswer\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl text-blue-600\">\n                  <BsCheckSquareFill />\n                </div>\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl text-blue-600\">\n                        <BsCheckSquareFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.SingleMultiple:\n      const userAnswerSingle: MultipleChoiceQuestionAnswerInterface[] =\n        toMultipleChoice(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerSingle\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl text-blue-600\">\n                  <BsCheckCircleFill />\n                </div>\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl text-blue-600\">\n                        <BsCheckCircleFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n\n    case questionTypeElementsType.CalculatedMultipleChoice:\n      const userAnswer1: CalculatedMultipleChoiceQuestionAnswerInterface[] =\n        toCalculatedMultipleChoice(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswer1\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl text-blue-600\">\n                  <BsCheckSquareFill />\n                </div>\n                <div className=\"text-base font-normal text-gray-500\">\n                  {item.value.length > 1 ? (\n                    <>\n                      Between{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[0]}\n                      </span>{\" \"}\n                      and{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[1]}\n                      </span>\n                    </>\n                  ) : (\n                    <span className=\"text-gray-700\">\n                      {item.value[0].toString()}\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl text-blue-600\">\n                        <BsCheckSquareFill />\n                      </div>\n                      <div className=\"text-base font-normal text-gray-500\">\n                        {item.value.length > 1 ? (\n                          <>\n                            Between{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0]}\n                            </span>{\" \"}\n                            and{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[1]}\n                            </span>\n                          </>\n                        ) : (\n                          <span className=\"text-blue-600\">\n                            {item.value[0].toString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n\n    case questionTypeElementsType.Matching:\n      const userAnswerMatch: MatchingQuestionAnswerInterface[] =\n        toMatching(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerMatch.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n            >\n              <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                  {i + 1}\n                </div>\n              </div>\n              <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                <div\n                  className=\"w-full mt-3 lg:mb-0\"\n                  dangerouslySetInnerHTML={{ __html: item.value }}\n                ></div>\n                <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                  <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                    <BsArrowRightSquareFill />\n                  </div>\n                  <div\n                    className=\"w-full mr-2\"\n                    dangerouslySetInnerHTML={{ __html: item.status }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n                  >\n                    <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                      <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                        {i + 1}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                      <div\n                        className=\"w-full mt-3 lg:mb-0\"\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                      <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                        <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                          <BsArrowRightSquareFill />\n                        </div>\n                        <div\n                          className=\"w-full mr-2\"\n                          dangerouslySetInnerHTML={{ __html: item.status }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.TrueFalse:\n      const userAnswerTureFalse: TrueFalseQuestionAnswerInterface[] =\n        toTrueFalse(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerTureFalse\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.Numeric:\n      const userAnswerNumerical: NumericalQuestionAnswerInterface[] =\n        toNumerical(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerNumerical.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div className=\"text-gray-600 text-base font-normal\">\n                {item.value.length > 1 ? (\n                  <>\n                    Between{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[0]}\n                    </span>{\" \"}\n                    and{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[1]}\n                    </span>\n                  </>\n                ) : (\n                  item.value.length > 0 && (\n                    <span className=\"text-gray-700\">\n                      {item.value[0].toString()}\n                    </span>\n                  )\n                )}\n              </div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div className=\"text-gray-600 text-base font-normal\">\n                      {item.value.length > 1 ? (\n                        <>\n                          Between{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[0] - item.value[1]}\n                          </span>{\" \"}\n                          and{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[0] + item.value[1]}\n                          </span>\n                        </>\n                      ) : (\n                        item.value.length > 0 && (\n                          <span className=\"text-blue-700\">\n                            {item.value[0].toString()}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.SimpleCalculate:\n      const userAnswerSimpleCalculate: SimpleCalculatedQuestionAnswerInterface[] =\n        toSimpleCalculated(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerSimpleCalculate.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div className=\"text-gray-600 text-base font-normal\">\n                {item.value.length > 1 ? (\n                  <>\n                    Between{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[0]}\n                    </span>{\" \"}\n                    and{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[1]}\n                    </span>\n                  </>\n                ) : (\n                  item.value.length > 0 && (\n                    <span className=\"text-gray-700\">\n                      {item.value[0].toString()}\n                    </span>\n                  )\n                )}\n              </div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div className=\"text-gray-600 text-base font-normal\">\n                      {item.value.length > 1 ? (\n                        <>\n                          Between{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[0]}\n                          </span>{\" \"}\n                          and{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[1]}\n                          </span>\n                        </>\n                      ) : (\n                        item.value.length > 0 && (\n                          <span className=\"text-blue-700\">\n                            {item.value[0].toString()}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.ShortAnswer:\n      const userAnswerShortAnswer: ShortAnswerQuestionAnswerInterface[] =\n        toShortAnswer(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerShortAnswer.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: item.value,\n                }}\n              ></div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: item.value,\n                      }}\n                    ></div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    // Essay\n    case questionTypeElementsType.Essay:\n      const userAnswerEssay: EssayQuestionAnswerInterface[] =\n        toEssay(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerEssay.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: item.value,\n                }}\n              ></div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: item.value,\n                      }}\n                    ></div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.Embedded:\n      return <div></div>;\n    case questionTypeElementsType.Hybrid:\n      return <div></div>;\n    default:\n      return <div className=\"text-blue-600 font-extrabold\">Answer added</div>;\n  }\n};\n\nconst FindAnswer = (props: FindAnswerProps) => {\n  const answer = props.answersList.find(\n    (item) => item.question_id === props.question.question_id\n  );\n  let UserAnswersSel = props.question.question.find(\n    (itm) => itm.language === props.selectedLanguage\n  );\n  if (UserAnswersSel === undefined && props.question.question.length > 0) {\n    UserAnswersSel =\n      props.question.question.find(\n        (itm) => itm.language === props.selectedLanguage\n      ) === undefined\n        ? props.question.question[0]\n        : props.question.question.find(\n            (itm) => itm.language === props.selectedLanguage\n          )!;\n  }\n  if (answer === undefined || UserAnswersSel === undefined) {\n    return (\n      <div className=\"text-yellow-600 font-extrabold text-2xl text-center\">\n        No answer found!\n      </div>\n    );\n  } else {\n    let SubQ = UserAnswersSel.sub_question.find(\n      (itm) => findQType(itm.typeShort) === props.subQuestionType\n    );\n\n    return (\n      <div>\n        {SubQ === undefined\n          ? resultDiv(\n              answer.answers[0].answer,\n              UserAnswersSel.answers[0].answer,\n              props\n            )\n          : answer.answers\n              .filter((itm) => SubQ && itm.reference === SubQ.reference)\n              .map((user_answer) => {\n                const testQ = UserAnswersSel!.answers.find(\n                  (itm) =>\n                    itm._id === user_answer._id &&\n                    itm.reference === user_answer.reference\n                );\n                if (testQ !== undefined) {\n                  return resultDiv(user_answer.answer, testQ.answer, props);\n                } else {\n                  return <div></div>;\n                }\n              })}\n      </div>\n    );\n  }\n};\n\nexport default FindAnswer;\n","import {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { MdCheckCircle, MdClose } from \"react-icons/md\";\nimport { Auth } from \"../../../actions/auth\";\nimport { candidateExamStoreInterface } from \"../../../actions/candidate_exam\";\nimport { questionTypesStoreInterface } from \"../../../actions/questionTypes\";\nimport { System } from \"../../../actions/system\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { EmbeddedQuestion } from \"../../../components/QuestionPreview/QuestionPreview\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n} from \"../../../interfaces/question\";\nimport {\n  ExamAnsweredQuestions,\n  ExamPendingQuestions,\n  findQuestionType,\n} from \"../utils/utils\";\nimport FindAnswer from \"./FindAnswer\";\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n  selectedLanguage: QuestionLanguage;\n  wholeQuestion: QuestionInterface;\n}\n\nexport const findQType = (\n  typeShort: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid\n): questionTypeElementsType => {\n  let changed: questionTypeElementsType = questionTypeElementsType.Hybrid;\n  switch (typeShort) {\n    case QuestionForHybrid.Calculated:\n      changed = questionTypeElementsType.Calculated;\n      break;\n    case QuestionForHybrid.CalculatedMultipleChoice:\n      changed = questionTypeElementsType.CalculatedMultipleChoice;\n      break;\n    case QuestionForHybrid.Essay:\n      changed = questionTypeElementsType.Essay;\n      break;\n    case QuestionForHybrid.Matching:\n      changed = questionTypeElementsType.Matching;\n      break;\n    case QuestionForHybrid.MultipleChoice:\n      changed = questionTypeElementsType.MultipleChoice;\n      break;\n    case QuestionForHybrid.Numeric:\n      changed = questionTypeElementsType.Numeric;\n      break;\n    case QuestionForHybrid.ShortAnswer:\n      changed = questionTypeElementsType.ShortAnswer;\n      break;\n    case QuestionForHybrid.SimpleCalculate:\n      changed = questionTypeElementsType.SimpleCalculate;\n      break;\n    case QuestionForHybrid.SingleMultiple:\n      changed = questionTypeElementsType.SingleMultiple;\n      break;\n    case QuestionForHybrid.TrueFalse:\n      changed = questionTypeElementsType.TrueFalse;\n      break;\n  }\n  return changed;\n};\n\nconst FindAnswerHybrid = (props: QuestionsReviewProps) => {\n  let str = \"a\";\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    );\n  }\n  return (\n    <div className={`pt-4 border-t border-gray-300 bg-white`}>\n      <div className=\"px-4 pb-2\">\n        <div className=\"my-2\">\n          <div\n            className=\"flex flex-col gap-3 overflow-y-auto\"\n            style={{ maxHeight: \"100%\" }}\n          >\n            {console.log(\"Whole: \", props.wholeQuestion)}\n            <div>\n              {findQuestionType(\n                props.wholeQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid &&\n                props.wholeQuestion.question.find(\n                  (test) => test.language === props.selectedLanguage\n                ) !== undefined &&\n                props.wholeQuestion.question\n                  .find((test) => test.language === props.selectedLanguage)!\n                  .sub_question.map((item, i) => {\n                    let stri = String.fromCharCode(\n                      str.charCodeAt(str.length - 1) + i\n                    );\n                    return (\n                      <div\n                        key={i + 1}\n                        className=\"bg-white hover:bg-white border border-white hover:border-blue-400 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast group\"\n                      >\n                        <div className=\"grid md:grid-cols-12 w-full\">\n                          <div className=\"col-span-12 flex flex-row items-center gap-3\">\n                            <div\n                              key={i + 1}\n                              className=\"w-6 h-6 p-2 rounded-full bg-blue-100 flex justify-center items-center font-bold text-lg text-blue-600 cursor-pointer\"\n                            >\n                              {stri}\n                            </div>\n                            <div className=\"text-sm w-full\">\n                              {props.wholeQuestion.question.find(\n                                (test) =>\n                                  test.language === props.selectedLanguage\n                              ) !== undefined ? (\n                                findQuestionType(\n                                  item.type,\n                                  props.questionTypes.questionTypes\n                                ) === questionTypeElementsType.Embedded ? (\n                                  EmbeddedQuestion(\n                                    props.wholeQuestion!,\n                                    props.questionTypes.questionTypes,\n                                    props.selectedLanguage,\n                                    props.candidateExam.question_answers,\n                                    (data: QuestionAnswerInterface) => {}\n                                  )\n                                ) : (\n                                  <div\n                                    className=\"font-bold text-gray-700 text-base\"\n                                    dangerouslySetInnerHTML={{\n                                      __html: item.description,\n                                    }}\n                                  ></div>\n                                )\n                              ) : (\n                                props.wholeQuestion.question.length > 0 && (\n                                  <div\n                                    className=\"font-bold text-gray-700 text-base max-h-20 truncate\"\n                                    dangerouslySetInnerHTML={{\n                                      __html: item.description,\n                                    }}\n                                  ></div>\n                                )\n                              )}\n                              <div className=\"text-blue-700 font-bold text-sm w-full\">\n                                Answer: &nbsp;\n                                {props.questionTypes.questionTypes !== null && (\n                                  <FindAnswer\n                                    selectedLanguage={props.selectedLanguage}\n                                    question={props.wholeQuestion}\n                                    answersList={props.candidateExam.question_answers.filter(\n                                      (itm) =>\n                                        itm.question_id ===\n                                        props.wholeQuestion.question_id\n                                    )}\n                                    questionTypes={\n                                      props.questionTypes.questionTypes\n                                    }\n                                    onClick={() => {}}\n                                    showCorrectAnswer={false}\n                                    subQuestionType={findQType(item.typeShort)}\n                                    reference={item.reference}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FindAnswerHybrid;\n"],"sourceRoot":""}