{"version":3,"sources":["containers/QuestionBank/AddQuestion/UploadQuestion/UploadedQuestions/UploadedQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/Upload.tsx","components/DownloadLink/DownloadLink.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/UploadQuestion.tsx"],"names":["UploadedQuestions","connect","auth","course","schoolLevels","questionBank","prepareExam","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","setSelectedCourse","addExamQuestion","IncrementQuestionBank","props","useState","loading","setLoading","redirect","setRedirect","setExam","setSetExam","useEffect","questionTypes","length","loadQuestionTypes","to","className","uploadedQuestions","insertedData","selectedCourse","course_id","courses","find","itm","course_name","onClick","selected","undefined","returnToCourse","insertedCount","window","confirm","selected_course","questions","x","addToExam","selectedQuestion","clearUploadedQuestionsStore","Loading","map","item","i","selectQuestion","id","type","title","question","dangerouslySetInnerHTML","__html","description","Upload","loadQuestionBank","setQuestions","formError","setFormError","upload_percentage","set_upload_percentage","showQuestionEdit","setShowQuestionEdit","validateExcelFile","file","a","element","msg","submitQuestion","e","preventDefault","size","setUploadingStatus","formData","FormData","append","axios","post","API","QBank","onUploadProgress","progressEvent","number_percentage","loaded","total","res","status","data","console","log","response","errors","message","onSubmit","onChange","target","files","name","Math","round","Alert","theme","AlertInterface","danger","style","width","EditQuestion","questionsList","unSelectQuestion","DownloadLink","location","href","icon","caption","_UploadQuestion","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","showFilter","setSchoolLevelFilterFn","filteredCourses","searched","filtered","filter","school_levels","itm1","school_level_id","item2","uploadingStatus","componentDidMount","state","searchCourseInput","this","course_code","Courses","selected_course_id","Modal","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","SchoolLevelsFilter","educationCategories","education_categories","Component","UploadQuestion"],"mappings":"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","file":"static/js/63.29ec1e34.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  IncrementQuestionBank,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { course } from \"../../../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../../../interfaces/question\";\nimport { VscListSelection } from \"react-icons/vsc\";\nimport { Redirect } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  selectQuestion: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  IncrementQuestionBank: (question: QuestionInterface) => void;\n}\n\nconst _UploadedQuestions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [redirect, setRedirect] = useState<boolean>(false);\n  const [setExam, setSetExam] = useState<boolean>(false);\n  const returnToCourse = () => {\n    if (\n      props.questionBank.uploadedQuestions !== null &&\n      props.questionBank.uploadedQuestions.insertedData[0].course !==\n        props.selectedCourse.course_id\n    ) {\n      if (props.course.courses) {\n        let selected = props.course.courses.find(\n          (itm) =>\n            props.questionBank.uploadedQuestions &&\n            itm.course_id ===\n              props.questionBank.uploadedQuestions.insertedData[0].course\n        );\n        if (selected !== undefined) {\n          props.setSelectedCourse(selected);\n        }\n      }\n    }\n  };\n  const clearUploadedQuestionsStore = () => {\n    if (window.confirm(\"Have you completed to modify questions?\")) {\n      if (\n        props.questionBank.uploadedQuestions !== null &&\n        props.questionBank.uploadedQuestions.insertedData.length > 0\n      ) {\n        for (let selectedQuestion of props.questionBank.uploadedQuestions\n          .insertedData) {\n          props.IncrementQuestionBank(selectedQuestion);\n        }\n        props.setUploadedQuestions(null);\n      }\n      setRedirect(true);\n    }\n  };\n  const addToExam = () => {\n    if (window.confirm(\"Are you sure do you want to add to exam?\") === true) {\n      if (\n        props.questionBank.uploadedQuestions !== null &&\n        props.questionBank.uploadedQuestions.insertedData.length > 0\n      ) {\n        if (props.course.selected_course !== null) {\n          for (let x of props.prepareExam.questions) {\n            props.addExamQuestion(x);\n          }\n          if (props.prepareExam.questions.length === 0) {\n            for (let itm of props.questionBank.uploadedQuestions.insertedData) {\n              props.addExamQuestion(itm);\n              props.IncrementQuestionBank(itm);\n            }\n          }\n          if (props.questionBank.uploadedQuestions.insertedData.length !== 0) {\n            props.setUploadedQuestions(null);\n            setSetExam(true);\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  if (setExam === true) {\n    return <Redirect to=\"/prepare-exam\" />;\n  }\n  if (redirect === true) {\n    return <Redirect to=\"/question-bank\" />;\n  }\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 my-4 rounded\">\n      {props.questionBank.uploadedQuestions !== null &&\n      props.questionBank.uploadedQuestions.insertedData[0].course !==\n        props.selectedCourse.course_id ? (\n        <div className=\"text-center flex flex-col items-center text-gray-500 py-6 rounded bg-gray-100 mt-5\">\n          You have changed course! <br />\n          <div className=\"bg-blue-50 text-blue-600 font-bold rounded-full text-center w-max px-3 border border-blue-200 flex items-center justify-center mb-3\">\n            {props.course.courses !== null &&\n              props.course.courses.find(\n                (itm) =>\n                  itm.course_id ===\n                  props.questionBank.uploadedQuestions?.insertedData[0].course\n              )?.course_name}\n          </div>\n          <div\n            onClick={() => returnToCourse()}\n            className=\"btn bg-blue-600 text-white cursor-pointer\"\n          >\n            Back to list\n          </div>\n        </div>\n      ) : (\n        <>\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-blue-600 font-bold mb-2 flex flex-row items-center gap-2 text-xl\">\n              <VscListSelection className=\"text-2xl\" />\n              <span>\n                Uploaded questions list (\n                {props.questionBank.uploadedQuestions?.insertedCount})\n              </span>\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <div\n                onClick={() => addToExam()}\n                className=\"btn border bg-blue-50 hover:bg-blue-600 border-blue-600 text-blue-600 hover:text-white mb-2 cursor-pointer\"\n              >\n                Make it an exam\n              </div>\n              <div\n                onClick={() => clearUploadedQuestionsStore()}\n                className=\"btn bg-blue-600 text-white mb-2 cursor-pointer\"\n              >\n                Continue\n              </div>\n            </div>\n          </div>\n          {loading === true ? (\n            <Loading />\n          ) : props.questionBank.uploadedQuestions === null ? (\n            <div>Please upload questions</div>\n          ) : props.questionBank.uploadedQuestions.insertedData === null ? (\n            <Loading />\n          ) : props.questionBank.uploadedQuestions.insertedData.length === 0 ? (\n            <div>No questions uploaded!</div>\n          ) : (\n            props.questionBank.uploadedQuestions.insertedData.map((item, i) => (\n              <div\n                onClick={() => props.selectQuestion(item)}\n                key={i + 1}\n                className=\"bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 hover:bg-blue-50 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 hover:border-blue-600 mb-3\"\n              >\n                <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n                  <div className=\"rounded-full bg-blue-100 text-blue-600 h-8 w-8 flex items-center justify-center text-xl font-bold px-3 py-3\">\n                    {i + 1}\n                  </div>\n                  <div className=\"flex flex-col truncate\">\n                    <span className=\"text-xs text-blue-600 font-bold w-max\">\n                      {props.questionTypes.questionTypes &&\n                        props.questionTypes.questionTypes.find(\n                          (itm) => itm.id && itm.id === item.type\n                        )?.title}\n                    </span>\n                    <span className=\"font-bold\">{item.question[0].title}</span>\n                    <span\n                      className=\"truncate text-xs\"\n                      dangerouslySetInnerHTML={{\n                        __html: item.question[0].description,\n                      }}\n                    ></span>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    prepareExam: prepareExam,\n  };\n};\n\nconst UploadedQuestions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  addExamQuestion,\n  IncrementQuestionBank,\n})(_UploadedQuestions);\n\nexport default UploadedQuestions;\n","import axios from \"axios\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { FiFileText } from \"react-icons/fi\";\nimport { IoMdCloudUpload } from \"react-icons/io\";\nimport Alert, { AlertInterface } from \"../../../../components/Alert/Alert\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport {\n  course,\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../../interfaces\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { API } from \"../../../../utils/api\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n} from \"../../../../actions\";\nimport { StoreState } from \"../../../../reducers\";\nimport UploadedQuestions from \"./UploadedQuestions/UploadedQuestions\";\nimport EditQuestion from \"./EditQuestion/EditQuestion\";\n\ninterface UploadInterface {\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (course: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\n\nconst _Upload = (props: UploadInterface) => {\n  const [questions, setQuestions] = useState<File | null>(null);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [upload_percentage, set_upload_percentage] = useState<number>(0);\n  const [showQuestionEdit, setShowQuestionEdit] = useState<{\n    status: boolean;\n    question: QuestionInterface | null;\n  } | null>(null);\n\n  const validateExcelFile = async (file: File) => {\n    if (\n      file.type !==\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" &&\n      file.type !== \"application/vnd.ms-excel\" &&\n      file.type !== \"text/csv\"\n    ) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose excel file or svg file\",\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const submitQuestion = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // Validation\n    setFormError(null);\n    if (questions === null) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Please select a file\",\n      });\n    } else if (questions.size === 0) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose a real file\",\n      });\n    } else if (\n      questions.type !==\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" &&\n      questions.type !== \"application/vnd.ms-excel\" &&\n      questions.type !== \"text/csv\"\n    ) {\n      return setFormError({\n        element: \"questions\",\n        msg: \"Invalid file, Please choose excel file or svg file\",\n      });\n    } else {\n      setLoading(true);\n      props.setUploadingStatus(true);\n      try {\n        const formData = new FormData();\n        formData.append(\"course\", props.selectedCourse.course_id);\n        formData.append(\"file\", questions);\n        const res = await axios.post(`${API.QBank}/question`, formData, {\n          onUploadProgress: (progressEvent: any) => {\n            let number_percentage =\n              (+progressEvent?.loaded / +progressEvent.total) * 100;\n            set_upload_percentage(number_percentage);\n          },\n        });\n        if (res.status === 201) {\n          // console.log(\"Uploaded questions: \", res.data);\n          props.setUploadedQuestions(res.data);\n        }\n        // console.log(\"Questions: \", res);\n      } catch (error: any) {\n        console.log(\"Err: \", { ...error });\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors) {\n              setFormError({\n                element: \"questions\",\n                msg: error.response.data.errors[0].message,\n              });\n            }\n          }\n        }\n      }\n      setLoading(false);\n      props.setUploadingStatus(false);\n    }\n  };\n\n  const selectQuestion = (question: QuestionInterface) => {\n    setShowQuestionEdit({\n      status: true,\n      question: question,\n    });\n  };\n\n  const unSelectQuestion = () => {\n    setShowQuestionEdit({\n      status: false,\n      question: null,\n    });\n  };\n\n  useEffect(() => {\n    if (props.questionBank.questions === null) {\n      if (props.course.selected_course !== null) {\n        props.loadQuestionBank(\n          props.course.selected_course.course_id,\n          setLoading\n        );\n      }\n    }\n  }, [props]);\n\n  return (\n    <Fragment>\n      {props.questionBank.uploadedQuestions === null ? (\n        <div className=\"mb-4\">\n          <div className=\"flex flex-row justify-between items-center rounded px-3 py-2 bg-blue-100 border border-blue-600 animate__animated animate__fadeIn shadow\">\n            <div className=\"flex flex-col\">\n              <span className=\"text-base font-light truncate\">\n                Selected exam/subject\n              </span>\n              <span className=\"font-bold text-blue-600 text-xl truncate\">\n                {props.course.selected_course !== null &&\n                  props.course.selected_course.course_name}\n              </span>\n            </div>\n            {/* <div className=\"btn bg-blue-50 text-blue-500 hover:bg-blue-100 hover:text-blue-700  cursor-pointer\">Download template</div> */}\n          </div>\n          <form onSubmit={submitQuestion}>\n            <div className={`my-2`}>\n              <label\n                className={`w-full flex flex-col items-center px-4 py-6 tracking-wide rounded border border-gray-400 bg-white ${\n                  loading === true\n                    ? \"cursor-not-allowed hover:bg-gray-100 bg-gray-100 text-gray-400\"\n                    : \"cursor-pointer hover:border-blue-600 hover:bg-blue-100 border-gray-100 text-blue-600 hover:text-blue-700\"\n                }`}\n              >\n                <IoMdCloudUpload className=\"text-6xl\" />\n                <span className=\"text-base leading-normal\">\n                  {loading === true\n                    ? \"Loading, Please wait...\"\n                    : \"Click to select a file\"}\n                </span>\n                {loading === false && (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setFormError(null);\n                      if (\n                        e.target.files &&\n                        e.target.files.length > 0 &&\n                        loading === false\n                      ) {\n                        setQuestions(e.target.files[0]);\n                        validateExcelFile(e.target.files[0]);\n                      }\n                    }}\n                    type=\"file\"\n                    className=\"hidden\"\n                  />\n                )}\n              </label>\n            </div>\n            {questions !== null && (\n              <div className=\"rounded bg-blue-50 px-3 py-2 flex flex-row items-center justify-between gap-2 border border-blue-500\">\n                <div className=\"flex flex-row gap-2 items-center\">\n                  <FiFileText className=\"text-5xl text-blue-600\" />\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-bold text-blue-600 truncate\">\n                      File: {questions.name}\n                    </span>\n                    <span className=\"text-gray-500 text-xs truncate\">\n                      File type: {questions.type}\n                    </span>\n                    <span className=\"text-gray-500 text-xs\">\n                      Size: {Math.round(questions.size / 1024)} Kbs\n                    </span>\n                  </div>\n                </div>\n                {loading === false && (\n                  <div\n                    onClick={() => {\n                      setQuestions(null);\n                      setFormError(null);\n                    }}\n                    className=\"btn text-sm bg-red-50 text-red-600 border border-red-200 cursor-pointer hover:bg-red-100\"\n                  >\n                    Delete\n                  </div>\n                )}\n              </div>\n            )}\n            {formError !== null && formError.element === \"questions\" && (\n              <div onClick={() => setFormError(null)} className=\"mt-2\">\n                <Alert\n                  title=\"Invalid\"\n                  description={formError.msg}\n                  theme={AlertInterface.danger}\n                />\n              </div>\n            )}\n            {loading === true && questions !== null && (\n              <div className=\"bg-blue-200 h-6 w-full rounded mt-2\">\n                <div\n                  className=\"h-full rounded bg-blue-500 flex flex-row items-center justify-between px-2 truncate text-xs text-white font-bold animate__animated animate__delay-1s\"\n                  style={{ width: `${upload_percentage}%` }}\n                >\n                  <span className=\"italic\">Uploading, Please wait...</span>\n                  <span>{upload_percentage}%</span>\n                </div>\n              </div>\n            )}\n            {loading === true ? (\n              <div className=\"mt-5\">\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"flex flex-row items-center justify-between my-2\">\n                <div\n                  onClick={() => props.setSelectedCourse(null)}\n                  className=\"btn cursor-pointer bg-gray-100\"\n                >\n                  Back\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn cursor-pointer bg-blue-600 text-white\"\n                >\n                  Save questions\n                </button>\n              </div>\n            )}\n          </form>\n        </div>\n      ) : showQuestionEdit !== null &&\n        showQuestionEdit.status === true &&\n        showQuestionEdit.question !== null &&\n        props.questionBank.uploadedQuestions?.insertedData ? (\n        <EditQuestion\n          selectedQuestion={showQuestionEdit.question}\n          questionsList={props.questionBank.uploadedQuestions.insertedData}\n          unSelectQuestion={unSelectQuestion}\n        />\n      ) : (\n        <UploadedQuestions\n          selectedCourse={props.selectedCourse}\n          selectQuestion={selectQuestion}\n          questionTypes={props.questionTypes}\n          loadQuestionTypes={props.loadQuestionTypes}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Upload = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n})(_Upload);\n\nexport default Upload;\n","import React from \"react\";\n\ninterface DonwloadLinkProps {\n  className: string;\n  title: string;\n  caption: string;\n  location: string;\n  icon: any;\n}\nconst DownloadLink = (props: DonwloadLinkProps) => {\n  const downloadFile = () => {\n    window.location.href = props.location;\n  };\n  return (\n    <button\n      title={props.title}\n      className={`flex flex-row items-center gap-2 ${props.className}`}\n      onClick={downloadFile}\n    >\n      {props.icon}\n      {props.caption}\n    </button>\n  );\n};\n\nexport default DownloadLink;\n","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as Interfaces from \"../../../../interfaces/index\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n} from \"../../../../actions\";\nimport { StoreState } from \"../../../../reducers\";\nimport { course } from \"../../../../interfaces/course\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport SchoolLevelsFilter from \"../../../Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { searchItem } from \"../../../Application/ApplicationPositions/ApplicationPositions\";\nimport Upload from \"./Upload\";\nimport Courses from \"../../../../components/Courses/Courses\";\nimport { SiMicrosoftexcel } from \"react-icons/si\";\nimport DownloadLink from \"../../../../components/DownloadLink/DownloadLink\";\nimport { VscListFlat } from \"react-icons/vsc\";\nimport { IoArrowBackOutline } from \"react-icons/io5\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return filtered;\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"\">\n          <div className=\"my-3 flex flex-row justify-between items-center\">\n            <div className=\"flex flex-row items-center gap-3\">\n              <div>\n                <Link\n                  to=\"/question-bank\"\n                  title=\"Back to question bank\"\n                  className=\"bg-white rounded-full h-10 w-10 flex items-center justify-center text-blue-600 hover:bg-blue-600 hover:text-white\"\n                >\n                  <IoArrowBackOutline className=\" text-4xl\" />\n                </Link>\n              </div>\n              <div className=\"flex flex-col\">\n                <span className=\"text-gray-700 text-3xl font-extrabold\">\n                  Upload questions\n                </span>\n                <div className=\"text-gray-600\">\n                  {this.props.course.selected_course !== null ? (\n                    <div className=\"mt-1\">\n                      <span className=\"text-blue-600 font-bold underline\">\n                        {this.props.course.selected_course.course_code} -\n                      </span>\n                      <span className=\"font-bold text-blue-600 underline\">\n                        {this.props.course.selected_course.course_name}\n                      </span>\n                    </div>\n                  ) : (\n                    <div className=\"text-sm\">\n                      Please make sure you have downloaded the format template\n                      before writing list of questions\n                      <br />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex flex-row\">\n              <DownloadLink\n                className=\"btn bg-white border border-white hover:bg-blue-100 mr-1\"\n                title=\"Click to download sample questions to refer!\"\n                caption=\"Samples\"\n                location=\"https://spreadsheets.google.com/feeds/download/spreadsheets/Export?key=1taUovVksxo1KzNq3cWtLxARY7HICMjUvyHq4w041Tmc&exportFormat=xlsx\"\n                icon={<VscListFlat className=\"text-2xl\" />}\n              />\n              <DownloadLink\n                className=\"px-2 py-2 rounded font-bold bg-blue-100 hover:bg-blue-600 hover:text-white text-blue-600 mr-1 border border-blue-400 hover:border-blue-600\"\n                title=\"Click to download excel template you can use to prepare questions!\"\n                caption=\"Download template\"\n                location=\"https://spreadsheets.google.com/feeds/download/spreadsheets/Export?key=1HtNaIh6cS-bFlaBpzIuhbrYLvreUjmTu84dBw10GMo0&exportFormat=xlsx\"\n                icon={<SiMicrosoftexcel className=\"text-2xl\" />}\n              />\n              {/* <Link\n                to=\"/question-bank\"\n                className=\"btn bg-white text-blue-600 mr-1 flex flex-row items-center gap-2\"\n              >\n                <FiExternalLink className=\"text-2xl\" />\n                <span>Question bank</span>\n              </Link> */}\n            </div>\n          </div>\n          <div className=\"flex-col\">\n            <div className=\"grid md:grid-cols-5 gap-2\">\n              {this.props.questionBank.uploadedQuestions === null && (\n                <div\n                  className={`animate__animated ${\n                    this.props.course.selected_course === null\n                      ? \"md:col-span-5\"\n                      : \"md:col-span-2 transition-all duration-500 ease-in-out\"\n                  } md:flex md:flex-col min-h-full`}\n                >\n                  <Courses\n                    setSelectedCourse={this.props.setSelectedCourse}\n                    selected_course_id={\n                      this.props.course.selected_course &&\n                      this.props.course.selected_course.course_id\n                    }\n                  />\n                </div>\n              )}\n              {this.props.course.selected_course !== null && (\n                <div\n                  className={`${\n                    this.props.questionBank.uploadedQuestions === null\n                      ? \"md:col-span-3\"\n                      : \"md:col-span-5\"\n                  } md:flex flex-col min-h-full rounded`}\n                >\n                  <Upload\n                    selectedCourse={this.props.course.selected_course}\n                    setUploadingStatus={this.setUploadingStatus}\n                    setSelectedCourse={this.props.setSelectedCourse}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n  };\n};\n\nexport const UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n"],"sourceRoot":""}