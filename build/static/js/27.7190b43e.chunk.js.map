{"version":3,"sources":["utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/Essay.tsx","components/Courses/Courses.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","components/QuestionPreview/QuestionPreview.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","containers/DoExam/QuestionDetails/Answers/AnswersTypesCollection.tsx","containers/DoExam/QuestionDetails/Answers/HybridAnswers.tsx","components/Questions/QuestionItem.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","caption","toMultipleChoice","answers","answer","value","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","CoursesAction","Courses","connect","auth","periods","schoolLevels","system","loadApplicationPeriods","setSelectedPeriod","loadSchoolLevels","setSelectedEducationCategory","PushPopupAlert","loadCourses","setSelectedCourse","props","useState","loading","setLoading","addNew","setAddNew","search","setSearch","selectedCourse","setSelectedCourseComp","course_selected","deleteCourseFn","a","axios","delete","API","APPLICATION","title","theme","PopupAlertTheme","success","warning","console","log","useEffect","school_levels","className","onClick","onChange","e","target","placeholder","searchData","map","item","course_name","description","action","View","Update","Delete","backDrop","Themes","default","close","widthSizeClass","ModalSize","extraLarge","displayClose","backDropClose","padding","body","closeModal","state","deleteSelected","chaptersOnly","medium","MultipleChoice","checkAnswer","available_answers","question_id","selectedQuestionAnswer","checkA","tes","reference","selectedAns","x","addAnswerItemFn","newAnswers","questionAnswer","question","answerQuestionFn","_id","language","oldAnswers","selAns","tester","temp","questionTypeElementsType","SingleMultiple","t","newAnswersMultiple","xItem","addAnswer","dangerouslySetInnerHTML","__html","TrueFalse","SimpleCalculated","answeredValue","checkB","ShortAnswer","style","minHeight","Numerical","CalculatedMultipleChoice","getRandomArbitrary","Essay","_UploadQuestion","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","period","selected_period","session_plan_id","filteredCourses","searched","filtered","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","searchCourseInput","this","education_category_title","school_level_name","education_categories","loadEducationCategories","selected_course_id","course_code","educationCategories","Component","UploadQuestion","questionBank","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","selectedLanguage","checkIfSelected","Matching","displayWindow","setDisplayWindow","setSelectedAnswer","ans","selectedQuestionId","selectedLang","ansi","selectedExam","testing","questions","QuestionLanguages","lang","testLang","checkE","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","EmbeddedQuestion","selectedQuestion","questionTypes","questionAnswers","newTextResult","findQuestionType","Embedded","answeredQuestions","userQuestionAnswers","originalText","sub_question","push","data","answerCheck","answered","QuestionForEmbedded","select","alert","returnSelect","typeShort","QuestionPreview","doExam","candidateExam","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","selectLang","setSelectLang","setSelectedLanguage","filterLanguages","langs","langItem","testLangQ","l","LoadingType","white","marks","width","question_answers","Hybrid","candidate_exam","Shuffle","SimpleCalculate","Numeric","wholeQuestion","AddCourse","setCourse_id","setCourse_name","setCourse_code","setDescription","chapters","setChapters","setSchool_levels","formError","setFormError","openAdd","chapter","addChapter","setAddChapter","submitCourse","preventDefault","obj","patch","info","post","errors","message","danger","onSubmit","disabled","name","uuidv4","addNewChapter","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","MatchingAnswers","selectedQuestionItem","selectedKey","QuestionAnswer","editMatchingValue","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","setSelectedKey","checkAns","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","updateAnswerSingleMultiple","checkCalculateType","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","handleStatus","addAnswerSingleMultiple","RunTest","numberOfTests","updateAnswerSimpleCalculate","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","updateShortAnswer","handleTextChange","rows","updateEssayAnswer","EditSimpleCalculate","updateAnswerNumerical","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","setShowLanguages","newSubQuestion","newSubQuestions","updateAnswerEmbedded","newDataTest","findData","updateElementStatus","window","confirm","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","addedChapters","ChangeLanguage","languagesList","visible","setVisible","_EditQuestion","showLanguages","QuestionLang","actionStatus","updatedQuestion","current","editedAnswerIndex","editedAnswer","answer_id","newEditedAnswer","newFiltered","removed","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","customNumber","is_deleted","UpdateQuestion","addExamQuestion","unSelectQuestion","showQuestionChapters","setSelectedLang","questionLangs","Loading","Modal","large","selected_course","courseDetail","EditQuestion","prepareExam","setUploadedQuestions","SchoolLevelSelect","height","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","AnswersTypesCollection","HybridAnswers","stri","String","fromCharCode","charCodeAt","hybrid","QuestionItem","editMode","setEditMode","setSelectedQuestion","callBack","number","questionsList","preview","submitQuestionAnswer","Questions","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","to","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","actionType","changeProctoringRule","proctoringRules","newData","selected","addQuestionToPaper","removeToQuestionPaper","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","is_active","formErr","selectCourse","currentStep","StepStatus","Step1","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","validateTwoTime","QBank","exam_status","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","redirectToExams","applicationPeriods","examsList","loadExamsListByPeriod","application_session","editQuestion","total","handleChangeTermes","setSelectCourse","setSelectPeriod","GetExamsByPeriod","Prepare","addQuestionModal","submitExam","qts","stepStatus","NoResultThemes","Dark","AlertInterface","PrepareExam","loadExamsList","PrepareExamSteps","Steps","session_plan_name","Switch","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/27.7190b43e.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    // Problem here!\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        // Check type of question\n        let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n        if (props.type === questionTypeElementsType.SingleMultiple) {\n          for (let t of selAns.answer) {\n            temp = [\n              ...temp,\n              {\n                id: t.id,\n                value: t.value,\n                status: false,\n              },\n            ];\n          }\n          addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n        }\n        let newAnswersMultiple: MultipleChoiceQuestionAnswerInterface[] = [];\n\n        for (let xItem of temp.length === 0 ? selAns.answer : temp) {\n          if (xItem.id === item.id) {\n            newAnswersMultiple = [\n              ...newAnswersMultiple,\n              {\n                id: xItem.id,\n                value: xItem.value,\n                status:\n                  props.type === questionTypeElementsType.SingleMultiple\n                    ? true\n                    : !xItem.status,\n              },\n            ];\n          } else {\n            newAnswersMultiple = [...newAnswersMultiple, xItem];\n          }\n\n          addAnswerItemFn(\n            newAnswersMultiple,\n            props.selectedQuestionAnswer.selectedAns\n          );\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: TrueFalseQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const addAnswer = (\n    //This has a problem\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let temp: TrueFalseQuestionAnswerInterface[] = [];\n        for (let t of selAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, selAns);\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let x of temp.length === 0 ? selAns.answer : temp) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: !x.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: [\n                {\n                  id: newAnswers[0].id,\n                  value: [newAnswers[0].value],\n                  status: newAnswers[0].status,\n                },\n              ],\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  ShortAnswerQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: ShortAnswerQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer === undefined ? (\n        <div\n          className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n        >\n          <textarea\n            value={\"\"}\n            className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 bg-gray-50`}\n            style={{ minHeight: \"80px\" }}\n          ></textarea>\n        </div>\n      ) : (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"80px\" }}\n            ></textarea>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: [item.value],\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        // props.answerQuestionFn({\n        //   question_id: props.selectedQuestionAnswer.question_id,\n        //   status: true,\n        //   answer: [\n        //     {\n        //       id: props.selectedQuestionAnswer.answers[0].id,\n        //       value: [\"\"],\n        //       status: props.selectedQuestionAnswer.answers[0].status,\n        //     },\n        //   ],\n        // });\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of props.selectedQuestionAnswer.selectedAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0\n        ? props.selectedQuestionAnswer.selectedAns.answer\n        : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers, props.selectedQuestionAnswer.selectedAns);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EssayQuestionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: EssayQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Essay = (props: EssayQuestionProps) => {\n  const checkAnswer = (item: EssayQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        addAnswerItemFn(\n          [\n            {\n              id: selAns.answer[0].id,\n              value: item.value,\n              status: selAns.answer[0].status,\n            },\n          ],\n          selAns\n        );\n      }\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"300px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (\n    newAnswers: MatchingQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let x of selAns.answer) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: item.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ansi: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let checkE = testLang.answers.find(\n              (tes) =>\n                tes.reference ===\n                props.selectedQuestionAnswer.selectedAns.reference\n            );\n            if (checkE !== undefined) {\n              let testAnswerLang = checkE.answer.find(\n                (it) => it.status.toString() === ansi.status\n              );\n              if (testAnswerLang !== undefined) {\n                return testAnswerLang.status.toString();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let selAns = temp.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let ans = selAns.answer.find((itm) => itm.id === x);\n        if (ans !== undefined && ans.status !== \"\") {\n          if (props.selectedQuestionAnswer.question_id !== null) {\n            return checkAnswerStatus(\n              props.selectedQuestionAnswer.question_id,\n              props.selectedLanguage,\n              ans\n            );\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        let selAns = item.answers.find(\n          (tester) =>\n            tester.reference ===\n            props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (selAns !== undefined) {\n          for (let ans of selAns.answer) {\n            res = [\n              ...res,\n              {\n                id: ans.id,\n                lang: item.language,\n                status: ans.status.toString(),\n              },\n            ];\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toEmbedded,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\nimport Essay from \"../../containers/DoExam/QuestionDetails/Answers/Essay\";\nimport {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n  regExEmbedded,\n} from \"@mastrecruit/common\";\nimport Embedded from \"../../containers/DoExam/QuestionDetails/Answers/Embedded\";\nimport Hybrid from \"../../containers/DoExam/QuestionDetails/Answers/Hybrid\";\nimport HybridAnswers from \"../../containers/DoExam/QuestionDetails/Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst returnSelect = (\n  data: QuestionAnswerInterface,\n  type: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid,\n  questionAnswers: QuestionAnswerInterface[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let answers: QuestionAnswerFormat[] = [];\n  for (let answer of data.answer) {\n    answers.push({\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    });\n  }\n  let answerCheck: QuestionAnswerInterface | undefined = questionAnswers.find(\n    (itm) => itm.reference === data.reference\n  );\n  let answered: QuestionAnswerFormat[] = [];\n  if (answerCheck !== undefined) {\n    answered = answerCheck.answer;\n  }\n  if (answers.length > 0) {\n    if (type === QuestionForEmbedded.SingleMultiple) {\n      return (\n        <span className=\"w-max\">\n          <select\n            className={`px-3 py-2 rounded text-base max-w-full border border-gray-300 ${\n              answered.length !== 0 &&\n              answers.find((itm) => itm.id === answered[0].id) !== undefined\n                ? \"text-blue-600 font-bold\"\n                : \"text-gray-700 font-bold\" //Example of condition of changing color\n            }`}\n            value={answered.length === 0 ? \"\" : answered[0].id}\n            onChange={(e) => {\n              let select = answers.find((itm) => itm.id === e.target.value);\n              if (select !== undefined) {\n                addAnswer({\n                  _id: data._id,\n                  reference: data.reference,\n                  answer: [\n                    {\n                      id: select.id,\n                      value: select.value,\n                      status: select.status,\n                    },\n                  ],\n                });\n              } else {\n                alert(\"Invalid choice!\");\n              }\n            }}\n          >\n            <option value={\"\"}>Choose correct answer</option>\n            {answers.map((item, i) => (\n              <option value={item.id} key={i + 1}>\n                {item.value}\n              </option>\n            ))}\n          </select>\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"w-max bg-green-100\">\n          <input\n            value={\n              answered.length === 0\n                ? \"\"\n                : type === QuestionForEmbedded.ShortAnswer\n                ? answered[0].value\n                : answered[0].value[0]\n            }\n            onChange={(e) => {\n              addAnswer({\n                _id: data._id,\n                reference: data.reference,\n                answer: [\n                  {\n                    id: answers[0].id,\n                    value:\n                      type === QuestionForEmbedded.ShortAnswer\n                        ? e.target.value\n                        : [e.target.value],\n                    status: answers[0].status,\n                  },\n                ],\n              });\n            }}\n            type=\"text\"\n            className=\"bg-white px-3 py-1 rounded text-base text-blue-600 font-bold border border-gray-300\"\n          />\n        </span>\n      );\n    }\n  } else {\n    return <div>Question not valid!</div>;\n  }\n};\n\nexport const EmbeddedQuestion = (\n  selectedQuestion: QuestionInterface,\n  questionTypes: questionType[] | null,\n  language: QuestionLanguage,\n  questionAnswers: QuestionAnswersStore[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let newTextResult = [];\n  // Testing Question\n  let question = selectedQuestion.question.find(\n    (itm) => itm.language === language\n  );\n  if (\n    findQuestionType(selectedQuestion.type, questionTypes) !== null &&\n    findQuestionType(selectedQuestion.type, questionTypes) ===\n      questionTypeElementsType.Embedded\n  ) {\n    let answeredQuestions: QuestionAnswerInterface[] = [];\n    if (question !== undefined) {\n      let userQuestionAnswers = questionAnswers.find(\n        (itm) => itm.question_id === selectedQuestion.question_id\n      );\n      if (userQuestionAnswers !== undefined) {\n        answeredQuestions = userQuestionAnswers.answers;\n      }\n\n      var answers = question.answers;\n      var originalText = question.description.split(\" \");\n      // var newTexts = question.description.match(regExEmbedded);\n\n      for (let check of originalText) {\n        let test = answers.find((itm) => itm.reference === parseInt(check[1]));\n        if (test !== undefined) {\n          // Find type of subQuestion\n          let type = question.sub_question.find(\n            (itm) => itm.reference === parseInt(check[1])\n          );\n          if (type !== undefined) {\n            newTextResult.push(\n              returnSelect(test, type.typeShort, answeredQuestions, addAnswer)\n            );\n          }\n        } else {\n          newTextResult.push(check);\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"w-full text-base font-semibold mt-2\">\n      {newTextResult.map((item, i) => (\n        <span key={i + 1} className=\"mr-1\">\n          {item}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-40 md:pb-10\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div className=\"flex flex-row justify-between w-full\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.title,\n                      }}\n                      className=\"text-sm text-gray-600 mb-2\"\n                    ></div>\n\n                    {/* Languages */}\n                    <div className=\"flex flex-row gap-2\">\n                      <div className=\"px-3 py-1 rounded-full flex items-center justify-center text-base font-bold bg-white text-blue-800\">\n                        {props.selectedQuestion.marks} marks\n                      </div>\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                    setSelectedLanguage(item.key);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    selectedLanguage === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {selectedLanguage === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {props.selectedQuestion.question_id !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) === questionTypeElementsType.Embedded ? (\n                    EmbeddedQuestion(\n                      props.selectedQuestion,\n                      props.questionTypes.questionTypes,\n                      selectedLanguage,\n                      props.candidateExam.question_answers,\n                      () => {}\n                    )\n                  ) : (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold mt-2\"\n                    ></div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.Hybrid)\n                ? \"\"\n                : \"bg-white\"\n            } rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n\n            {/* Numerical */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Essay answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toEssay(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers,\n                  }}\n                  wholeQuestion={props.selectedQuestion.question.find(\n                    (itm) => itm.language === selectedLanguage\n                  )}\n                  answerQuestionFn={props.answerQuestionFn}\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  SubQuestionInterface,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\n\n// All question types except Embedded and Hybrid\n\ninterface AnswersTypesCollectionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  item: SubQuestionInterface;\n  hybrid: boolean;\n}\n\nconst AnswersTypesCollection = (props: AnswersTypesCollectionProps) => {\n  return (\n    <div>\n      {/* TrueFalse */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.TrueFalse &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <TrueFalse\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toTrueFalse(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.Calculated ||\n          props.item.typeShort === QuestionForHybrid.SimpleCalculate) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <SimpleCalculated\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toSimpleCalculated(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.SingleMultiple ||\n          props.item.typeShort === QuestionForHybrid.MultipleChoice) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <MultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.CalculatedMultipleChoice &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <CalculatedMultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toCalculatedMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n\n      {/* Matching */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Matching &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Matching\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMatching(itm.answer),\n                shuffledAnswers: Shuffle(toMatching(itm.answer)),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n              selectedExam={props.selectedExam}\n              selectedLanguage={props.selectedLanguage}\n            />\n          ))}\n      {/* Esssay */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Essay &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Essay\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toEssay(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Numerical */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Numeric &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Numerical\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toNumerical(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* ShortAnswer */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.ShortAnswer &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <ShortAnswer\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toShortAnswer(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n    </div>\n  );\n};\n\nexport default AnswersTypesCollection;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\nimport AnswersTypesCollection from \"./AnswersTypesCollection\";\n\ninterface HybridProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst HybridAnswers = (props: HybridProps) => {\n  let str = \"a\";\n  // useEffect(() => {\n  //   if (props.selectedQuestionAnswer.question_id !== null) {\n  //     // Check if question is already there in answersList\n  //     let checkAnswerAvail = props.available_answers.find(\n  //       (item) => item.question_id === props.selectedQuestionAnswer.question_id\n  //     );\n  //     if (props.wholeQuestion !== undefined) {\n  //       let answersRes: QuestionAnswerInterface[] = [];\n  //       if (checkAnswerAvail === undefined) {\n  //         answersRes = props.wholeQuestion.answers;\n  //       } else {\n  //         for (let newAns of props.wholeQuestion.answers) {\n  //           if (\n  //             checkAnswerAvail.answers.find(\n  //               (item) => item._id === newAns._id\n  //             ) === undefined\n  //           ) {\n  //             console.log(\"Ans not duplicted: \", newAns);\n  //             answersRes = [\n  //               ...answersRes,\n  //               {\n  //                 _id: newAns._id,\n  //                 reference: newAns.reference,\n  //                 answer: [],\n  //               },\n  //             ];\n  //           }\n  //         }\n  //       }\n  //       props.answerQuestionFn({\n  //         question_id: props.selectedQuestionAnswer.question_id,\n  //         status: false, //Check if submitted online\n  //         answers: answersRes,\n  //       });\n  //     }\n  //   }\n  // }, [props]);\n  return (\n    <div>\n      {props.wholeQuestion !== undefined &&\n        props.wholeQuestion.sub_question.length > 0 &&\n        props.wholeQuestion.sub_question.map((item, i) => {\n          let stri = String.fromCharCode(str.charCodeAt(str.length - 1) + i);\n          return (\n            <div\n              title=\"Click to choose this option\"\n              key={i + 1}\n              className={`px-2 py-2\n             bg-white\n            rounded mb-2`}\n            >\n              <div className=\"flex flex-row items-center w-full gap-2 mb-2\">\n                <div>\n                  <div className=\"flex items-center justify-center h-8 w-8 rounded-full bg-gray-100 border border-gray-400 font-bold\">\n                    {stri}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between w-full gap-2\">\n                  <div className=\"font-bold\">{item.description}</div>\n                  <div>\n                    <div className=\"bg-blue-100 text-blue-600 px-3 py-1 rounded-full font-bold\">\n                      {item.marks} marks\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"border-t px-2 py-2\">\n                <AnswersTypesCollection\n                  type={props.type}\n                  available_answers={props.available_answers}\n                  selectedQuestionAnswer={props.selectedQuestionAnswer}\n                  answerQuestionFn={props.answerQuestionFn}\n                  wholeQuestion={props.wholeQuestion}\n                  selectedExam={props.selectedExam}\n                  selectedLanguage={props.selectedLanguage}\n                  item={item}\n                  hybrid={true}\n                />\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default HybridAnswers;\n","import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      {\n        editMode === false ? (\n          <div\n            onClick={() =>\n              props.select === true && props.callBack(props.question)\n            }\n            className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n              props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n            } hover:border-blue-600 mb-3`}\n          >\n            <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n              <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n                <div>\n                  {props.select === false ? (\n                    <div className=\"font-bold text-blue-600\">\n                      ({props.number})\n                    </div>\n                  ) : props.status === true ? (\n                    <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n                  ) : (\n                    <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className=\"text-xs text-blue-600 font-bold w-max\">\n                    {props.questionTypes.questionTypes &&\n                      props.questionTypes.questionTypes.find(\n                        (itm) => itm.id && itm.id === props.question.type\n                      )?.title}\n                  </span>\n                  <span className=\"font-bold\">\n                    {props.question.question[0].title}\n                  </span>\n                  <div\n                    className=\"w-full text-xs\"\n                    dangerouslySetInnerHTML={{\n                      __html: props.question.question[0].description,\n                    }}\n                  ></div>\n                </div>\n              </div>\n              {props.select === false && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => setSelectedQuestion(props.question)}\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() => setEditMode(true)}\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.select === false && props.callBack(props.question)\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          // <Modal\n          //   title=\"\"\n          //   backDrop={true}\n          //   theme={Themes.default}\n          //   close={() => setEditMode(false)}\n          //   backDropClose={true}\n          //   widthSizeClass={ModalSize.extraLarge}\n          //   displayClose={false}\n          //   padding={{ title: false }}\n          // >\n          <div className=\"pt-0 fixed top-0 z-50 left-0 h-full overflow-scroll animate__animated animate__zoomIn shadow-xl bg-white w-full\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        )\n        // </Modal>\n      }\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n\nexport interface ExamItemResponseFull {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  course_id: string;\n  course_code: string;\n  course_name: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.setLoading\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) =>\n              itm.period === this.props.periods.selected_period?.session_plan_id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-row items-center gap-3\">\n                {this.props.questionBank.questions !== null &&\n                  this.props.questionBank.questions.length > 0 && (\n                    <Link\n                      to={\"/upload-questions\"}\n                      className=\"btn bg-blue-100 hover:bg-blue-200 text-blue-700 cursor-pointer\"\n                    >\n                      Upload new\n                    </Link>\n                  )}\n                <span>Add Exam Questions</span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => {\n              if (\n                this.props.periods.selected_period !== null &&\n                this.props.periods.selected_period.is_active === true\n              ) {\n                this.setState({ selectPeriod: false });\n              } else {\n                alert(\"Please choose active session\");\n              }\n            }}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n})(_PrepareExam);\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}