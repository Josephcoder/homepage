{"version":3,"sources":["components/ProctoringCandidateDetails/ProctoringCandidateDetails.tsx","components/ProctoringMainTopBar/ProctoringMainTopBar.tsx","components/ProctoringStatistics/ProctoringStatistics.tsx","components/ProctoringEvents/ProctoringEvents.tsx","containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor.tsx","components/ProctoringCandidates/ProctoringCandidates.tsx","components/CenterCardSupervisor/CenterCardSupervisor.tsx"],"names":["ActiveTap","ProctoringMainTopBar","course_title","post_title","duration","started_at","remaining","end_at","exam_start","startExamHandler","stopExamHandler","className","to","htmlFor","onClick","title","ProctoringStatistics","total","active","done","left","ProctoringEvents","events","candidates","clickOpen","clickHandler","map","evnt","i","findUser","find","cand","user_id","undefined","fname","lname","event_type","description","ActiveSideTap","ProctoringCandidateDetails","candidate","chatHandler","micHandler","focusHandler","stopHandler","restartHandler","warnHandler","closeHandler","home_proctoring","exam_started","useState","Details","setActive","email","bind","Events","ProctoringCandidates","CenterCardSupervisor","seat_number","warningHandler","detailsHandler","continueHandler","color","stopped","_ProctoringOnlineSupervisor","props","myPeer","componentDidMount","FC_GetProctoringRoom","status","msg","setState","loading_room","socket","emit","JOIN_ROOM","room_id","proctoring","room","auth","user","peer_id","active_candidates","FC_SetActiveCandidates","error","target","on","USER_CONNECTED","new_user","console","log","new_joined_user","FC_SetOneActiveCandidate","USER_DISCONNECTED","userId","FC_CandidateOffline","ExamEvents","CAND_EXAM_EVENT_CLIENT","event","FC_CandidateExamEvent","componentWillUnmount","off","startCenterProctoring","sendEvent","CAND_WARNING_EXAM_SERVER","server_room","blank","e","ActiveSIdeTabHandler","itm","active_side_tab","SelectCandidateHandler","value","selected_candidate","START_EXAM_SERVER","data","FC_ExamStartStop","STOP_EXAM_SERVER","FC_ContinueExam","CAND_CONTINUE_EXAM_SERVER","stopCandidateHandler","CAND_STOP_EXAM_SERVER","FC_StopCandidate","warnCandidateHandler","restartCandidateHandler","CAND_RESTART_EXAM_SERVER","state","me","loading","online_room","online_candidates","start_exam","activeCandidates","this","filter","nonActiveCandidates","length","Fragment","Candidates","React","Component","ProctoringOnlineSupervisor","connect"],"mappings":"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","file":"static/js/4.235b42a3.chunk.js","sourcesContent":["import React, { FC, ReactElement, useState } from \"react\";\nimport { CandidateProctoringInterface, EventInterface } from \"../../interfaces\";\nimport ProctoringEvents from \"../ProctoringEvents/ProctoringEvents\";\nimport {\n  MdAccountCircle,\n  MdArrowBack,\n  MdVolumeUp,\n  MdChat,\n  MdFullscreen,\n  MdNotInterested,\n  MdReplay,\n  MdWarning,\n} from \"react-icons/md\";\n\ntype ProctoringCandidateDetailsProps = {\n  candidate: CandidateProctoringInterface | undefined;\n  chatHandler: Function;\n  micHandler: Function;\n  focusHandler: Function;\n  stopHandler: Function;\n  restartHandler: Function;\n  warnHandler: Function;\n  closeHandler: Function;\n  events: EventInterface[];\n  home_proctoring: boolean;\n  exam_started: boolean;\n};\n\nenum ActiveTap {\n  Details,\n  Events,\n}\n\nconst ProctoringCandidateDetails: FC<ProctoringCandidateDetailsProps> = ({\n  candidate,\n  chatHandler,\n  micHandler,\n  focusHandler,\n  stopHandler,\n  restartHandler,\n  warnHandler,\n  closeHandler,\n  events,\n  home_proctoring,\n  exam_started,\n}): ReactElement => {\n  const [active, setActive] = useState(ActiveTap.Details);\n\n  if (candidate === undefined) {\n    return (\n      <div className=\"p-4 text-center\">\n        <h1 className=\"text-3xl text-blue-400\">Opps!!</h1>\n        <p className=\"text-3xl text-blue-400\">\n          The selected candidate can't be found{\" \"}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-1\">\n      <div className=\"p-2 border-rounded bg-blue-800 rounded-md flex items-baseline\">\n        <button\n          onClick={() => closeHandler()}\n          className=\"p-1 block bg-blue-900 bg-opacity-70 rounded-md mr-2 font-bold text-1xl\"\n        >\n          <MdArrowBack />\n        </button>\n        <h3 className=\"text-center -mt-1 mb-0 pb-0 text-1xl font-bold block text-blue-500\">\n          User details\n        </h3>\n      </div>\n      <div className=\"p-2 text-center\">\n        <MdAccountCircle className=\"text-9xl text-center mx-auto\" />\n\n        <h1 className=\"text-xl text-white\">{candidate.email}</h1>\n        <h2 className=\"text-gray-400 text-md\">\n          {candidate.fname} {candidate.lname}\n        </h2>\n      </div>\n      <div className=\"my-2 py-1 rounded border- -border-blue-500 grid grid-cols-3 gap-1\">\n        {/* buttons start here */}\n\n        {exam_started === true && candidate.active === true && (\n          <>\n            {home_proctoring === true && (\n              <>\n                <button\n                  onClick={micHandler.bind(this, candidate.user_id)}\n                  className=\"text-center bg-blue-900 rounded-md p-1 border-2 border-blue-800 hover:bg-blue-800 text-blue-200 hover:text-white\"\n                >\n                  <MdVolumeUp className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-xs p-0 block -mt-0\">Mic</span>\n                </button>\n\n                <button\n                  onClick={chatHandler.bind(this, candidate.user_id)}\n                  className=\"text-center bg-blue-900 rounded-md p-1 border-2 border-blue-800 hover:bg-blue-800 text-blue-200 hover:text-white\"\n                >\n                  <MdChat className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-xs p-0 block -mt-0\">Chat</span>\n                </button>\n\n                <button\n                  onClick={focusHandler.bind(this, candidate.user_id)}\n                  className=\"text-center bg-blue-900 rounded-md p-1 border-2 border-blue-800 hover:bg-blue-800 text-blue-200 hover:text-white\"\n                >\n                  <MdFullscreen className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-xs p-0 block -mt-0\">Focus</span>\n                </button>\n              </>\n            )}\n\n            <button\n              onClick={stopHandler.bind(this, candidate.user_id)}\n              className=\"text-center bg-blue-900 rounded-md p-1 border-2 border-blue-800 hover:bg-blue-800 text-blue-200 hover:text-white\"\n            >\n              <MdNotInterested className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-xs p-0 block -mt-0\">Stop</span>\n            </button>\n\n            <button\n              onClick={restartHandler.bind(this, candidate.user_id)}\n              className=\"text-center bg-blue-900 rounded-md p-1 border-2 border-blue-800 hover:bg-blue-800 text-blue-200 hover:text-white\"\n            >\n              <MdReplay className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-xs p-0 block -mt-0\">Restart</span>\n            </button>\n\n            <button\n              title=\"give a warning\"\n              onClick={() => warnHandler(candidate.user_id)}\n              className=\"text-center bg-blue-900 rounded-md p-1 border-2 border-blue-800 hover:bg-blue-800 text-blue-200 hover:text-white\"\n            >\n              <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-xs p-0 block -mt-0\">Warn</span>\n            </button>\n          </>\n        )}\n      </div>\n\n      <div className=\"my-1 bg-blue-900 bg-opacity-40 rounded-md p-1 mt-2 grid grid-cols-2 gap-2 text-sm\">\n        <button\n          onClick={() => setActive(ActiveTap.Details)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Details\n              ? \"bg-blue-700 border-2 border-blue-300\"\n              : \"bg-blue-900\"\n          }`}\n        >\n          candidate\n        </button>\n\n        <button\n          onClick={() => setActive(ActiveTap.Events)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Events\n              ? \"bg-blue-700 border-2 border-blue-300\"\n              : \"bg-blue-900\"\n          }`}\n        >\n          Events\n        </button>\n      </div>\n\n      {active === ActiveTap.Details ? (\n        <div className=\"mt-2\">\n          <h2 className=\"text-blue-500 opacity-40 font-bold text-1xl mb-1\">\n            User information\n          </h2>\n          <div className=\"p-2 rounded-md border border-blue-400 border-opacity-20\">\n            {/* details start from here */}\n            <div className=\"border-b border-blue-400 border-opacity-60 py-1\">\n              <label className=\"text-sm text-blue-400 m-0 p-0\">Username:</label>\n              <h4 className=\"text-white font-bold text-lg p-0 -mt-1\">\n                {candidate.email}\n              </h4>\n            </div>\n            <div className=\"border-b border-blue-400 border-opacity-60 py-1\">\n              <label className=\"text-sm text-blue-400 m-0 p-0\">\n                First name:\n              </label>\n              <h4 className=\"text-white font-bold text-lg p-0 -mt-1\">\n                {candidate.fname}\n              </h4>\n            </div>\n            <div className=\"border-b border-blue-400 border-opacity-60 py-1\">\n              <label className=\"text-sm text-blue-400 m-0 p-0\">\n                Last name:\n              </label>\n              <h4 className=\"text-white font-bold text-lg p-0 -mt-1\">\n                {candidate.lname}\n              </h4>\n            </div>\n            <div className=\"border-b border-blue-400 border-opacity-60 py-1\">\n              <label className=\"text-sm text-blue-400 m-0 p-0\">email:</label>\n              <h4 className=\"text-white font-bold text-lg p-0 -mt-1\">\n                {candidate.email}\n              </h4>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ProctoringEvents candidates={[candidate]} events={events} />\n      )}\n    </div>\n  );\n};\nexport default ProctoringCandidateDetails;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdArrowBack } from \"react-icons/md\";\nimport { Link } from \"react-router-dom\";\ntype ProctoringMainTopBarProps = {\n  course_title: string;\n  post_title: string;\n  duration: string;\n  started_at: string;\n  remaining: string;\n  end_at: string;\n  exam_start: boolean;\n  startExamHandler: Function;\n  stopExamHandler: Function;\n};\n\nconst ProctoringMainTopBar: FC<ProctoringMainTopBarProps> = ({\n  course_title,\n  post_title,\n  duration,\n  started_at,\n  remaining,\n  end_at,\n  exam_start,\n  startExamHandler,\n  stopExamHandler,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className=\"py-2 px-3 border-b border-blue-500 border-opacity-30 text-white proctoring-evaluator-navigation grid grid-flow-row md:grid-cols-1 lg:grid-cols-2 \">\n      <div className=\"flex\">\n        {/* <div className=\" mt-1\"> */}\n        <Link to=\"/\" className=\"p-2 rounded-md px-0 hover:bg-red-800 mr-2\">\n          <MdArrowBack className=\"text-4xl\" />\n        </Link>\n        {/* </div> */}\n        <div className=\"\">\n          <label htmlFor=\"\" className=\"text-gray-200 text-sm m-0\">\n            {post_title}\n          </label>\n          <h3 className=\"text-white text-xl  font-bold\">{course_title}</h3>\n        </div>\n      </div>\n      <div className=\"text-red lg:pt-0 sm:pt-3 text-right md:text-left lg:text-right\">\n        <div className=\"grid grid-cols-5 gap-4 text-left\">\n          <div>\n            <label className=\"text-gray-400 text-sm\">Duration</label>\n            <h2 className=\"text-xl font-bold\">{duration}</h2>\n          </div>\n          <div>\n            <label className=\"text-gray-400 text-sm\">Started at:</label>\n            <h2 className=\"text-xl font-bold\">{started_at}</h2>\n          </div>\n          <div>\n            <label className=\"text-gray-400 text-sm\">End at</label>\n            <h2 className=\"text-xl font-bold\">{end_at}</h2>\n          </div>\n          <div>\n            <label className=\"text-gray-400 text-sm\">Remaining </label>\n            <h2 className=\"text-xl font-bold\">{remaining}</h2>\n          </div>\n\n          <div className=\"flex items-center\">\n            {exam_start === false ? (\n              <button\n                onClick={() => startExamHandler()}\n                className=\"btn bg-green-500 text-white w-full\"\n                title=\"Start Exam\"\n              >\n                Start\n              </button>\n            ) : (\n              <button\n                onClick={() => stopExamHandler()}\n                className=\"btn bg-red-600 text-white w-full\"\n                title=\"stop Exam\"\n              >\n                Stop\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProctoringMainTopBar;\n","import React, { FC, ReactElement } from \"react\";\n\ntype ProctoringStatisticsProps = {\n  total: number;\n  active: number;\n  done: number;\n  left: number;\n};\n\nconst ProctoringStatistics: FC<ProctoringStatisticsProps> = ({\n  total,\n  active,\n  done,\n  left,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className=\"grid grid-col-4 grid-flow-col gap-4 p-2 bg-blue-900 rounded-md m-2 text-center w-90\">\n      <div title=\"Total candite(s)\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{total}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2 text-gray-300\">\n          Total\n        </label>\n      </div>\n      <div title=\"Active candite(s)\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{active}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2 text-gray-300\">\n          Active\n        </label>\n      </div>\n      <div title=\"Candite(s) who done exam\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{done}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2 text-gray-300\">\n          Done\n        </label>\n      </div>\n      <div title=\"Candite(s) who left unfinished\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{left}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2 text-gray-300\">\n          Left\n        </label>\n      </div>\n    </div>\n  );\n};\nexport default ProctoringStatistics;\n","import React, { FC, ReactElement } from \"react\";\nimport { EventInterface, CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringEventsProps = {\n  events: EventInterface[];\n  clickOpen?: boolean;\n  clickHandler?: Function;\n  candidates: CandidateProctoringInterface[];\n};\n\nconst ProctoringEvents: FC<ProctoringEventsProps> = ({\n  events,\n  clickOpen = true,\n  clickHandler,\n  candidates,\n}): ReactElement => {\n  /* function body */\n\n  return (\n    <div className=\"mt-2 p-2 rounded-md bg-gray-900 text-white\">\n      <h1 className=\"text-xl\">Events</h1>\n      <table className=\"w-full text-left\">\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th>username</th>\n            <th>Event type</th>\n            <th>Description</th>\n            <th>Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {events.map((evnt: EventInterface, i: number) => {\n            let findUser = candidates.find(\n              (cand: CandidateProctoringInterface) =>\n                cand.user_id === evnt.user_id\n            );\n            if (findUser === undefined) {\n              return null;\n            }\n            return (\n              <tr key={i}>\n                <td\n                  className=\"text-blue-500 font-bold\"\n                  title={findUser.fname + \" \" + findUser.lname}\n                >\n                  {findUser.lname}\n                </td>\n                <td className=\"text-red-400 text-sm pl-1\">{evnt.event_type}</td>\n                <td className=\"text-red-600 text-sm\">{evnt.description}</td>\n                <td className=\"text-gray-400 pl-1\">2min</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ProctoringEvents;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { StoreState } from \"../../reducers\";\n// import VideoCardSupervisor from \"./VideoCardSupervisor\";\nimport ProctoringMainTopBar from \"../../components/ProctoringMainTopBar/ProctoringMainTopBar\";\nimport ProctoringStatistics from \"../../components/ProctoringStatistics/ProctoringStatistics\";\nimport ProctoringCandidateDetails from \"../../components/ProctoringCandidateDetails/ProctoringCandidateDetails\";\nimport ProctoringEvents from \"../../components/ProctoringEvents/ProctoringEvents\";\nimport ProctoringCandidates from \"../../components/ProctoringCandidates/ProctoringCandidates\";\nimport CenterCardSupervisor from \"../../components/CenterCardSupervisor/CenterCardSupervisor\";\nimport {\n  CandidateInterface,\n  RoomServer,\n  EventInterface,\n  OnlineCandidates,\n  Events,\n  ExamEvents,\n  CandidateProctoringInterface,\n} from \"../../interfaces\";\n// import { eventDefiner, eventDefinerInterface } from \"../../actions/proctoring\";\nimport {\n  Socket,\n  FC_GetProctoringRoom,\n  Auth,\n  Proctoring,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n} from \"../../actions\";\n// props for the component\nexport interface ProctoringOnlineSupervisorProps {\n  socket: Socket;\n  auth: Auth;\n  proctoring: Proctoring;\n  candidate: CandidateInterface;\n  server_room: RoomServer;\n  FC_GetProctoringRoom: Function;\n  FC_SetActiveCandidates: Function;\n  FC_SetOneActiveCandidate: Function;\n  FC_CandidateOffline: Function;\n  FC_ExamStartStop: Function;\n  FC_ContinueExam: Function;\n  FC_StopCandidate: Function;\n  FC_CandidateExamEvent: Function;\n}\n\nenum ActiveSideTap {\n  Candidates,\n  Events,\n}\n\ninterface AppState {\n  me: CandidateInterface;\n  loading: boolean;\n  loading_room: boolean;\n  candidates: CandidateInterface[];\n  events: EventInterface[];\n  active_side_tab: ActiveSideTap;\n  selected_candidate: string | null;\n  online_room: boolean;\n  online_candidates: OnlineCandidates[];\n  start_exam: boolean;\n  error: {\n    target: string;\n    msg: string;\n  };\n}\n\nclass _ProctoringOnlineSupervisor extends React.Component<\n  ProctoringOnlineSupervisorProps,\n  AppState\n> {\n  private myPeer: any;\n\n  constructor(props: ProctoringOnlineSupervisorProps) {\n    super(props);\n\n    this.state = {\n      loading_room: true,\n      me: this.props.candidate,\n      loading: false,\n      candidates: [],\n      events: [],\n      active_side_tab: ActiveSideTap.Events,\n      selected_candidate: null,\n      online_room: false,\n      online_candidates: [],\n      start_exam: false,\n      error: {\n        msg: \"\",\n        target: \"\",\n      },\n    };\n  }\n\n  componentDidMount = () => {\n    // load candidates\n    this.props.FC_GetProctoringRoom(\n      \"\",\n      (status: boolean, candidates: any[], msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading_room: false,\n          });\n\n          //\n\n          //* add the user to the list\n          this.props.socket.socket.emit(\n            Events.JOIN_ROOM,\n            {\n              room_id: this.props.proctoring.room.room_id,\n              user_id: this.props.auth.user.user_id,\n              peer_id: \"\",\n            },\n            (active_candidates: OnlineCandidates[]) =>\n              this.props.FC_SetActiveCandidates(active_candidates)\n          );\n        } else {\n          this.setState({\n            loading_room: false,\n            error: {\n              target: \"all\",\n              msg: msg,\n            },\n          });\n        }\n      }\n    );\n\n    // center room proctoring\n    //* New user connected\n    this.props.socket.socket.on(\n      Events.USER_CONNECTED,\n      (new_user: OnlineCandidates) => {\n        console.log({\n          new_joined_user: new_user,\n        });\n        this.props.FC_SetOneActiveCandidate(new_user.user_id);\n      }\n    );\n\n    //* remove the candidate online\n    this.props.socket.socket.on(Events.USER_DISCONNECTED, (userId: any) =>\n      this.props.FC_CandidateOffline(userId)\n    );\n\n    /**\n     * @description Exam events\n     */\n    this.props.socket.socket.on(\n      ExamEvents.CAND_EXAM_EVENT_CLIENT,\n      (event: EventInterface) => this.props.FC_CandidateExamEvent(event)\n    );\n  };\n\n  componentWillUnmount = () => {\n    // this.props.socket.socket.off(ExamEvents.START_EXAM_CLIENT);\n    this.props.socket.socket.off(Events.USER_CONNECTED);\n    this.props.socket.socket.off(Events.USER_DISCONNECTED);\n    this.props.socket.socket.off(ExamEvents.CAND_EXAM_EVENT_CLIENT);\n  };\n\n  startCenterProctoring = () => {};\n\n  sendEvent = () => {\n    console.log(\"Sending a signal\");\n    this.props.socket.socket.emit(ExamEvents.CAND_WARNING_EXAM_SERVER, {\n      user_id: this.props.auth.user.user_id,\n      room_id: this.props.server_room.room_id,\n    });\n  };\n  // ***************************************************************************\n\n  blank = (e: any) => console.log(\"clicked\");\n\n  /**\n   * chand the active tab on the side\n   * @param itm\n   * @returns\n   */\n  ActiveSIdeTabHandler = (itm: ActiveSideTap) =>\n    this.setState({ active_side_tab: itm });\n\n  SelectCandidateHandler = (value: string | null) =>\n    this.setState({ selected_candidate: value });\n\n  startExamHandler = () => {\n    this.props.socket.socket.emit(ExamEvents.START_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      data: \"start exam\",\n    });\n    this.props.FC_ExamStartStop(true);\n  };\n\n  stopExamHandler = () => {\n    this.props.socket.socket.emit(ExamEvents.STOP_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n    });\n\n    this.props.FC_ExamStartStop(false);\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  continueHandler = (user_id: string) => {\n    this.props.FC_ContinueExam(user_id);\n    this.props.socket.socket.emit(ExamEvents.CAND_CONTINUE_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n    });\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  stopCandidateHandler = (user_id: string) => {\n    this.props.socket.socket.emit(ExamEvents.CAND_STOP_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n      msg: \"Hey you are stopped by the supervisor\",\n    });\n\n    this.props.FC_StopCandidate(user_id);\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  warnCandidateHandler = (user_id: string) => {\n    this.props.socket.socket.emit(ExamEvents.CAND_WARNING_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n      msg: \"yey you are fucked\",\n    });\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  restartCandidateHandler = (user_id: string) => {\n    console.log(\"RESTART EXAM CANDIDATE\");\n    this.props.socket.socket.emit(ExamEvents.CAND_RESTART_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n      msg: \"You did it again\",\n    });\n  };\n\n  render() {\n    let activeCandidates = this.props.proctoring.candidates.filter(\n      (itm: CandidateProctoringInterface) => itm.active === true\n    );\n\n    let nonActiveCandidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === false\n    );\n\n    return (\n      <div className=\"fixed right-0 left-0 bottom-0 top-0\">\n        <ProctoringMainTopBar\n          course_title=\"12234231 - Mathematics for enginners\"\n          post_title=\"Math and physics form engi\"\n          duration=\"123\"\n          started_at=\"12:00 AM\"\n          end_at=\"14:00 PM\"\n          remaining=\"1:25:13\"\n          exam_start={this.props.proctoring.room.start_exam}\n          startExamHandler={this.startExamHandler}\n          stopExamHandler={this.stopExamHandler}\n        />\n\n        {/* this is the body */}\n        <div className=\" proctoring-body-contents h-screen text-white\">\n          <div className=\"grid --grid-col-3 lg:grid-flow-col gap-4\">\n            <div className=\"col-span-4 p-2 pt-3 h-screen overflow-y-auto\">\n              {/* pictures or images */}\n              <div className=\"\">\n                <h3 className=\"text-3xl font-bold text-blue-400 pb-1 mb-1\">\n                  Non active candidates{\" \"}\n                  <span className=\"inline-block mr-1 p-1 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                    {activeCandidates.length}\n                  </span>\n                </h3>\n\n                <div className=\"grid grid-flow-row sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-5 gap-4\">\n                  {activeCandidates.map(\n                    (candidate: CandidateProctoringInterface, i: number) => {\n                      return (\n                        <CenterCardSupervisor\n                          key={i}\n                          seat_number={i + 1}\n                          candidate={candidate}\n                          stopHandler={this.stopCandidateHandler}\n                          warningHandler={this.warnCandidateHandler}\n                          detailsHandler={this.SelectCandidateHandler}\n                          continueHandler={this.continueHandler}\n                          exam_started={this.props.proctoring.room.start_exam}\n                        />\n                      );\n                    }\n                  )}\n                </div>\n                <h3 className=\"mt-9 text-3xl font-bold text-blue-400 pb-1\">\n                  Non active candidates{\" \"}\n                  <span className=\"inline-block mr-1 p-1 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                    {nonActiveCandidates.length}\n                  </span>\n                </h3>\n                <div className=\"mt-3\">\n                  <ProctoringCandidates\n                    candidates={nonActiveCandidates}\n                    clickHandler={this.SelectCandidateHandler}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"p-2 proctoring-side-section col-span-1 transition-all ease-in-out  h-screen overflow-y-auto  border-l border-blue-500 border-opacity-30\">\n              {/* statistics */}\n              {this.state.selected_candidate === null ? (\n                <React.Fragment>\n                  <ProctoringStatistics\n                    total={43}\n                    active={43}\n                    done={43}\n                    left={43}\n                  />\n\n                  {/* candidatetabs */}\n\n                  {/* {this.state.online_room === true && ( */}\n                  <div className=\"my-2 p-1 rounded-md bg-blue-800 bg-opacity-60 grid grid-col-2 grid-flow-col gap-1\">\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Events\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Events\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Event list\n                    </button>\n\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Candidates\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Candidates\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Candidates\n                    </button>\n                  </div>\n                  {/* )} */}\n\n                  {/* events */}\n                  {this.state.active_side_tab === ActiveSideTap.Events ? (\n                    <ProctoringEvents\n                      candidates={this.props.proctoring.candidates}\n                      events={this.state.events}\n                    />\n                  ) : (\n                    <ProctoringCandidates\n                      candidates={this.props.proctoring.candidates}\n                      clickHandler={this.SelectCandidateHandler}\n                    />\n                  )}\n                </React.Fragment>\n              ) : (\n                <ProctoringCandidateDetails\n                  candidate={this.props.proctoring.candidates.find(\n                    (itm) => itm.user_id === this.state.selected_candidate\n                  )}\n                  events={this.state.events.filter(\n                    (evnt: EventInterface) =>\n                      evnt.user_id === this.state.selected_candidate\n                  )}\n                  chatHandler={this.blank}\n                  micHandler={this.blank}\n                  focusHandler={this.blank}\n                  stopHandler={this.stopCandidateHandler}\n                  restartHandler={this.restartCandidateHandler}\n                  warnHandler={this.warnCandidateHandler}\n                  closeHandler={() => this.SelectCandidateHandler(null)}\n                  home_proctoring={false}\n                  exam_started={this.props.proctoring.room.start_exam}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; auth: Auth; proctoring: Proctoring } => {\n  return { socket: socket, auth: auth, proctoring: proctoring };\n};\n\nexport const ProctoringOnlineSupervisor = connect(mapStateToProps, {\n  FC_GetProctoringRoom,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n})(_ProctoringOnlineSupervisor);\n","import React, { FC, ReactElement } from \"react\";\nimport { MdAccountCircle } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringCandidatesProps = {\n  clickHandler: Function;\n  candidates: CandidateProctoringInterface[];\n};\n\nconst ProctoringCandidates: FC<ProctoringCandidatesProps> = ({\n  clickHandler,\n  candidates,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className=\"mt-2 p-2  text-white\">\n      <h1 className=\"text-3xl font-bold text-center pb-2 border-b mb-1 border-gray-100\">\n        Candidates\n      </h1>\n      <table className=\"w-full text-left\">\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th></th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {candidates.map((cand: CandidateProctoringInterface, i: number) => (\n            <tr\n              key={i}\n              className=\"border-b mb-1 border-blue-800 border-opacity-60 hover:bg-blue-900 cursor-pointer\"\n              onClick={clickHandler.bind(this, cand.user_id)}\n            >\n              <td className=\"text-blue-500 w-5 text-left\">\n                <MdAccountCircle className=\"text-5xl\" />\n              </td>\n\n              <td className=\"text-gray-400 pl-1 py-1\">\n                <h4 className=\"font-bold text-lg p-0 m-0 text-white\">\n                  {cand.email}\n                </h4>\n                <p className=\"text-sm p-0 m-0 -mt-1\">\n                  {cand.fname} {cand.lname}\n                </p>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default ProctoringCandidates;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdNotInterested, MdWarning } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype CenterCardSupervisorProps = {\n  seat_number: number;\n  candidate: CandidateProctoringInterface;\n  warningHandler: Function;\n  stopHandler: Function;\n  detailsHandler: Function;\n  continueHandler: Function;\n  exam_started: boolean;\n};\n\nconst CenterCardSupervisor: FC<CenterCardSupervisorProps> = ({\n  seat_number,\n  candidate,\n  warningHandler,\n  stopHandler,\n  detailsHandler,\n  continueHandler,\n  exam_started,\n}): ReactElement => {\n  /* function body */\n  let color = candidate?.stopped === true ? \"red\" : \"blue\";\n  return (\n    <div\n      className={`bg-${color}-900 bg-opacity-50 hover:bg-opacity-100 cursor-pointer border-${color}-400 border p-2 rounded-md`}\n      onClick={detailsHandler.bind(this, candidate.user_id)}\n    >\n      <div className=\"text-center\">\n        <span className={`text-${color}-200`}>Seat number</span>\n        <h1 className=\"text-5xl font-bold\">{seat_number}</h1>\n      </div>\n\n      <div className={`mt-1 border-t border-${color}-500 pt-2`}>\n        <h4 className={`text-xs text-${color}-400`}>Full names</h4>\n        <h4 className=\"text-sm font-bold\">\n          {candidate.fname} {candidate.lname}\n        </h4>\n      </div>\n\n      {exam_started === true && (\n        <div className=\"mt-2\">\n          {candidate.stopped === false ? (\n            <button\n              onClick={warningHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-yellow-300\"\n            >\n              <MdWarning className=\"inline\" /> Warn\n            </button>\n          ) : (\n            <button\n              onClick={continueHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-green-400\"\n            >\n              <MdWarning className=\"inline\" /> Condinue\n            </button>\n          )}\n          <button\n            onClick={stopHandler.bind(this, candidate.user_id)}\n            className=\"px-2 text-sm py-1 rounded-md text-white bg-red-700 ml-1\"\n          >\n            <MdNotInterested className=\"inline\" /> Stop\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default CenterCardSupervisor;\n"],"sourceRoot":""}