{"version":3,"sources":["components/Modal/Modal.tsx","components/ProctoringCandidateDetails/ProctoringCandidateDetails.tsx","components/ProctoringMainTopBar/RoomDetailsModal.tsx","components/ProctoringMainTopBar/ProctoringMainTopBar.tsx","components/ProctoringStatistics/ProctoringStatistics.tsx","components/ProctoringEvents/ProctoringEvents.tsx","components/ProctoringCandidates/ProctoringCandidates.tsx","containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor.tsx","components/CenterCardSupervisor/CenterCardSupervisor.tsx","components/Attendance/Attendance.tsx","components/AddTimeToCandidateModal/AddTimeToCandidateModal.tsx","containers/ProctoringCenter/ProctoringCenter.tsx"],"names":["Themes","ModalMarginTop","ModalSize","Modal","props","themeColor","title","backDrop","theme","close","backDropClose","widthSizeClass","displayClose","padding","body","footer","primary","secondary","danger","success","warning","onClick","className","undefined","marginTop","none","style","width","maxHeight","height","maxWidth","overflowY","margin","zIndex","default","children","ActiveTap","RoomDetailsModal","active_candidate","room","exam_start","leaveRoomHandler","deleteRoomHandler","value","province_name","district_name","center_name","room_number","map","i","ProctoringMainTopBar","course_title","post_title","duration","started_at","startExamHandler","stopExamHandler","focus_mode","focusToggle","leaveRoom","deleteRoom","ExamDone","useState","info_modal","setInfo_modal","htmlFor","CountDown","start_time","duration_min","timeout","returnString","labels","ProctoringStatistics","candidates","total_candidates","length","active_candidates","filter","itm","active","done_candidates","done","remain_candidate","stopped","removed","removed_candidate","stopped_candidate","left_candidates","joined","non_joined_candidates","label","ProctoringEvents","events","clickOpen","clickHandler","loading","selected","setSelected","colSpan","evnt","findUser","find","cand","user_id","event_id","event_type_id","createdAt","description","fname","lname","email","ProctoringCandidateDetails","candidate","chatHandler","micHandler","focusHandler","stopHandler","restartHandler","warnHandler","closeHandler","home_proctoring","exam_started","removeInExam","Details","setActive","bind","Events","position_title","course_name","ProctoringCandidates","show_title","large","defaultProps","ActiveSideTap","CenterCardSupervisor","warningHandler","detailsHandler","continueHandler","exam_done","addMinutes","color","seat_number","added_minutes","_Attendance","submitHandler","e","preventDefault","state","group_name","setState","error","target","msg","selected_list","createAttendance","list","name","create_attendance","selected_candidate","search","resultCandidates","this","proctoring","all_candidates","n_id","district","phone_number","course_code","onSubmit","type","id","placeholder","maxLength","required","onChange","indexOf","candidateFind","el","React","Component","Attendance","connect","auth","AddTimeToCandidateModal","addMinutesHandler","minutes","setMinutes","reason","setReason","setError","min","max","rows","_ProctoringOnlineSupervisor","myPeer","componentDidMount","exam","room_id","course_id","position_id","console","log","FC_GetProctoringRoom","status","loading_room","socket","emit","GET_ROOM_INFO_SERVER","data","FC_RoomNotFoundOnline","FC_RoomDetailsOnline","startListeningToEvents","JOIN_ROOM","user","peer_id","supper","on","NEW_USER_JOINED_CLIENT","FC_SetOneActiveCandidate","TIME_OUT_CLIENT","event","FC_CandidateTimeOut","USER_DISCONNECTED","userId","FC_CandidateOffline","FC_SaveEvent","application_session_id","application_session","_id","done_by","CANDIDATE_LEFT_EXAM_EVENT","exam_id","time","Date","toString","group_id","EXAM_DONE_CLIENT","FC_CandidateDoneExamCenter","CAND_EXAM_EVENT_CLIENT","FC_CandidateExamEvent","FC_LoadRoomEvents","events_loading","off","USER_CONNECTED","FC_ClearExamToRoomProctoring","startCenterProctoring","blank","ActiveSIdeTabHandler","active_side_tab","SelectCandidateHandler","window","alert","confirm","START_EXAM_SERVER","FC_ExamStartStop","STOP_EXAM_SERVER","FC_ContinueExam","CAND_CONTINUE_EXAM_SERVER","CAND_CONTINUE_EXAM_CLIENT","stopCandidateHandler","prompt","CAND_STOP_EXAM_SERVER","CAND_STOP_EXAM_CLIENT","FC_StopCandidate","ejectCandidateHandler","CAND_REMOVE_EXAM_SERVER","CAND_REMOVE_EXAM_CLIENT","FC_CandidateRemoveExam","warnCandidateHandler","CAND_WARNING_EXAM_SERVER","restartCandidateHandler","CAND_RESTART_EXAM_SERVER","prevState","CREATE_ROOM_SERVER","DELETE_ROOM_SERVER","addMinutesModal","add_minutes","event_data","EventsLabels","ADD_TIME","ADD_TIME_TO_CANDIDATE_SERVER","room_found","online_room","online_candidates","start_exam","activeCandidates","nonActiveCandidates","room_not_found","FC_ExamDone","candidate_loaded","Spinner","Fragment","Candidates","ProctoringOnlineSupervisor","FC_SetActiveCandidates","_ProctoringCenter","user_access","FC_RoomDetails","errorMsg","session","FC_ExamsDetailsData","exams_error","exams_error_msg","loaded","room_exams","key","examFound","exams_list","exams","exm","course","exam_date","FC_LoadExamToRoomProctoring","video_support","end_time","period_id","exam_status","ProctoringCenter"],"mappings":"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","file":"static/js/41.f7fdb95d.chunk.js","sourcesContent":["/**\n * @description Modal design\n * @done_by Niyongabo\n */\nimport { MdClose } from \"react-icons/md\";\n\nexport enum Themes {\n  default = \"default\",\n  primary = \"primary\",\n  secondary = \"secondary\",\n  danger = \"danger\",\n  success = \"success\",\n  warning = \"warning\",\n}\n\nexport enum ModalMarginTop {\n  none = \"top-0\",\n  small = \"top-28\",\n  medium = \"top-1/3\",\n  large = \"top-1/2\",\n  extra = \"top-2/3\",\n}\n\nexport enum ModalSize {\n  small = \"max-w-sm\",\n  medium = \"max-w-screen-sm\",\n  large = \"max-w-screen-md\",\n  extraLarge = \"max-w-screen-lg\",\n  maxWidth = \"max-w-screen h-full\",\n}\n\ninterface ModalInterface {\n  title?: any;\n  backDrop: boolean;\n  theme: Themes;\n  close: Function;\n  backDropClose: boolean;\n  footer?: any;\n  children: any;\n  widthSizeClass: ModalSize;\n  displayClose: boolean;\n  padding: { title?: boolean; body?: boolean; footer?: boolean };\n  marginTop?: ModalMarginTop;\n}\n\nconst Modal = (props: ModalInterface): JSX.Element => {\n  const {\n    title,\n    backDrop,\n    theme,\n    close,\n    backDropClose,\n    widthSizeClass,\n    displayClose,\n    padding = { title: true, body: true, footer: true },\n  }: ModalInterface = props;\n\n  let themeColor: string;\n\n  switch (theme) {\n    case Themes.primary:\n      themeColor = \"blue-500\";\n      break;\n    case Themes.secondary:\n      themeColor = \"gray-300\";\n      break;\n    case Themes.danger:\n      themeColor = \"red-500\";\n      break;\n    case Themes.success:\n      themeColor = \"green-500\";\n      break;\n    case Themes.warning:\n      themeColor = \"yellow-500\";\n      break;\n    default:\n      themeColor = \"white\";\n      break;\n  }\n  return (\n    <>\n      <div onClick={(): void => backDropClose && close()} className={`animate__animated animate__fadeIn animate__faster modal fixed bg-black bg-opacity-${backDrop === true ? '60' : '0'}`}></div>\n      <div className={`fixed items-center justify-items-center ${props.marginTop === undefined ? ModalMarginTop.none : props.marginTop} left-0 right-0 bottom-0 bg-white rounded shadow-xl self-center ${widthSizeClass} animate__animated ${props.marginTop !== undefined && props.marginTop !== ModalMarginTop.none ? \"animate__fadeInUp\" : \"animate__zoomIn\"} animate__faster`} style={{width: '100%', maxHeight: '99vh', height: `${widthSizeClass === ModalSize.maxWidth ? props.marginTop === undefined ? \"100%\" : \"unset\" : \"fit-content\"}`, overflowY: 'auto', margin: 'auto', zIndex: 99999999}}>\n        <div className={`flex justify-between bg-${themeColor} ${padding.title === true ? \"py-4 px-4\" : \"\" } rounded-t text-${theme === Themes.default || theme === Themes.secondary ? \"black\" : \"white\"}`}>\n          {!title || title === \"\" ? <div></div> : (<h4 className={`text-lg font-bold `}>{title}</h4>)}\n          {displayClose === false ? \"\" : <div className=\"hover:text-red-600 hover:bg-red-100 rounded-full p-1 h-8 w-8\"><MdClose className=\"cursor-pointer font-extrabold text-2xl\" onClick={():void => close()} /></div>}\n        </div>\n        <div\n          className={`space-x-3 ${padding.body === true ? \"py-4 px-4\" : \"\"}`}\n        >\n          <div>{props.children !== \"\" ? props.children : \"\"}</div>\n        </div>\n        {props.footer !== undefined && props.footer !== \"\" ? (\n          <div\n            className={`flex float-right ${\n              padding.footer === true ? \"py-4 px-4\" : \"\"\n            }`}\n          >\n            {props.footer}\n          </div>\n        ) : ( \n          \"\"\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","import React, { FC, ReactElement, useState } from \"react\";\nimport { CandidateProctoringInterface, EventInterface } from \"../../interfaces\";\nimport ProctoringEvents from \"../ProctoringEvents/ProctoringEvents\";\nimport {\n  MdAccountCircle,\n  MdArrowBack,\n  MdVolumeUp,\n  MdChat,\n  MdFullscreen,\n  MdNotInterested,\n  MdReplay,\n  MdWarning,\n} from \"react-icons/md\";\n\ntype ProctoringCandidateDetailsProps = {\n  candidate: CandidateProctoringInterface | undefined;\n  chatHandler: Function;\n  micHandler: Function;\n  focusHandler: Function;\n  stopHandler: Function;\n  restartHandler: Function;\n  warnHandler: Function;\n  closeHandler: Function;\n  removeInExam: Function;\n  events: EventInterface[];\n  home_proctoring: boolean;\n  exam_started: boolean;\n  focus_mode: boolean;\n};\n\nenum ActiveTap {\n  Details,\n  Events,\n}\n\nconst ProctoringCandidateDetails: FC<ProctoringCandidateDetailsProps> = ({\n  candidate,\n  chatHandler,\n  micHandler,\n  focusHandler,\n  stopHandler,\n  restartHandler,\n  warnHandler,\n  closeHandler,\n  events,\n  home_proctoring,\n  exam_started,\n  focus_mode,\n  removeInExam,\n}): ReactElement => {\n  const [active, setActive] = useState(ActiveTap.Details);\n\n  if (candidate === undefined) {\n    return (\n      <div className=\"p-4 text-center bg-white\">\n        <h1 className=\"text-3xl text-gray-800\">Oops!!</h1>\n        <p className=\"text-3xl text-gray-700\">\n          The selected candidate can't be found{\" \"}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-1\">\n      <div\n        className={`p-2 border-rounded ${\n          focus_mode === true\n            ? \"bg-blue-900 text-white\"\n            : \"bg-gray-500 text-white\"\n        }  rounded-md flex items-baseline `}\n      >\n        <button\n          onClick={() => closeHandler()}\n          className=\"p-1 block bg-blue-900 bg-opacity-70 rounded-md mr-2 font-bold text-1xl\"\n        >\n          <MdArrowBack />\n        </button>\n        <h3 className=\"text-center -mt-1 mb-0 pb-0 text-1xl font-bold block text-blue-500--\">\n          User details\n        </h3>\n      </div>\n      <div className=\"p-2 text-center\">\n        <MdAccountCircle className=\"text-9xl text-center mx-auto\" />\n\n        <h1\n          className={`text-xl  ${\n            focus_mode === true ? \"text-white\" : \"text-gray-800\"\n          } font-bold`}\n        >\n          {candidate.fname} {candidate.lname}\n        </h1>\n        <h2\n          className={` ${\n            focus_mode === true ? \"text-gray-400\" : \"text-gray-800\"\n          }  text-md`}\n        >\n          {candidate.email}\n        </h2>\n        <div className=\"p-1\">\n          {candidate.joined === true && (\n            <span className=\"inline-block text-sm bg-blue-500 text-white px-1 rounded-md m-0.5\">\n              #Joined\n            </span>\n          )}\n          {candidate.active === true && (\n            <span className=\"inline-block text-sm bg-green-500 text-white px-1 rounded-md m-0.5\">\n              #Active\n            </span>\n          )}\n          {candidate.removed === true && (\n            <span className=\"inline-block text-sm bg-red-500 text-white  px-1 rounded-md m-0.5\">\n              #Removed\n            </span>\n          )}\n          {candidate.done === true && (\n            <span className=\"inline-block text-sm bg-yellow-500 text-white px-1 rounded-md m-0.5\">\n              #Done\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"my-2 py-1 rounded grid grid-cols-2 gap-1\">\n        {/* buttons start here */}\n\n        {exam_started === true && candidate.active === true && (\n          <>\n            {home_proctoring === true && (\n              <>\n                <button\n                  onClick={micHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdVolumeUp className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Mic</span>\n                </button>\n\n                <button\n                  onClick={chatHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdChat className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Chat</span>\n                </button>\n\n                <button\n                  onClick={focusHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdFullscreen className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-md p-0 block -mt-0\">Focus</span>\n                </button>\n              </>\n            )}\n\n            {candidate.done === false && (\n              <button\n                onClick={stopHandler.bind(this, candidate.user_id)}\n                className=\"proctoring-action-button\"\n              >\n                <MdNotInterested className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-md p-0 block -mt-0\">Stop</span>\n              </button>\n            )}\n\n            <button\n              onClick={restartHandler.bind(this, candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdReplay className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-md p-0 block -mt-0\">Restart</span>\n            </button>\n\n            {candidate.done === false && (\n              <button\n                title=\"give a warning\"\n                onClick={() => warnHandler(candidate.user_id)}\n                className=\"proctoring-action-button\"\n              >\n                <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-md p-0 block -mt-0\">Warn</span>\n              </button>\n            )}\n\n            {candidate.done === false && (\n              <button\n                title=\"Remove into in exam\"\n                onClick={() => removeInExam(candidate.user_id)}\n                className=\"text-center rounded-md p-1 border-2 border-red-600 hover:bg-red-600 text-white  hover:text-white bg-red-500\"\n              >\n                <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-md p-0 block -mt-0\">\n                  Remove into exam\n                </span>\n              </button>\n            )}\n          </>\n        )}\n      </div>\n\n      <div className=\"my-1 bg-blue-900 bg-opacity-40 rounded-md p-1 mt-2 grid grid-cols-2 gap-2 text-sm\">\n        <button\n          onClick={() => setActive(ActiveTap.Details)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Details\n              ? \"bg-blue-600 border-2 border-blue-300\"\n              : \"bg-blue-300\"\n          }`}\n        >\n          candidate\n        </button>\n\n        <button\n          onClick={() => setActive(ActiveTap.Events)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Events\n              ? \"bg-blue-600 border-2 border-blue-300\"\n              : \"bg-blue-300\"\n          }`}\n        >\n          Events\n        </button>\n      </div>\n\n      {active === ActiveTap.Details ? (\n        <div\n          className={`mt-2 ${\n            focus_mode === true ? \"text-white\" : \"text-gray-900\"\n          } border-blue-400`}\n        >\n          <h2 className=\" font-bold text-2xl mb-1 opacity-70 text-center border-b\">\n            User information\n          </h2>\n          <div className=\"p-2 rounded-md border   border-opacity-20\">\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Username:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">First name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.fname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Last name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.lname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">email:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Position:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.position_title}\n              </h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Course name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.course_name}\n              </h4>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ProctoringEvents\n          candidates={[candidate]}\n          events={events}\n          focus_mode={focus_mode}\n          loading={false}\n        />\n      )}\n    </div>\n  );\n};\nexport default ProctoringCandidateDetails;\n","import React, { FC, Fragment, ReactElement } from \"react\";\nimport { MdClose, MdDeleteForever, MdLogout } from \"react-icons/md\";\nimport { RoomServer } from \"../../interfaces\";\n\ntype RoomDetailsModalProps = {\n  close: Function;\n  active_candidate: number;\n  room: RoomServer;\n  exam_start: boolean;\n  leaveRoomHandler: Function;\n  deleteRoomHandler: Function;\n};\n\nconst RoomDetailsModal: FC<RoomDetailsModalProps> = ({\n  close,\n  active_candidate,\n  room,\n  exam_start,\n  leaveRoomHandler,\n  deleteRoomHandler,\n}): ReactElement => {\n  return (\n    <Fragment>\n      <div\n        className=\"fixed bg-black bg-opacity-10 top-0 bottom-0 right-0 left-0 animate__animated animate__fadeIn\"\n        onClick={() => close(false)}\n      ></div>\n      <div className=\"fixed w-80 shadow-lg bg-white rounded top-16 mt-2 right-2 animate__animated animate__zoomIn animate__faster\">\n        <div className=\"flex items-center border-b\">\n          <div className=\"flex-1 pl-2 text-xl font-bold text-gray-400\">\n            <h4>Room details</h4>\n          </div>\n\n          <div className=\"\">\n            <button\n              onClick={() => close(false)}\n              className=\"p-2 hover:bg-red-700 hover:text-white rounded text-2xl\"\n            >\n              <MdClose />\n            </button>\n          </div>\n        </div>\n        <div className=\"p-2 \">\n          <div className=\"border-separate p-2\">\n            {[\n              { title: \"Province\", value: room.province_name },\n              { title: \"District\", value: room.district_name },\n              { title: \"Center name\", value: room.center_name },\n              { title: \"Group\", value: room.room_number },\n              { title: \"Joined candidates\", value: active_candidate },\n            ].map(({ title, value }, i) => (\n              <div key={i} className=\"flex\">\n                <span className=\"text-gray-500\">{title}: </span>\n                <b className=\"text-right inline-block\"> {value}</b>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"p-2 flex\">\n            <button\n              onClick={() => leaveRoomHandler()}\n              className=\"btn bg-red-700 hover:bg-red-800 text-white w-full mr-2\"\n              title=\"Leave room\"\n            >\n              <MdLogout className=\"inline-block\" /> Leave\n            </button>\n            {exam_start === false && active_candidate <= 1 && (\n              <button\n                onClick={() => deleteRoomHandler()}\n                className=\"btn bg-gray-500 hover:bg-red-500 text-white w-full\"\n                title=\"Delete room\"\n              >\n                <MdDeleteForever className=\"inline-block\" /> Delete\n              </button>\n            )}\n          </div>\n        </div>\n      </div>{\" \"}\n    </Fragment>\n  );\n};\nexport default RoomDetailsModal;\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdFullscreen, MdFullscreenExit, MdInfoOutline } from \"react-icons/md\";\nimport { CountDown } from \"../CountDown/CountDown\";\nimport { RoomServer } from \"../../interfaces\";\nimport RoomDetailsModal from \"./RoomDetailsModal\";\n// import { Link } from \"react-router-dom\";\ntype ProctoringMainTopBarProps = {\n  course_title: string;\n  post_title: string;\n  duration: number;\n  started_at: string | null;\n  exam_start: boolean;\n  startExamHandler: Function;\n  stopExamHandler: Function;\n  focus_mode: boolean;\n  focusToggle: Function;\n  leaveRoom: Function;\n  room: RoomServer;\n  active_candidate: number;\n  deleteRoom: Function;\n  ExamDone: Function;\n};\n\nconst ProctoringMainTopBar: FC<ProctoringMainTopBarProps> = ({\n  course_title,\n  post_title,\n  duration,\n  started_at,\n  // end_at,\n  exam_start,\n  startExamHandler,\n  stopExamHandler,\n  focus_mode,\n  focusToggle,\n  leaveRoom,\n  room,\n  active_candidate,\n  deleteRoom,\n  ExamDone,\n}): ReactElement => {\n  const [info_modal, setInfo_modal] = useState(false);\n  return (\n    <Fragment>\n      <div\n        className={`${\n          focus_mode === true\n            ? \"border-blue-500 border-opacity-30 text-white proctoring-evaluator-navigation\"\n            : \"bg-white rounded-t-sm  rounded-md\"\n        } py-2 px-3 border-b  grid grid-flow-row md:grid-cols-1 lg:grid-cols-2 transition-all ease-in-out`}\n      >\n        <div className=\"flex\">\n          <button\n            onClick={() => focusToggle()}\n            className={`px-2 ${\n              focus_mode === true\n                ? \"bg-blue-900 hover:bg-blue-500 \"\n                : \"bg-blue-100 hover:bg-blue-500 \"\n            } mr-2  rounded-md  hover:text-white`}\n          >\n            {focus_mode === true ? (\n              <Fragment>\n                <MdFullscreenExit className=\"text-3xl mx-auto -mb-2\" />\n                <span className=\"text-xs inline-block pt-1\">Un-Focus</span>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <MdFullscreen className=\"text-3xl mx-auto -mb-2\" />\n                <span className=\"text-xs inline-block pt-1\">Focus</span>\n              </Fragment>\n            )}\n          </button>\n          <div className=\"flex items-center\">\n            <div className=\"\">\n              <label\n                htmlFor=\"\"\n                className={`${\n                  focus_mode === true ? \"text-gray-200\" : \"\"\n                } text-sm m-0`}\n              >\n                {post_title}\n              </label>\n              <h3 className=\"text-white- text-lg -mt-2 font-bold\">\n                {course_title}\n              </h3>\n            </div>\n          </div>\n        </div>\n        <div className=\"text-red lg:pt-0 sm:pt-3 text-right md:text-left lg:text-right\">\n          <div className=\"grid grid-cols-5 gap-4 text-left\">\n            <div>\n              {exam_start === true && (\n                <>\n                  <label className=\"text-gray-400 text-sm\">Duration</label>\n                  <h2 className=\"text-xl font-bold\">{duration}</h2>\n                </>\n              )}\n            </div>\n            <div>\n              {exam_start === true && (\n                <>\n                  <label className=\"text-gray-400 text-sm\">Started at:</label>\n                  {/* <h2 className=\"text-xl font-bold\">{started_at}</h2> */}\n                </>\n              )}\n            </div>\n\n            <div className=\"text-3xl -mt-3 \">\n              {exam_start === true &&\n                started_at !== null &&\n                started_at !== \"\" && (\n                  <CountDown\n                    start_time={started_at}\n                    duration_min={duration}\n                    timeout={() => ExamDone(true)}\n                    returnString={false}\n                    labels\n                  />\n                )}\n            </div>\n            <div className=\"flex items-center pl-2\">\n              <button\n                onClick={() => setInfo_modal(true)}\n                className=\"btn bg-gray-100 text-gray-900 w-full hover:bg-gray-500 hover:text-white\"\n                title=\"Room details\"\n              >\n                <MdInfoOutline className=\"inline-block\" /> Room\n              </button>\n            </div>\n\n            <div className=\"flex items-center\">\n              {exam_start === false ? (\n                <button\n                  onClick={() => startExamHandler()}\n                  className=\"btn bg-green-500 text-white w-full\"\n                  title=\"Start Exam\"\n                >\n                  Start\n                </button>\n              ) : (\n                <button\n                  onClick={() => stopExamHandler()}\n                  className=\"btn bg-red-600 text-white w-full\"\n                  title=\"stop Exam\"\n                >\n                  Stop\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {info_modal && (\n        <RoomDetailsModal\n          close={setInfo_modal}\n          active_candidate={active_candidate}\n          room={room}\n          exam_start={exam_start}\n          leaveRoomHandler={leaveRoom}\n          deleteRoomHandler={deleteRoom}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default ProctoringMainTopBar;\n","import React, { FC, ReactElement } from \"react\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringStatisticsProps = {\n  focus_mode: boolean;\n  candidates: CandidateProctoringInterface[];\n};\n\nconst ProctoringStatistics: FC<ProctoringStatisticsProps> = ({\n  focus_mode,\n  candidates,\n}): ReactElement => {\n  let total_candidates = candidates.length;\n  let active_candidates = candidates.filter(\n    (itm) => itm.active === true\n  ).length;\n  let done_candidates = candidates.filter((itm) => itm.done === true).length;\n  let remain_candidate = candidates.filter(\n    (itm) =>\n      itm.done === false &&\n      itm.active === true &&\n      itm.stopped === false &&\n      itm.removed === false\n  ).length;\n  let removed_candidate = candidates.filter(\n    (itm) => itm.removed === true\n  ).length;\n  let stopped_candidate = candidates.filter(\n    (itm) => itm.stopped === true && itm.done === false\n  ).length;\n  let left_candidates = candidates.filter(\n    (itm) => itm.active === false && itm.done === false && itm.joined === true\n  ).length;\n  let non_joined_candidates = candidates.filter(\n    (itm) => itm.joined === false\n  ).length;\n\n  /* function body */\n  return (\n    <div\n      className={`grid grid-cols-4 gap-2 p-3 border-separate ${\n        focus_mode === true\n          ? \"bg-blue-900 text-gray-300\"\n          : \"bg-white  shadow-lg border \"\n      } rounded-md my-2 text-center w-90`}\n    >\n      {[\n        {\n          title: \"Total\",\n          label: \"Total candidates\",\n          value: total_candidates,\n        },\n        {\n          title: \"Active\",\n          label: \"Active candidate(s)\",\n          value: active_candidates,\n        },\n        {\n          title: \"Done\",\n          label: \"Candidate(s) who done exam\",\n          value: done_candidates,\n        },\n        {\n          title: \"Left\",\n          label: \"Candidate(s) who left unfinished\",\n          value: left_candidates,\n        },\n        {\n          title: \"Removed\",\n          label: \"Removed candidate(s)\",\n          value: removed_candidate,\n        },\n        {\n          title: \"Stopped\",\n          label: \"Stopped candidate(s)\",\n          value: stopped_candidate,\n        },\n        {\n          title: \"Remain\",\n          label: \"Remain candidate(s)\",\n          value: remain_candidate,\n        },\n        {\n          title: \"Non Joined\",\n          label: \"Non joined exam(s)\",\n          value: non_joined_candidates,\n        },\n      ].map(\n        (\n          {\n            title,\n            label,\n            value,\n          }: { title: string; label: string; value: number },\n          i\n        ) => (\n          <div key={i} title={label} className=\"border rounded-md py-1\">\n            <h1 className=\"text-2xl font-bold -mb-1 p-0 \">{value}</h1>\n            <label htmlFor=\"\" className=\"text-sm -mt-2\">\n              {title}\n            </label>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\nexport default ProctoringStatistics;\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdClose } from \"react-icons/md\";\nimport { EventInterface, CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringEventsProps = {\n  events: EventInterface[];\n  clickOpen?: boolean;\n  clickHandler?: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  loading: boolean;\n};\n\nconst ProctoringEvents: FC<ProctoringEventsProps> = ({\n  events,\n  clickOpen = true,\n  clickHandler,\n  candidates,\n  focus_mode,\n  loading,\n}): ReactElement => {\n  /* function body */\n  const [selected, setSelected] = useState(\"\");\n\n  return (\n    <div\n      className={`mt-2 p-2 ${\n        focus_mode === true\n          ? \"bg-gray-900 text-white\"\n          : \"bg-gray-50 shadow-sm border\"\n      } rounded-md `}\n    >\n      <h1 className=\"text-xl\">Events</h1>\n      {loading === true ? (\n        <div className=\"p-2\">\n          <h4 className=\"block animate__animated animate__fadeIn animate__infinite p-3 text-center\">\n            Loading events...\n          </h4>\n        </div>\n      ) : (\n        <table className=\"w-full text-left\">\n          <thead className=\"text-sm text-gray-500\">\n            <tr>\n              <th>#</th>\n              <th>username</th>\n              <th>Event type</th>\n              <th>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {events.length === 0 ? (\n              <tr>\n                <td className=\"p-3 py-8 text-center\" colSpan={4}>\n                  <h2 className=\"font-bold text-2xl\">No events found</h2>\n                  <h2 className=\"\">No event has been committed yet</h2>\n                </td>\n              </tr>\n            ) : (\n              events.map((evnt: EventInterface, i: number) => {\n                let findUser = candidates.find(\n                  (cand: CandidateProctoringInterface) =>\n                    cand.user_id === evnt.user_id\n                );\n\n                return (\n                  <Fragment key={i}>\n                    {selected === evnt.event_id ? (\n                      <tr>\n                        <td\n                          colSpan={4}\n                          className=\"animate__animated animate__zoomIn animate__faster\"\n                        >\n                          <div className=\"overflow-hidden my-1 rounded border bg-blue-900 bg-opacity-30 border-blue-500\">\n                            <div className=\"px-3  flex items-center bg-blue-900 bg-opacity-30\">\n                              <h2 className=\"flex-1 m-0 text-xl py-2 opacity-70\">\n                                Event <b>{i + 1}</b> details\n                              </h2>\n                              <button\n                                onClick={() => setSelected(\"\")}\n                                className=\"hover:bg-red-600 text-2xl p-1.5 rounded-md\"\n                              >\n                                <MdClose />\n                              </button>\n                            </div>\n                            <div className=\"p-2\">\n                              <p>\n                                <span className=\"opacity-70\">Event type: </span>\n                                <b>{evnt.event_type_id}</b>\n                              </p>\n                              <p>\n                                <span className=\"opacity-70\">Time: </span>\n                                <b>{evnt.createdAt}</b>\n                              </p>\n                              <p className=\"p-1 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                                <span className=\"opacity-70 block\">\n                                  Description:{\" \"}\n                                </span>\n                                <b>{evnt.description}</b>\n                              </p>\n                              {findUser !== undefined && (\n                                <div className=\"p-1 mt-2 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                                  <p>\n                                    <span className=\"opacity-70\">Names: </span>\n                                    <b>\n                                      {findUser.fname} {findUser.lname}\n                                    </b>\n                                  </p>\n                                  <p>\n                                    <span className=\"opacity-70\">Email: </span>\n                                    <b>{findUser.email}</b>\n                                  </p>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                    ) : (\n                      <tr\n                        onClick={() => setSelected(evnt.event_id)}\n                        className=\"p-2 rounded-md hover:bg-blue-900 bg-opacity-30 cursor-pointer\"\n                      >\n                        <td className=\"px-1 opacity-95\">{i + 1}</td>\n                        <td className=\"text-blue-500 font-bold\">\n                          {findUser !== undefined ? (\n                            <span\n                              title={findUser?.fname + \" \" + findUser?.lname}\n                            >\n                              {findUser?.lname}\n                            </span>\n                          ) : (\n                            <span className=\"opacity-50\">System/Admin</span>\n                          )}\n                        </td>\n\n                        <td className=\"text-red-400 text-sm pl-1\">\n                          {evnt.event_type_id}\n                        </td>\n\n                        <td className=\"text-gray-400 pl-1\">2min</td>\n                      </tr>\n                    )}\n                  </Fragment>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default ProctoringEvents;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdAccountCircle } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringCandidatesProps = {\n  clickHandler: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  show_title: boolean;\n  large: boolean;\n};\n\nconst ProctoringCandidates: FC<ProctoringCandidatesProps> = ({\n  clickHandler,\n  candidates,\n  focus_mode,\n  show_title,\n  large,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className={`mt-2 ${focus_mode === true ? \"text-white p-2 \" : \"\"}`}>\n      {show_title === true && (\n        <h1 className=\"text-3xl font-bold text-center pb-2 border-b mb-1 border-gray-100\">\n          Candidates\n        </h1>\n      )}\n      <table\n        className={`w-full text-left ${\n          focus_mode === true ? \"\" : \"bg-white rounded-md\"\n        }  p-2\"`}\n      >\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th></th>\n            <th></th>\n            {large === true && <th></th>}\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {candidates.map((cand: CandidateProctoringInterface, i: number) => (\n            <tr\n              key={i}\n              className={`group border-b mb-1 ${\n                focus_mode === true\n                  ? \"border-blue-800 border-opacity-60 hover:bg-blue-900\"\n                  : \"border-gray-200 border-opacity-60 hover:bg-blue-100\"\n              }  cursor-pointer`}\n              onClick={clickHandler.bind(this, cand.user_id)}\n            >\n              <td\n                className={`${\n                  focus_mode === true ? \"text-blue-500\" : \"text-gray-400\"\n                }  w-5 text-left`}\n              >\n                <MdAccountCircle\n                  className={large === true ? \"text-3xl\" : \"text-5xl\"}\n                />\n              </td>\n\n              <td className=\"text-gray-400 pl-1 py-1\">\n                <h4\n                  className={`font-bold ${\n                    large === true ? \"text-md\" : \"text-lg\"\n                  }  p-0 m-0 ${\n                    focus_mode === true ? \"text-white\" : \"text-gray-900\"\n                  }`}\n                >\n                  {cand.fname} {cand.lname}\n                </h4>\n                {large === false && (\n                  <p className=\"text-sm p-0 m-0 -mt-1\">{cand.email}</p>\n                )}\n              </td>\n              {large === true && (\n                <td className=\"\">\n                  <span className=\"text-sm p-0 m-0 -mt-1\">{cand.email}</span>\n                </td>\n              )}\n              <td\n                className={`text-right group-hover:opacity-100 opacity-40 ${\n                  large === false\n                    ? \"grid grid-cols-2 text-center w-10 pt-2\"\n                    : \"\"\n                } md:w-auto`}\n              >\n                {cand.joined === true && (\n                  <span className=\"inline-block text-xs bg-blue-300 px-1 rounded-md m-0.5\">\n                    #Joined\n                  </span>\n                )}\n                {cand.active === true && (\n                  <span className=\"inline-block text-xs bg-green-300 px-1 rounded-md m-0.5\">\n                    #Active\n                  </span>\n                )}\n                {cand.removed === true && (\n                  <span className=\"inline-block text-xs bg-red-300 text-white px-1 rounded-md m-0.5\">\n                    #Removed\n                  </span>\n                )}\n                {cand.done === true && (\n                  <span className=\"inline-block text-xs bg-yellow-300 px-1 rounded-md m-0.5\">\n                    #Done\n                  </span>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nProctoringCandidates.defaultProps = {\n  large: false,\n};\n\nexport default ProctoringCandidates;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { StoreState } from \"../../reducers\";\nimport ProctoringMainTopBar from \"../../components/ProctoringMainTopBar/ProctoringMainTopBar\";\nimport ProctoringStatistics from \"../../components/ProctoringStatistics/ProctoringStatistics\";\nimport ProctoringCandidateDetails from \"../../components/ProctoringCandidateDetails/ProctoringCandidateDetails\";\nimport ProctoringEvents from \"../../components/ProctoringEvents/ProctoringEvents\";\nimport ProctoringCandidates from \"../../components/ProctoringCandidates/ProctoringCandidates\";\nimport CenterCardSupervisor from \"../../components/CenterCardSupervisor/CenterCardSupervisor\";\nimport {\n  EventInterface,\n  OnlineCandidates,\n  Events,\n  CandidateProctoringInterface,\n  LiveServer__Room,\n  EventsLabels,\n} from \"../../interfaces\";\nimport {\n  Socket,\n  FC_GetProctoringRoom,\n  Auth,\n  Proctoring,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_LoadRoomEvents_Interface,\n  FC_CandidateRemoveExam,\n  FC_RoomDetailsOnline,\n  FC_RoomNotFoundOnline,\n  FC_CandidateDoneExamCenter,\n  FC_ExamDone,\n  FC_CandidateTimeOut,\n} from \"../../actions\";\nimport Spinner from \"../../components/Loading/Spinner\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { Attendance } from \"../../components/Attendance/Attendance\";\nimport AddTimeToCandidateModal from \"../../components/AddTimeToCandidateModal/AddTimeToCandidateModal\";\n// props for the component\nexport interface ProctoringOnlineSupervisorProps {\n  socket: Socket;\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_GetProctoringRoom: Function;\n  FC_SetActiveCandidates: Function;\n  FC_SetOneActiveCandidate: Function;\n  FC_CandidateOffline: Function;\n  FC_ExamStartStop: Function;\n  FC_ContinueExam: Function;\n  FC_StopCandidate: Function;\n  FC_CandidateExamEvent: Function;\n  FC_ClearExamToRoomProctoring: Function;\n  FC_SaveEvent: Function;\n  FC_LoadRoomEvents: Function;\n  FC_CandidateRemoveExam: Function;\n  FC_RoomNotFoundOnline: Function;\n  FC_RoomDetailsOnline: Function;\n  FC_CandidateDoneExamCenter: Function;\n  FC_ExamDone: Function;\n  FC_CandidateTimeOut: Function;\n}\n\nenum ActiveSideTap {\n  Candidates,\n  Events,\n}\n\ninterface AppState {\n  focus_mode: boolean;\n  loading: boolean;\n  loading_room: boolean;\n  events: EventInterface[];\n  active_side_tab: ActiveSideTap;\n  selected_candidate: string | null;\n  online_room: boolean;\n  online_candidates: OnlineCandidates[];\n  start_exam: boolean;\n  error: {\n    target: string;\n    msg: string;\n  };\n  events_loading: boolean;\n  room_found: boolean;\n  start_time: string;\n  duration: number;\n  add_minutes: {\n    candidate: CandidateProctoringInterface | null;\n    minutes: number;\n  };\n}\n\nclass _ProctoringOnlineSupervisor extends React.Component<\n  ProctoringOnlineSupervisorProps,\n  AppState\n> {\n  private myPeer: any;\n\n  constructor(props: ProctoringOnlineSupervisorProps) {\n    super(props);\n\n    this.state = {\n      room_found: false,\n      focus_mode: false,\n      loading_room: true,\n      loading: false,\n      events: [],\n      active_side_tab: ActiveSideTap.Events,\n      selected_candidate: null,\n      online_room: false,\n      online_candidates: [],\n      start_exam: false,\n      error: {\n        msg: \"\",\n        target: \"\",\n      },\n      events_loading: true,\n      start_time: \"\",\n      duration: 0,\n      add_minutes: {\n        candidate: null,\n        minutes: 0,\n      },\n    };\n  }\n\n  componentDidMount = () => {\n    const { room_id, course_id, position_id } = this.props.proctoring.exam;\n\n    console.log({ room_id: room_id });\n\n    // check if the user have already joined the room\n    if (this.props.proctoring.candidates.length <= 0) {\n      //* Load candidates on the room\n      this.props.FC_GetProctoringRoom(\n        { room_id, course_id, position_id },\n        (status: boolean, candidates: any[], msg: string) => {\n          if (status === true) {\n            this.setState({\n              loading_room: false,\n            });\n\n            // *********************************************************************\n\n            this.props.socket.socket.emit(\n              Events.GET_ROOM_INFO_SERVER,\n              this.props.proctoring.room.room_id,\n              (data: { data: any; error: boolean; msg: string }) => {\n                if (data.error === true) {\n                  this.props.FC_RoomNotFoundOnline(data.msg);\n                } else {\n                  this.props.FC_RoomDetailsOnline(data.data);\n                  this.startListeningToEvents(); // Start events\n                }\n              }\n            );\n          } else {\n            this.setState({\n              loading_room: false,\n              error: {\n                target: \"all\",\n                msg: msg,\n              },\n            });\n          }\n        }\n      );\n    } else {\n      // update the active list\n      // this.props.socket.socket.emit(\n      //   Events.UPDATED_ROOM_LIST,\n      //   this.props.proctoring.room.room_id,\n      //   ({\n      //     room,\n      //     candidates,\n      //   }: {\n      //     room: OnlineProctoringRoom | undefined;\n      //     candidates: OnlineCandidates[];\n      //   }) => {\n      //     console.log({ candidates, room });\n      //     this.props.FC_SetActiveCandidates(room, candidates);\n      //   }\n      // );\n    }\n  };\n\n  startListeningToEvents = () => {\n    this.props.socket.socket.emit(\n      Events.JOIN_ROOM,\n      {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: this.props.auth.user.user_id,\n        peer_id: \"\",\n        supper: true,\n      },\n      (data: {\n        data: { user_id: string; room_id: string; supper: boolean };\n        error: boolean;\n        msg: string;\n      }) => {\n        //* New user connected\n        this.props.socket.socket.on(\n          Events.NEW_USER_JOINED_CLIENT,\n          (user: any) => {\n            this.props.FC_SetOneActiveCandidate({\n              user_id: user.user_id,\n              stopped: user.stopped,\n              done: user.done,\n            });\n          }\n        );\n\n        this.props.socket.socket.on(\n          Events.TIME_OUT_CLIENT,\n          (event: EventInterface) => {\n            this.props.FC_CandidateTimeOut(event);\n          }\n        );\n\n        //* remove the candidate online\n        this.props.socket.socket.on(Events.USER_DISCONNECTED, (userId: any) => {\n          this.props.FC_CandidateOffline(userId);\n\n          this.props.FC_SaveEvent(\n            {\n              application_session_id: this.props.auth.application_session?._id,\n              description: \"Leave the room\",\n              done_by: \"System\",\n              event_type_id: Events.CANDIDATE_LEFT_EXAM_EVENT,\n              exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n              position_id: this.props.proctoring.exam.position_id,\n              room_id: this.props.proctoring.room.room_id,\n              time: new Date().toString(),\n              user_id: userId,\n              group_id: this.props.proctoring.room.group_id,\n            } as EventInterface,\n            (status: boolean, error: string) => {\n              if (status === false)\n                this.setState({ error: { target: \"main\", msg: error } });\n            }\n          );\n        });\n\n        //* candidate done exam\n        this.props.socket.socket.on(\n          Events.EXAM_DONE_CLIENT,\n          (event: EventInterface) =>\n            this.props.FC_CandidateDoneExamCenter(event)\n        );\n\n        /**\n         * @description Exam events\n         */\n        this.props.socket.socket.on(\n          Events.CAND_EXAM_EVENT_CLIENT,\n          (event: EventInterface) => this.props.FC_CandidateExamEvent(event)\n        );\n      }\n    );\n\n    // *********************** ALL THE PROCESS CONTINUES HERE *********\n    // load events\n    this.props.FC_LoadRoomEvents(\n      {\n        application_session_id: this.props.auth.application_session?._id,\n        exam_id: this.props.proctoring.exam.exam_id,\n        room_id: this.props.proctoring.room.room_id,\n      } as FC_LoadRoomEvents_Interface,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            events_loading: false,\n          });\n        } else {\n          this.setState({\n            events_loading: false,\n            error: {\n              target: \"main\",\n              msg: msg,\n            },\n          });\n        }\n      }\n    ); // FC_LoadRoomEvents\n  };\n\n  leaveRoom = () => {\n    // this.props.socket.socket.off(Events.START_EXAM_CLIENT);\n    this.props.socket.socket.off(Events.USER_CONNECTED);\n    this.props.socket.socket.off(Events.USER_DISCONNECTED);\n    this.props.socket.socket.off(Events.CAND_EXAM_EVENT_CLIENT);\n\n    this.props.FC_ClearExamToRoomProctoring();\n  };\n\n  startCenterProctoring = () => {};\n\n  // ***************************************************************************\n\n  blank = (e: any) => console.log(\"clicked\");\n\n  /**\n   * chand the active tab on the side\n   * @param itm\n   * @returns\n   */\n  ActiveSIdeTabHandler = (itm: ActiveSideTap) =>\n    this.setState({ active_side_tab: itm });\n\n  SelectCandidateHandler = (value: string | null) =>\n    this.setState({ selected_candidate: value });\n\n  startExamHandler = () => {\n    if (\n      this.props.proctoring.candidates.filter((cand) => cand.active === true)\n        .length <= 0\n    ) {\n      return window.alert(\"You can't start exam without any active candidate\");\n    }\n    if (window.confirm(\"Are you sure you want to start the exam??\")) {\n      this.props.socket.socket.emit(\n        Events.START_EXAM_SERVER,\n        {\n          room_id: this.props.proctoring.room.room_id,\n          data: \"start exam\",\n          description: \"The exam started on this room\",\n          msg: \"The exam started on this room\",\n          duration: 5,\n        },\n        ({\n          start_time,\n          duration,\n        }: {\n          start_time: string;\n          duration: number;\n        }) => {\n          // this.setState({\n          //   start_time,\n          //   duration,\n          // });\n          this.props.FC_ExamStartStop(true, start_time, duration);\n        }\n      );\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"The exam started on this room\",\n          done_by: \"Administrator\",\n          event_type_id: \"EXAM STARTED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  stopExamHandler = () => {\n    if (window.confirm(\"Are you sure you want to stop the exam??\")) {\n      this.props.socket.socket.emit(Events.STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        description: \"Exam stopped on this room\",\n      });\n      this.props.FC_ExamStartStop(false);\n      // Save event\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Exam stopped on this room\",\n          done_by: \"Supervisor\",\n          event_type_id: \"EXAM_STOPPED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  continueHandler = (user_id: string) => {\n    if (\n      window.confirm(\n        \"Alre you sure you want to give this candidate the permition to continue the exam??\"\n      )\n    ) {\n      this.props.FC_ContinueExam(user_id);\n      this.props.socket.socket.emit(Events.CAND_CONTINUE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        description: \"Allowed a candidate to continue exam\",\n      });\n\n      // Save the contitue action\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Allowed a candidate to continue exam\",\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_CONTINUE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string, event: EventInterface | null) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  stopCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"If you want to stop the candidate add the reason\");\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `STOP: ${msg}`,\n        done_by: \"Supervisor\",\n        event_type_id: Events.CAND_STOP_EXAM_CLIENT,\n      });\n\n      this.props.FC_StopCandidate(user_id);\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `STOP: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_STOP_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  ejectCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to remove the candidate add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_REMOVE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `REMOVED: ${msg}`,\n        done_by: \"Supervisor\",\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `REMOVED: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_REMOVE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false) {\n            this.setState({ error: { target: \"main\", msg: error } });\n          } else {\n            this.props.FC_CandidateRemoveExam(user_id);\n          }\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  warnCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to warn this candidate, add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_WARNING_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `WARNING: ${msg}`,\n        description: `WARNING: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `WARNING: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_WARNING_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  restartCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"Restart this candidate's exam, reason\");\n    if (msg !== null) {\n      console.log(\"RESTART EXAM CANDIDATE\");\n      this.props.socket.socket.emit(Events.CAND_RESTART_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `RESTART: ${msg}`,\n        description: `RESTART: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `RESTART: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_RESTART_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  focusToggle = () =>\n    this.setState((prevState) => ({\n      focus_mode: !prevState.focus_mode,\n    }));\n\n  createAttendance = ({ name, list }: { name: string; list: string[] }) => {\n    this.props.socket.socket.emit(\n      Events.CREATE_ROOM_SERVER,\n      {\n        candidates: list,\n        room_id: this.props.proctoring.room.room_id,\n        user_id: this.props.auth.user.user_id,\n        group_id: name,\n      },\n      (data: { data: LiveServer__Room; error: boolean; msg: string }) => {\n        if (data.error === false) {\n          this.props.FC_RoomDetailsOnline(data.data);\n          this.startListeningToEvents();\n        } else {\n          this.props.FC_RoomNotFoundOnline(data.msg);\n        }\n      }\n    );\n  };\n\n  deleteRoomHandler = () => {\n    if (\n      this.props.proctoring.candidates.filter((cand) => cand.active === true)\n        .length >= 1\n    ) {\n      return window.alert(\n        \"You can't delete the group while some candidates are already joined.\"\n      );\n    }\n\n    let msg = window.prompt(\"Are you sure you want to delete this group??\");\n    if (msg !== null) {\n      this.props.socket.socket.emit(\n        Events.DELETE_ROOM_SERVER,\n        {\n          room_id: this.props.proctoring.room.room_id,\n        },\n        (status: boolean) => {\n          if (status === true) {\n            this.leaveRoom();\n            // Save the event\n            this.props.FC_SaveEvent(\n              {\n                application_session_id:\n                  this.props.auth.application_session?._id,\n                description: `ROOM DELETED: ${msg}`,\n                done_by: \"Supervisor\",\n                event_type_id: `DELETE GROUP ${this.props.proctoring.room.room_number}`,\n                exam_id: this.props.proctoring.exam.exam_id,\n                position_id: this.props.proctoring.exam.position_id,\n                room_id: this.props.proctoring.room.room_id,\n                time: new Date().toString(),\n                user_id: this.props.auth.user.user_id,\n                group_id: this.props.proctoring.room.group_id,\n              } as EventInterface,\n              (status: boolean, error: string) => {\n                if (status === false) {\n                  this.setState({ error: { target: \"main\", msg: error } });\n                }\n              }\n            );\n          } else {\n            this.setState({\n              error: { target: \"main\", msg: \"Failed to delete the group\" },\n            });\n          }\n        }\n      );\n    }\n  };\n\n  addMinutesModal = (candidate: CandidateProctoringInterface) =>\n    this.setState({ add_minutes: { candidate: candidate, minutes: 0 } });\n\n  addMinutesHandler = (minutes: number, reason: string) => {\n    if (\n      window.confirm(\n        `Are you sure you want to add ${minutes} to ${this.state.add_minutes.candidate?.fname}?`\n      )\n    ) {\n      let duration: number;\n      let start_time: string;\n      // calculate the timeout\n      if (this.props.proctoring.exam.exam_done === true) {\n        start_time = new Date().toString();\n        duration = minutes;\n      } else {\n        start_time =\n          this.props.proctoring.exam.start_time === null\n            ? \"\"\n            : this.props.proctoring.exam.start_time;\n        duration = this.props.proctoring.exam.duration + minutes;\n      }\n\n      let event_data = {\n        application_session_id: this.props.auth.application_session?._id,\n        description: `Added ${minutes}min`,\n        done_by: \"Supervisor\",\n        event_type_id: EventsLabels.ADD_TIME,\n        exam_id: this.props.proctoring.exam.exam_id,\n        position_id: this.props.proctoring.exam.position_id,\n        room_id: this.props.proctoring.room.room_id,\n        time: new Date().toString(),\n        user_id: this.state.add_minutes.candidate?.user_id,\n        group_id: this.props.proctoring.room.group_id,\n      } as EventInterface;\n\n      //* add minutes to the candidate\n      this.props.socket.socket.emit(\n        Events.ADD_TIME_TO_CANDIDATE_SERVER,\n        {\n          start_time,\n          duration,\n          minutes,\n        },\n        event_data\n      );\n\n      // Save the event\n      this.props.FC_SaveEvent(event_data, (status: boolean, error: string) => {\n        if (status === false) {\n          this.setState({ error: { target: \"main\", msg: error } });\n        }\n      });\n    }\n  };\n\n  render() {\n    let activeCandidates = this.props.proctoring.candidates.filter(\n      (itm: CandidateProctoringInterface) =>\n        itm.active === true && itm.done === false\n    );\n\n    let nonActiveCandidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === false || itm.done === true\n    );\n\n    if (this.props.proctoring.room_not_found === true) {\n      return <Attendance createAttendance={this.createAttendance} />;\n    }\n\n    let active_candidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === true\n    ).length;\n\n    return (\n      <div\n        className={`${\n          this.state.focus_mode === false\n            ? \" p-1\"\n            : \"fixed right-0 left-0 bottom-0 top-0 z-50 overflow-y-auto\"\n        } transition-all ease-in-out`}\n      >\n        {this.state.add_minutes.candidate !== null &&\n          this.state.add_minutes.minutes === 0 && (\n            <AddTimeToCandidateModal\n              candidate={this.state.add_minutes.candidate}\n              close={() =>\n                this.setState({ add_minutes: { candidate: null, minutes: 0 } })\n              }\n              addMinutesHandler={this.addMinutesHandler}\n            />\n          )}\n\n        {this.state.error.target === \"main\" && (\n          <div\n            className=\"animate__animated animate__slideInDown p-2 rounded-md animate__faster text-center text-sm bg-red-200 text-red-900\"\n            onClick={() => this.setState({ error: { target: \"\", msg: \"\" } })}\n          >\n            {this.state.error.msg}\n          </div>\n        )}\n\n        <ProctoringMainTopBar\n          focusToggle={this.focusToggle}\n          focus_mode={this.state.focus_mode}\n          course_title={this.props.proctoring.exam.course_name}\n          post_title={this.props.proctoring.exam.position_title}\n          duration={this.props.proctoring.exam.duration}\n          started_at={this.props.proctoring.exam.start_time}\n          exam_start={this.props.proctoring.exam.start_exam}\n          startExamHandler={this.startExamHandler}\n          stopExamHandler={this.stopExamHandler}\n          leaveRoom={this.leaveRoom}\n          room={this.props.proctoring.room}\n          active_candidate={active_candidates}\n          deleteRoom={this.deleteRoomHandler}\n          ExamDone={this.props.FC_ExamDone}\n        />\n\n        {/* this is the body */}\n        <div\n          className={`${\n            this.state.focus_mode === true\n              ? \"proctoring-body-contents text-white\"\n              : \"\"\n          }  h-screen`}\n        >\n          {/* <div className=\"lg:grid lg:grid-flow-col gap-4\"> */}\n          <div className=\"lg:flex\">\n            {/* <div className=\"lg:col-span-4 p-2 pt-3 lg:h-screen overflow-y-auto\"> */}\n            <div className=\"flex-1 pt-3 lg:h-screen overflow-y-auto\">\n              {/* pictures or images */}\n              {this.props.proctoring.candidate_loaded === false ? (\n                <div className=\"p-8 text-center animate__animated animate__zoomIn\">\n                  <Spinner />\n                  <h2 className=\"text-xl font-bold text-gray-400\">\n                    Loading room details...\n                  </h2>\n                </div>\n              ) : (\n                <div className=\"animate__animated animate__zoomI\">\n                  <div\n                    className={`${\n                      this.state.focus_mode === true\n                        ? \"bg-blue-900 bg-opacity-30\"\n                        : \"bg-gray-100\"\n                    } rounded-md mb-4`}\n                  >\n                    <h3\n                      className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                        this.state.focus_mode === true\n                          ? \"text-blue-100 bg-blue-900\"\n                          : \"text-white bg-gray-500\"\n                      } pb-1 mb-1`}\n                    >\n                      <span className=\"flex-1\">Active candidates </span>\n\n                      <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                        {activeCandidates.length}\n                      </span>\n                    </h3>\n                    {activeCandidates.length === 0 ? (\n                      <div className=\"py-8 text-center w-full\">\n                        <MdInfoOutline className=\"inline-block text-6xl\" />\n                        <h3 className=\"text-center text-2xl font-bold\">\n                          No active candidates\n                        </h3>\n                        <h3 className=\"text-center text-gray-500\">\n                          Active candidate is any candidate who is online and\n                          still doing the exam\n                        </h3>\n                      </div>\n                    ) : (\n                      <div className=\"grid grid-flow-row sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-5 gap-4 p-2\">\n                        {activeCandidates.map(\n                          (\n                            candidate: CandidateProctoringInterface,\n                            i: number\n                          ) => {\n                            return (\n                              <CenterCardSupervisor\n                                focus_mode={this.state.focus_mode}\n                                key={i}\n                                candidate={candidate}\n                                stopHandler={this.stopCandidateHandler}\n                                warningHandler={this.warnCandidateHandler}\n                                detailsHandler={this.SelectCandidateHandler}\n                                continueHandler={this.continueHandler}\n                                exam_started={\n                                  this.props.proctoring.exam.start_exam\n                                }\n                                exam_done={this.props.proctoring.exam.exam_done}\n                                addMinutes={this.addMinutesModal}\n                              />\n                            );\n                          }\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {nonActiveCandidates.length !== 0 && (\n                    <div\n                      className={`${\n                        this.state.focus_mode === true\n                          ? \"bg-blue-900 bg-opacity-30\"\n                          : \"bg-gray-100\"\n                      } rounded-md`}\n                    >\n                      <h3\n                        className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                          this.state.focus_mode === true\n                            ? \"text-blue-100 bg-blue-900\"\n                            : \"text-white bg-gray-500\"\n                        } pb-1 mb-1`}\n                      >\n                        <span className=\"flex-1\">Others candidates </span>\n                        <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                          {nonActiveCandidates.length}\n                        </span>\n                      </h3>\n                      <div className=\"mt-3 mx-2 pb-2\">\n                        <ProctoringCandidates\n                          candidates={nonActiveCandidates}\n                          clickHandler={this.SelectCandidateHandler}\n                          show_title={false}\n                          focus_mode={this.state.focus_mode}\n                          large={true}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            <div\n              className={`${\n                this.state.focus_mode === true\n                  ? \"proctoring-side-section border-blue-500  border-opacity-30\"\n                  : \"lg:bg-gray-100 \"\n              } p-2  lg:w-2/6 transition-all ease-in-out  lg:h-screen overflow-y-auto lg:ml-2 lg:border-l `}\n            >\n              {/* statistics */}{\" \"}\n              {(this.props.proctoring.exam.start_exam === true ||\n                this.props.proctoring.exam.exam_done === true) && (\n                <ProctoringStatistics\n                  focus_mode={this.state.focus_mode}\n                  candidates={this.props.proctoring.candidates}\n                />\n              )}\n              {this.state.selected_candidate === null ? (\n                <React.Fragment>\n                  {/* {this.state.online_room === true && ( */}\n                  <div className=\"my-2 p-1 rounded-md bg-blue-800 bg-opacity-60 grid grid-col-2 grid-flow-col gap-1\">\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Events\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Events\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Event list\n                    </button>\n\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Candidates\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Candidates\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Candidates\n                    </button>\n                  </div>\n                  {/* )} */}\n\n                  {/* events */}\n                  {this.state.active_side_tab === ActiveSideTap.Events ? (\n                    <ProctoringEvents\n                      candidates={this.props.proctoring.candidates}\n                      events={this.props.proctoring.events}\n                      focus_mode={this.state.focus_mode}\n                      loading={false}\n                    />\n                  ) : (\n                    <ProctoringCandidates\n                      candidates={this.props.proctoring.candidates}\n                      clickHandler={this.SelectCandidateHandler}\n                      focus_mode={this.state.focus_mode}\n                      show_title={false}\n                      large={false}\n                    />\n                  )}\n                </React.Fragment>\n              ) : (\n                <ProctoringCandidateDetails\n                  candidate={this.props.proctoring.candidates.find(\n                    (itm) => itm.user_id === this.state.selected_candidate\n                  )}\n                  events={this.props.proctoring.events.filter(\n                    (evnt: EventInterface) =>\n                      evnt.user_id === this.state.selected_candidate\n                  )}\n                  removeInExam={this.ejectCandidateHandler}\n                  chatHandler={this.blank}\n                  micHandler={this.blank}\n                  focusHandler={this.blank}\n                  stopHandler={this.stopCandidateHandler}\n                  restartHandler={this.restartCandidateHandler}\n                  warnHandler={this.warnCandidateHandler}\n                  closeHandler={() => this.SelectCandidateHandler(null)}\n                  home_proctoring={false}\n                  exam_started={this.props.proctoring.exam.start_exam}\n                  focus_mode={this.state.focus_mode}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; auth: Auth; proctoring: Proctoring } => {\n  return { socket: socket, auth: auth, proctoring: proctoring };\n};\n\nexport const ProctoringOnlineSupervisor = connect(mapStateToProps, {\n  FC_GetProctoringRoom,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_CandidateRemoveExam,\n  FC_RoomNotFoundOnline,\n  FC_RoomDetailsOnline,\n  FC_CandidateDoneExamCenter,\n  FC_ExamDone,\n  FC_CandidateTimeOut,\n})(_ProctoringOnlineSupervisor);\n","import React, { FC, ReactElement } from \"react\";\nimport { MdNotInterested, MdOutlineTimer, MdWarning } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype CenterCardSupervisorProps = {\n  candidate: CandidateProctoringInterface;\n  warningHandler: Function;\n  stopHandler: Function;\n  detailsHandler: Function;\n  continueHandler: Function;\n  exam_started: boolean;\n  focus_mode: boolean;\n  exam_done: boolean;\n  addMinutes: Function;\n};\n\nconst CenterCardSupervisor: FC<CenterCardSupervisorProps> = ({\n  candidate,\n  warningHandler,\n  stopHandler,\n  detailsHandler,\n  continueHandler,\n  exam_started,\n  focus_mode,\n  exam_done,\n  addMinutes,\n}): ReactElement => {\n  /* function body */\n  let color =\n    candidate?.stopped === true ? \"red\" : focus_mode === true ? \"blue\" : \"gray\";\n  return (\n    <div\n      className={`bg-${color}-900 bg-opacity-50 hover:bg-opacity-100 cursor-pointer border-${color}-400 border p-2 rounded-md text-white transition-all ease-in-out`}\n      onClick={detailsHandler.bind(this, candidate.user_id)}\n    >\n      <div className=\"text-center\">\n        <span className={`text-${color}-200`}>Seat number</span>\n        <h1 className=\"text-5xl font-bold\">{candidate.seat_number}</h1>\n      </div>\n\n      <div className={`mt-1 border-t border-${color}-500 pt-2`}>\n        <h4 className={`text-xs text-${color}-400`}>Full names</h4>\n        <h4 className=\"text-sm font-bold\">\n          {candidate.fname} {candidate.lname}\n        </h4>\n      </div>\n\n      {exam_started === true && exam_done === false && (\n        <div className=\"mt-2\">\n          {candidate.stopped === false ? (\n            <button\n              onClick={warningHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-yellow-300\"\n            >\n              <MdWarning className=\"inline\" /> Warn\n            </button>\n          ) : (\n            <button\n              onClick={continueHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-green-400\"\n            >\n              <MdWarning className=\"inline\" /> Continue\n            </button>\n          )}\n          <button\n            onClick={stopHandler.bind(this, candidate.user_id)}\n            className=\"px-2 text-sm py-1 rounded-md text-white- bg-red-700 ml-1\"\n          >\n            <MdNotInterested className=\"inline\" /> Stop\n          </button>\n        </div>\n      )}\n\n      {((exam_done === true && candidate.stopped === true) || true) && (\n        <div className=\"mr-2 mt-2\">\n          <button\n            onClick={addMinutes.bind(this, candidate)}\n            className=\"px-2 py-1 rounded-md text-white- w-full bg-blue-700 ml-1\"\n          >\n            <MdOutlineTimer className=\"inline\" /> Add minutes\n          </button>{\" \"}\n        </div>\n      )}\n      {exam_done === true &&\n        candidate.added_minutes !== 0 &&\n        candidate.stopped !== true && <div> Time out dom </div>}\n    </div>\n  );\n};\nexport default CenterCardSupervisor;\n","import React, { Fragment } from \"react\";\nimport { MdAddCircle, MdError, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring } from \"../../actions\";\nimport { CandidateProctoringInterfaceAPI } from \"../../interfaces\";\nimport { StoreState } from \"../../reducers\";\nimport search from \"../../utils/search\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  createAttendance: Function;\n}\n\ninterface AppState {\n  loading: boolean;\n  create_attendance: boolean;\n  search: string;\n  selected_list: string[];\n  selected_candidate: CandidateProctoringInterfaceAPI | null;\n  group_name: string;\n  error: {\n    target: string;\n    msg: string;\n  };\n}\n\nclass _Attendance extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      create_attendance: false,\n      selected_list: [],\n      selected_candidate: null,\n      search: \"\",\n      group_name: \"\",\n      error: {\n        target: \"\",\n        msg: \"\",\n      },\n    };\n  }\n\n  submitHandler = (e: any) => {\n    e.preventDefault();\n\n    if (this.state.group_name.length === 0) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"Please add the group name\",\n        },\n      });\n    }\n\n    if (this.state.selected_list.length === 0) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"You can't create an empty group\",\n        },\n      });\n    }\n\n    this.props.createAttendance({\n      list: this.state.selected_list,\n      name: this.state.group_name,\n    });\n  };\n\n  render() {\n    let resultCandidates: CandidateProctoringInterfaceAPI[] = search(\n      this.props.proctoring.all_candidates,\n      this.state.search,\n      {\n        email: true,\n        fname: true,\n        lname: true,\n      }\n    );\n\n    if (\n      this.props.proctoring.candidates.length === 0 &&\n      this.state.create_attendance === false\n    ) {\n      return (\n        <div className=\"mt-4 mx-4\">\n          {this.props.proctoring.error !== \"\" && (\n            <div className=\"p-2 mb-3 bg-red-200 animate__zoomIn animate__faster animate__animated text-red-600 rounded-md flex items-center\">\n              <MdError className=\"text-2xl\" />\n              <p className=\"m-0 text-xl ml-1.5\">\n                {this.props.proctoring.error}\n              </p>\n            </div>\n          )}\n\n          <div className=\"p-6 bg-white animate__fadeIn animate__animated mt-4 rounded shadow-md\">\n            <h2 className=\"text-3xl font-bold mb-2\">Create a group</h2>\n            <p className=\"text-md text-gray-700 \">\n              To create a group click on <b>create group</b> button and check\n              list of all the candidates and add them to the attendance with the\n              room name\n            </p>\n\n            <div className=\"my-2 border-- w-4/5 py-2\">\n              {[\n                {\n                  title: \"Province\",\n                  value: this.props.proctoring.room.province_name,\n                },\n                {\n                  title: \"District\",\n                  value: this.props.proctoring.room.district_name,\n                },\n                {\n                  title: \"Center name\",\n                  value: this.props.proctoring.room.center_name,\n                },\n                {\n                  title: \"Room number\",\n                  value: this.props.proctoring.room.room_number,\n                },\n              ].map((itm) => (\n                <section key={itm.title} className=\"border-t py-1\">\n                  <span>{itm.title}: </span>\n                  <b>{itm.value}</b>\n                </section>\n              ))}\n            </div>\n            <button\n              className=\"p-2 px-3 rounded text-lg mt-2 bg-blue-500 text-white hover:bg-600\"\n              onClick={() => this.setState({ create_attendance: true })}\n            >\n              Create group\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <Fragment>\n        {this.state.selected_candidate !== null && (\n          <Modal\n            footer={false}\n            widthSizeClass={ModalSize.large}\n            title=\"User info\"\n            theme={Themes.default}\n            displayClose={true}\n            padding={{ title: true, body: true, footer: false }}\n            backDrop={true}\n            backDropClose={true}\n            close={() => this.setState({ selected_candidate: null })}\n          >\n            <div className=\"p-2\">\n              {[\n                {\n                  title: \"National Id\",\n                  value: this.state.selected_candidate.n_id,\n                },\n                {\n                  title: \"First name\",\n                  value: this.state.selected_candidate.fname,\n                },\n                {\n                  title: \"Last name\",\n                  value: this.state.selected_candidate.lname,\n                },\n                {\n                  title: \"District\",\n                  value: this.state.selected_candidate.district,\n                },\n                {\n                  title: \"Phone number\",\n                  value: this.state.selected_candidate.phone_number,\n                },\n                {\n                  title: \"Course\",\n                  value:\n                    this.state.selected_candidate.course_code +\n                    \" \" +\n                    this.state.selected_candidate.course_name,\n                },\n                { title: \"Email\", value: this.state.selected_candidate.email },\n                {\n                  title: \"Position\",\n                  value: this.state.selected_candidate.position_title,\n                },\n              ].map((itm) => (\n                <section key={itm.title} className=\"border-t py-1\">\n                  <span>{itm.title}: </span>\n                  <b>{itm.value}</b>\n                </section>\n              ))}\n            </div>\n          </Modal>\n        )}\n\n        <form onSubmit={this.submitHandler}>\n          <div className=\"bg-white p-2 mr-2 mt-3 rounded-md animate__animated animate__fadeIn\">\n            <div className=\" px-2 pb-3 flex items-center\">\n              <div className=\"flex-1\">\n                <h2 className=\"font-bold text-xl\">Create a group</h2>\n                <p className=\"text-gray-400 m-0 mt- text-sm\">\n                  Please create a room by adding the list of the users to the\n                  attendee list\n                </p>\n              </div>\n              <div className=\"\">\n                <div className=\"flex items-end\">\n                  <div className=\"\">\n                    <label htmlFor=\"input-group-name\" className=\"block text-xs\">\n                      Group name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"input-group-name\"\n                      className={`p-1 px-2 bg-gray-50 rounded-md ${\n                        this.state.error.target === \"form\"\n                          ? \"border-red-600\"\n                          : \"\"\n                      }  border`}\n                      placeholder=\"A\"\n                      maxLength={2}\n                      required\n                      value={this.state.group_name}\n                      onChange={(e) =>\n                        this.setState({ group_name: e.target.value })\n                      }\n                    />\n                  </div>\n                  <div className=\"flex-1 pl-1\">\n                    <button\n                      type=\"submit\"\n                      className=\"py-1 px-3 text-md hover:bg-green-600 rounded-md bg-green-500 text-white block\"\n                    >\n                      Create group\n                    </button>\n                  </div>\n                </div>\n                {this.state.error.target === \"form\" && (\n                  <span className=\"text-red-500 text-sm\">\n                    {this.state.error.msg}\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"md:flex\">\n              {this.state.selected_list.length !== 0 &&\n              this.state.selected_list.length ===\n                this.props.proctoring.all_candidates.length ? null : (\n                <div className=\"flex-1 mr-2 mb-8 md:mb-2\">\n                  <div className=\"p-2 flex bg-gray-200 items-center\">\n                    <h4 className=\"text-xl font-light text-gray-700\">\n                      All candidates\n                    </h4>\n                    <input\n                      type=\"search\"\n                      name=\"search\"\n                      id=\"\"\n                      placeholder=\"search name\"\n                      className=\"py-1 px-2 flex-1 ml-3 bg-gray-50 border rounded\"\n                      value={this.state.search}\n                      onChange={(e) =>\n                        this.setState({ search: e.target.value })\n                      }\n                    />\n                  </div>\n                  <div className=\" shadow\">\n                    <table className=\"w-full\">\n                      <thead className=\"text-left bg-gray-400\">\n                        <tr>\n                          <th className=\"text-center\">#</th>\n                          <th>Names</th>\n                          <th>Email</th>\n                          <th className=\"text-right\">\n                            <button\n                              type=\"button\"\n                              className=\"p-0.5 px-2 rounded-md hover:bg-blue-700 m-1 inline-block bg-blue-600 text-white text-sm\"\n                              onClick={() =>\n                                this.setState({\n                                  selected_list:\n                                    this.props.proctoring.all_candidates.map(\n                                      (itm) => itm.user_id\n                                    ),\n                                })\n                              }\n                            >\n                              Select all\n                            </button>\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultCandidates.length === 0 ? (\n                          <tr>\n                            <td colSpan={4}>\n                              <div className=\"p-2 text-center py-4\">\n                                <MdInfoOutline className=\"text-6xl text-gray-500 mx-auto my-1\" />\n                                <h2>\n                                  <b>{this.state.search}</b> can't be found into\n                                  the candidates list\n                                </h2>\n                              </div>\n                            </td>\n                          </tr>\n                        ) : (\n                          resultCandidates.map(\n                            (itm: CandidateProctoringInterfaceAPI, i) =>\n                              this.state.selected_list.indexOf(itm.user_id) >\n                              -1 ? null : (\n                                <tr\n                                  key={i}\n                                  className=\"border-b group hover:bg-green-50\"\n                                >\n                                  <td className=\"text-gray-400 px-1 text-sm text-center\">\n                                    {\" \"}\n                                    {i + 1}\n                                  </td>\n                                  <td\n                                    title=\"Click to see details\"\n                                    className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                    onClick={() =>\n                                      this.setState({\n                                        selected_candidate: itm,\n                                      })\n                                    }\n                                  >\n                                    {itm.fname} {itm.lname}\n                                  </td>\n                                  <td className=\"text-sm\">{itm.email}</td>\n                                  <td className=\"text-right\">\n                                    <button\n                                      type=\"button\"\n                                      onClick={() =>\n                                        this.setState({\n                                          selected_list: [\n                                            ...this.state.selected_list,\n                                            itm.user_id,\n                                          ],\n                                          error: {\n                                            target: \"\",\n                                            msg: \"\",\n                                          },\n                                        })\n                                      }\n                                      className=\"my-1 p-1 px-2 rounded-md group-hover:opacity-95 opacity-5 bg-green-500 text-white text-sm\"\n                                    >\n                                      <MdAddCircle className=\"inline-block mr-1\" />\n                                      Add\n                                    </button>\n                                  </td>\n                                </tr>\n                              )\n                          )\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n              <div className=\"flex-1 ml-1 shadow border\">\n                <div className=\"p-1 bg-green-100 py-1 px-2 flex items-center\">\n                  <div className=\"flex-1\">\n                    <h2 className=\"font-bold text-green-900 text-2xl\">Group</h2>\n                    <p className=\"text-green-800 m-0 mt- text-sm\">\n                      This is the list of the candidate who are allowed to do\n                      the exam\n                    </p>\n                  </div>\n                  <div className=\"\">\n                    <h2 className=\"text-xl font-bold -mb-2\">\n                      <b>{this.state.selected_list.length}</b> of{\" \"}\n                      <b>{this.props.proctoring.all_candidates.length}</b>\n                    </h2>\n                    <p className=\"text-sm\">Selected</p>\n                  </div>\n                </div>\n                <div className=\"\">\n                  <table className=\"w-full\">\n                    <thead className=\"text-left bg-green-800 text-white\">\n                      <tr>\n                        <th className=\"px-2\">#</th>\n                        <th>Names</th>\n                        <th>Email</th>\n                        <th className=\"text-right\">\n                          {this.state.selected_list.length >= 2 && (\n                            <button\n                              type=\"button\"\n                              className=\"p-0.5 px-2 rounded-md hover:bg-red-700 hover:text-red-100 m-1 inline-block bg-red-200 text-red-800 text-sm\"\n                              onClick={() =>\n                                this.setState({\n                                  selected_list: [],\n                                })\n                              }\n                            >\n                              Remove all\n                            </button>\n                          )}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.selected_list.length === 0 ? (\n                        <tr>\n                          <td colSpan={4}>\n                            <div className=\"p-2 text-center py-4\">\n                              <MdInfoOutline className=\"text-6xl text-gray-500 mx-auto my-1\" />\n                              <h2>No candidate found on the attendance</h2>\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        this.state.selected_list.map(\n                          (user_id: string, i: number) => {\n                            let candidateFind =\n                              this.props.proctoring.all_candidates.find(\n                                (cand) => cand.user_id === user_id\n                              );\n                            if (candidateFind === undefined) {\n                              return null;\n                            }\n                            return (\n                              <tr\n                                key={i}\n                                className=\"border-b group hover:bg-green-50 animate__animated animate__zoomIn animate__faster\"\n                              >\n                                <td className=\"text-gray-400 pr-1 text-center\">\n                                  {i + 1}\n                                </td>\n                                <td\n                                  title=\"Click to see details\"\n                                  className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                  onClick={() =>\n                                    candidateFind !== undefined &&\n                                    this.setState({\n                                      selected_candidate: candidateFind,\n                                    })\n                                  }\n                                >\n                                  {candidateFind.fname} {candidateFind.lname}\n                                </td>\n                                <td>{candidateFind.email}</td>\n                                <td className=\"text-right\">\n                                  <button\n                                    type=\"button\"\n                                    onClick={() =>\n                                      this.setState({\n                                        selected_list:\n                                          this.state.selected_list.filter(\n                                            (el) => el !== user_id\n                                          ),\n                                      })\n                                    }\n                                    className=\"my-1 p-1 px-2 rounded-md group-hover:opacity-95 opacity-5 bg-red-500 text-white text-sm\"\n                                  >\n                                    Remove\n                                  </button>\n                                </td>\n                              </tr>\n                            );\n                          }\n                        )\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nexport const Attendance = connect(mapStateToProps, {})(_Attendance);\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdAddAlarm, MdClose, MdDeleteForever, MdLogout } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype AddTimeToCandidateModalProps = {\n  close: Function;\n  candidate: CandidateProctoringInterface | null;\n  addMinutesHandler: Function;\n};\n\nconst AddTimeToCandidateModal: FC<AddTimeToCandidateModalProps> = ({\n  close,\n  candidate,\n  addMinutesHandler,\n}): ReactElement => {\n  const [minutes, setMinutes] = useState(1);\n  const [reason, setReason] = useState(\"\");\n  const [error, setError] = useState({ target: \"\", msg: \"\" } as {\n    target: string;\n    msg: string;\n  });\n\n  const submitHandler = () => {\n    if (minutes < 2) {\n      return setError({ target: \"minutes\", msg: \"Minimum is 2m\" });\n    }\n\n    if (reason.length <= 3) {\n      return setError({\n        target: \"reason\",\n        msg: \"Reason must me up to 4 characters\",\n      });\n    }\n    addMinutesHandler(minutes, reason);\n    close();\n  };\n\n  return (\n    <Fragment>\n      <div\n        className=\"fixed bg-black bg-opacity-10 top-0 bottom-0 right-0 left-0 animate__animated animate__fadeIn\"\n        onClick={() => close(false)}\n      ></div>\n      <div className=\"fixed w-80 shadow-lg bg-white rounded top-16 mt-2 right-2 animate__animated animate__zoomIn animate__faster\">\n        <div className=\"flex items-center border-b\">\n          <div className=\"flex-1 pl-2 text-xl font-bold text-gray-400\">\n            <h4>Room details</h4>\n          </div>\n\n          <div className=\"\">\n            <button\n              onClick={() => close(false)}\n              className=\"p-2 hover:bg-red-700 hover:text-white rounded text-2xl\"\n            >\n              <MdClose />\n            </button>\n          </div>\n        </div>\n        <div className=\"p-2 \">\n          <div className=\"border-separate p-2\">\n            {[\n              {\n                title: \"Names\",\n                value: candidate?.fname + \" \" + candidate?.lname,\n              },\n              { title: \"Email\", value: candidate?.email },\n              { title: \"Seat\", value: candidate?.seat_number },\n            ].map(({ title, value }, i) => (\n              <div key={i} className=\"flex\">\n                <span className=\"text-gray-500\">{title}: </span>\n                <b className=\"text-right inline-block\"> {value}</b>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"p-2 text-center pt-1 bg-gray-100 mx-2 rounded\">\n            <p className=\"m-0 text-sm text-gray-500\">Minutes</p>\n            <div className=\"flex\">\n              <button\n                className=\"text-3xl px-4 hover:bg-blue-200 hover:text-blue-900 rounded\"\n                onClick={setMinutes.bind(this, minutes - 1)}\n              >\n                -\n              </button>\n              <input\n                type=\"number\"\n                className=\"flex-1 text-4xl text-center font-bold bg-transparent text-blue-700\"\n                min={1}\n                max={10}\n                value={minutes}\n                onChange={(e) => setMinutes(+e.target.value)}\n              />\n              <button\n                className=\"text-3xl px-4 hover:bg-blue-200 hover:text-blue-900 rounded\"\n                onClick={setMinutes.bind(this, minutes + 1)}\n              >\n                +\n              </button>\n            </div>\n            {error.target === \"minutes\" && (\n              <span className=\"text-red-500 text-sm\">{error.msg}</span>\n            )}\n          </div>\n\n          <div className=\"p-2\">\n            <label htmlFor=\"minutes-reason\">Reason</label>\n            <textarea\n              id=\"minutes-reason\"\n              className={`w-full bg-gray-100 rounded border-2 ${\n                error.target === \"reason\" ? \"border-red-500\" : \"border-blue-500\"\n              } p-1`}\n              rows={3}\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n            ></textarea>\n            {error.target === \"reason\" && (\n              <span className=\"text-red-500 text-sm\">{error.msg}</span>\n            )}\n          </div>\n\n          <div className=\"p-2 mx-1\">\n            <button\n              className=\"btn bg-blue-500 text-white w-full hover:bg-blue-600\"\n              onClick={() => submitHandler()}\n            >\n              <MdAddAlarm className=\"inline-block text-2xl\" /> Add minutes\n            </button>\n          </div>\n        </div>\n      </div>{\" \"}\n    </Fragment>\n  );\n};\nexport default AddTimeToCandidateModal;\n","import React, { Fragment } from \"react\";\nimport { FaSchool } from \"react-icons/fa\";\nimport { MdLocationOn } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  FC_RoomDetails,\n  Proctoring,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n} from \"../../actions\";\nimport { ProctoringExam } from \"../../interfaces/socketInterfaces\";\nimport { StoreState } from \"../../reducers\";\nimport { ProctoringOnlineSupervisor } from \"../ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_RoomDetails: Function;\n  FC_ExamsDetailsData: Function;\n  FC_LoadExamToRoomProctoring: Function;\n  FC_ClearExamToRoomProctoring: Function;\n}\n\ninterface AppState {\n  error: boolean;\n  errorMsg: string;\n  exams_error: boolean;\n  exams_error_msg: string;\n}\n\nclass _ProctoringCenter extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      error: false,\n      errorMsg: \"\",\n      exams_error: false,\n      exams_error_msg: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.auth.user_access.room_id.length >= 3) {\n      //** GET ROOM DETAILS */\n\n      if (this.props.proctoring.room.room_id === \"\") {\n        this.props.FC_RoomDetails(\n          this.props.auth.user_access.room_id,\n          (status: boolean, errorMsg: string) => {\n            if (status === true) {\n              console.log({ session: this.props.auth.application_session });\n\n              console.log({ session: this.props.auth.application_session });\n\n              if (\n                this.props.auth.application_session._id !== undefined &&\n                this.props.auth.application_session._id !== \"\"\n              ) {\n                //** GET EXAMS DETAILS */\n\n                // if (this.props.proctoring.room_exams.length === 0) {\n                this.props.FC_ExamsDetailsData(\n                  this.props.auth.application_session?._id,\n                  (status: boolean, error: string) => {\n                    if (status === false) {\n                      this.setState({\n                        exams_error: true,\n                        exams_error_msg: error,\n                      });\n                    }\n                  }\n                );\n                // } else {\n\n                // }\n              } else {\n                this.setState({\n                  error: true,\n                  errorMsg: \"No application session found\",\n                });\n              }\n            } else {\n              this.setState({\n                error: true,\n                errorMsg: errorMsg,\n              });\n            }\n          }\n        );\n      }\n    }\n  };\n\n  render() {\n    if (this.state.error === true) {\n      return (\n        <div className=\"mt-4\">\n          <div className=\"p-5 bg-red-100 rounded-md mx-auto text-center text-red-900 animate__animated animate__bounceIn\">\n            <h1 className=\"text-3xl font-bold\">Failed do load data</h1>\n            <p>{this.state.errorMsg}</p>\n          </div>\n        </div>\n      );\n    }\n    if (\n      this.state.error === false &&\n      this.props.proctoring.room.loaded === false\n    ) {\n      return (\n        <div className=\"m-5 text-center\">\n          <h5 className=\"text-gray-400 animate__animated animate__fadeIn animate__infinite text-xl\">\n            Loading room details\n          </h5>\n        </div>\n      );\n    }\n\n    const {\n      room_number,\n      center_name,\n      district_name,\n      province_name,\n      // district_id,\n      // center_id,\n      // province_id,\n      // room_id,\n    } = this.props.proctoring.room;\n\n    if (\n      this.props.proctoring.exam.course_id !== \"\" &&\n      this.props.proctoring.exam.position_id !== \"\"\n    ) {\n      return <ProctoringOnlineSupervisor />;\n    }\n    return (\n      <Fragment>\n        <div className=\"mr-2\">\n          <div className=\"p-5 bg-white rounded-b-md \">\n            <h2 className=\"text-2xl text-gray-600 font-bold text-center border-b pb-2\">\n              Room details\n            </h2>\n            <div className=\"flex flex-col md:flex-row\">\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <MdLocationOn className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 pt-3 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Province:</span>{\" \"}\n                    <b> {province_name}</b>\n                  </div>\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">District:</span>{\" \"}\n                    <b> {district_name}</b>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <FaSchool className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Center name:</span>{\" \"}\n                    <b> {center_name}</b>\n                  </div>\n\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Room Number:</span>{\" \"}\n                    <b> {room_number}</b>\n                  </div>\n                </div>\n              </div>\n            </div>{\" \"}\n          </div>\n\n          <h2 className=\"mt-5 text-2xl font-bold text-gray-500\">\n            Exams on this room\n          </h2>\n          <div className=\"mt-2 p-2 bg-white rounded-md\">\n            {this.props.proctoring.room_exams.length <= 0 ? (\n              <div className=\"p-5 text-center\">\n                No exams assigned to this room\n              </div>\n            ) : (\n              <table className=\"w-full text-left\">\n                <thead className=\"bg-gray-100 rounded-md\">\n                  <tr>\n                    <th className=\"p-2\">#</th>\n                    <th className=\"p-2\">Course</th>\n                    <th className=\"p-2\">Position</th>\n                    <th className=\"p-2\">Code</th>\n                    <th className=\"p-2\">Date</th>\n                    <th className=\"p-2\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.props.proctoring.room_exams.map((room, key) => {\n                    let examFound = this.props.proctoring.exams_list.exams.find(\n                      (exm) => exm.course === room.course_id\n                    );\n\n                    return (\n                      <tr\n                        className=\"p-2 border-t group hover:bg-blue-50\"\n                        key={key}\n                      >\n                        <td className=\"p-2 text-gray-400\">{key + 1}</td>\n                        <td className=\"p-2 font-bold\">{room.course_name}</td>\n                        <td className=\"p-2\">\n                          <span className=\"p-1 text-sm bg-yellow-100 font-bold text-yellow-900 rounded\">\n                            {room.position_title}\n                          </span>\n                        </td>\n                        <td className=\"p-2\">{room.course_code}</td>\n                        <td className=\"p-2 text-sm\">\n                          {this.state.error === false &&\n                          this.props.proctoring.exams_list.loaded === false ? (\n                            <span className=\"text-blue-500 animate__animated animate__fadeIn animate__infinite\">\n                              Loading...\n                            </span>\n                          ) : examFound === undefined ? (\n                            \"Not found\"\n                          ) : (\n                            examFound.exam_date\n                          )}\n                        </td>\n                        <td className=\"p-2 text-right\">\n                          {examFound !== undefined && examFound !== undefined && (\n                            <Fragment>\n                              {room.course_id ===\n                                this.props.proctoring.exam.course_id &&\n                                room.position_id ===\n                                  this.props.proctoring.exam.position_id && (\n                                  <button\n                                    className=\" group-hover:bg-red-500 py-1 px-3 rounded text-red-500 group-hover:text-white bg-red-100\"\n                                    onClick={() =>\n                                      window.confirm(\n                                        \"Are you sure you want to exist the room\"\n                                      ) &&\n                                      this.props.FC_ClearExamToRoomProctoring()\n                                    }\n                                  >\n                                    Leave Room\n                                  </button>\n                                )}\n                              {this.props.proctoring.exam.room_id === \"\" && (\n                                <button\n                                  onClick={() => {\n                                    if (\n                                      examFound !== undefined &&\n                                      examFound !== undefined &&\n                                      room !== null &&\n                                      room !== undefined\n                                    ) {\n                                      this.props.FC_LoadExamToRoomProctoring({\n                                        video_support: false,\n                                        start_exam: false,\n                                        start_time: examFound?.start_time,\n                                        end_time: \"\",\n                                        exam_done: false,\n                                        period_id:\n                                          this.props.auth.application_session\n                                            ._id,\n                                        exam_status: examFound?.exam_status,\n                                        exam_date: examFound?.exam_date,\n                                        duration: examFound?.duration,\n                                        position_id: room.position_id,\n                                        position_title: room.position_title,\n                                        course_id: room.course_id,\n                                        course_code: room.course_code,\n                                        course_name: room.course_name,\n                                        room_id:\n                                          this.props.proctoring.room.room_id,\n                                        exam_id: examFound.id,\n                                      } as ProctoringExam);\n                                    }\n                                  }}\n                                  className=\" group-hover:bg-blue-500 py-1 px-3 rounded text-blue-500 group-hover:text-white bg-blue-100\"\n                                >\n                                  Open\n                                </button>\n                              )}\n                            </Fragment>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth, proctoring };\n};\n\nexport const ProctoringCenter = connect(mapStateToProps, {\n  FC_RoomDetails,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n})(_ProctoringCenter);\n"],"sourceRoot":""}