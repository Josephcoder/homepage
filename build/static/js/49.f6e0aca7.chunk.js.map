{"version":3,"sources":["containers/QuestionBank/QuestionsList/QuestionsList.tsx","containers/QuestionBank/AddQuestion/ChooseMethod/ChooseMethod.tsx"],"names":["_QuestionsList","props","setLoading","status","setState","loading","setAddQuestion","addQuestion","chooseCourse","course","setSelectedCourse","loadQuestionBank","course_id","selectCourse","answerQuestionFn","answer","removeSelectedQuestion","question_id","removeQuestion","msg","successMessage","errorMessage","componentDidMount","questionTypes","length","loadQuestionTypes","courses","loadCourses","selected_course","questionBank","questions","setEditQuestion","item","setSelectedQuestion","editQuestion","unSelectQuestion","question","selectedQuestion","filterQuestions","questionType","searchKeyword","response","filter","type","keywordsToSearch","test","testResponse","SearchData","last","find","itm","_id","lst","state","searchQuestionInput","preview","searchByTpe","displaySearch","this","className","course_code","course_name","onClick","getQuestionType","map","i","id","title","description","onChange","e","target","value","placeholder","colSpan","theme","NoResultThemes","Dark","component","marks","window","confirm","LoadingType","dark","questionsList","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","questionAnswers","submitQuestionAnswer","large","selected_course_id","Component","QuestionsList","connect","auth","schoolLevels","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","ChooseMethod","undefined","to"],"mappings":"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","file":"static/js/49.f6e0aca7.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  QuestionAnswersStore,\n  removeQuestion,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport * as Interfaces from \"../../../interfaces/index\";\nimport {\n  course,\n  QuestionInterface,\n  QuestionItemInterface,\n} from \"../../../interfaces/index\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { getQuestionType } from \"../../../utils/question_bank\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport { ChooseMethod } from \"../AddQuestion/ChooseMethod/ChooseMethod\";\nimport EditQuestion from \"../AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { LoadingType } from \"../../../components/Loading/LoadingV2\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport SearchData from \"../../../utils/search\";\nimport QuestionPreview from \"../../../components/QuestionPreview/QuestionPreview\";\nimport { MdClose } from \"react-icons/md\";\n\ninterface QuestionsListProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  removeQuestion: (\n    question_id: string,\n    callback: (loading: boolean, status: boolean, msg: string) => void\n  ) => void;\n}\ninterface QuestionsListState {\n  loading: boolean;\n  searchQuestionInput: string;\n  selectCourse: boolean;\n  addQuestion: boolean;\n  editQuestion: QuestionInterface | null;\n  preview: QuestionInterface | null;\n  selectedQuestion: QuestionInterface | null;\n  successMessage: string;\n  errorMessage: string;\n  searchByTpe: string | null;\n  displaySearch: boolean;\n}\n\nclass _QuestionsList extends Component<QuestionsListProps, QuestionsListState> {\n  constructor(props: QuestionsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchQuestionInput: \"\",\n      selectCourse: false,\n      addQuestion: false,\n      editQuestion: null,\n      preview: null,\n      selectedQuestion: null,\n      successMessage: \"\",\n      errorMessage: \"\",\n      searchByTpe: null,\n      displaySearch: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setAddQuestion = (status: boolean) => {\n    this.setState({ addQuestion: status });\n  };\n\n  chooseCourse = (course: course | null) => {\n    this.props.setSelectedCourse(course);\n    if (course !== null) {\n      this.props.loadQuestionBank(course.course_id, this.setLoading);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  // setSelectedQuestion = (question: exam_question) => {};\n\n  removeSelectedQuestion = (question_id: string) => {\n    this.props.removeQuestion(\n      question_id,\n      (loading: boolean, status: boolean, msg: string) => {\n        this.setState({ loading: loading });\n        if (loading === false && msg !== \"\") {\n          if (status === true) {\n            this.setState({ successMessage: msg });\n          } else {\n            this.setState({ errorMessage: msg });\n          }\n        }\n      }\n    );\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true });\n    } else {\n      this.setState({ selectCourse: false });\n    }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n  };\n\n  setEditQuestion = (item: QuestionInterface) => {\n    this.props.setSelectedQuestion(item);\n    this.setState({ editQuestion: item });\n  };\n\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n\n  setSelectedQuestion = (question: QuestionInterface) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  filterQuestions = (\n    questions: QuestionInterface[],\n    questionType: string | null,\n    searchKeyword: string\n  ) => {\n    let response: QuestionInterface[] = questions;\n    if (questionType !== null) {\n      response = questions.filter((item) => item.type === questionType);\n    }\n    if (searchKeyword !== \"\") {\n      let keywordsToSearch: QuestionItemInterface[] = [];\n      for (let test of response) {\n        keywordsToSearch = [...keywordsToSearch, test.question[0]];\n      }\n      let testResponse = SearchData(\n        keywordsToSearch,\n        searchKeyword\n      ) as QuestionItemInterface[];\n      response = response.filter((last) =>\n        testResponse.find(\n          (itm) =>\n            itm._id === last.question.find((lst) => lst._id === itm._id)?._id\n        )\n      );\n    }\n    return response;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div className=\"-ml-1 mr-2\">\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-col px-1\">\n                  <span className=\"text-gray-600 text-3xl font-bold\">\n                    Question Bank\n                  </span>\n                  <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.props.course.selected_course !== null && (\n                    <div\n                      onClick={() => this.setState({ selectCourse: true })}\n                      className={`btn cursor-pointer ${\n                        this.props.course.selected_course === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100  text-yellow-700 border border-yellow-200\"\n                          : \"bg-blue-50 hover:bg-blue-100  text-blue-600\"\n                      } h-max flex items-center justify-center h-10`}\n                    >\n                      {this.props.course.selected_course === null\n                        ? \"Choose course\"\n                        : \"Change course\"}\n                    </div>\n                  )}\n                  <div\n                    onClick={() => this.setState({ addQuestion: true })}\n                    className=\"btn cursor-pointer bg-white hover:bg-blue-100 border border-blue-600 text-blue-600 h-max flex items-center justify-center h-10\"\n                  >\n                    Add questions\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center gap-3\">\n                <div\n                  onClick={() =>\n                    this.setState({ displaySearch: !this.state.displaySearch })\n                  }\n                  className=\"w-full border hover:bg-blue-50 border-gray-400 px-3 py-2 rounded\"\n                >\n                  <div className=\"flex flex-row items-center justify-between text-gray-600 cursor-pointer\">\n                    <span className=\"text-sm font-bold\">\n                      {this.state.searchByTpe === null ? (\n                        <span>Filter by question type</span>\n                      ) : (\n                        this.props.questionTypes.questionTypes && (\n                          <span className=\"text-blue-600 font-bold\">\n                            {getQuestionType(\n                              this.props.questionTypes.questionTypes,\n                              this.state.searchByTpe\n                            )}\n                          </span>\n                        )\n                      )}\n                    </span>\n                    {/* <BsCaretRightFill className=\"text-xl\" /> */}\n                  </div>\n                  {this.state.displaySearch === true && (\n                    <div className=\"absolute w-auto bg-white shadow-md border rounded z-40 animate__animated animate__zoomIn animate__faster\">\n                      <div className=\"flex flex-row items-center justify-between text-white cursor-pointer bg-blue-600  px-3 py-3 rounded-t\">\n                        <span>Select question type</span>\n                        <MdClose\n                          onClick={() =>\n                            this.setState({\n                              displaySearch: !this.state.displaySearch,\n                            })\n                          }\n                          className=\"text-2xl\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => this.setState({ searchByTpe: null })}\n                        className={`flex flex-col py-2 px-3 group hover:bg-blue-100 ${\n                          this.state.searchByTpe === null ? \"bg-blue-100\" : \"\"\n                        } cursor-pointer`}\n                      >\n                        <span className=\"text-base font-extrabold text-gray-800 group-hover:text-blue-600\">\n                          All question types\n                        </span>\n                        <span className=\"text-xs text-gray-500\">\n                          Choose this option to view all types of questions\n                        </span>\n                      </div>\n                      {this.props.questionTypes.questionTypes !== null &&\n                        this.props.questionTypes.questionTypes.map(\n                          (item, i) => (\n                            <div\n                              key={i + 1}\n                              onClick={() =>\n                                item.id &&\n                                this.setState({ searchByTpe: item.id })\n                              }\n                              className={`flex flex-col py-2 px-3 group hover:bg-blue-100 ${\n                                this.state.searchByTpe === item.id\n                                  ? \"bg-blue-100\"\n                                  : \"\"\n                              } cursor-pointer`}\n                            >\n                              <span className=\"text-base font-extrabold text-gray-800 group-hover:text-blue-600\">\n                                {item.title}\n                              </span>\n                              <span className=\"text-xs text-gray-500\">\n                                {item.description}\n                              </span>\n                            </div>\n                          )\n                        )}\n                    </div>\n                  )}\n                </div>\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setState({ searchQuestionInput: e.target.value })\n                  }\n                  type=\"text\"\n                  className=\"input-white border h-10 text-sm border-gray-400 w-full\"\n                  placeholder=\"Search question by title or description\"\n                />\n              </div>\n\n              {this.state.errorMessage !== \"\" && (\n                <div\n                  onClick={() => this.setState({ errorMessage: \"\" })}\n                  className=\"px-3 py-2 rounded bg-yellow-100 text-yellow-700 font-bold my-2\"\n                >\n                  {this.state.errorMessage}\n                </div>\n              )}\n              {this.state.successMessage !== \"\" && (\n                <div\n                  onClick={() => this.setState({ successMessage: \"\" })}\n                  className=\"px-3 py-2 rounded bg-green-100 text-green-700 font-bold my-2\"\n                >\n                  {this.state.successMessage}\n                </div>\n              )}\n            </div>\n            <div className=\"flex-col\">\n              <div className=\"flex my-2 flex-row justify-between items-center\">\n                <span className=\"text-xl font-bold text-blue-600\">\n                  List of questions\n                </span>\n                <div className=\"underline font-bold text-blue-700 bg-white rounded-full px-3 py-1\">\n                  {this.props.questionBank.questions &&\n                    this.props.questionBank.questions.length}{\" \"}\n                  questions\n                </div>\n              </div>\n              <div className=\"flex flex-col\">\n                <div className=\"bg-white flex rounded\">\n                  <table className=\"table-auto w-full\">\n                    <thead>\n                      <tr className=\"text-left bg-blue-50 border-b-2 border-blue-500 text-blue-600\">\n                        <th className=\"p-3 w-1/12 pl-10\">#</th>\n                        <th className=\"p-3\">Question</th>\n                        <th>Category</th>\n                        <th>Marks</th>\n                        <th></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.loading === true ? (\n                        <tr>\n                          <td colSpan={5} className=\"pt-6\">\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : this.props.course.selected_course === null ? (\n                        <tr>\n                          <td colSpan={5}>\n                            <div className=\"bg-gray-100 flex flex-col items-center text-center gap-3 rounded px-3 py-3\">\n                              <span className=\"text-xl font-bold\">\n                                No course selected!\n                              </span>\n                              <div\n                                onClick={() =>\n                                  this.setState({ selectCourse: true })\n                                }\n                                className=\"btn bg-yellow-50 text-yellow-800 cursor-pointer hover:bg-white border border-white shadow hover:shadow-none hover:border-yellow-600\"\n                              >\n                                Choose a course\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                      ) : this.props.questionBank.questions === null ? (\n                        <tr>\n                          <td colSpan={5} className=\"pt-6\">\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : this.filterQuestions(\n                          this.props.questionBank.questions,\n                          this.state.searchByTpe,\n                          this.state.searchQuestionInput\n                        ).length === 0 ? (\n                        <tr>\n                          <td colSpan={5}>\n                            <div className=\"flex flex-col items-cnter justify-center\">\n                              <NoResult\n                                theme={NoResultThemes.Dark}\n                                value={\"\"}\n                                component={\n                                  <span className=\"font-bold text-gray-600 text-2xl -mt-4\">\n                                    No questions available!\n                                  </span>\n                                }\n                              />\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        this.props.questionTypes.questionTypes !== null &&\n                        this.props.questionTypes.questionTypes.length > 0 &&\n                        this.filterQuestions(\n                          this.props.questionBank.questions,\n                          this.state.searchByTpe,\n                          this.state.searchQuestionInput\n                        ).map((item, i) => (\n                          <tr\n                            key={i + 1}\n                            className=\"shadow-sm cursor-pointer border-none\"\n                          >\n                            <td className=\"flex items-center justify-center\">\n                              <div className=\"py-1 rounded-full my-3\">\n                                <span className=\"text-xl italic text-blue-600\">\n                                  {i < 9 && 0}\n                                  {i + 1}\n                                </span>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"py-2 px-3 flex flex-col\">\n                                <span className=\"text-sm text-gray-600 font-bold w-96 truncate\">\n                                  {item.question[0].title}\n                                </span>\n                                <span className=\"text-xs text-gray-500 w-96 truncate\">\n                                  {item.question[0].description}\n                                </span>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"text-xs font-bold text-gray-700 w-80 truncate\">\n                                {getQuestionType(\n                                  this.props.questionTypes.questionTypes,\n                                  item.type\n                                ) === null ? (\n                                  <span className=\"text-yellow-700\">\n                                    Invalid type\n                                  </span>\n                                ) : (\n                                  <span className=\"text-blue-600\">\n                                    {getQuestionType(\n                                      this.props.questionTypes.questionTypes,\n                                      item.type\n                                    )}\n                                  </span>\n                                )}\n                              </div>\n                            </td>\n                            <td>\n                              <span className=\"text-xs text-gray-500\">\n                                {item.marks}\n                              </span>\n                            </td>\n                            <td>\n                              <div className=\"flex justify-end pr-1\">\n                                <div\n                                  onClick={() => {\n                                    this.setState({ preview: item });\n                                    this.setState({ selectedQuestion: item });\n                                  }}\n                                  className=\"border border-gray-200 btn bg-gray-100 px-3 py-1 rounded text-gray-600 text-sm flex items-center\"\n                                >\n                                  <span>View</span>\n                                </div>\n                                <div\n                                  onClick={() => {\n                                    this.setEditQuestion(item);\n                                  }}\n                                  className=\"border border-blue-200 btn bg-blue-50 px-3 py-1 rounded text-blue-600 text-sm flex items-center ml-1\"\n                                >\n                                  <span>Edit</span>\n                                </div>\n                                <div\n                                  onClick={() => {\n                                    if (\n                                      window.confirm(\n                                        \"Are you sure do you want to delete this question?\"\n                                      ) === true\n                                    ) {\n                                      this.removeSelectedQuestion(\n                                        item.question_id\n                                      );\n                                    }\n                                  }}\n                                  className=\"border border-red-200 btn px-3 py-1 rounded bg-red-50 text-red-600 text-sm flex items-center ml-1\"\n                                >\n                                  <span>Delete</span>\n                                </div>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {this.props.course.selected_course !== null && (\n              <div className=\"bg-white px-2 py-2 mt-4 flex flex-col rounded-t\">\n                <span className=\"text-sm text-gray-600 font-bold\">Course</span>\n                <span className=\"font-bold text-xl text-blue-600\">\n                  {this.props.course.selected_course.course_code} -{\" \"}\n                  {this.props.course.selected_course.course_name}\n                </span>\n              </div>\n            )}\n            {this.props.questionBank.questions === null ||\n            this.props.questionBank.selectedQuestion === null ? (\n              <div className=\"mt-4 px-4 py-4 rounded bg-white\">\n                <Loading type={LoadingType.dark} />\n              </div>\n            ) : (\n              <EditQuestion\n                selectedQuestion={this.state.editQuestion}\n                questionsList={this.props.questionBank.questions}\n                unSelectQuestion={this.unSelectQuestion}\n              />\n            )}\n          </div>\n        )}\n        {this.state.preview !== null && this.state.selectedQuestion !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600\">\n                Question preview\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ preview: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <QuestionPreview\n              questionAnswers={[]}\n              answerQuestionFn={this.answerQuestionFn}\n              selectedQuestion={this.state.selectedQuestion}\n              setSelectedQuestion={this.setSelectedQuestion}\n              preview={true}\n              submitQuestionAnswer={false}\n            />\n          </Modal>\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestion === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-col\">\n                <span className=\"text-gray-800 text-3xl font-extrabold\">\n                  Choose method\n                </span>\n                <span className=\"text-gray-600 text-sm\">\n                  Prepare question bank by adding questions through two main\n                  methods\n                </span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestion: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <ChooseMethod close={this.setAddQuestion} />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nexport const QuestionsList = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  removeQuestion,\n})(_QuestionsList);\n","import React from \"react\";\n// import { FaEdit } from \"react-icons/fa\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\nimport { SiMicrosoftexcel } from \"react-icons/si\";\nimport { Link } from \"react-router-dom\";\n\ninterface ChooseMethodProps {\n  close?: (state: boolean) => void;\n}\n\nexport const ChooseMethod = (props: ChooseMethodProps) => {\n  return (\n    <div className=\"px-2 py-2\">\n      <div className=\"flex flex-row items-center gap-3\">\n        {props.close === undefined && (\n          <Link to=\"/question-bank\">\n            <IoMdArrowRoundBack\n              className={`text-blue-600 text-4xl rounded-full bg-gray-100 cursor-pointer animate__animated animate__lightSpeedInLeft`}\n            />\n          </Link>\n        )}\n        {props.close === undefined && (\n          <div className=\"flex flex-col\">\n            <span className=\"text-gray-800 text-3xl font-extrabold\">\n              Choose method\n            </span>\n            <span className=\"text-gray-600 text-sm\">\n              Prepare question bank by adding questions through two main methods\n            </span>\n          </div>\n        )}\n      </div>\n      <div\n        className={`${\n          props.close === undefined ? \"mt-6\" : \"-mt-6\"\n        } grid md:grid-cols-2 bg-white px-4 py-4 rounded`}\n      >\n        {/* <div className=\"col-span-1\">\n          <Link to=\"/add-question\">\n            <div\n              className={`bg-blue-50 hover:bg-blue-100 border border-white px-6 py-6 rounded text-2xl mr-2 flex flex-col justify-center items-center ${\n                props.close === undefined &&\n                \"animate__animated animate__zoomIn animate__fast\"\n              }`}\n            >\n              <FaEdit className=\"text-8xl text-primary\" />\n              <span className=\"text-primary font-bold\">Add manually</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                This option allows you to prepare one question at time using\n                system's interface\n              </span>\n            </div>\n          </Link>\n        </div> */}\n        <div className=\"col-span-1\">\n          <Link to=\"/upload-questions\">\n            <div\n              className={`bg-white hover:bg-gray-100 border border-blue-600 hover:border-gray-600 px-6 py-6 rounded text-2xl ml-2 flex flex-col justify-center items-center ${\n                props.close === undefined &&\n                \"animate__animated animate__zoomIn animate__fast\"\n              }`}\n            >\n              <SiMicrosoftexcel className=\"text-8xl text-gray-600\" />\n              <span className=\"text-gray-600 font-bold\">Upload excel</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                The option of uploading list of questions through excel file.\n                You can also upload the exam at time\n              </span>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}