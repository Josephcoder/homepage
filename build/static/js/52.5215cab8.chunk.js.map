{"version":3,"sources":["containers/Locations/ViewDistricts.tsx","containers/Locations/ViewProvince.tsx","containers/Locations/ViewSectors.tsx","containers/Locations/Locations.tsx"],"names":["React","memo","connect","FC_CreateDistrict","FC_UpdateDistrict","FC_DeleteDistrict","PushPopupAlert","props","useState","districtName","setDistrictName","districtCode","setDistrictCode","error","setError","handleSubmit","a","isEmptyOrSpaces","element","msg","setLoadingRequest","actionTypes","axios","post","API","APPLICATION","province_id","thisProvince","_id","province_code","district_name","district_code","centers","res","data","console","log","sectors","district_id","title","theme","PopupAlertTheme","success","setActionTypes","thisDistrict","map","center","patch","setThisDistrict","doc_category_error","errorToText","danger","className","districts","length","district","index","NoResult","NoResultThemes","Dark","value","component","onClick","Modal","backDrop","Themes","default","close","displayClose","backDropClose","widthSizeClass","ModalSize","medium","padding","body","footer","type","onChange","e","target","disabled","loadingRequest","Number","FC_CreateProvince","FC_UpdateProvince","FC_DeleteProvince","provinceTitle","setProvinceTitle","provinceCode","setProvinceCode","province_name","updated","setThisProvince","province_error","locations","province","FC_CreateSector","FC_UpdateSector","FC_DeleteSector","sectorName","setSectorName","sectorCode","setSectorCode","sector_name","sector_code","sector_id","thisSector","setThisSector","sector_error","handleDelete","sectorId","delete","district_error","sector","distinctDistrict","rooms","ids","result","LocationsInArray","forEach","includes","undefined","push","distinctCenter","center_id","distinctRoom","room_id","Locations","roomLocation","getAllRoom","loading","setLoading","useEffect","status","ViewDistricts"],"mappings":"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","file":"static/js/52.5215cab8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  FC_CreateDistrict,\n  FC_DeleteDistrict,\n  FC_UpdateDistrict,\n} from \"../../actions/location\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport {\n  DistrictInterface,\n  RoomLocationInterface,\n} from \"../../shared/interfaces\";\nimport { PushPopupAlert } from \"../../actions/system\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { errorToText } from \"../../utils/errors\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { isEmptyOrSpaces } from \"../../shared/dataTest\";\n\ninterface AppProps {\n  thisProvince: RoomLocationInterface;\n  thisDistrict: DistrictInterface | null;\n  loadingRequest: boolean;\n  actionTypes:\n    | \"CREATE_PROVINCE\"\n    | \"UPDATE_PROVINCE\"\n    | \"CREATE_DISTRICT\"\n    | \"UPDATE_DISTRICT\"\n    | \"CREATE_SECTOR\"\n    | \"UPDATE_SECTOR\"\n    | null;\n  setLoadingRequest: React.Dispatch<React.SetStateAction<boolean>>;\n  setThisDistrict: React.Dispatch<\n    React.SetStateAction<DistrictInterface | null>\n  >;\n  setActionTypes: React.Dispatch<\n    React.SetStateAction<\n      | \"CREATE_PROVINCE\"\n      | \"UPDATE_PROVINCE\"\n      | \"CREATE_DISTRICT\"\n      | \"UPDATE_DISTRICT\"\n      | \"CREATE_SECTOR\"\n      | \"UPDATE_SECTOR\"\n      | null\n    >\n  >;\n  FC_CreateDistrict: Function;\n  FC_UpdateDistrict: Function;\n  FC_DeleteDistrict: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\nconst ViewDistrict: React.FC<AppProps> = (props) => {\n  const [districtName, setDistrictName] = useState<string>(\"\");\n  const [districtCode, setDistrictCode] = useState<number>(0);\n  const [error, setError] = useState<{ element: string; msg: string } | null>(\n    null\n  );\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(districtName)) {\n      return setError({\n        element: \"district_name\",\n        msg: \"District name is required\",\n      });\n    }\n\n    if (districtCode <= 0) {\n      return setError({\n        element: \"district_code\",\n        msg: \"Invalid district code, code must be greater than 0\",\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      let res;\n      if (props.actionTypes === \"CREATE_DISTRICT\") {\n        res = await axios.post<{ data: DistrictInterface }>(\n          `${API.APPLICATION}/district`,\n          {\n            province_id: props.thisProvince._id,\n            province_code: props.thisProvince.province_code,\n            district_name: districtName,\n            district_code: districtCode,\n            centers: [],\n          }\n        );\n        if (res.data) {\n          console.log({\n            province_id: props.thisProvince._id,\n            data: res.data.data,\n            res,\n          });\n          props.FC_CreateDistrict({\n            province_id: props.thisProvince._id,\n            data: {\n              centers: res.data.data.centers,\n              sectors: res.data.data.sectors,\n              province_code: res.data.data.province_code,\n              province_id: res.data.data.province_id,\n              district_code: res.data.data.district_code,\n              district_name: res.data.data.district_name,\n              district_id: res.data.data._id,\n            },\n          });\n          props.PushPopupAlert({\n            title: \"New district created successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(null);\n          setDistrictName(\"\");\n          setDistrictCode(0);\n        }\n      } else if (\n        props.thisDistrict &&\n        props.actionTypes === \"UPDATE_DISTRICT\"\n      ) {\n        const centers: string[] = props.thisDistrict.centers.map(\n          (center) => center._id\n        );\n        res = await axios.patch<{ data: DistrictInterface }>(\n          `${API.APPLICATION}/district`,\n          {\n            district_id: props.thisDistrict._id,\n            province_code: props.thisProvince.province_code,\n            district_name: districtName,\n            district_code: districtCode,\n            centers,\n          }\n        );\n        if (res.data) {\n          props.FC_UpdateDistrict({\n            province_id: props.thisProvince._id,\n            district_id: props.thisDistrict._id,\n            district_name: districtName,\n          });\n          props.PushPopupAlert({\n            title: \"District updated successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(null);\n          setDistrictName(\"\");\n          props.setThisDistrict(null);\n        }\n      }\n    } catch (error) {\n      console.log({ doc_category_error: error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n      props.setLoadingRequest(false);\n    }\n  };\n\n  // const handleDelete = async (districtId: string) => {\n  //   try {\n  //     const res = await axios.delete<DistrictInterface>(\n  //       `${API.APPLICATION}/district/${districtId}`\n  //     );\n\n  //     if (res.data) {\n  //       props.FC_DeleteDistrict({\n  //         province_id: props.thisProvince._id,\n  //         district_id: districtId,\n  //       });\n  //       props.PushPopupAlert({\n  //         title: \"District deleted successfully\",\n  //         theme: PopupAlertTheme.success,\n  //       });\n  //       props.setLoadingRequest(false);\n  //       props.setActionTypes(null);\n  //     }\n  //   } catch (error) {\n  //     console.log({ district_error: error });\n  //     props.PushPopupAlert({\n  //       title: errorToText(error),\n  //       theme: PopupAlertTheme.danger,\n  //     });\n  //     props.setLoadingRequest(false);\n  //   }\n  // };\n\n  return (\n    <div className={`w-full p-2`}>\n      {props.thisProvince.districts.length > 0 ? (\n        <div className=\"rounded border border-gray-100 shadow-sm animate__animated animate__fadeIn\">\n          <table className=\"w-full z-0\">\n            <thead className=\"bg-gray-50\">\n              <tr className=\"text-left\">\n                <th className=\"px-3 py-3\">#</th>\n                <th>District name</th>\n                <th>District code</th>\n                <th>Sectors</th>\n                {/* <th>Status</th> */}\n              </tr>\n            </thead>\n            <tbody className=\"text-base\">\n              {props.thisProvince.districts.map((district, index) => (\n                <tr\n                  key={index + district._id}\n                  className={`text-left border-b border-gray-50`}\n                >\n                  <td className=\"px-3 py-1\">{index + 1}</td>\n                  <td>{district.district_name}</td>\n                  <td>{district.district_code}</td>\n                  <td>\n                    {district.sectors && district.sectors.length > 0\n                      ? district.sectors.length + \" Sector(s)\"\n                      : \"\"}\n                  </td>\n                  {/* <td>\n                    <div className=\"flex items-center gap-2\">\n                      <button\n                        title={\n                          props.thisDistrict &&\n                          props.thisDistrict._id === district._id\n                            ? \"Close Centers\"\n                            : \"View Centers\"\n                        }\n                        className={`${\n                          props.thisDistrict &&\n                          props.thisDistrict._id === district._id\n                            ? \"bg-gray-500 hover:bg-gray-600\"\n                            : \"bg-gray-400 hover:bg-gray-500\"\n                        } p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none`}\n                        onClick={() =>\n                          !props.thisDistrict ||\n                          props.thisDistrict._id !== district._id\n                            ? props.setThisDistrict(district)\n                            : props.setThisDistrict(null)\n                        }\n                      >\n                        {props.thisDistrict &&\n                        props.thisDistrict._id === district._id ? (\n                          <IoMdEyeOff className=\"text-white w-4 h-4\" />\n                        ) : (\n                          <IoMdEye className=\"text-white w-4 h-4\" />\n                        )}\n                      </button>\n                      <button\n                        title=\"Update district\"\n                        className=\"bg-blue-500 hover:bg-blue-600 p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none\"\n                        onClick={() => {\n                          props.setThisDistrict(district);\n                          setDistrictName(district.district_name);\n                          setDistrictCode(district.district_code);\n                          props.setActionTypes(\"UPDATE_DISTRICT\");\n                        }}\n                        disabled={\n                          props.loadingRequest || props.actionTypes !== null\n                        }\n                      >\n                        <MdCreate className=\"text-white w-4 h-4\" />\n                      </button>\n                      <button\n                        title=\"Delete Sub-Category\"\n                        className=\"bg-red-500 hover:bg-red-600 p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none\"\n                        onClick={() => handleDelete(district._id)}\n                        disabled={props.loadingRequest}\n                      >\n                        <MdClear className=\"text-white w-4 h-4\" />\n                      </button>\n                    </div>\n                  </td> */}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <NoResult\n          theme={NoResultThemes.Dark}\n          value={\"No district found!\"}\n          component={\n            <div className=\"w-full mt-2 flex flex-row items-center justify-center\">\n              <ul className=\"text-sm py-2 text-blue-600 font-bold flex flex-row gap-2\">\n                <li\n                  onClick={() => props.setActionTypes(\"CREATE_DISTRICT\")}\n                  className=\"underline text-gray-500 cursor-pointer\"\n                >\n                  Add district\n                </li>\n              </ul>\n            </div>\n          }\n        />\n      )}\n\n      {/* modal for creating new categories or sub category */}\n      {props.actionTypes &&\n        (props.actionTypes === \"CREATE_DISTRICT\" ||\n          props.actionTypes === \"UPDATE_DISTRICT\") && (\n          <Modal\n            backDrop={true}\n            theme={Themes.default}\n            close={(): void => {\n              props.setActionTypes(null);\n              setDistrictName(\"\");\n              setDistrictCode(10);\n              setError(null);\n            }}\n            displayClose={false}\n            backDropClose={false}\n            title={\n              <div className=\"flex items-center space-x-5\">\n                <div className=\"block pl-2 font-semibold text-xl self-start text-gray-700\">\n                  {/* <p className=\"text-base text-gray-500 font-medium\">\n                    You are{\" \"}\n                    {actionType === \"CREATE_SUB\" || \"CREATE_CAT\"\n                      ? \"creating\"\n                      : \"updating\"}\n                  </p> */}\n                  <h2 className=\"uppercase text-back\">\n                    {props.actionTypes === \"CREATE_DISTRICT\"\n                      ? \"CREATING NEW DISTRICT\"\n                      : props.actionTypes === \"UPDATE_DISTRICT\" &&\n                        \"UPDATING EXISTING DISTRICT\"}\n                  </h2>\n                </div>\n              </div>\n            }\n            widthSizeClass={ModalSize.medium}\n            padding={{ title: true, body: false, footer: false }}\n          >\n            <div className=\"mx-5 mb-4\">\n              <div className=\"py-2 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7\">\n                <div className=\"flex flex-col\">\n                  <label>District name</label>\n                  <input\n                    type=\"text\"\n                    className={`bg-white py-1 px-2 border-2 ${\n                      error && error.element === \"district_name\"\n                        ? \"border-red-700\"\n                        : \"border-gray-700\"\n                    } rounded focus:outline-none focus:bg-gray-100`}\n                    onChange={(e) => {\n                      error &&\n                        error.element === \"district_name\" &&\n                        setError(null);\n                      setDistrictName(e.target.value);\n                    }}\n                    value={districtName}\n                    disabled={props.loadingRequest}\n                  />\n                  {error && error.element === \"district_name\" && (\n                    <span className=\"text-red-700\">{error.msg}</span>\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <label>District code</label>\n                  <input\n                    type=\"number\"\n                    className={`bg-white py-1 px-2 border-2 ${\n                      error && error.element === \"district_code\"\n                        ? \"border-red-700\"\n                        : \"border-gray-700\"\n                    } rounded focus:outline-none focus:bg-gray-100`}\n                    onChange={(e) => {\n                      error &&\n                        error.element === \"district_code\" &&\n                        setError(null);\n                      setDistrictCode(Number(e.target.value));\n                    }}\n                    value={districtCode}\n                    disabled={props.loadingRequest}\n                  />\n                  {error && error.element === \"district_code\" && (\n                    <span className=\"text-red-700\">{error.msg}</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"pt-4 flex justify-between\">\n                <button\n                  onClick={() => {\n                    props.setActionTypes(null);\n                    setDistrictName(\"\");\n                    setDistrictCode(10);\n                    setError(null);\n                  }}\n                  className={`btn bg-gray-400 text-white hover:bg-gray-600`}\n                  type=\"button\"\n                  disabled={props.loadingRequest}\n                >\n                  Exit\n                </button>\n                <button\n                  className=\"btn bg-primary text-white hover:bg-blue-600\"\n                  type=\"button\"\n                  onClick={() => handleSubmit()}\n                  disabled={props.loadingRequest}\n                >\n                  {props.loadingRequest ? \"Loading...\" : \"Save\"}\n                </button>\n              </div>\n            </div>\n          </Modal>\n        )}\n      {/* end modal for creating new categories or sub category */}\n    </div>\n  );\n};\n\nexport default React.memo(connect(null, {\n  FC_CreateDistrict,\n  FC_UpdateDistrict,\n  FC_DeleteDistrict,\n  PushPopupAlert,\n})(ViewDistrict));\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IoMdEye, IoMdEyeOff } from \"react-icons/io\";\nimport {\n  FC_CreateProvince,\n  FC_DeleteProvince,\n  FC_UpdateProvince,\n} from \"../../actions/location\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport {\n  DistrictInterface,\n  RoomLocationInterface,\n} from \"../../shared/interfaces\";\nimport { PushPopupAlert } from \"../../actions/system\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { errorToText } from \"../../utils/errors\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport { isEmptyOrSpaces } from \"../../shared/dataTest\";\n\ninterface AppProps {\n  thisProvince: RoomLocationInterface | null;\n  thisDistrict: DistrictInterface | null;\n  loadingRequest: boolean;\n  locations: RoomLocationInterface[];\n  actionTypes:\n    | \"CREATE_PROVINCE\"\n    | \"UPDATE_PROVINCE\"\n    | \"CREATE_DISTRICT\"\n    | \"UPDATE_DISTRICT\"\n    | \"CREATE_SECTOR\"\n    | \"UPDATE_SECTOR\"\n    | null;\n  setLoadingRequest: React.Dispatch<React.SetStateAction<boolean>>;\n  setThisProvince: React.Dispatch<\n    React.SetStateAction<RoomLocationInterface | null>\n  >;\n  setActionTypes: React.Dispatch<\n    React.SetStateAction<\n      | \"CREATE_PROVINCE\"\n      | \"UPDATE_PROVINCE\"\n      | \"CREATE_DISTRICT\"\n      | \"UPDATE_DISTRICT\"\n      | \"CREATE_SECTOR\"\n      | \"UPDATE_SECTOR\"\n      | null\n    >\n  >;\n  FC_CreateProvince: Function;\n  FC_UpdateProvince: Function;\n  FC_DeleteProvince: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\nconst ViewProvince: React.FC<AppProps> = (props) => {\n  const [provinceTitle, setProvinceTitle] = useState<string>(\"\");\n  const [provinceCode, setProvinceCode] = useState<number>(0);\n  const [error, setError] = useState<{ element: string; msg: string } | null>(\n    null\n  );\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(provinceTitle)) {\n      return setError({\n        element: \"province_title\",\n        msg: \"Title of Province is required\",\n      });\n    }\n\n    if (provinceCode <= 0) {\n      return setError({\n        element: \"province_code\",\n        msg: \"Code of Province is required\",\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      let res;\n      if (props.actionTypes === \"CREATE_PROVINCE\") {\n        res = await axios.post<{ data: RoomLocationInterface }>(\n          `${API.APPLICATION}/province`,\n          {\n            province_name: provinceTitle,\n            province_code: provinceCode,\n            districts: [],\n          }\n        );\n\n        if (res.data) {\n          props.FC_CreateProvince(res.data.data);\n          props.PushPopupAlert({\n            title: \"New Province created successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(null);\n          setProvinceTitle(\"\");\n        }\n      } else if (\n        props.thisProvince &&\n        props.actionTypes === \"UPDATE_PROVINCE\"\n      ) {\n        const districts: string[] = props.thisProvince.districts.map(\n          (district) => district._id\n        );\n        res = await axios.patch<{ updated: RoomLocationInterface }>(\n          `${API.APPLICATION}/province`,\n          {\n            province_id: props.thisProvince._id,\n            province_name: provinceTitle,\n            province_code: provinceCode,\n            districts,\n          }\n        );\n        if (res.data) {\n          console.log({ res: res.data.updated });\n          props.FC_UpdateProvince(res.data.updated);\n          props.PushPopupAlert({\n            title: \"Province updated successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(null);\n          setProvinceTitle(\"\");\n          props.setThisProvince(null);\n        }\n      }\n    } catch (error) {\n      console.error({ province_error: error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n      props.setLoadingRequest(false);\n    }\n  };\n\n  // const handleDelete = async (provinceId: string) => {\n  //   try {\n  //     const res = await axios.delete<RoomLocationInterface>(\n  //       `${API.APPLICATION}/province/${provinceId}`\n  //     );\n\n  //     if (res.data) {\n  //       console.log({ res });\n  //       props.FC_DeleteProvince(provinceId);\n  //       props.PushPopupAlert({\n  //         title: \"Province deleted successfully\",\n  //         theme: PopupAlertTheme.success,\n  //       });\n  //       props.setLoadingRequest(false);\n  //       props.setActionTypes(null);\n  //     }\n  //   } catch (error) {\n  //     console.log({ province_error: error });\n  //     props.PushPopupAlert({\n  //       title: errorToText(error),\n  //       theme: PopupAlertTheme.danger,\n  //     });\n  //     props.setLoadingRequest(false);\n  //   }\n  // };\n\n  return (\n    <div className={`w-full p-2`}>\n      {props.locations.length > 0 ? (\n        props.locations.map((province, index) => (\n          <div\n            key={index + province._id}\n            className=\"flex justify-between items-center p-2 mb-3 rounded border border-gray-100 shadow\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"ml-2\">\n                <div className=\"text-xl font-semibold text-gray-600\">\n                  {province.province_name}\n                </div>\n                <div className=\"text-sm font-light text-gray-500\">\n                  {province.districts.length > 0\n                    ? province.districts.length + \"District(s)\"\n                    : null}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <button\n                title={\n                  props.thisProvince &&\n                  props.thisProvince._id === province._id &&\n                  props.actionTypes !== \"UPDATE_PROVINCE\"\n                    ? \"Close Districts\"\n                    : \"View Districts\"\n                }\n                className={`${\n                  props.thisProvince &&\n                  props.thisProvince._id === province._id &&\n                  props.actionTypes !== \"UPDATE_PROVINCE\"\n                    ? \"bg-gray-500 hover:bg-gray-600\"\n                    : \"bg-gray-400 hover:bg-gray-500\"\n                } p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none`}\n                onClick={() => {\n                  !props.thisProvince || props.thisProvince._id !== province._id\n                    ? props.setThisProvince(province)\n                    : props.setThisProvince(null);\n                  setProvinceTitle(\"\");\n                  props.setActionTypes(null);\n                }}\n              >\n                {props.thisProvince &&\n                props.thisProvince._id === province._id &&\n                props.actionTypes !== \"UPDATE_PROVINCE\" ? (\n                  <IoMdEyeOff className=\"text-white w-4 h-4\" />\n                ) : (\n                  <IoMdEye className=\"text-white w-4 h-4\" />\n                )}\n              </button>\n              {/* <button\n                title=\"Update Province\"\n                className=\"bg-blue-500 hover:bg-blue-600 p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none\"\n                onClick={() => {\n                  props.setThisProvince(province);\n                  setProvinceTitle(province.province_name);\n                  setProvinceCode(province.province_code);\n                  props.setActionTypes(\"UPDATE_PROVINCE\");\n                }}\n                disabled={props.loadingRequest || props.actionTypes !== null}\n              >\n                <MdCreate className=\"text-white w-4 h-4\" />\n              </button>\n              <button\n                title=\"Delete Sub-Category\"\n                className=\"bg-red-500 hover:bg-red-600 p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none\"\n                onClick={() => handleDelete(province._id)}\n                disabled={props.loadingRequest || props.actionTypes !== null}\n              >\n                <MdClear className=\"text-white w-4 h-4\" />\n              </button> */}\n            </div>\n          </div>\n        ))\n      ) : (\n        <NoResult\n          theme={NoResultThemes.Dark}\n          value=\"No province found!\"\n          component={\n            <div className=\"w-full mt-2 flex flex-row items-center justify-center\">\n              <ul className=\"text-sm py-2 text-blue-600 font-bold flex flex-row gap-2\">\n                <li\n                  onClick={() => props.setActionTypes(\"CREATE_PROVINCE\")}\n                  className=\"underline text-gray-500 cursor-pointer\"\n                >\n                  Add province\n                </li>\n              </ul>\n            </div>\n          }\n        />\n      )}\n\n      {/* modal for creating new categories or sub category */}\n      {props.actionTypes &&\n        (props.actionTypes === \"CREATE_PROVINCE\" ||\n          props.actionTypes === \"UPDATE_PROVINCE\") && (\n          <Modal\n            backDrop={true}\n            theme={Themes.default}\n            close={(): void => {\n              props.setActionTypes(null);\n              setProvinceTitle(\"\");\n              setProvinceCode(0);\n              setError(null);\n            }}\n            displayClose={false}\n            backDropClose={false}\n            title={\n              <div className=\"flex items-center space-x-5\">\n                <div className=\"block pl-2 font-semibold text-xl self-start text-gray-700\">\n                  <h2 className=\"uppercase text-back\">\n                    {props.actionTypes === \"CREATE_PROVINCE\"\n                      ? \"CREATING NEW PROVINCE\"\n                      : props.actionTypes === \"UPDATE_PROVINCE\" &&\n                        \"UPDATING EXISTING PROVINCE\"}\n                  </h2>\n                </div>\n              </div>\n            }\n            widthSizeClass={ModalSize.medium}\n            padding={{ title: true, body: false, footer: false }}\n          >\n            <div className=\"mx-5 mb-4\">\n              <div className=\"py-2 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7\">\n                <div className=\"flex flex-col\">\n                  <label>Province name</label>\n                  <input\n                    type=\"text\"\n                    className={`bg-white py-1 px-2 border-2 ${\n                      error && error.element === \"province_title\"\n                        ? \"border-red-700\"\n                        : \"border-gray-700\"\n                    } rounded focus:outline-none focus:bg-gray-100`}\n                    onChange={(e) => {\n                      error &&\n                        error.element === \"province_title\" &&\n                        setError(null);\n                      setProvinceTitle(e.target.value);\n                    }}\n                    value={provinceTitle}\n                    disabled={props.loadingRequest}\n                  />\n                  {error && error.element === \"province_title\" && (\n                    <span className=\"text-red-700\">{error.msg}</span>\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <label>Province code</label>\n                  <input\n                    type=\"number\"\n                    className={`bg-white py-1 px-2 border-2 ${\n                      error && error.element === \"province_code\"\n                        ? \"border-red-700\"\n                        : \"border-gray-700\"\n                    } rounded focus:outline-none focus:bg-gray-100`}\n                    onChange={(e) => {\n                      error &&\n                        error.element === \"province_code\" &&\n                        setError(null);\n                      setProvinceCode(Number(e.target.value));\n                    }}\n                    value={provinceCode}\n                    disabled={props.loadingRequest}\n                  />\n                  {error && error.element === \"province_code\" && (\n                    <span className=\"text-red-700\">{error.msg}</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"pt-4 flex justify-between\">\n                <button\n                  onClick={() => {\n                    props.setActionTypes(null);\n                    setProvinceTitle(\"\");\n                    setProvinceCode(0);\n                    setError(null);\n                  }}\n                  className={`btn bg-gray-400 text-white hover:bg-gray-600`}\n                  type=\"button\"\n                  disabled={props.loadingRequest}\n                >\n                  Exit\n                </button>\n                <button\n                  className=\"btn bg-primary text-white hover:bg-blue-600\"\n                  type=\"button\"\n                  onClick={() => handleSubmit()}\n                  disabled={props.loadingRequest}\n                >\n                  {props.loadingRequest ? \"Loading...\" : \"Save\"}\n                </button>\n              </div>\n            </div>\n          </Modal>\n        )}\n      {/* end modal for creating new categories or sub category */}\n    </div>\n  );\n};\n\nexport default React.memo(\n  connect(null, {\n    FC_CreateProvince,\n    FC_UpdateProvince,\n    FC_DeleteProvince,\n    PushPopupAlert,\n  })(ViewProvince)\n);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { MdClear, MdCreate } from \"react-icons/md\";\nimport {\n  FC_CreateSector,\n  FC_DeleteSector,\n  FC_UpdateSector,\n} from \"../../actions/location\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { DistrictInterface, SectorInterface } from \"../../shared/interfaces\";\nimport { PushPopupAlert } from \"../../actions/system\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { errorToText } from \"../../utils/errors\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { isEmptyOrSpaces } from \"../../shared/dataTest\";\n\ninterface AppProps {\n  thisDistrict: DistrictInterface;\n  thisSector: SectorInterface | null;\n  loadingRequest: boolean;\n  actionTypes:\n    | \"CREATE_PROVINCE\"\n    | \"UPDATE_PROVINCE\"\n    | \"CREATE_DISTRICT\"\n    | \"UPDATE_DISTRICT\"\n    | \"CREATE_SECTOR\"\n    | \"UPDATE_SECTOR\"\n    | null;\n  setLoadingRequest: React.Dispatch<React.SetStateAction<boolean>>;\n  setThisSector: React.Dispatch<React.SetStateAction<SectorInterface | null>>;\n  setActionTypes: React.Dispatch<\n    React.SetStateAction<\n      | \"CREATE_PROVINCE\"\n      | \"UPDATE_PROVINCE\"\n      | \"CREATE_DISTRICT\"\n      | \"UPDATE_DISTRICT\"\n      | \"CREATE_SECTOR\"\n      | \"UPDATE_SECTOR\"\n      | null\n    >\n  >;\n  FC_CreateSector: Function;\n  FC_UpdateSector: Function;\n  FC_DeleteSector: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\n\nconst ViewSectors: React.FC<AppProps> = (props) => {\n  const [sectorName, setSectorName] = useState<string>(\"\");\n  const [sectorCode, setSectorCode] = useState<number>(0);\n  const [error, setError] = useState<{ element: string; msg: string } | null>(\n    null\n  );\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(sectorName)) {\n      return setError({\n        element: \"sector_name\",\n        msg: \"Sector name is required\",\n      });\n    }\n\n    if (sectorCode <= 0) {\n      return setError({\n        element: \"sector_code\",\n        msg: \"Invalid sector code, must be \",\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      let res;\n      if (props.actionTypes === \"CREATE_SECTOR\") {\n        res = await axios.post<{ data: SectorInterface }>(\n          `${API.APPLICATION}/sector`,\n          {\n            district_id: props.thisDistrict._id,\n            district_code: props.thisDistrict.district_code,\n            sector_name: sectorName,\n            sector_code: sectorCode,\n          }\n        );\n        if (res.data) {\n          console.log({\n            district_id: props.thisDistrict._id,\n            data: res.data.data,\n            res,\n          });\n          props.FC_CreateSector({\n            province_id: props.thisDistrict.province_id,\n            district_id: props.thisDistrict._id,\n            data: {\n              district_id: res.data.data.district_id,\n              district_code: res.data.data.district_code,\n              sector_name: res.data.data.sector_name,\n              sector_code: res.data.data.sector_code,\n              sector_id: res.data.data.sector_id,\n            },\n          });\n          props.PushPopupAlert({\n            title: \"New sector created successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(null);\n          setSectorName(\"\");\n        }\n      } else if (props.thisSector && props.actionTypes === \"UPDATE_SECTOR\") {\n        res = await axios.patch<{ data: DistrictInterface }>(\n          `${API.APPLICATION}/sector`,\n          {\n            district_id: props.thisSector.district_id,\n            district_code: props.thisDistrict.district_code,\n            sector_id: props.thisSector.sector_id,\n            sector_name: sectorName,\n            sector_code: sectorCode,\n          }\n        );\n        if (res.data) {\n          props.FC_UpdateSector({\n            province_id: props.thisDistrict.province_id,\n            district_id: props.thisSector.district_id,\n            sector_id: props.thisSector.sector_id,\n            sector_name: sectorName,\n            sector_code: sectorCode,\n          });\n          props.PushPopupAlert({\n            title: \"Sector updated successfully\",\n            theme: PopupAlertTheme.success,\n          });\n          props.setLoadingRequest(false);\n          props.setActionTypes(null);\n          setSectorName(\"\");\n          props.setThisSector(null);\n        }\n      }\n    } catch (error) {\n      console.log({ sector_error: error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n      props.setLoadingRequest(false);\n    }\n  };\n\n  const handleDelete = async (sectorId: string) => {\n    try {\n      const res = await axios.delete<SectorInterface>(\n        `${API.APPLICATION}/sector/${sectorId}`\n      );\n\n      if (res.data) {\n        props.FC_DeleteSector({\n          province_id: props.thisDistrict.province_id,\n          district_id: props.thisDistrict._id,\n          sector_id: sectorId,\n        });\n        props.PushPopupAlert({\n          title: \"Sector deleted successfully\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setLoadingRequest(false);\n        props.setActionTypes(null);\n      }\n    } catch (error) {\n      console.log({ district_error: error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n      props.setLoadingRequest(false);\n    }\n  };\n\n  return (\n    <div className={`w-full p-2`}>\n      {props.thisDistrict.sectors && props.thisDistrict.sectors.length > 0 ? (\n        <div className=\"rounded border border-gray-100 shadow-sm animate__animated animate__fadeIn\">\n          <table className=\"w-full z-0\">\n            <thead className=\"bg-gray-50\">\n              <tr className=\"text-left\">\n                <th className=\"px-3 py-3\">#</th>\n                <th>Sector name</th>\n                <th>Sector code</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody className=\"text-sm\">\n              {props.thisDistrict.sectors.map((sector, index) => (\n                <tr\n                  key={index + sector.district_id}\n                  className={`text-left border-b border-gray-50`}\n                >\n                  <td className=\"px-3 py-1\">{index + 1}</td>\n                  <td>{sector.sector_name}</td>\n                  <td>{sector.sector_name}</td>\n                  <td>\n                    <div className=\"flex items-center gap-2\">\n                      <button\n                        title=\"Update sector\"\n                        className=\"bg-blue-500 hover:bg-blue-600 p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none\"\n                        onClick={() => {\n                          props.setThisSector(sector);\n                          setSectorName(sector.sector_name);\n                          setSectorCode(sector.sector_code);\n                          props.setActionTypes(\"UPDATE_SECTOR\");\n                        }}\n                        disabled={\n                          props.loadingRequest || props.actionTypes !== null\n                        }\n                      >\n                        <MdCreate className=\"text-white w-4 h-4\" />\n                      </button>\n                      <button\n                        title=\"Delete sector\"\n                        className=\"bg-red-500 hover:bg-red-600 p-2 rounded-full shadow-md flex justify-center items-center focus:outline-none\"\n                        onClick={() => handleDelete(sector.sector_id)}\n                        disabled={props.loadingRequest}\n                      >\n                        <MdClear className=\"text-white w-4 h-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <NoResult\n          theme={NoResultThemes.Dark}\n          value={\"No sector found!\"}\n          component={\n            <div className=\"w-full mt-2 flex flex-row items-center justify-center\">\n              <ul className=\"text-sm py-2 text-blue-600 font-bold flex flex-row gap-2\">\n                <li\n                  onClick={() => props.setActionTypes(\"CREATE_SECTOR\")}\n                  className=\"underline text-gray-500 cursor-pointer\"\n                >\n                  Add sector\n                </li>\n              </ul>\n            </div>\n          }\n        />\n      )}\n\n      {/* modal for creating new categories or sub category */}\n      {props.actionTypes &&\n        (props.actionTypes === \"CREATE_SECTOR\" ||\n          props.actionTypes === \"UPDATE_SECTOR\") && (\n          <Modal\n            backDrop={true}\n            theme={Themes.default}\n            close={(): void => {\n              props.setActionTypes(null);\n              setSectorName(\"\");\n              setSectorCode(0);\n              setError(null);\n            }}\n            displayClose={false}\n            backDropClose={false}\n            title={\n              <div className=\"flex items-center space-x-5\">\n                <div className=\"block pl-2 font-semibold text-xl self-start text-gray-700\">\n                  {/* <p className=\"text-base text-gray-500 font-medium\">\n                    You are{\" \"}\n                    {actionType === \"CREATE_SUB\" || \"CREATE_CAT\"\n                      ? \"creating\"\n                      : \"updating\"}\n                  </p> */}\n                  <h2 className=\"uppercase text-back\">\n                    {props.actionTypes === \"CREATE_SECTOR\"\n                      ? \"CREATING NEW SECTOR\"\n                      : props.actionTypes === \"UPDATE_SECTOR\" &&\n                        \"UPDATING EXISTING SECTOR\"}\n                  </h2>\n                </div>\n              </div>\n            }\n            widthSizeClass={ModalSize.medium}\n            padding={{ title: true, body: false, footer: false }}\n          >\n            <div className=\"w-full px-5 mb-5\">\n              <div className=\"py-3 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7\">\n                <div className=\"flex flex-col\">\n                  <label>Sector name</label>\n                  <input\n                    type=\"text\"\n                    className={`bg-white py-1 px-2 border-2 ${\n                      error && error.element === \"sector_name\"\n                        ? \"border-red-700\"\n                        : \"border-gray-700\"\n                    } rounded focus:outline-none focus:bg-gray-100`}\n                    onChange={(e) => {\n                      error &&\n                        error.element === \"sector_name\" &&\n                        setError(null);\n                      setSectorName(e.target.value);\n                    }}\n                    value={sectorName}\n                    disabled={props.loadingRequest}\n                  />\n                  {error && error.element === \"sector_name\" && (\n                    <span className=\"text-red-700\">{error.msg}</span>\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <label>Sector code</label>\n                  <input\n                    type=\"number\"\n                    className={`bg-white py-1 px-2 border-2 ${\n                      error && error.element === \"sector_code\"\n                        ? \"border-red-700\"\n                        : \"border-gray-700\"\n                    } rounded focus:outline-none focus:bg-gray-100`}\n                    onChange={(e) => {\n                      error &&\n                        error.element === \"sector_code\" &&\n                        setError(null);\n                      setSectorCode(Number(e.target.value));\n                    }}\n                    value={sectorCode}\n                    disabled={props.loadingRequest}\n                  />\n                  {error && error.element === \"sector_code\" && (\n                    <span className=\"text-red-700\">{error.msg}</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"pt-4 flex justify-between\">\n                <button\n                  onClick={() => {\n                    props.setActionTypes(null);\n                    setSectorName(\"\");\n                    setSectorCode(0);\n                    setError(null);\n                  }}\n                  className={`btn bg-gray-400 text-white hover:bg-gray-600`}\n                  type=\"button\"\n                  disabled={props.loadingRequest}\n                >\n                  Exit\n                </button>\n                <button\n                  className=\"btn bg-primary text-white hover:bg-blue-600\"\n                  type=\"button\"\n                  onClick={() => handleSubmit()}\n                  disabled={props.loadingRequest}\n                >\n                  {props.loadingRequest ? \"Loading...\" : \"Save\"}\n                </button>\n              </div>\n            </div>\n          </Modal>\n        )}\n      {/* end modal for creating new categories or sub category */}\n    </div>\n  );\n};\n\nexport default React.memo(\n  connect(null, {\n    FC_CreateSector,\n    FC_UpdateSector,\n    FC_DeleteSector,\n    PushPopupAlert,\n  })(ViewSectors)\n);\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { AiOutlineFilter } from \"react-icons/ai\";\nimport { BsCaretRightFill } from \"react-icons/bs\";\nimport { connect } from \"react-redux\";\nimport { getAllRoom } from \"../../actions/location\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  DistrictInterface,\n  LocationRoomTableInterface,\n  RoomLocationInterface,\n  SectorInterface,\n} from \"../../shared/interfaces\";\nimport { LocationsInArray } from \"../UserManagement/UserList\";\nimport ViewDistricts from \"./ViewDistricts\";\nimport ViewProvince from \"./ViewProvince\";\nimport ViewSectors from \"./ViewSectors\";\n\nexport const distinctDistrict = (\n  rooms: RoomLocationInterface[],\n  province_id?: string\n): LocationRoomTableInterface[] => {\n  let ids: string[] = [],\n    result: LocationRoomTableInterface[] = [];\n\n  LocationsInArray(rooms).forEach((element) => {\n    if (!ids.includes(element.district_id)) {\n      if (province_id && element.province_id === province_id) {\n        ids.push(element.district_id);\n        result.push(element);\n      } else if (province_id === undefined) {\n        ids.push(element.district_id);\n        result.push(element);\n      }\n    }\n  });\n\n  return result;\n};\n\nexport const distinctCenter = (\n  rooms: RoomLocationInterface[],\n  district_id: string\n): LocationRoomTableInterface[] => {\n  let ids: string[] = [],\n    result: LocationRoomTableInterface[] = [];\n\n  LocationsInArray(rooms).forEach((element) => {\n    if (\n      !ids.includes(element.center_id) &&\n      element.district_id === district_id\n    ) {\n      ids.push(element.center_id);\n      result.push(element);\n    }\n  });\n  return result;\n};\n\nexport const distinctRoom = (\n  rooms: RoomLocationInterface[],\n  center_id: string\n): LocationRoomTableInterface[] => {\n  let ids: string[] = [],\n    result: LocationRoomTableInterface[] = [];\n\n  LocationsInArray(rooms).forEach((element) => {\n    if (!ids.includes(element.room_id) && element.center_id === center_id) {\n      ids.push(element.room_id);\n      result.push(element);\n    }\n  });\n  return result;\n};\n\ninterface AppProps {\n  locations: RoomLocationInterface[];\n  getAllRoom: Function;\n}\n\nconst _Locations: React.FC<AppProps> = (props) => {\n  const [actionTypes, setActionTypes] = useState<\n    | \"CREATE_PROVINCE\"\n    | \"UPDATE_PROVINCE\"\n    | \"CREATE_DISTRICT\"\n    | \"UPDATE_DISTRICT\"\n    | \"CREATE_SECTOR\"\n    | \"UPDATE_SECTOR\"\n    | null\n  >(null);\n  const [thisProvince, setThisProvince] =\n    useState<RoomLocationInterface | null>(null);\n  const [thisDistrict, setThisDistrict] = useState<DistrictInterface | null>(\n    null\n  );\n  const [thisSector, setThisSector] = useState<SectorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRequest, setLoadingRequest] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!props.locations.length && loading) {\n      props.getAllRoom((status: boolean, msg: string) => {\n        setLoading(status);\n        if (!status && msg.length > 0) {\n          console.log(msg);\n        }\n      });\n    } else if (loading) {\n      setLoading(false);\n    }\n  }, [loading, props]);\n\n  if (loading === true) {\n    return (\n      <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n        Loading locations...\n      </div>\n    );\n  }\n\n  const displayTitle = () => {\n    if (\n      (!thisSector ||\n        (thisSector &&\n          (actionTypes === \"CREATE_SECTOR\" ||\n            actionTypes === \"UPDATE_SECTOR\"))) &&\n      thisDistrict &&\n      actionTypes !== \"CREATE_DISTRICT\" &&\n      actionTypes !== \"UPDATE_DISTRICT\"\n    ) {\n      return (\n        <div className=\"flex items-center gap-1\">\n          <span\n            className=\"cursor-pointer uppercase text-xl font-semibold text-gray-800\"\n            onClick={() => {\n              setThisProvince(null);\n            }}\n          >\n            province\n          </span>\n          <span>/</span>\n          <span\n            className=\"cursor-pointer uppercase text-xl font-semibold text-gray-800\"\n            onClick={() => {\n              setThisDistrict(null);\n            }}\n          >\n            district\n          </span>\n          <span>/</span>\n          <span className=\"text-xl text-gray-800\">\n            {thisDistrict.district_name}\n          </span>\n        </div>\n      );\n    } else if (\n      (!thisDistrict ||\n        (thisDistrict &&\n          (actionTypes === \"CREATE_DISTRICT\" ||\n            actionTypes === \"UPDATE_DISTRICT\"))) &&\n      thisProvince\n    ) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          <span\n            className=\"cursor-pointer uppercase text-xl font-semibold text-gray-800\"\n            onClick={() => {\n              setThisProvince(null);\n            }}\n          >\n            province\n          </span>\n          <span>/</span>\n          <span className=\"text-xl text-gray-800\">\n            {thisProvince.province_name}\n          </span>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center gap-1\">\n        <span className=\"uppercase text-xl font-semibold text-gray-800\">\n          province\n        </span>\n        <span>/</span>\n      </div>\n    );\n  };\n\n  return (\n    <Fragment>\n      <div className=\"w-full my-5\">\n        {/* header title */}\n        <div className=\"flex justify-between p-2 gap-1\">\n          <div className=\"flex flex-col\">\n            <span className=\"text-blue-600 text-2xl md:text-2xl lg:text-3xl font-bold\">\n              Locations Management\n            </span>\n\n            <div className=\"flex flex-row items-center md:gap-3 gap-2 mt-1\">\n              <AiOutlineFilter className=\"text-xl\" />\n              <div className=\"flex flex-row items-center gap-1\">\n                {thisProvince && (\n                  <span className=\"text-gray-700 text-base font-bold\">\n                    {thisProvince.province_name}\n                  </span>\n                )}\n                {thisDistrict && (\n                  <div className=\"flex flex-row items-center gap-1\">\n                    <BsCaretRightFill />\n                    <span className=\"text-blue-600 text-base font-bold underline\">\n                      {thisDistrict.district_name} district\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* end header title */}\n\n        <div className=\"w-full bg-white\">\n          <div className=\"border-b px-2 py-3 flex justify-between\">\n            {displayTitle()}\n\n            {/* CREATE NEW PROVINCE =====================================*/}\n            {/* {(!thisProvince ||\n              (thisProvince &&\n                (actionTypes === \"CREATE_PROVINCE\" ||\n                  actionTypes === \"UPDATE_PROVINCE\"))) && (\n              <button\n                type=\"button\"\n                className={`btn hover:bg-blue-500 mb-1 border-2 border-blue-500 bg-white\n        hover:text-white rounded-md flex items-center font-bold text-gray-700 focus:outline-none gap-1 ${\n          loadingRequest && \"cursor-wait\"\n        } ${actionTypes !== null && \"cursor-not-allowed\"}`}\n                onClick={() => setActionTypes(\"CREATE_PROVINCE\")}\n                disabled={actionTypes !== null || loadingRequest}\n              >\n                <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n                New Province\n              </button>\n            )} */}\n            {/* CREATE NEW DISTRICT =====================================*/}\n            {/* {(!thisDistrict ||\n              (thisDistrict &&\n                (actionTypes === \"CREATE_DISTRICT\" ||\n                  actionTypes === \"UPDATE_DISTRICT\"))) &&\n              thisProvince && (\n                <button\n                  type=\"button\"\n                  className={`btn hover:bg-blue-500 mb-1 border-2 border-blue-500 bg-white\n        hover:text-white rounded-md flex items-center font-bold text-gray-700 focus:outline-none gap-1 ${\n          loadingRequest && \"cursor-wait\"\n        } ${actionTypes !== null && \"cursor-not-allowed\"}`}\n                  onClick={() => setActionTypes(\"CREATE_DISTRICT\")}\n                  disabled={actionTypes !== null || loadingRequest}\n                >\n                  <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n                  New District\n                </button>\n              )} */}\n\n            {/* CREATE NEW SECTOR =====================================*/}\n            {/* {(!thisSector ||\n              (thisSector &&\n                (actionTypes === \"CREATE_SECTOR\" ||\n                  actionTypes === \"UPDATE_SECTOR\"))) &&\n              thisDistrict &&\n              actionTypes !== \"CREATE_DISTRICT\" &&\n              actionTypes !== \"UPDATE_DISTRICT\" && (\n                <button\n                  type=\"button\"\n                  className={`btn hover:bg-blue-500 mb-1 border-2 border-blue-500 bg-white\n        hover:text-white rounded-md flex items-center font-bold text-gray-700 focus:outline-none gap-1 ${\n          loadingRequest && \"cursor-wait\"\n        } ${actionTypes !== null && \"cursor-not-allowed\"}`}\n                  onClick={() => setActionTypes(\"CREATE_SECTOR\")}\n                  disabled={actionTypes !== null || loadingRequest}\n                >\n                  <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n                  New Sector\n                </button>\n              )} */}\n          </div>\n\n          {(!thisProvince ||\n            (thisProvince &&\n              (actionTypes === \"CREATE_PROVINCE\" ||\n                actionTypes === \"UPDATE_PROVINCE\"))) && (\n            <ViewProvince\n              thisProvince={thisProvince}\n              thisDistrict={thisDistrict}\n              loadingRequest={loadingRequest}\n              locations={props.locations}\n              actionTypes={actionTypes}\n              setLoadingRequest={setLoadingRequest}\n              setThisProvince={setThisProvince}\n              setActionTypes={setActionTypes}\n            />\n          )}\n\n          {(!thisDistrict ||\n            (thisDistrict &&\n              (actionTypes === \"CREATE_DISTRICT\" ||\n                actionTypes === \"UPDATE_DISTRICT\"))) &&\n            thisProvince && (\n              <ViewDistricts\n                thisDistrict={thisDistrict}\n                loadingRequest={loadingRequest}\n                actionTypes={actionTypes}\n                setLoadingRequest={setLoadingRequest}\n                setActionTypes={setActionTypes}\n                thisProvince={thisProvince}\n                setThisDistrict={setThisDistrict}\n              />\n            )}\n\n          {(!thisSector ||\n            (thisSector &&\n              (actionTypes === \"CREATE_SECTOR\" ||\n                actionTypes === \"UPDATE_SECTOR\"))) &&\n            thisDistrict &&\n            actionTypes !== \"CREATE_DISTRICT\" &&\n            actionTypes !== \"UPDATE_DISTRICT\" && (\n              <ViewSectors\n                thisDistrict={thisDistrict}\n                thisSector={thisSector}\n                loadingRequest={loadingRequest}\n                actionTypes={actionTypes}\n                setLoadingRequest={setLoadingRequest}\n                setThisSector={setThisSector}\n                setActionTypes={setActionTypes}\n              />\n            )}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  locations,\n}: StoreState): {\n  locations: RoomLocationInterface[];\n} => {\n  return { locations: locations.roomLocation };\n};\n\nexport const Locations = React.memo(\n  connect(mapStateToProps, {\n    getAllRoom,\n  })(_Locations)\n);\n"],"sourceRoot":""}