{"version":3,"sources":["shared/interfaces.tsx","containers/Claimings/ClaimDocView.tsx","components/Loading/TableLoading.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx","containers/Claimings/Admin/AdminClaimAppView.tsx","containers/Claimings/Admin/AdminClaimExamView.tsx","containers/Claimings/Admin/AdminClaimDocView.tsx","containers/Claimings/Admin/index.tsx"],"names":["PostRequestStatusInterface","DocumentAttributesInterface","DocValidationStatusInterface","SESSION_PLAN_KEYS","APPLICATION","DOCUMENT_VALIDATION","EXAMINATION","MARKS_PUBLICATION","PLACEMENT_TRANSFER","isReclaimAllowed","thisClaim","claim_level","_thisClaim","claims","find","item","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","connect","createReClaim","PushPopupAlert","props","handleSubmit","a","isEmptyOrSpaces","reClaimingMsg","setFormError","element","msg","title","theme","PopupAlertTheme","warning","setLoadingRequest","setAxiosToken","axios","put","API","CLAIMING","_id","reason","res","console","log","data","status","success","setReClaimingMsg","setReClaiming","error","errorToText","danger","className","ClaimGetDocTitle","documentCategories","thisDoc","main","type","onClick","setViewImage","viewImage","validation_status","capitalizeFirstLetter","previous","evaluater","name","validated_by","comment","src","AUTH_FILES","files","alt","length","map","claim","index","showDate","createdAt","timestampToDate","date_created","timeFR","toLocaleLowerCase","evaluation_comment","id","reClaiming","last_claim_status","PENDING","DELETED","disabled","loadingRequest","placeholder","cols","rows","formError","style","resize","value","onChange","e","target","TableLoading","displayCols","colsArray","push","filterClaimsByClaimType","claimList","claimType","filter","type_key","auth","claiming","GetClaimingTypes","setSelectedClaimType","getAllClaims","useState","loading","setLoading","loadingClaimTypes","setLoadingClaimTypes","useEffect","claimTypes","countClaims","thisType","result","allClaims","Fragment","loadingClaims","active","selectedClaimType","count","PlansTypeKeys","ClaimHeaderTitle","isLoading","loadingSession","periodChanged","headerTitle","thisPeriod","session_plan_id","sessions","period_id","application_sessions","selectPeriod","setThisPeriod","setLoadingSession","onPeriodChange","session","session_plan_name","ClaimTypesEnum","thisApplication","position","position_title","setViewPosition","viewPosition","ApplicationStates","Rejected","DATE","description","school_level_id","school_level_name","education_institute_id","education_category_title","courses","course_name","course_code","course_id","requirements","FC_ApplicationPositionDistinctCategory","DistinctCategoriesTemp","category_title","ViewRequirements","PositionsTemp","req","category_id","NoResult","NoResultThemes","Dark","questionTypes","loadQuestionTypes","getAnswersByQuestion","question_id","thisExamSheet","user_answers","question","thisExam","questions","findQuestionType","questionTypeElementsType","MultipleChoice","SingleMultiple","TrueFalse","answer","indexAnswer","user_marks","SimpleCalculate","Matching","ShortAnswer","Numeric","CalculatedMultipleChoice","userDetails","user_info","fname","lname","myPlacement","placed","school","school_name","district_id","district_name","getMyRejectedApplications","getMyRejectedDocuments","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","candidateApplications","user","user_id","candidateDocuments","myClaims","COMPLETED","getDocumentById","document_id","doc_id","whichClaimType","application","document","exam","marks_publication","placement","whichClaimStatus","classes","getClaimById","claim_id","getApplicationById","application_id","displayDocClaimTitle","claiming_on_id","displayClaimTitle","documentReducer","allCourse","myAnswer","thisAnswer","getCourseIdBySheetId","getCourseById","course","Index","setState","setViewClaim","viewClaim","setPeriodChanged","setClaimForm","claimForm","setClaimId","claimId","loadClaims","getMyClaims","state","setSession","thisSession","is_active","componentDidMount","loadCourses","GetAllSessionPlans","documentCategory","getDocumentCategory","documentSubCategory","getDocumentSubCategory","documentFields","getDocumentFields","getMyPlacement","isDeleteAllowed","thisCLaim","this","SideNavigation","colSpan","Light","ClaimApplView","ClaimExamView","ClaimForm","formState","setFormState","Component","CandidateClaim","sessionPlan","allSessionPlans","viewTabs","FC_AdminApplicationPositionDistinctCategory","thisPosition","DistinctCategoriesIds","DistinctSubCategoriesTemp","DistinctSubCategoriesIds","thisRequirements","thisCategory","user_detail_category_id","category","thisSubCategory","user_detail_subcategory_id","subcategory","field","thisField","position_requirement","required","subcategory_id","subcategory_title","field_title","field_id","includes","evaluateClaim","reAssessApplication","actionTaken","setActionTaken","responseMsg","setResponseMsg","profile","selectedTab","setSelectedTab","handleVerify","subClaim","api_body","sub_claim_id","evaluated_by","evaluate_claim_res","ACCEPTED","overrideDecision","getReasonById","reason_id","claimReasons","patch","application_status","Shortlisted","code_error","getPositionById","position_id","systemPositions","Object","values","i","override_by","default_claim_resaons","window","confirm","verifyDocument","evaluator_name","evaluator_email","email","FC_DocValidation","APPROVED","in_education","disability","api_redux","date","post","AUTH","FC_shortListing","candidate_id","details","adminDisplayClaimTitle","commet","marks","setMarks","Loading","handleMarksAddition","DO_EXAM","answer_sheet_id","phone_number","sex","Number","AdminClaimGetDocTitle","doc","DocCategory","DocSubCategory","DocField","DocTitle","sub_category_id","c","category_subcategory_data","sub_category","allApplications","setLoadingData","loadingData","setClaimType","setCandidateId","candidateId","setDefaultSession","loadsAllClaims","loadsApplications","loadsAlAnswers","getAllApplications","allAnswer","getAllAnswers","getPositions","getClaimReasons","thisDocs","AdminFilterByType","ClaimTypesInterface","DOCUMENT","AdminClaim","system_settings","verifyAllDocument","fetchUserAccess"],"mappings":"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","file":"static/js/38.1333c1bb.chunk.js","sourcesContent":["import {\n  ApplicationStates,\n  SESSION_PLAN_KEYS,\n} from \"../interfaces/application\";\n\nexport interface SystemSettingsInterface {\n  system_setting_id: string;\n  name: string;\n  key: string;\n  status: \"enabled\" | \"disabled\";\n}\n\nexport interface ApplicationSessionInterface {\n  is_active: boolean;\n  application_session_name: string;\n  period: string;\n  application_start_date: string;\n  application_end_date: string;\n  createdAt: string;\n  updatedAt: string;\n  application_session_id: string;\n}\n\nexport interface UserInfoInterface {\n  document_type?: string;\n  issue_number?: string;\n  date_of_issue?: string;\n  date_of_expiry?: string;\n  place_of_issue?: string;\n  application_number?: string;\n  fname: string;\n  lname: string;\n  sex: \"M\" | \"F\";\n  father_names: string;\n  mother_names: string;\n  date_of_birth: string;\n  place_of_birth?: string;\n  country_of_birth: string;\n  village_id: string;\n  village: string;\n  cell: string;\n  sector: string;\n  district: string;\n  province: string;\n  photo?: string;\n  civil_status?: string;\n  spouse?: any;\n  status?: string;\n}\n\nexport interface UserInterface {\n  user_id: string;\n  n_id?: string;\n  phone_number: string;\n  email: string;\n  password?: string;\n  user_info: UserInfoInterface;\n  details: UserDocumentsInterface[];\n  user_photo?: string;\n  default_access: RoleToUserInterface | null;\n  custome_access: CustomeAccessInterface | null;\n  is_active?: boolean;\n}\n\nexport interface CandidateDetailsInterface_old {\n  category_id: string;\n  sub_category_id: string;\n  category_subcategory_data: string;\n  title: string;\n  description: string;\n  files: string;\n  start_year: string;\n  end_year: string;\n  school: string;\n  email: string;\n  names: string;\n  phone_number: string;\n  company: string;\n  year: string;\n  doc_id: string;\n  validation_status: \"waiting\" | \"approved\" | \"rejected\";\n  validated_by: {\n    user_id: string;\n    comment: string;\n    validation_status: \"waiting\" | \"approved\" | \"rejected\";\n    date: string;\n  } | null;\n  doc_history_status: string;\n  get_in_date: string;\n  approved?: string;\n}\n\nexport interface CandidateDetailsInterface {\n  category_id: string;\n  sub_category_id: string;\n  category_subcategory_data: string;\n  title: string;\n  description: string;\n  files: string;\n  start_year: string;\n  end_year: string;\n  school: string;\n  email: string;\n  names: string;\n  phone_number: string;\n  company: string;\n  year: string;\n  doc_id: string;\n  validation_status: \"waiting\" | \"approved\" | \"rejected\";\n  validated_by: {\n    user_id: string;\n    comment: string;\n    validation_status: \"waiting\" | \"approved\" | \"rejected\";\n    date: string;\n  } | null;\n  doc_history_status: string;\n  get_in_date: string;\n  approved?: string;\n}\n\nexport interface DocInterface {\n  category_subcategory_data: string;\n  school: string;\n  category_id: string;\n  company: string;\n  description: string;\n  email: string;\n  end_year: string;\n  files: string;\n  names: string;\n  phone_number: string;\n  start_year: string;\n  sub_category_id: string;\n  title: string;\n  year: string;\n  approved: string;\n  doc_id: string;\n  validated_by: null;\n  validation_status: string;\n  doc_history_status: string;\n  get_in_date: string;\n  date_modefied: string;\n}\n\nexport interface CandidateRoleToUserInterface {\n  key: string;\n  status: number;\n  access: boolean;\n  assigned_date: string;\n}\n\nexport interface CandidatesInterface_old {\n  user_id: string;\n  n_id: string;\n  fname: string;\n  lname: string;\n  phone_number: string;\n  district: string;\n  email: string;\n  details: CandidateDetailsInterface[];\n}\n\nexport interface ApplicationExamsInterface {\n  course_id: string;\n  proctoring_type: string;\n  center_id: string;\n  room_id: string;\n}\n\nexport interface CandidatesInterface {\n  user_id: string;\n  n_id: string;\n  fname: string;\n  lname: string;\n  phone_number: string;\n  district: string;\n  email: string;\n  in_education?: boolean;\n  disability?: boolean;\n  details: CandidateDetailsInterface[];\n  exams: ApplicationExamsInterface[];\n}\n\nexport interface CustomeAccessInterface {\n  access: AccessTaskInterface[];\n  user_id: string;\n  custome_user_access_id: string;\n}\n\nexport interface UserDocumentsInterface {\n  category_id: string;\n  sub_category_id: string;\n  category_subcategory_data: string;\n  title: string;\n  description: string;\n  files: string;\n  start_year: string;\n  end_year: string;\n  school: { title: string; school_id: string | null };\n  email: string;\n  names: string;\n  phone_number: string;\n  company: string;\n  year: string;\n  approved: \"waiting\" | \"approved\" | \"rejected\";\n  doc_id: string;\n  validation_status: \"waiting\" | \"approved\" | \"rejected\";\n  validated_by: {\n    user_id: string;\n    commet: string;\n    validation_status: \"waiting\" | \"approved\" | \"rejected\";\n    date: string;\n  };\n}\n\nexport interface SystemUserRoleInterface {\n  system_user_role_id: string;\n  role: string;\n  status: boolean;\n  access: AccessTaskInterface[];\n  district_required?: boolean;\n  school_required?: boolean;\n  room_required?: boolean;\n  education_institution_required?: boolean;\n  school_id: string;\n  district_id: string;\n}\n\nexport interface CustomeUserAccessInterface {\n  user_id: string;\n  access?: [\n    {\n      id: string;\n      task: string;\n      key: string;\n      permitted: {\n        create: boolean;\n        delete: boolean;\n        update: boolean;\n        view: boolean;\n      };\n    }\n  ];\n}\n\nexport interface PermissionInterface {\n  create: boolean;\n  view: boolean;\n  update: boolean;\n  delete: boolean;\n}\n\nexport interface AccessTaskInterface {\n  id: string;\n  task: string;\n  key: string;\n  permitted: PermissionInterface;\n}\n\nexport interface RoleToUserInterface {\n  system_user_role_id: string;\n  role: string;\n  access: AccessTaskInterface[];\n  status?: number;\n  school_id: string;\n  district_id: string;\n  room_id: string;\n  education_institution_id: string;\n}\n\nexport interface RoomsInterface {\n  occupied: number;\n  isUsed: string;\n  room_type: string;\n  room_number: number;\n  capacity: number;\n  _id: string;\n}\n\nexport interface CentersInterface {\n  rooms: RoomsInterface[];\n  isUsed: boolean;\n  _id: string;\n  center_name: string;\n  center_code: number;\n  district_id: string;\n}\n\nexport interface SectorInterface {\n  district_code: number;\n  district_id: string;\n  sector_name: string;\n  sector_code: number;\n  sector_id: string;\n}\n\nexport interface DistrictInterface {\n  centers: CentersInterface[];\n  sectors: SectorInterface[];\n  province_code: number;\n  province_id: string;\n  district_name: string;\n  district_code: number;\n  _id: string;\n}\n\nexport interface RoomLocationInterface {\n  districts: DistrictInterface[];\n  province_name: string;\n  province_code: number;\n  _id: string;\n}\n\nexport interface AssignRoleToUserActionInterface {\n  user_id: string;\n  data: RoleToUserInterface;\n}\n\nexport interface AssignRoleToUserActionInterface {\n  user_id: string;\n  data: RoleToUserInterface;\n}\n\nexport enum PostRequestStatusInterface {\n  INITIATED = \"initiated\",\n  CONFIRMED = \"confirmed\",\n  RECEIVED = \"received\",\n}\n\nexport interface PostSchoolInterface_old {\n  post_at_school_id: string;\n  school_id: string;\n  position_id: string;\n  district_id: string;\n  needed_posts: number;\n  confirmed_posts?: number;\n  occupied_posts?: number;\n  requested_by: string;\n  confirmed_by?: string;\n  received_posts?: number;\n  request_date: Date;\n  approval_date?: Date;\n  post_at_school_status: PostRequestStatusInterface;\n}\n\nexport interface PostSchoolInterface {\n  requested_post_id: string;\n  school_id: string;\n  position_id: string;\n  district_id: string;\n  needed_posts: number;\n  male_number: number;\n  female_number: number;\n  description: string;\n  confirmed_posts?: number;\n  occupied_posts?: number;\n  requested_by: string;\n  confirmed_by?: string;\n  received_posts?: number;\n  request_date: Date;\n  approval_date?: Date;\n  requested_post_status: PostRequestStatusInterface;\n}\n\nexport interface SchoolInfoInterface {\n  school_id: string;\n  school_title: string;\n  district_id: string;\n  number_of_females?: number;\n  number_of_males?: number;\n}\n\nexport interface SchoolsInterface {\n  _id: string;\n  status: boolean;\n  school_name: string;\n  school_code: number;\n  province_id: string;\n  province_code: number;\n  district_id: string;\n  district_code: number;\n  sector_id: string;\n  sector_code: number;\n  education_category_id: string;\n}\n\nexport interface SchoolLevelInterface {\n  school_level_id: string;\n  school_level_name: string;\n  description: string;\n  education_institute: string[];\n  courses: [];\n}\n\nexport interface CourseInterface {\n  course_name: string;\n  course_code: string;\n  description: string;\n  school_levels: string[];\n  course_id: string;\n}\n\nexport interface EducationInstituteInterface {\n  education_category_title: string;\n  school_levels: [];\n  description: string;\n  education_institute_id: string;\n}\n\nexport interface PositionRequirementInterface {\n  user_detail_category_id: string;\n  title: string;\n  user_required_docs: {\n    user_detail_subcategory_id: string;\n    title: string;\n  }[];\n}\n\nexport interface PositionInterface {\n  courses: CourseInterface[];\n  position_title: string;\n  description: string;\n  school_level_id: SchoolLevelInterface;\n  education_institute_id: EducationInstituteInterface;\n  requirements: PositionRequirementInterface[];\n  position_id: string;\n}\n\nexport enum DocumentAttributesInterface {\n  \"Title\" = \"title\",\n  \"Description\" = \"description\",\n  \"Files\" = \"files\",\n  \"email\" = \"email\",\n  \"names\" = \"names\",\n  \"phone_number\" = \"phone_number\",\n  \"position\" = \"position\",\n  \"relation\" = \"relation\",\n  \"src\" = \"src\",\n  \"year\" = \"year\",\n  \"company\" = \"company\",\n  \"category_subcategory_data\" = \"category_subcategory_data\",\n  \"others\" = \"others\",\n  \"start_year\" = \"start_year\",\n  \"end_year\" = \"end_year\",\n  \"School\" = \"School\",\n}\n\nexport enum DocValidationStatusInterface {\n  APPROVED = \"approved\",\n  REJECTED = \"rejected\",\n}\n\nexport interface DocumentCategoryInterface {\n  user_detail_category_id: string;\n  title: string;\n  description: string;\n  fields: DocumentAttributesInterface[];\n}\n\nexport interface DocumentSubCategoryInterface {\n  category_id: string;\n  title: string;\n  description: string;\n  user_detail_subcategory_id: string;\n}\n\nexport interface DocumentFieldsInterface {\n  _id: string;\n  category_id: string;\n  subcategory_id: string | null;\n  title: string;\n  description: string;\n  others: [];\n}\n\nexport interface ApplicationAssessmentInterface {\n  application_id: string;\n  user_id: string;\n  application_session: string;\n  application_status: string;\n  n_id: string;\n  phone_number: string;\n  email: string;\n  fname: string;\n  lname: string;\n  sex: \"M\" | \"F\";\n  district: string;\n  position: PositionApplicationInterface;\n  details: CandidateDetailsInterface[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AdminApplicationsToPrintInterface {\n  application_id: number;\n  names: string;\n  gender?: string;\n  national_id?: string;\n  phone?: string;\n  email?: string;\n  position: string;\n  education_category?: string;\n  application_session?: string;\n  district?: string;\n  date?: string;\n  decision?: ApplicationStates;\n}\n\nexport interface PositionApplicationInterface {\n  courses: string[];\n  position_title: string;\n  description: string;\n  school_level_id: string;\n  education_institute_id: string;\n  requirements: PositionRequirementInterface[];\n  position_id: string;\n}\n\nexport interface PositionRequirementInterface {\n  user_detail_category_id: string;\n  title: string;\n  user_required_docs: {\n    user_detail_subcategory_id: string;\n    title: string;\n  }[];\n}\n\nexport interface ApplicationRequirementInterface {\n  user_detail_category_id: string;\n  title: string;\n  user_required_docs: {\n    user_detail_subcategory_id: string;\n    title: string;\n  }[];\n}\n\nexport interface PeriodInterface {\n  is_active: string;\n  application_session_name: string;\n  period: string;\n  application_start_date: string;\n  application_end_date: string;\n  createdAt: string;\n  updatedAt: string;\n  application_session_id: string;\n}\n\nexport interface LocationRoomTableInterface {\n  province_id: string;\n  province_name: string;\n  district_id: string;\n  district_name: string;\n  center_id: string;\n  center_name: string;\n  room_id: string;\n  room_name: string;\n  capacity: number;\n  occupied: number;\n}\n\nexport interface LocationSectorTableInterface {\n  province_id: string;\n  province_name: string;\n  province_code: number;\n  district_id: string;\n  district_name: string;\n  district_code: number;\n  sector_id: string;\n  sector_name: string;\n  sector_code: number;\n}\n\nexport interface PositionRequirementsFieldInterface {\n  category_id: string;\n  category_name: string;\n  sub_category_id: string;\n  sub_category_name: string;\n  field_id: string;\n  field_name: string;\n  required: boolean;\n}\n\nexport interface ApplicationPeriodInterface {\n  _id: string;\n  application_status: ApplicationStates;\n  user_id: string;\n  position: string;\n  application_session: string;\n  exams: ApplicationExamsInterface[];\n}\n\nexport const getDocCategoryById = (\n  subDocs: DocumentCategoryInterface[],\n  docId: string\n): DocumentCategoryInterface => {\n  return subDocs.filter((doc) => doc.user_detail_category_id === docId)[0];\n};\n\nexport const getSubDocCategoryById = (\n  subDocs: DocumentSubCategoryInterface[],\n  docId: string\n): DocumentSubCategoryInterface => {\n  return subDocs.filter((doc) => doc.user_detail_subcategory_id === docId)[0];\n};\n\nexport const SESSION_PLAN_TYPES: {\n  type_id: number;\n  type_title: string;\n  type_key: SESSION_PLAN_KEYS;\n}[] = [\n  {\n    type_id: 1,\n    type_title: \"Application\",\n    type_key: SESSION_PLAN_KEYS.APPLICATION,\n  },\n  {\n    type_id: 2,\n    type_title: \"Document Validation\",\n    type_key: SESSION_PLAN_KEYS.DOCUMENT_VALIDATION,\n  },\n  {\n    type_id: 3,\n    type_title: \"Examination\",\n    type_key: SESSION_PLAN_KEYS.EXAMINATION,\n  },\n  {\n    type_id: 4,\n    type_title: \"Marks Publication\",\n    type_key: SESSION_PLAN_KEYS.MARKS_PUBLICATION,\n  },\n  {\n    type_id: 5,\n    type_title: \"Placement and Transfer\",\n    type_key: SESSION_PLAN_KEYS.PLACEMENT_TRANSFER,\n  },\n];\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, DocumentClaimUser } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate, timestampToDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import React from \"react\";\n\ntype TableLoadingProps = {\n  cols: number;\n};\nconst TableLoading: React.FC<TableLoadingProps> = (props) => {\n  const displayCols = (): JSX.Element[] => {\n    let colsArray: number[] = [];\n    for (let index = 0; index < props.cols; index++) {\n      colsArray.push(index);\n    }\n    let result = colsArray.map((element) => {\n      return (\n        <td className=\"p-3 text-center whitespace-nowrap\" key={element}>\n          <div className=\"w-full h-4 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </td>\n      );\n    });\n\n    return result;\n  };\n  return (\n    <>\n      <tr className=\"border-b border-gray-200\" key={228}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={22648}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={229768}>\n        {displayCols()}\n      </tr>\n    </>\n  );\n};\n\nexport default TableLoading;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default connect(mapStateToProps, {\n  GetClaimingTypes,\n  setSelectedClaimType,\n  getAllClaims,\n  PushPopupAlert,\n})(AdminFilterByType);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(\n    sessions.filter((item) => item.session_plan_id === period_id)[0]\n  );\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod.session_plan_id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option\n                key={session.session_plan_id + item}\n                value={session.session_plan_id}\n              >\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default ClaimHeaderTitle;\n","import React, { Component } from \"react\";\nimport { MdAdd, MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => this.setClaimForm(true)}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  filterClaimsByClaimType(\n                    this.props.claiming.myClaims,\n                    this.props.claiming.selectedClaimType\n                  ).map((claim, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {displayClaimTitle(\n                          this.props.claiming,\n                          this.props.documentReducer,\n                          this.props.courses,\n                          claim\n                        )}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  loadCourses,\n  getMyPlacement,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport {\n  DATE,\n  errorToText,\n  showDate,\n  timestampToDate,\n} from \"../../utils/functions\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisClaim.previous.reason}\n            </span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {props.thisApplication.position.description}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { ImInfo, ImRadioChecked, ImRadioUnchecked } from \"react-icons/im\";\nimport { MdSwapHoriz } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CalculatedMultipleChoiceInterface,\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  ClaimGetUserAnswers,\n  ClaimStatus,\n  course,\n  matchingAnswerInterface,\n  multipleChoiceAnswerInterface,\n  questionTypeElementsType,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate, timestampToDate } from \"../../utils/functions\";\nimport { findQuestionType } from \"../DoExam/utils/utils\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getAnswersByQuestion = (question_id: string): ClaimGetUserAnswers[] => {\n    return props.thisExamSheet.user_answers.filter(\n      (item) => item.question === question_id\n    );\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                Questions\n              </div>\n              {props.thisExamSheet.questions.map((item, index) => (\n                <div\n                  key={index + item.id}\n                  className=\"rounded border my-2 p-1 shadow divide-y\"\n                >\n                  {/* SINGLE & MULTIPLE && TRUE+FALSE QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    (findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.MultipleChoice ||\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.SingleMultiple ||\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.TrueFalse) && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {item.question[0].answer.map(\n                                (\n                                  question: multipleChoiceAnswerInterface,\n                                  index\n                                ) => (\n                                  <li\n                                    className={`mb-1 flex items-center`}\n                                    key={index + question.id}\n                                  >\n                                    {question.status ? (\n                                      <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                    ) : (\n                                      <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                    )}\n                                    {question.value}\n                                  </li>\n                                )\n                              )}\n                            </ul>\n                          </div>\n\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {getAnswersByQuestion(item.question_id).length >\n                              0 ? (\n                                getAnswersByQuestion(\n                                  item.question_id\n                                )[0].answer.map(\n                                  (\n                                    answer: multipleChoiceAnswerInterface,\n                                    indexAnswer\n                                  ) => (\n                                    <li\n                                      className=\"mb-3 flex items-center\"\n                                      key={indexAnswer}\n                                    >\n                                      {answer.status ? (\n                                        <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                      ) : (\n                                        <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                      )}\n                                      {answer.value}\n                                    </li>\n                                  )\n                                )\n                              ) : (\n                                <li className=\"mb-3 flex items-center\">\n                                  <ImInfo className=\"h-6 w-6 mr-2\" />\n                                  No Answer provided\n                                </li>\n                              )}\n                            </ul>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Simple Calculate QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.SimpleCalculate && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <span>\n                              Between {item.question[0].answer[0].value[0]} + \"\n                              and \"+{item.question[0].answer[0].value[1]}\n                            </span>\n                          </div>\n\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            {getAnswersByQuestion(item.question_id).length >\n                            0 ? (\n                              getAnswersByQuestion(\n                                item.question_id\n                              )[0].answer.map(\n                                (\n                                  answer: multipleChoiceAnswerInterface,\n                                  indexAnswer\n                                ) => (\n                                  <span key={indexAnswer}>{answer.value}</span>\n                                )\n                              )\n                            ) : (\n                              <span>No Answer provided</span>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* MATCHING QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.Matching && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Expected answer :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {item.question[0].answer.map(\n                                  (\n                                    question: matchingAnswerInterface,\n                                    index\n                                  ) => (\n                                    <li\n                                      className={`mb-1 flex items-center gap-2 text-lg`}\n                                      key={index + question.id}\n                                    >\n                                      {question.value}\n                                      <MdSwapHoriz className=\"\" />\n                                      {question.status}\n                                    </li>\n                                  )\n                                )}\n                              </ul>\n                            </div>\n\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Given answers :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {getAnswersByQuestion(item.question_id).length >\n                                0 ? (\n                                  getAnswersByQuestion(\n                                    item.question_id\n                                  )[0].answer.map(\n                                    (\n                                      answer: multipleChoiceAnswerInterface,\n                                      indexAnswer\n                                    ) => (\n                                      <li\n                                        className=\"mb-3 flex items-center\"\n                                        key={indexAnswer}\n                                      >\n                                        {answer.status ? (\n                                          <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                        ) : (\n                                          <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                        )}\n                                        {answer.value}\n                                      </li>\n                                    )\n                                  )\n                                ) : (\n                                  <li className=\"mb-3 flex items-center\">\n                                    <ImInfo className=\"h-6 w-6 mr-2\" />\n                                    No Answer provided\n                                  </li>\n                                )}\n                              </ul>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center px-4 mb-2\">\n                            <p className=\"text-md font-medium\">Marks :</p>\n                            <span>\n                              {getAnswersByQuestion(item.question_id) &&\n                              getAnswersByQuestion(item.question_id).length > 0\n                                ? getAnswersByQuestion(item.question_id)[0]\n                                    .user_marks\n                                : \"\"}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Short Answer QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.ShortAnswer && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <span>\n                              {capitalizeFirstLetter(\n                                item.question[0].answer[0].value\n                              )}\n                            </span>\n                          </div>\n\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            {getAnswersByQuestion(item.question_id).length >\n                            0 ? (\n                              getAnswersByQuestion(\n                                item.question_id\n                              )[0].answer.map(\n                                (\n                                  answer: multipleChoiceAnswerInterface,\n                                  indexAnswer\n                                ) => (\n                                  <span key={indexAnswer}>{answer.value}</span>\n                                )\n                              )\n                            ) : (\n                              <span>No Answer provided</span>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Numeric QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! === questionTypeElementsType.Numeric && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <span>{item.question[0].answer[0].value[0]}</span>\n                          </div>\n\n                          <div className=\"px-4 flex items-center gap-2\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            {getAnswersByQuestion(item.question_id).length >\n                            0 ? (\n                              getAnswersByQuestion(\n                                item.question_id\n                              )[0].answer.map(\n                                (\n                                  answer: multipleChoiceAnswerInterface,\n                                  indexAnswer\n                                ) => (\n                                  <span key={indexAnswer}>{answer.value}</span>\n                                )\n                              )\n                            ) : (\n                              <span>No Answer provided</span>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                  {/* Calculated Multiple Choice QUESTIONS ===================================== */}\n                  {findQuestionType(\n                    item.type,\n                    props.questionTypes.questionTypes\n                  ) &&\n                    findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    )! ===\n                      questionTypeElementsType.CalculatedMultipleChoice && (\n                      <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                        <span className={`font-semibold`}>\n                          {item.question[0].title}:\n                        </span>\n                        <span className=\"\">{item.question[0].description}</span>\n                        <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Expected answer :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {item.question[0].answer.map(\n                                (\n                                  question: CalculatedMultipleChoiceInterface,\n                                  index\n                                ) => (\n                                  <li\n                                    className={`mb-1 flex items-center`}\n                                    key={index + question.id}\n                                  >\n                                    {question.status ? (\n                                      <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                    ) : (\n                                      <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                    )}\n                                    {question.value}\n                                  </li>\n                                )\n                              )}\n                            </ul>\n                          </div>\n\n                          <div className=\"px-4\">\n                            <p className=\"text-md font-medium\">\n                              Given answers :\n                            </p>\n                            <ul className=\"text-sm w-full my-2\">\n                              {getAnswersByQuestion(item.question_id).length >\n                              0 ? (\n                                getAnswersByQuestion(\n                                  item.question_id\n                                )[0].answer.map(\n                                  (\n                                    answer: multipleChoiceAnswerInterface,\n                                    indexAnswer\n                                  ) => (\n                                    <li\n                                      className=\"mb-3 flex items-center\"\n                                      key={indexAnswer}\n                                    >\n                                      {answer.status ? (\n                                        <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                      ) : (\n                                        <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                      )}\n                                      {answer.value}\n                                    </li>\n                                  )\n                                )\n                              ) : (\n                                <li className=\"mb-3 flex items-center\">\n                                  <ImInfo className=\"h-6 w-6 mr-2\" />\n                                  No Answer provided\n                                </li>\n                              )}\n                            </ul>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center px-4 mb-2\">\n                          <p className=\"text-md font-medium\">Marks :</p>\n                          <span>\n                            {getAnswersByQuestion(item.question_id) &&\n                            getAnswersByQuestion(item.question_id).length > 0\n                              ? getAnswersByQuestion(item.question_id)[0]\n                                  .user_marks\n                              : \"\"}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                </div>\n              ))}\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.userDetails.user_info.fname +\n                          \" \" +\n                          props.thisClaim.userDetails.user_info.lname\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default connect(mapStateToProps, {\n  loadQuestionTypes,\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate, timestampToDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimPlacementView);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default connect(mapStateToProps, {\n  GetClaimingTypes,\n  setSelectedClaimType,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  PushPopupAlert,\n})(FilterByType);\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdCancel, MdInfoOutline, MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert, reAssessApplication } from \"../../../actions\";\nimport { evaluateClaim } from \"../../../actions/claiming\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  allClaimApplicationInterface,\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n  ClaimTypesInterfaceAPI,\n  PositionAPI,\n} from \"../../../interfaces\";\nimport { ApplicationStates } from \"../../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport {\n  capitalizeFirstLetter,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport { API } from \"../../../utils/api\";\nimport { errorToText } from \"../../../utils/errors\";\nimport { DATE, showDate } from \"../../../utils/functions\";\nimport { PositionRequirementTableInterface } from \"../../Positions/ViewPosition\";\nimport ViewRequirements from \"../../Positions/ViewRequirements\";\nimport { isClaimEvaluated } from \"../ClaimDocView\";\n\nexport const FC_AdminApplicationPositionDistinctCategory = (\n  thisPosition: PositionAPI,\n  documentCategories: DocumentReducerInterface\n): {\n  PositionsTemp: PositionRequirementTableInterface[];\n  DistinctCategoriesTemp: PositionRequirementTableInterface[];\n  DistinctSubCategoriesTemp: PositionRequirementTableInterface[];\n} => {\n  let PositionsTemp: PositionRequirementTableInterface[] = [];\n  let DistinctCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctCategoriesIds: string[] = [];\n  let DistinctSubCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctSubCategoriesIds: string[] = [];\n  // GET REQUIREMENTS OF THE CURRENT POSITION ====================\n  let requirements = thisPosition.requirements;\n  // LOOP THROUGH CURRENT POSITION REQUIREMENTS ==========================\n  for (let req in requirements) {\n    let thisRequirements = requirements[req];\n    // GET DOC CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisCategory = documentCategories.documentCategory\n      ? documentCategories.documentCategory.find(\n          (item) =>\n            item.user_detail_category_id ===\n            thisRequirements.category.user_detail_category_id\n        ) && {\n          title: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.category.user_detail_category_id\n          )!.title,\n          user_detail_category_id: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.category.user_detail_category_id\n          )!.user_detail_category_id,\n        }\n      : {\n          title: \"\",\n          user_detail_category_id:\n            thisRequirements.category.user_detail_category_id,\n        };\n    // GET DOC SUB CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisSubCategory = documentCategories.documentSubCategory\n      ? documentCategories.documentSubCategory.find(\n          (item) =>\n            item.user_detail_subcategory_id ===\n            thisRequirements.subcategory.user_detail_subcategory_id\n        )\n        ? {\n            title: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.subcategory.user_detail_subcategory_id\n            )!.title,\n            user_detail_subcategory_id:\n              documentCategories.documentSubCategory.find(\n                (item) =>\n                  item.user_detail_subcategory_id ===\n                  thisRequirements.subcategory.user_detail_subcategory_id\n              )!.user_detail_subcategory_id,\n            category_id: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.subcategory.user_detail_subcategory_id\n            )!.category_id,\n          }\n        : {\n            title: \"\",\n            user_detail_subcategory_id:\n              thisRequirements.subcategory.user_detail_subcategory_id,\n            category_id: \"\",\n          }\n      : {\n          title: \"\",\n          user_detail_subcategory_id:\n            thisRequirements.subcategory.user_detail_subcategory_id,\n          category_id: \"\",\n        };\n    // LOOP THROUGH FIELDS OF THE CURRENT POSITION REQUIREMENTS ==========================\n    if (thisCategory) {\n      for (let field in thisRequirements.position_requirement) {\n        // GET FIELDS OF THE CURRENT POSITION REQUIREMENTS ====================\n        let thisField = documentCategories.documentFields\n          ? documentCategories.documentFields.find(\n              (item) =>\n                item._id === thisRequirements.position_requirement[field]._id\n            )\n            ? {\n                title: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]._id\n                )!.title,\n                _id: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]._id\n                )!._id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n            : {\n                title: \"\",\n                _id: thisRequirements.position_requirement[field]._id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n          : {\n              title: \"\",\n              _id: thisRequirements.position_requirement[field]._id,\n              required: thisRequirements.position_requirement[field].required,\n            };\n        // ADD CURRENT CATEGORY, SUB CATEGORY & FIELDS OF THE CURRENT POSITION REQUIREMENTS IN POSITIONS TEMP ====================\n        PositionsTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          field_title: thisField.title,\n          field_id: thisField._id,\n          required: thisField.required,\n        });\n      }\n\n      // ADD CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctCategoriesIds.includes(thisCategory.user_detail_category_id)\n      ) {\n        DistinctCategoriesIds.push(thisCategory.user_detail_category_id);\n        DistinctCategoriesTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: \"\",\n          subcategory_title: \"\",\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n\n      // ADD SUB CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctSubCategoriesIds.includes(\n          thisSubCategory.user_detail_subcategory_id\n        )\n      ) {\n        DistinctSubCategoriesIds.push(\n          thisSubCategory.user_detail_subcategory_id\n        );\n        DistinctSubCategoriesTemp.push({\n          category_id: thisSubCategory.category_id,\n          category_title: \"\",\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n    }\n  }\n  // DistinctCategoriesIds.;\n\n  return { PositionsTemp, DistinctCategoriesTemp, DistinctSubCategoriesTemp };\n};\n\nenum viewTabs {\n  profile = \"Applicant Profile\",\n  application = \"Application Details\",\n}\n\ntype AdminClaimAppViewProps = {\n  thisApplication: allClaimApplicationInterface;\n  thisPosition: PositionAPI;\n  documentCategories: DocumentReducerInterface;\n  thisClaim: CandidateClaimInterface;\n  claimTypes: ClaimTypesInterfaceAPI[];\n  systemPositions: PositionAPI[];\n  claimReasons: claimReasonInterface[] | null;\n\n  // REDUX ==================\n  auth: Auth;\n  reAssessApplication: Function;\n  evaluateClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst AdminClaimAppView: React.FC<AdminClaimAppViewProps> = (props) => {\n  const [viewPosition, setViewPosition] = useState<boolean>(true);\n  const [loadingRequest, setLoadingRequest] = useState<boolean>(false);\n  const [actionTaken, setActionTaken] = useState<ClaimDecisionStatus | null>(\n    null\n  );\n  const [formError, setFormError] = useState<{\n    element: string;\n    msg: string;\n  } | null>(null);\n  const [responseMsg, setResponseMsg] = useState<string>(\"\");\n  const [selectedTab, setSelectedTab] = useState<viewTabs>(viewTabs.profile);\n\n  const handleVerify = async () => {\n    if (!actionTaken) {\n      setFormError({\n        element: \"action\",\n        msg: \"Action is required!\",\n      });\n      return setLoadingRequest(false);\n    }\n\n    if (isEmptyOrSpaces(responseMsg)) {\n      setFormError({\n        element: \"comment\",\n        msg: \"Reason of rejection is required\",\n      });\n      return setLoadingRequest(false);\n    }\n\n    let subClaim = props.thisClaim.claims.find(\n      (item) => item.level === props.thisClaim.claim_level\n    );\n\n    if (subClaim) {\n      setLoadingRequest(true);\n      const api_body: {\n        sub_claim_id: string;\n        evaluation_comment: string;\n        evaluated_by: string;\n        decision_taken_status: ClaimDecisionStatus;\n      } = {\n        sub_claim_id: subClaim.id,\n        evaluation_comment: responseMsg,\n        evaluated_by: props.auth.user.user_id,\n        decision_taken_status: actionTaken,\n      };\n\n      try {\n        const res = await axios.put<CandidateClaimInterface>(\n          `${API.CLAIMING}/user/evaluate/${props.thisClaim._id}`,\n          api_body\n        );\n        if (res) {\n          console.log({ evaluate_claim_res: res });\n          props.evaluateClaim(res.data);\n          // REVALIDATED DOCUMENT IF IT IS APPROVED =========================\n          if (actionTaken === ClaimDecisionStatus.ACCEPTED) {\n            await overrideDecision();\n          }\n          props.PushPopupAlert({\n            title: `Claim responded successfully!`,\n            theme: PopupAlertTheme.success,\n          });\n          // setDocumentId(\"null\");\n          setResponseMsg(\"\");\n          setActionTaken(null);\n        }\n      } catch (error) {\n        console.error(error);\n        props.PushPopupAlert({\n          title: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      setLoadingRequest(false);\n    }\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  const overrideDecision = async () => {\n    try {\n      const res = await axios.patch(\n        `${API.APPLICATION}/tolerateappl/${props.thisClaim.claiming_on_id}`,\n        {\n          user_id: props.auth.user.user_id,\n          comment: responseMsg,\n          application_status: ApplicationStates.Shortlisted,\n        }\n      );\n\n      res.data &&\n        props.reAssessApplication({\n          application_id: props.thisClaim.claiming_on_id,\n          application_status: ApplicationStates.Shortlisted,\n        });\n    } catch (error) {\n      console.error({ code_error: error });\n      PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n      // errorToText(error);\n    }\n    setLoadingRequest(false);\n  };\n\n  const getPositionById = (position_id: string): PositionAPI | undefined => {\n    let result = props.systemPositions.find(\n      (item) => item.position_id === position_id\n    );\n\n    return result;\n  };\n\n  return (\n    <section className=\"\">\n      {/* #################### VIEW TABS ################################## */}\n      <div className=\"flex flex-row items-center mx-4\">\n        {Object.values(viewTabs).map((item, i) => (\n          <div\n            key={i}\n            onClick={() => setSelectedTab(item)}\n            className={`animate__animated ${\n              selectedTab === item\n                ? \"bg-blue-100 border-blue-600 text-blue-600 animate__zoomIn\"\n                : \"bg-white border-white text-gray-600\"\n            } hover:bg-blue-100 px-4 py-2 cursor-pointer font-bold border-b-4 hover:border-blue-600 hover:text-blue-600 rounded-t mt-1 mr-1`}\n          >\n            {item}\n          </div>\n        ))}\n      </div>\n      {/* #################### END VIEW TABS ################################## */}\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          {/* DISPLAY POSITION ==================================================== */}\n          {selectedTab === viewTabs.application && (\n            <section className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className={`italic text-gray-600`}>Name:</span>\n                    <span className=\"text-gray-800 font-bold text-2xl\">\n                      {getPositionById(props.thisApplication.position)\n                        ? getPositionById(props.thisApplication.position)!\n                            .position_title\n                        : \"Position not found\"}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {getPositionById(props.thisApplication.position)\n                      ? getPositionById(props.thisApplication.position)!\n                          .description\n                      : \"\"}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {getPositionById(props.thisApplication.position)\n                      ? getPositionById(props.thisApplication.position)!\n                          .school_level_id.school_level_name\n                      : \"\"}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {getPositionById(props.thisApplication.position)\n                      ? getPositionById(props.thisApplication.position)!\n                          .education_institute_id.education_category_title\n                      : \"\"}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {getPositionById(props.thisApplication.position) ? (\n                      getPositionById(\n                        props.thisApplication.position\n                      )!.courses.map((item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            getPositionById(props.thisApplication.position)!\n                              .courses.length -\n                              1 && \",\"}\n                        </div>\n                      ))\n                    ) : (\n                      <NoResult\n                        theme={NoResultThemes.Dark}\n                        value={\"No courses found\"}\n                      />\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {getPositionById(props.thisApplication.position) ? (\n                  getPositionById(props.thisApplication.position)!.requirements\n                    .length > 0 ? (\n                    FC_AdminApplicationPositionDistinctCategory(\n                      getPositionById(props.thisApplication.position)!,\n                      props.documentCategories\n                    ).DistinctCategoriesTemp.map((item, index) => (\n                      <div\n                        className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                        key={index + item.category_id}\n                      >\n                        <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                          <MdTurnedIn />\n                          <span>{item.category_title}</span>\n                        </div>\n                        <div className=\"border bg-white mt-1\">\n                          <ViewRequirements\n                            requirements={FC_AdminApplicationPositionDistinctCategory(\n                              getPositionById(props.thisApplication.position)!,\n                              props.documentCategories\n                            ).PositionsTemp.filter(\n                              (req) => req.category_id === item.category_id\n                            )}\n                          />\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"No requirements\"}\n                    ></NoResult>\n                  )\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </section>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n          {/* -------------------------------------------------------------------------------- */}\n          {/* DISPLAY PROFILE ==================================================== */}\n          {selectedTab === viewTabs.profile && (\n            <section className=\"w-full my-2 animate__animated animate__fadeIn rounded\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <span className={`italic text-gray-600`}>Names:</span>\n                  <span className=\"text-gray-800 font-bold text-xl\">\n                    {props.thisClaim.previous.evaluater.name}\n                  </span>\n                </div>\n                {false && (\n                  <button\n                    type=\"button\"\n                    className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                    onClick={() => setViewPosition(!viewPosition)}\n                  >\n                    {viewPosition ? \"Hide\" : \"More\"}\n                  </button>\n                )}\n              </div>\n            </section>\n          )}\n          {/* END DISPLAY PROFILE ==================================================== */}\n          {selectedTab === viewTabs.profile && (\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center gap-2\">\n                <span className={`italic text-gray-600`}>Position name:</span>\n                <span className=\"text-gray-800 font-bold text-2xl\">\n                  {getPositionById(props.thisApplication.position)\n                    ? getPositionById(props.thisApplication.position)!\n                        .position_title\n                    : \"Position not found\"}\n                </span>\n              </div>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous\n                  ? props.thisClaim.previous.status ===\n                    ApplicationStates.Rejected\n                  : props.thisApplication.application_status ===\n                    ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {props.thisClaim.previous\n                ? capitalizeFirstLetter(props.thisClaim.previous.status)\n                : capitalizeFirstLetter(\n                    props.thisApplication.application_status\n                  )}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {props.thisApplication.application_session}\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisClaim.previous\n                ? props.thisClaim.previous.reason\n                : props.thisApplication.override_by.comment}\n            </span>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVEL 1 DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              <div className=\"text-gray-700 italic font-bold\">\n                Claim Comment (level {index + 1})\n              </div>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2 mt-1 border rounded px-4 py-1 bg-gray-50\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-600 text-xs\">\n                  {showDate(claim.createdAt)}\n                  {/* {showDate(claim.createdAt) +\n                    \" at \" +\n                    moment.unix(claim.date_created).format(\"MM/DD/YYYY\")} */}\n                </span>\n              </div>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-700 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n            </section>\n          ))}\n        {/* END CLAIM LEVEL 1 DETAILS ==================================================== */}\n      </div>\n\n      {/* FOOTER INITIAL ========================================== */}\n      {!actionTaken && (\n        <section className=\"flex items-center justify-between\">\n          {/* SHOWING STATUS ===================================== */}\n          <div className=\"mx-4 mb-5 mt-3\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n          </div>\n\n          {props.thisClaim.last_claim_status === ClaimStatus.PENDING && (\n            <div className=\"flex items-center gap-2 px-2\">\n              <button\n                className={`px-4 py-2 font-semibold text-red-50 rounded inline-flex items-center space-x-2 focus:outline-none bg-red-700 hover:bg-red-800`}\n                onClick={() => {\n                  setActionTaken(ClaimDecisionStatus.REJECTED);\n                }}\n              >\n                <MdCancel className=\"w-5 h-5\" />\n                <span>Reject</span>\n              </button>\n              <button\n                className={`px-4 py-2 font-semibold text-blue-50 rounded inline-flex items-center space-x-2 focus:outline-none bg-blue-700 hover:bg-blue-800`}\n                onClick={() => {\n                  setActionTaken(ClaimDecisionStatus.ACCEPTED);\n                }}\n              >\n                <FaRegCheckCircle className=\"w-5 h-5\" />\n                <span>Accept</span>\n              </button>\n            </div>\n          )}\n        </section>\n      )}\n      {/* END FOOTER INITIAL ========================================== */}\n\n      {/* ======================================================== */}\n      {/* FOOTER RESPONSE ========================================== */}\n      {actionTaken && (\n        <section className=\"my-5 overflow-x-auto\">\n          <div className=\"italic text-gray-700 text-base my-1 mx-2\">\n            Selected decision:{\" \"}\n            <span\n              className={`font-semibold text-lg ${\n                actionTaken === ClaimDecisionStatus.ACCEPTED\n                  ? \"text-blue-700\"\n                  : \"text-yellow-800\"\n              }`}\n            >\n              {actionTaken === ClaimDecisionStatus.ACCEPTED\n                ? \"Approved\"\n                : \"Rejected\"}\n            </span>\n          </div>\n          {/* right part */}\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your decision...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  formError && formError.element === \"comment\" ? \"red\" : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={responseMsg}\n                onChange={(e) => {\n                  setResponseMsg(e.target.value);\n                  setFormError(null);\n                }}\n                disabled={loadingRequest}\n              ></textarea>\n              {formError && formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  setResponseMsg(\"\");\n                  setActionTaken(null);\n                  setFormError(null);\n                }}\n                disabled={loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={loadingRequest}\n                onClick={() =>\n                  window.confirm(\n                    `Are you sure you want to ${\n                      actionTaken === ClaimDecisionStatus.ACCEPTED\n                        ? \"approve\"\n                        : \"rejected\"\n                    } this document?`\n                  ) && handleVerify()\n                }\n              >\n                {loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n          {/* end right part */}\n        </section>\n      )}\n      {/* END FOOTER RESPONSE ========================================== */}\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n}: StoreState): {\n  auth: Auth;\n} => {\n  return {\n    auth: auth,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  evaluateClaim,\n  reAssessApplication,\n  PushPopupAlert,\n})(AdminClaimAppView);\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { ImRadioChecked, ImRadioUnchecked, ImInfo } from \"react-icons/im\";\nimport { MdCancel, MdInfoOutline, MdSwapHoriz } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { evaluateClaim } from \"../../../actions/claiming\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport {\n  CalculatedMultipleChoiceInterface,\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  ClaimGetUserAnswers,\n  claimReasonInterface,\n  ClaimStatus,\n  ClaimTypesInterfaceAPI,\n  course,\n  matchingAnswerInterface,\n  multipleChoiceAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport {\n  capitalizeFirstLetter,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport { API } from \"../../../utils/api\";\nimport { errorToText } from \"../../../utils/errors\";\nimport { showDate } from \"../../../utils/functions\";\nimport { findQuestionType } from \"../../DoExam/utils/utils\";\nimport { isClaimEvaluated } from \"../ClaimDocView\";\n\nenum viewTabs {\n  profile = \"Applicant Profile\",\n  exam = \"Exam Details\",\n}\n\ntype AdminClaimExamViewProps = {\n  thisExamSheet: ClaimExamResultsDetails;\n  thisExam: course;\n  thisClaim: CandidateClaimInterface;\n  claimTypes: ClaimTypesInterfaceAPI[];\n  claimReasons: claimReasonInterface[] | null;\n\n  // REDUX ==================\n  auth: Auth;\n  questionTypes: questionTypesStoreInterface;\n  evaluateClaim: Function;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: Function;\n};\n\nconst AdminClaimExamView: React.FC<AdminClaimExamViewProps> = (props) => {\n  const [loadingRequest, setLoadingRequest] = useState<boolean>(false);\n  const [loading, setLoading] = useState(true);\n  const [actionTaken, setActionTaken] = useState<ClaimDecisionStatus | null>(\n    null\n  );\n  const [formError, setFormError] = useState<{\n    element: string;\n    msg: string;\n  } | null>(null);\n  const [responseMsg, setResponseMsg] = useState<string>(\"\");\n  const [marks, setMarks] = useState<number>(0);\n  const [selectedTab, setSelectedTab] = useState<viewTabs>(viewTabs.profile);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    } else if (loading) {\n      setLoading(false);\n    }\n  }, [loading, props]);\n\n  if (loading || props.questionTypes.questionTypes === null) {\n    return <Loading />;\n  }\n\n  const handleVerify = async () => {\n    if (!actionTaken) {\n      setFormError({\n        element: \"action\",\n        msg: \"Action is required!\",\n      });\n      return setLoadingRequest(false);\n    }\n\n    if (\n      actionTaken === ClaimDecisionStatus.ACCEPTED &&\n      (marks <= 0 || marks > 100)\n    ) {\n      setFormError({\n        element: \"marks\",\n        msg: \"Invalid marks, marks must be between 1 and 10\",\n      });\n\n      return setLoadingRequest(false);\n    }\n\n    if (isEmptyOrSpaces(responseMsg)) {\n      setFormError({\n        element: \"comment\",\n        msg: \"Reason of rejection is required\",\n      });\n      return setLoadingRequest(false);\n    }\n\n    let subClaim = props.thisClaim.claims.find(\n      (item) => item.level === props.thisClaim.claim_level\n    );\n\n    if (subClaim) {\n      setLoadingRequest(true);\n      const api_body: {\n        sub_claim_id: string;\n        evaluation_comment: string;\n        evaluated_by: string;\n        evaluator_name: string;\n        evaluator_email: string;\n        decision_taken_status: ClaimDecisionStatus;\n      } = {\n        sub_claim_id: subClaim.id,\n        evaluation_comment: responseMsg,\n        evaluated_by: props.auth.user.user_id,\n        decision_taken_status: actionTaken,\n        evaluator_name: props.auth.user.fname + \" \" + props.auth.user.lname,\n        evaluator_email: props.auth.user.email,\n      };\n\n      try {\n        const res = await axios.put<CandidateClaimInterface>(\n          `${API.CLAIMING}/user/evaluate/${props.thisClaim._id}`,\n          api_body\n        );\n        if (res) {\n          console.log({ evaluate_claim_res: res });\n          props.evaluateClaim(res.data);\n          // REVALIDATED DOCUMENT IF IT IS APPROVED =========================\n          if (actionTaken === ClaimDecisionStatus.ACCEPTED) {\n            await handleMarksAddition();\n          }\n          props.PushPopupAlert({\n            title: `Claim responded successfully!`,\n            theme: PopupAlertTheme.success,\n          });\n          // setDocumentId(\"null\");\n          setResponseMsg(\"\");\n          setActionTaken(null);\n        }\n      } catch (error) {\n        console.error(error);\n        props.PushPopupAlert({\n          title: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      setLoadingRequest(false);\n    }\n  };\n\n  const handleMarksAddition = async () => {\n    try {\n      await axios.put(`${API.DO_EXAM}/answersheet/user/marks/update`, {\n        answer_sheet_id: props.thisClaim.claiming_on_id,\n        marks: marks,\n      });\n    } catch (error) {\n      console.error(error);\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  const getAnswersByQuestion = (question_id: string): ClaimGetUserAnswers[] => {\n    return props.thisExamSheet.user_answers.filter(\n      (item) => item.question === question_id\n    );\n  };\n\n  return (\n    <section className=\"\">\n      {/* #################### VIEW TABS ################################## */}\n      <div className=\"flex flex-row items-center mx-4\">\n        {Object.values(viewTabs).map((item, i) => (\n          <div\n            key={i}\n            onClick={() => setSelectedTab(item)}\n            className={`animate__animated ${\n              selectedTab === item\n                ? \"bg-blue-100 border-blue-600 text-blue-600 animate__zoomIn\"\n                : \"bg-white border-white text-gray-600\"\n            } hover:bg-blue-100 px-4 py-2 cursor-pointer font-bold border-b-4 hover:border-blue-600 hover:text-blue-600 rounded-t mt-1 mr-1`}\n          >\n            {item}\n          </div>\n        ))}\n      </div>\n      {/* #################### END VIEW TABS ################################## */}\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          {/* DISPLAY POSITION ==================================================== */}\n          {selectedTab === viewTabs.exam && (\n            <section className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full rounded p-2 mb-2\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Questions\n                </div>\n                {props.thisExamSheet.questions.map((item, index) => (\n                  <div\n                    key={index + item.id}\n                    className=\"rounded border my-2 p-1 shadow divide-y\"\n                  >\n                    {/* SINGLE & MULTIPLE && TRUE+FALSE QUESTIONS ===================================== */}\n                    {findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    ) &&\n                      (findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.MultipleChoice ||\n                        findQuestionType(\n                          item.type,\n                          props.questionTypes.questionTypes\n                        )! === questionTypeElementsType.SingleMultiple ||\n                        findQuestionType(\n                          item.type,\n                          props.questionTypes.questionTypes\n                        )! === questionTypeElementsType.TrueFalse) && (\n                        <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                          <span className={`font-semibold`}>\n                            {item.question[0].title}:\n                          </span>\n                          <span className=\"\">\n                            {item.question[0].description}\n                          </span>\n                          <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Expected answer :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {item.question[0].answer.map(\n                                  (\n                                    question: multipleChoiceAnswerInterface,\n                                    index\n                                  ) => (\n                                    <li\n                                      className={`mb-1 flex items-center`}\n                                      key={index + question.id}\n                                    >\n                                      {question.status ? (\n                                        <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                      ) : (\n                                        <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                      )}\n                                      {question.value}\n                                    </li>\n                                  )\n                                )}\n                              </ul>\n                            </div>\n\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Given answers :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {getAnswersByQuestion(item.question_id).length >\n                                0 ? (\n                                  getAnswersByQuestion(\n                                    item.question_id\n                                  )[0].answer.map(\n                                    (\n                                      answer: multipleChoiceAnswerInterface,\n                                      indexAnswer\n                                    ) => (\n                                      <li\n                                        className=\"mb-3 flex items-center\"\n                                        key={indexAnswer}\n                                      >\n                                        {answer.status ? (\n                                          <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                        ) : (\n                                          <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                        )}\n                                        {answer.value}\n                                      </li>\n                                    )\n                                  )\n                                ) : (\n                                  <li className=\"mb-3 flex items-center\">\n                                    <ImInfo className=\"h-6 w-6 mr-2\" />\n                                    No Answer provided\n                                  </li>\n                                )}\n                              </ul>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center px-4 mb-2\">\n                            <p className=\"text-md font-medium\">Marks :</p>\n                            <span>\n                              {getAnswersByQuestion(item.question_id) &&\n                              getAnswersByQuestion(item.question_id).length > 0\n                                ? getAnswersByQuestion(item.question_id)[0]\n                                    .user_marks\n                                : \"\"}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n\n                    {/* Simple Calculate QUESTIONS ===================================== */}\n                    {findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    ) &&\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.SimpleCalculate && (\n                        <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                          <span className={`font-semibold`}>\n                            {item.question[0].title}:\n                          </span>\n                          <span className=\"\">\n                            {item.question[0].description}\n                          </span>\n                          <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                            <div className=\"px-4 flex items-center gap-2\">\n                              <p className=\"text-md font-medium\">\n                                Expected answer :\n                              </p>\n                              <span>\n                                Between {item.question[0].answer[0].value[0]} +\n                                \" and \"+{item.question[0].answer[0].value[1]}\n                              </span>\n                            </div>\n\n                            <div className=\"px-4 flex items-center gap-2\">\n                              <p className=\"text-md font-medium\">\n                                Given answers :\n                              </p>\n                              {getAnswersByQuestion(item.question_id).length >\n                              0 ? (\n                                getAnswersByQuestion(\n                                  item.question_id\n                                )[0].answer.map(\n                                  (\n                                    answer: multipleChoiceAnswerInterface,\n                                    indexAnswer\n                                  ) => (\n                                    <span key={indexAnswer}>\n                                      {answer.value}\n                                    </span>\n                                  )\n                                )\n                              ) : (\n                                <span>No Answer provided</span>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center px-4 mb-2\">\n                            <p className=\"text-md font-medium\">Marks :</p>\n                            <span>\n                              {getAnswersByQuestion(item.question_id) &&\n                              getAnswersByQuestion(item.question_id).length > 0\n                                ? getAnswersByQuestion(item.question_id)[0]\n                                    .user_marks\n                                : \"\"}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n\n                    {/* MATCHING QUESTIONS ===================================== */}\n                    {findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    ) &&\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.Matching && (\n                        <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                          <span className={`font-semibold`}>\n                            {item.question[0].title}:\n                          </span>\n                          <span className=\"\">\n                            {item.question[0].description}\n                          </span>\n                          <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                            <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                              <div className=\"px-4\">\n                                <p className=\"text-md font-medium\">\n                                  Expected answer :\n                                </p>\n                                <ul className=\"text-sm w-full my-2\">\n                                  {item.question[0].answer.map(\n                                    (\n                                      question: matchingAnswerInterface,\n                                      index\n                                    ) => (\n                                      <li\n                                        className={`mb-1 flex items-center gap-2 text-lg`}\n                                        key={index + question.id}\n                                      >\n                                        {question.value}\n                                        <MdSwapHoriz className=\"\" />\n                                        {question.status}\n                                      </li>\n                                    )\n                                  )}\n                                </ul>\n                              </div>\n\n                              <div className=\"px-4\">\n                                <p className=\"text-md font-medium\">\n                                  Given answers :\n                                </p>\n                                <ul className=\"text-sm w-full my-2\">\n                                  {getAnswersByQuestion(item.question_id)\n                                    .length > 0 ? (\n                                    getAnswersByQuestion(\n                                      item.question_id\n                                    )[0].answer.map(\n                                      (\n                                        answer: multipleChoiceAnswerInterface,\n                                        indexAnswer\n                                      ) => (\n                                        <li\n                                          className=\"mb-3 flex items-center\"\n                                          key={indexAnswer}\n                                        >\n                                          {answer.status ? (\n                                            <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                          ) : (\n                                            <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                          )}\n                                          {answer.value}\n                                        </li>\n                                      )\n                                    )\n                                  ) : (\n                                    <li className=\"mb-3 flex items-center\">\n                                      <ImInfo className=\"h-6 w-6 mr-2\" />\n                                      No Answer provided\n                                    </li>\n                                  )}\n                                </ul>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center px-4 mb-2\">\n                              <p className=\"text-md font-medium\">Marks :</p>\n                              <span>\n                                {getAnswersByQuestion(item.question_id) &&\n                                getAnswersByQuestion(item.question_id).length >\n                                  0\n                                  ? getAnswersByQuestion(item.question_id)[0]\n                                      .user_marks\n                                  : \"\"}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                    {/* Short Answer QUESTIONS ===================================== */}\n                    {findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    ) &&\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.ShortAnswer && (\n                        <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                          <span className={`font-semibold`}>\n                            {item.question[0].title}:\n                          </span>\n                          <span className=\"\">\n                            {item.question[0].description}\n                          </span>\n\n                          <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                            <div className=\"px-4 flex items-center gap-2\">\n                              <p className=\"text-md font-medium\">\n                                Expected answer :\n                              </p>\n                              <span>\n                                {capitalizeFirstLetter(\n                                  item.question[0].answer[0].value\n                                )}\n                              </span>\n                            </div>\n\n                            <div className=\"px-4 flex items-center gap-2\">\n                              <p className=\"text-md font-medium\">\n                                Given answers :\n                              </p>\n                              {getAnswersByQuestion(item.question_id).length >\n                              0 ? (\n                                getAnswersByQuestion(\n                                  item.question_id\n                                )[0].answer.map(\n                                  (\n                                    answer: multipleChoiceAnswerInterface,\n                                    indexAnswer\n                                  ) => (\n                                    <span key={indexAnswer}>\n                                      {answer.value}\n                                    </span>\n                                  )\n                                )\n                              ) : (\n                                <span>No Answer provided</span>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center px-4 mb-2\">\n                            <p className=\"text-md font-medium\">Marks :</p>\n                            <span>\n                              {getAnswersByQuestion(item.question_id) &&\n                              getAnswersByQuestion(item.question_id).length > 0\n                                ? getAnswersByQuestion(item.question_id)[0]\n                                    .user_marks\n                                : \"\"}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n\n                    {/* Numeric QUESTIONS ===================================== */}\n                    {findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    ) &&\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! === questionTypeElementsType.Numeric && (\n                        <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                          <span className={`font-semibold`}>\n                            {item.question[0].title}:\n                          </span>\n                          <span className=\"\">\n                            {item.question[0].description}\n                          </span>\n                          <div className=\"mt-2 mb-1 py-1 divide-x border bg-gray-50\">\n                            <div className=\"px-4 flex items-center gap-2\">\n                              <p className=\"text-md font-medium\">\n                                Expected answer :\n                              </p>\n                              <span>{item.question[0].answer[0].value[0]}</span>\n                            </div>\n\n                            <div className=\"px-4 flex items-center gap-2\">\n                              <p className=\"text-md font-medium\">\n                                Given answers :\n                              </p>\n                              {getAnswersByQuestion(item.question_id).length >\n                              0 ? (\n                                getAnswersByQuestion(\n                                  item.question_id\n                                )[0].answer.map(\n                                  (\n                                    answer: multipleChoiceAnswerInterface,\n                                    indexAnswer\n                                  ) => (\n                                    <span key={indexAnswer}>\n                                      {answer.value}\n                                    </span>\n                                  )\n                                )\n                              ) : (\n                                <span>No Answer provided</span>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center px-4 mb-2\">\n                            <p className=\"text-md font-medium\">Marks :</p>\n                            <span>\n                              {getAnswersByQuestion(item.question_id) &&\n                              getAnswersByQuestion(item.question_id).length > 0\n                                ? getAnswersByQuestion(item.question_id)[0]\n                                    .user_marks\n                                : \"\"}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n\n                    {/* Calculated Multiple Choice QUESTIONS ===================================== */}\n                    {findQuestionType(\n                      item.type,\n                      props.questionTypes.questionTypes\n                    ) &&\n                      findQuestionType(\n                        item.type,\n                        props.questionTypes.questionTypes\n                      )! ===\n                        questionTypeElementsType.CalculatedMultipleChoice && (\n                        <div className=\"flex flex-col gap-1 px-2 text-base text-gray-600\">\n                          <span className={`font-semibold`}>\n                            {item.question[0].title}:\n                          </span>\n                          <span className=\"\">\n                            {item.question[0].description}\n                          </span>\n                          <div className=\"grid grid-cols-2 gap-4 mt-2 mb-1 pt-2 divide-x border bg-gray-50\">\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Expected answer :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {item.question[0].answer.map(\n                                  (\n                                    question: CalculatedMultipleChoiceInterface,\n                                    index\n                                  ) => (\n                                    <li\n                                      className={`mb-1 flex items-center`}\n                                      key={index + question.id}\n                                    >\n                                      {question.status ? (\n                                        <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                      ) : (\n                                        <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                      )}\n                                      {question.value}\n                                    </li>\n                                  )\n                                )}\n                              </ul>\n                            </div>\n\n                            <div className=\"px-4\">\n                              <p className=\"text-md font-medium\">\n                                Given answers :\n                              </p>\n                              <ul className=\"text-sm w-full my-2\">\n                                {getAnswersByQuestion(item.question_id).length >\n                                0 ? (\n                                  getAnswersByQuestion(\n                                    item.question_id\n                                  )[0].answer.map(\n                                    (\n                                      answer: multipleChoiceAnswerInterface,\n                                      indexAnswer\n                                    ) => (\n                                      <li\n                                        className=\"mb-3 flex items-center\"\n                                        key={indexAnswer}\n                                      >\n                                        {answer.status ? (\n                                          <ImRadioChecked className=\"h-6 w-6 mr-2\" />\n                                        ) : (\n                                          <ImRadioUnchecked className=\"h-6 w-6 mr-2\" />\n                                        )}\n                                        {answer.value}\n                                      </li>\n                                    )\n                                  )\n                                ) : (\n                                  <li className=\"mb-3 flex items-center\">\n                                    <ImInfo className=\"h-6 w-6 mr-2\" />\n                                    No Answer provided\n                                  </li>\n                                )}\n                              </ul>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center px-4 mb-2\">\n                            <p className=\"text-md font-medium\">Marks :</p>\n                            <span>\n                              {getAnswersByQuestion(item.question_id) &&\n                              getAnswersByQuestion(item.question_id).length > 0\n                                ? getAnswersByQuestion(item.question_id)[0]\n                                    .user_marks\n                                : \"\"}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                  </div>\n                ))}\n              </div>\n            </section>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n          {/* -------------------------------------------------------------------------------- */}\n          {/* DISPLAY PROFILE ==================================================== */}\n          {selectedTab === viewTabs.profile && (\n            <section className=\"w-full my-2 animate__animated animate__fadeIn rounded\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <span className={`italic text-gray-600`}>Names:</span>\n                  <span className=\"text-gray-800 font-bold text-xl\">\n                    {props.thisClaim.userDetails.user_info.fname +\n                      \" \" +\n                      props.thisClaim.userDetails.user_info.lname}\n                  </span>\n                </div>\n              </div>\n            </section>\n          )}\n          {/* END DISPLAY PROFILE ==================================================== */}\n          {selectedTab === viewTabs.profile && (\n            <div className=\"\">\n              <div className=\"flex items-center gap-2\">\n                <span className={`italic text-gray-600`}>Email:</span>\n                <span className=\"text-gray-800 font-bold text-lg\">\n                  {props.thisClaim.userDetails.email}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className={`italic text-gray-600`}>Phone:</span>\n                <span className=\"text-gray-800 font-bold text-lg\">\n                  {props.thisClaim.userDetails.phone_number}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className={`italic text-gray-600`}>Gender:</span>\n                <span className=\"text-gray-800 font-bold text-lg\">\n                  {props.thisClaim.userDetails.user_info.sex === \"M\"\n                    ? \"Male\"\n                    : \"Female\"}\n                </span>\n              </div>\n            </div>\n          )}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVEL 1 DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              <div className=\"text-gray-700 italic font-bold\">\n                Claim Comment (level {index + 1})\n              </div>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2 mt-1 border rounded px-2 py-1 bg-gray-50\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-600 text-xs\">\n                  {showDate(claim.createdAt)}\n                  {/* {showDate(claim.createdAt) +\n                    \" at \" +\n                    moment.unix(claim.date_created).format(\"MM/DD/YYYY\")} */}\n                </span>\n              </div>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-700 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n            </section>\n          ))}\n        {/* END CLAIM LEVEL 1 DETAILS ==================================================== */}\n      </div>\n\n      {/* FOOTER INITIAL ========================================== */}\n      {!actionTaken && (\n        <section className=\"flex items-center justify-between\">\n          {/* SHOWING STATUS ===================================== */}\n          <div className=\"mx-4 mb-5 mt-3\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n          </div>\n\n          {props.thisClaim.last_claim_status === ClaimStatus.PENDING && (\n            <div className=\"flex items-center gap-2 px-2\">\n              <button\n                className={`px-4 py-2 font-semibold text-red-50 rounded inline-flex items-center space-x-2 focus:outline-none bg-red-700 hover:bg-red-800`}\n                onClick={() => {\n                  setActionTaken(ClaimDecisionStatus.REJECTED);\n                }}\n              >\n                <MdCancel className=\"w-5 h-5\" />\n                <span>Reject</span>\n              </button>\n              <button\n                className={`px-4 py-2 font-semibold text-blue-50 rounded inline-flex items-center space-x-2 focus:outline-none bg-blue-700 hover:bg-blue-800`}\n                onClick={() => {\n                  setActionTaken(ClaimDecisionStatus.ACCEPTED);\n                }}\n              >\n                <FaRegCheckCircle className=\"w-5 h-5\" />\n                <span>Accept</span>\n              </button>\n            </div>\n          )}\n        </section>\n      )}\n      {/* END FOOTER INITIAL ========================================== */}\n\n      {/* ======================================================== */}\n      {/* FOOTER RESPONSE ========================================== */}\n      {actionTaken && (\n        <section className=\"my-5 overflow-x-auto\">\n          <div className=\"italic text-gray-700 text-base my-1 mx-2\">\n            Selected decision:{\" \"}\n            <span\n              className={`font-semibold text-lg ${\n                actionTaken === ClaimDecisionStatus.ACCEPTED\n                  ? \"text-blue-700\"\n                  : \"text-yellow-800\"\n              }`}\n            >\n              {actionTaken === ClaimDecisionStatus.ACCEPTED\n                ? \"Approved\"\n                : \"Rejected\"}\n            </span>\n          </div>\n          {/* right part */}\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full space-y-1\">\n              {actionTaken === ClaimDecisionStatus.ACCEPTED && (\n                <div className=\"flex items-center justify-end w-full gap-2\">\n                  <span className=\"font-semibold\">Addition marks</span>\n                  <div className=\"px-2\">\n                    <input\n                      placeholder={`Addition marks`}\n                      className={`border border-${\n                        formError && formError.element === \"marks\"\n                          ? \"red\"\n                          : \"gray\"\n                      }-400 rounded px-3 py-1 w-auto focus:outline-none`}\n                      value={marks}\n                      onChange={(e) => {\n                        setMarks(Number(e.target.value));\n                        setFormError(null);\n                      }}\n                      disabled={loadingRequest}\n                    />\n                    {formError && formError.element === \"marks\" && (\n                      <p className=\"text-red-800\">{formError.msg}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n              <div className=\"w-full px-2\">\n                <textarea\n                  placeholder={`Reason of your decision...`}\n                  cols={50}\n                  rows={actionTaken === ClaimDecisionStatus.ACCEPTED ? 2 : 3}\n                  className={`border border-${\n                    formError && formError.element === \"comment\"\n                      ? \"red\"\n                      : \"gray\"\n                  }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                  style={{ resize: \"none\" }}\n                  value={responseMsg}\n                  onChange={(e) => {\n                    setResponseMsg(e.target.value);\n                    setFormError(null);\n                  }}\n                  disabled={loadingRequest}\n                ></textarea>\n                {formError && formError.element === \"comment\" && (\n                  <p className=\"text-red-800\">{formError.msg}</p>\n                )}\n              </div>\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  setResponseMsg(\"\");\n                  setActionTaken(null);\n                  setFormError(null);\n                }}\n                disabled={loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={loadingRequest}\n                onClick={() =>\n                  window.confirm(\n                    `Are you sure you want to ${\n                      actionTaken === ClaimDecisionStatus.ACCEPTED\n                        ? \"approve\"\n                        : \"rejected\"\n                    } this document?`\n                  ) && handleVerify()\n                }\n              >\n                {loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n          {/* end right part */}\n        </section>\n      )}\n      {/* END FOOTER RESPONSE ========================================== */}\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth,\n    questionTypes,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadQuestionTypes,\n  evaluateClaim,\n  PushPopupAlert,\n})(AdminClaimExamView);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdCancel, MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { adminDisplayClaimTitle } from \".\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport { evaluateClaim } from \"../../../actions/claiming\";\nimport { verifyDocument } from \"../../../actions/document\";\nimport { VerifyDocumentInterface } from \"../../../actions/users\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n  ClaimTypesInterfaceAPI,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport {\n  capitalizeFirstLetter,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport {\n  DocValidationStatusInterface,\n  UserDocumentsInterface,\n} from \"../../../shared/interfaces\";\nimport { API } from \"../../../utils/api\";\nimport { errorToText } from \"../../../utils/errors\";\nimport { showDate, timestampToDate } from \"../../../utils/functions\";\nimport { isClaimEvaluated } from \"../ClaimDocView\";\n\ntype AdminClaimDocViewProps = {\n  thisDoc: UserDocumentsInterface;\n  documentCategories: DocumentReducerInterface;\n  thisClaim: CandidateClaimInterface;\n  claimReasons: claimReasonInterface[] | null;\n  candidateId: string;\n  claimTypes: ClaimTypesInterfaceAPI[];\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  actionTaken: ClaimDecisionStatus | null;\n  setActionTaken: (value: ClaimDecisionStatus | null) => void;\n  responseMsg: string;\n  setResponseMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX ==================\n  auth: Auth;\n  verifyDocument: Function;\n  evaluateClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst AdminClaimDocView: React.FC<AdminClaimDocViewProps> = (props) => {\n  const handleVerify = async () => {\n    if (!props.actionTaken) {\n      props.setFormError({\n        element: \"action\",\n        msg: \"Action is required!\",\n      });\n      return props.setLoadingRequest(false);\n    }\n\n    if (isEmptyOrSpaces(props.responseMsg)) {\n      props.setFormError({\n        element: \"comment\",\n        msg: \"Reason of rejection is required\",\n      });\n      return props.setLoadingRequest(false);\n    }\n\n    let subClaim = props.thisClaim.claims.find(\n      (item) => item.level === props.thisClaim.claim_level\n    );\n\n    if (subClaim) {\n      props.setLoadingRequest(true);\n      const api_body: {\n        sub_claim_id: string;\n        evaluation_comment: string;\n        evaluated_by: string;\n        evaluator_name: string;\n        evaluator_email: string;\n        decision_taken_status: ClaimDecisionStatus;\n      } = {\n        sub_claim_id: subClaim.id,\n        evaluation_comment: props.responseMsg,\n        evaluated_by: props.auth.user.user_id,\n        decision_taken_status: props.actionTaken,\n        evaluator_name: props.auth.user.fname + \" \" + props.auth.user.lname,\n        evaluator_email: props.auth.user.email,\n      };\n\n      try {\n        const res = await axios.put<CandidateClaimInterface>(\n          `${API.CLAIMING}/user/evaluate/${props.thisClaim._id}`,\n          api_body\n        );\n        if (res) {\n          console.log({ evaluate_claim_res: res });\n          props.evaluateClaim(res.data);\n          // REVALIDATED DOCUMENT IF IT IS APPROVED =========================\n          if (props.actionTaken === ClaimDecisionStatus.ACCEPTED) {\n            await FC_DocValidation();\n          }\n          props.PushPopupAlert({\n            title: `Claim responded successfully!`,\n            theme: PopupAlertTheme.success,\n          });\n          // setDocumentId(\"null\");\n          props.setResponseMsg(\"\");\n          props.setActionTaken(null);\n        }\n      } catch (error) {\n        console.error(error);\n        props.PushPopupAlert({\n          title: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      props.setLoadingRequest(false);\n    }\n  };\n\n  const FC_DocValidation = async () => {\n    const api_body: VerifyDocumentInterface = {\n      user_id: props.thisClaim.user,\n      doc_id: props.thisClaim.claiming_on_id,\n      validation_status:\n        props.actionTaken === ClaimDecisionStatus.ACCEPTED\n          ? DocValidationStatusInterface.APPROVED\n          : DocValidationStatusInterface.REJECTED,\n      validated_by: {\n        user_id: props.auth.user.user_id,\n        comment: props.responseMsg,\n        validation_status:\n          props.actionTaken === ClaimDecisionStatus.ACCEPTED\n            ? DocValidationStatusInterface.APPROVED\n            : DocValidationStatusInterface.REJECTED,\n      },\n      in_education: false,\n      disability: false,\n    };\n    const api_redux: VerifyDocumentInterface = {\n      user_id: props.thisClaim.user,\n      doc_id: props.thisClaim.claiming_on_id,\n      validation_status:\n        props.actionTaken === ClaimDecisionStatus.ACCEPTED\n          ? DocValidationStatusInterface.APPROVED\n          : DocValidationStatusInterface.REJECTED,\n      validated_by: {\n        user_id: props.auth.user.user_id,\n        comment: props.responseMsg,\n        validation_status:\n          props.actionTaken === ClaimDecisionStatus.ACCEPTED\n            ? DocValidationStatusInterface.APPROVED\n            : DocValidationStatusInterface.REJECTED,\n        date: \"\",\n      },\n      in_education: false,\n      disability: false,\n    };\n\n    try {\n      const res = await axios.post<VerifyDocumentInterface>(\n        `${API.AUTH}/validateuserdoc`,\n        api_body\n      );\n      if (res) {\n        props.verifyDocument(api_redux);\n        await FC_shortListing(props.thisClaim.user);\n        // setDocumentId(\"null\");\n      }\n    } catch (error) {\n      console.error(error);\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  const FC_shortListing = async (candidate_id: string) => {\n    try {\n      const res = await axios.patch(\n        `${API.APPLICATION}/doccheckshortlist/${candidate_id}`\n      );\n      console.log({ res });\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className={`italic text-gray-600`}>Names:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.thisClaim.userDetails.user_info.fname +\n                  \" \" +\n                  props.thisClaim.userDetails.user_info.lname}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className={`italic text-gray-600`}>Title:</span>\n            <span className=\"text-gray-800 font-bold text-2xl\">\n              {/* {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main} */}\n              {props.thisClaim.userDetails.details.filter(\n                (item) => item.validation_status !== \"waiting\"\n              ).length > 0\n                ? adminDisplayClaimTitle(\n                    props.documentCategories,\n                    props.thisClaim.userDetails.details.filter(\n                      (item) => item.validation_status !== \"waiting\"\n                    ),\n                    props.thisClaim\n                  )\n                : \"-\"}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span className=\"font-bold text-yellow-900 rounded px-3 py-1\">\n              {props.thisClaim.previous\n                ? capitalizeFirstLetter(props.thisClaim.previous.status)\n                : capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisClaim.previous\n                ? props.thisClaim.previous.reason\n                : props.thisDoc.validated_by.commet}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVEL 1 DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              <div className=\"text-gray-700 italic font-bold\">\n                Claim Comment (level {index + 1})\n              </div>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2 mt-1 border rounded px-4 py-1 bg-gray-50\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt) +\n                    \" at \" +\n                    timestampToDate(claim.date_created).timeFR}\n                </span>\n              </div>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-700 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n            </section>\n          ))}\n        {/* END CLAIM LEVEL 1 DETAILS ==================================================== */}\n      </div>\n\n      {/* FOOTER INITIAL ========================================== */}\n      {!props.actionTaken && (\n        <section className=\"flex items-center justify-between\">\n          {/* SHOWING STATUS ===================================== */}\n          <div className=\"mx-4 mb-5 mt-3\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n          </div>\n\n          {props.thisClaim.last_claim_status === ClaimStatus.PENDING && (\n            <div className=\"flex items-center gap-2 px-2\">\n              <button\n                className={`px-4 py-2 font-semibold text-red-50 rounded inline-flex items-center space-x-2 focus:outline-none bg-red-700 hover:bg-red-800`}\n                onClick={() => {\n                  props.setActionTaken(ClaimDecisionStatus.REJECTED);\n                }}\n              >\n                <MdCancel className=\"w-5 h-5\" />\n                <span>Reject</span>\n              </button>\n              <button\n                className={`px-4 py-2 font-semibold text-blue-50 rounded inline-flex items-center space-x-2 focus:outline-none bg-blue-700 hover:bg-blue-800`}\n                onClick={() => {\n                  props.setActionTaken(ClaimDecisionStatus.ACCEPTED);\n                }}\n              >\n                <FaRegCheckCircle className=\"w-5 h-5\" />\n                <span>Accept</span>\n              </button>\n            </div>\n          )}\n        </section>\n      )}\n      {/* END FOOTER INITIAL ========================================== */}\n\n      {/* ======================================================== */}\n      {/* FOOTER RESPONSE ========================================== */}\n      {props.actionTaken && (\n        <section className=\"my-5 overflow-x-auto\">\n          <div className=\"italic text-gray-700 text-base my-1 mx-2\">\n            Selected decision:{\" \"}\n            <span\n              className={`font-semibold text-lg ${\n                props.actionTaken === ClaimDecisionStatus.ACCEPTED\n                  ? \"text-blue-700\"\n                  : \"text-yellow-800\"\n              }`}\n            >\n              {props.actionTaken === ClaimDecisionStatus.ACCEPTED\n                ? \"Approved\"\n                : \"Rejected\"}\n            </span>\n          </div>\n          {/* right part */}\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your decision...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.responseMsg}\n                onChange={(e) => {\n                  props.setResponseMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setResponseMsg(\"\");\n                  props.setActionTaken(null);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() =>\n                  window.confirm(\n                    `Are you sure you want to ${\n                      props.actionTaken === ClaimDecisionStatus.ACCEPTED\n                        ? \"approve\"\n                        : \"rejected\"\n                    } this document?`\n                  ) && handleVerify()\n                }\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n          {/* end right part */}\n        </section>\n      )}\n      {/* END FOOTER RESPONSE ========================================== */}\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n}: StoreState): {\n  auth: Auth;\n} => {\n  return {\n    auth: auth,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  evaluateClaim,\n  verifyDocument,\n  PushPopupAlert,\n})(AdminClaimDocView);\n","import React, { Component } from \"react\";\nimport { MdArrowBack, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  getAllApplications,\n  getClaimReasons,\n  getAllAnswers,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { getPositions } from \"../../../actions/settings\";\nimport { verifyAllDocument, fetchUserAccess } from \"../../../actions/users\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport TableLoading from \"../../../components/Loading/TableLoading\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  SessionPlanInterface,\n  PositionAPI,\n  allClaimApplicationInterface,\n  CandidateClaimInterface,\n  PlansTypeKeys,\n  ClaimDecisionStatus,\n  ClaimTypesInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { UserDocumentsInterface } from \"../../../shared/interfaces\";\nimport { getClaimById, whichClaimStatus, whichClaimType } from \"../Candidate\";\nimport { getCourseById, getCourseIdBySheetId } from \"../Candidate/FormExamList\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport AdminClaimAppView from \"./AdminClaimAppView\";\nimport AdminClaimDocView from \"./AdminClaimDocView\";\nimport AdminClaimExamView from \"./AdminClaimExamView\";\nimport AdminFilterByType, {\n  filterClaimsByClaimType,\n} from \"./AdminFilterByType\";\n\n// export const getUserDocuments = (\n//   userList: UserInterface[],\n//   user_id: String\n// ): { user: UserInterface; document: UserDocumentsInterface[] } | null => {\n//   const thisUser = userList.find((item) => item.user_id === user_id);\n//   if (thisUser) {\n//     const thisDoc = thisUser.details.filter(\n//       (item) => item.validation_status !== \"waiting\"\n//     );\n//     return { user: thisUser, document: thisDoc };\n//   }\n//   return null;\n// };\n\nexport const adminDisplayClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: UserDocumentsInterface[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = candidateDocuments.find(\n      (item) => item.doc_id === thisClaim.claiming_on_id\n    );\n    result = thisDoc\n      ? AdminClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n\n  return result;\n};\n\nexport const AdminClaimGetDocTitle = (\n  documentCategories: DocumentReducerInterface,\n  doc: UserDocumentsInterface\n): { category: string; sub_category: string; field: string; main: string } => {\n  let DocCategory: string = \"\",\n    DocSubCategory: string = \"\",\n    DocField: string = \"\",\n    DocTitle: string = \"\";\n  if (\n    doc.sub_category_id &&\n    doc.sub_category_id.length > 0 &&\n    documentCategories.documentSubCategory\n  ) {\n    DocTitle = documentCategories.documentSubCategory.filter(\n      (c) => c.user_detail_subcategory_id === doc.sub_category_id\n    )[0].title;\n    DocSubCategory = DocTitle;\n  } else if (\n    doc.category_id.length > 0 &&\n    documentCategories.documentCategory\n  ) {\n    DocTitle = documentCategories.documentCategory.filter(\n      (c) => c.user_detail_category_id === doc.category_id\n    )[0].title;\n    DocCategory = DocTitle;\n  }\n  if (\n    doc.category_subcategory_data.length > 0 &&\n    documentCategories.documentFields\n  ) {\n    DocField = documentCategories.documentFields.filter(\n      (c) => c._id === doc.category_subcategory_data\n    )[0].title;\n    DocTitle += \" in \" + DocField;\n  }\n\n  return {\n    category: DocCategory,\n    sub_category: DocSubCategory,\n    field: DocField,\n    main: DocTitle,\n  };\n};\n\nexport const getApplicationById = (\n  allApplications: allClaimApplicationInterface[] | null,\n  systemPositions: PositionAPI[] | null,\n  application_id: String\n): {\n  application: allClaimApplicationInterface;\n  position: PositionAPI;\n} | null => {\n  if (allApplications) {\n    let thisApplication = allApplications.find(\n      (item) => item._id === application_id\n    );\n    if (thisApplication && systemPositions) {\n      let thisPosition = systemPositions.find(\n        (item) => item.position_id === thisApplication!.position\n      );\n      if (thisPosition) {\n        return { application: thisApplication, position: thisPosition };\n      }\n    }\n  }\n  return null;\n};\n\ntype AppProps = {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  systemPositions: PositionAPI[] | null;\n  courses: course[] | null;\n  loadCourses: Function;\n  getPositions: Function;\n  getClaimReasons: Function;\n  getAllApplications: Function;\n  getAllClaims: Function;\n  getAllAnswers: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  verifyAllDocument: Function;\n  fetchUserAccess: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingData: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  viewClaim: boolean;\n  periodChanged: boolean;\n  claimId: string | null;\n  claimType: string | null;\n  candidateId: string | null;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  actionTaken: ClaimDecisionStatus | null;\n  responseMsg: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingData: false,\n      thisPeriod: null,\n      viewClaim: false,\n      periodChanged: false,\n      claimId: null,\n      claimType: null,\n      candidateId: null,\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      actionTaken: null,\n      responseMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingData = (value: boolean) => {\n    this.setState({ loadingData: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  // ------------------------------\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n  setClaimType = (value: string | null) => {\n    this.setState({ claimType: value });\n  };\n  setCandidateId = (value: string | null) => {\n    this.setState({ candidateId: value });\n  };\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setActionTaken = (value: ClaimDecisionStatus | null) => {\n    this.setState({ actionTaken: value });\n  };\n  setResponseMsg = (value: string) => {\n    this.setState({ responseMsg: value });\n  };\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setDefaultSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadsAllClaims(thisSession ? thisSession : sessions[0]);\n      this.loadsApplications(thisSession ? thisSession : sessions[0]);\n      this.loadsAlAnswers(thisSession ? thisSession : sessions[0]);\n    }\n  };\n\n  loadsAllClaims = (thisSession: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.allClaims === null) {\n      this.props.getAllClaims(\n        2,\n        thisSession.session_plan_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    }\n  };\n\n  loadsApplications = (thisSession: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.allApplications === null) {\n      this.props.getAllApplications(\n        thisSession.session_plan_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    }\n  };\n\n  loadsAlAnswers = (thisSession: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.allAnswer === null) {\n      this.props.getAllAnswers(\n        thisSession.session_plan_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    }\n  };\n\n  componentDidMount = () => {\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              this.setDefaultSession(data);\n            }\n          }\n        }\n      );\n    } else if (this.props.application_sessions.length > 0) {\n      this.setDefaultSession(this.props.application_sessions);\n    }\n\n    // LOADING DOCUMENT CATEGORIES ==========================\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    }\n\n    // LOADING DOCUMENT CLARIFICATIONS ==========================\n    if (!this.props.documentReducer.documentSubCategory) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    }\n\n    // LOADING DOCUMENT FIELDS ==========================\n    if (!this.props.documentReducer.documentFields) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    }\n\n    if (this.props.systemPositions === null) {\n      this.props.getPositions((status: boolean, msg: string) => {\n        this.setLoading(status);\n        console.log({ status: status, msg: msg });\n        if (msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.claimReasons === null) {\n      this.props.getClaimReasons((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status) {\n          if (msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n  };\n\n  displayClaimTitle = (\n    thisClaim: CandidateClaimInterface\n  ): string | JSX.Element => {\n    let result: string = thisClaim.claiming_on_id;\n    if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n      let thisDocs = thisClaim.userDetails.details.filter(\n        (item) => item.validation_status !== \"waiting\"\n      );\n      result =\n        thisDocs.length > 0\n          ? adminDisplayClaimTitle(\n              this.props.documentReducer,\n              thisDocs,\n              thisClaim\n            )\n          : \"Document not found\";\n    }\n    if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n      if (this.props.claiming.allApplications) {\n        let thisApplication = this.props.claiming.allApplications.find(\n          (item) => item._id === thisClaim.claiming_on_id\n        );\n        if (\n          thisApplication &&\n          this.props.claiming.allApplications &&\n          this.props.systemPositions\n        ) {\n          let thisPosition = this.props.systemPositions.find(\n            (item) => item.position_id === thisApplication!.position\n          );\n          if (thisPosition) {\n            result = thisPosition.position_title;\n          } else {\n            result = \"Application not found\";\n          }\n        }\n      }\n    }\n\n    if (\n      thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n      this.props.courses &&\n      this.props.claiming.allAnswer\n    ) {\n      let thisAnswer = getCourseIdBySheetId(\n        this.props.claiming.allAnswer,\n        thisClaim.claiming_on_id\n      );\n      if (thisAnswer && getCourseById(this.props.courses, thisAnswer.course)) {\n        result =\n          \"Exam of \" +\n          getCourseById(this.props.courses, thisAnswer.course)!.course_name;\n      } else {\n        result = \"Unknown exam\";\n      }\n    }\n\n    return result;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getAllClaims(2, period_id, (status: boolean, msg: string) => {\n      !status && this.setPeriodChanged(false);\n      this.setLoadingData(status);\n      if (status === false && msg.length) {\n        this.props.PushPopupAlert({\n          title: msg,\n          theme: PopupAlertTheme.danger,\n        });\n      }\n    });\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.allClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            {/* FILTER SECTION */}\n            <AdminFilterByType loadingClaims={this.state.loadingData} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* 00000000000000000000000000000000000 */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loadingData}\n            loadingSession={this.state.loading}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingData}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* 00000000000000000000000000000000000 */}\n\n        {/* CLAIM CONTENT LIST ===================================== */}\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Applicant names</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {!this.props.claiming.allClaims ||\n                !this.props.claiming.claimTypes ||\n                !this.props.claiming.allApplications ||\n                !this.props.systemPositions ||\n                this.state.loadingData ? (\n                  <TableLoading\n                    cols={\n                      this.props.claiming.selectedClaimType === \"all\" ? 6 : 5\n                    }\n                  />\n                ) : filterClaimsByClaimType(\n                    this.props.claiming.allClaims,\n                    this.props.claiming.selectedClaimType\n                  ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={6}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  filterClaimsByClaimType(\n                    this.props.claiming.allClaims,\n                    this.props.claiming.selectedClaimType\n                  ).map((claim, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                        this.setCandidateId(claim.user);\n                        this.setClaimType(\n                          whichClaimType(claim) ? whichClaimType(claim)! : null\n                        );\n                      }}\n                    >\n                      <td className=\"px-3 py-1\">{index + 1}</td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {claim.userDetails.user_info.fname +\n                          \" \" +\n                          claim.userDetails.user_info.lname}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {this.displayClaimTitle(claim)}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n        {/* END CLAIM CONTENT LIST ===================================== */}\n\n        {/* 00000000000000000000000000000000000 */}\n\n        {/* view claim */}\n        {this.state.viewClaim &&\n          this.state.candidateId &&\n          this.props.claiming.allClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.allClaims, this.state.claimId) &&\n          this.props.claiming.claimTypes && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(true);\n                    this.setLoadingRequest(false);\n                    this.setActionTaken(null);\n                    this.setResponseMsg(\"\");\n                    this.setFormError(null);\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                <div className={`text-gray-600 font-extrabold text-2xl px-2`}>\n                  Viewing claim\n                </div>\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n\n              <section className=\"my-2\">\n                {/* FOR DOCUMENT ========================== */}\n                {this.state.claimType &&\n                  this.state.claimType.toLocaleLowerCase() ===\n                    ClaimTypesInterface.DOCUMENT.toLocaleLowerCase() && (\n                    <div>\n                      {getClaimById(\n                        this.props.claiming.allClaims!,\n                        this.state.claimId!\n                      )!.userDetails.details.find(\n                        (item) =>\n                          item.doc_id ===\n                          getClaimById(\n                            this.props.claiming.allClaims!,\n                            this.state.claimId!\n                          )!.claiming_on_id\n                      ) ? (\n                        <AdminClaimDocView\n                          thisDoc={\n                            getClaimById(\n                              this.props.claiming.allClaims!,\n                              this.state.claimId!\n                            )!.userDetails.details.find(\n                              (item) =>\n                                item.doc_id ===\n                                getClaimById(\n                                  this.props.claiming.allClaims!,\n                                  this.state.claimId!\n                                )!.claiming_on_id\n                            )!\n                          }\n                          documentCategories={this.props.documentReducer}\n                          thisClaim={\n                            getClaimById(\n                              this.props.claiming.allClaims,\n                              this.state.claimId\n                            )!\n                          }\n                          claimTypes={this.props.claiming.claimTypes}\n                          viewImage={this.state.viewImage}\n                          setViewImage={this.setViewImage}\n                          loadingRequest={this.state.loadingRequest}\n                          setLoadingRequest={this.setLoadingRequest}\n                          actionTaken={this.state.actionTaken}\n                          setActionTaken={this.setActionTaken}\n                          responseMsg={this.state.responseMsg}\n                          setResponseMsg={this.setResponseMsg}\n                          formError={this.state.formError}\n                          setFormError={this.setFormError}\n                          candidateId={this.state.candidateId}\n                          claimReasons={this.props.claiming.claimReasons}\n                        />\n                      ) : (\n                        <NoResult\n                          theme={NoResultThemes.Dark}\n                          value={\"Document not found\"}\n                        />\n                      )}\n                    </div>\n                  )}\n\n                {/* FOR APPLICATION ========================== */}\n                {this.state.claimType &&\n                  this.state.claimType.toLocaleLowerCase() ===\n                    ClaimTypesInterface.APPLICATION.toLocaleLowerCase() && (\n                    <div>\n                      {getApplicationById(\n                        this.props.claiming.allApplications,\n                        this.props.systemPositions,\n                        getClaimById(\n                          this.props.claiming.allClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      ) ? (\n                        this.props.systemPositions && (\n                          <AdminClaimAppView\n                            thisApplication={\n                              getApplicationById(\n                                this.props.claiming.allApplications,\n                                this.props.systemPositions,\n                                getClaimById(\n                                  this.props.claiming.allClaims,\n                                  this.state.claimId\n                                )!.claiming_on_id\n                              )!.application\n                            }\n                            thisPosition={\n                              getApplicationById(\n                                this.props.claiming.allApplications,\n                                this.props.systemPositions,\n                                getClaimById(\n                                  this.props.claiming.allClaims,\n                                  this.state.claimId\n                                )!.claiming_on_id\n                              )!.position\n                            }\n                            documentCategories={this.props.documentReducer}\n                            thisClaim={\n                              getClaimById(\n                                this.props.claiming.allClaims,\n                                this.state.claimId\n                              )!\n                            }\n                            claimTypes={this.props.claiming.claimTypes}\n                            systemPositions={this.props.systemPositions}\n                            claimReasons={this.props.claiming.claimReasons}\n                          />\n                        )\n                      ) : (\n                        <NoResult\n                          theme={NoResultThemes.Dark}\n                          value={\"Application not found\"}\n                        />\n                      )}\n                    </div>\n                  )}\n\n                {/* FOR EXAMINATION ========================== */}\n                {this.state.claimType &&\n                  this.state.claimType.toLocaleLowerCase() ===\n                    ClaimTypesInterface.EXAMINATION.toLocaleLowerCase() && (\n                    <div>\n                      {this.props.claiming.allAnswer &&\n                      this.props.courses &&\n                      getCourseIdBySheetId(\n                        this.props.claiming.allAnswer,\n                        getClaimById(\n                          this.props.claiming.allClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      ) &&\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.allAnswer,\n                          getClaimById(\n                            this.props.claiming.allClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      ) ? (\n                        <AdminClaimExamView\n                          thisExamSheet={\n                            getCourseIdBySheetId(\n                              this.props.claiming.allAnswer,\n                              getClaimById(\n                                this.props.claiming.allClaims,\n                                this.state.claimId\n                              )!.claiming_on_id\n                            )!\n                          }\n                          thisExam={\n                            getCourseById(\n                              this.props.courses,\n                              getCourseIdBySheetId(\n                                this.props.claiming.allAnswer,\n                                getClaimById(\n                                  this.props.claiming.allClaims,\n                                  this.state.claimId\n                                )!.claiming_on_id\n                              )!.course\n                            )!\n                          }\n                          thisClaim={\n                            getClaimById(\n                              this.props.claiming.allClaims,\n                              this.state.claimId\n                            )!\n                          }\n                          claimTypes={this.props.claiming.claimTypes}\n                          claimReasons={this.props.claiming.claimReasons}\n                        />\n                      ) : (\n                        <NoResult\n                          theme={NoResultThemes.Dark}\n                          value={\"Application not found\"}\n                        />\n                      )}\n                    </div>\n                  )}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  system_settings,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  systemPositions: PositionAPI[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    application_sessions: sessionPlan.allSessionPlans,\n    systemPositions: system_settings.systemPositions,\n    claiming,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const AdminClaim = connect(mapStateToProps, {\n  getAllClaims,\n  loadCourses,\n  getAllAnswers,\n  getClaimReasons,\n  getAllApplications,\n  GetAllSessionPlans,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  verifyAllDocument,\n  fetchUserAccess,\n  getPositions,\n  PushPopupAlert,\n})(Index);\n"],"sourceRoot":""}