{"version":3,"sources":["utils/question_bank.ts","components/Navigation/SideNavigation.tsx","containers/Claimings/ClaimDocView.tsx","components/AnswersDetails/CandidateAnswersDetails.tsx","containers/CandidateExams/CandidateExams.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","caption","_SideNavigation","props","componentDidMount","PageHasSubNav","componentWillUnmount","state","loading","this","auth","isAuthenticated","navActive","system","navigation","className","children","React","Component","SideNavigation","connect","NavToogle","MainItem","title","icon","MdBrightness1","active","count","IconDefined","isReclaimAllowed","thisClaim","claim_level","_thisClaim","claims","item","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","memo","createReClaim","PushPopupAlert","handleSubmit","a","isEmptyOrSpaces","reClaimingMsg","setFormError","theme","PopupAlertTheme","warning","setLoadingRequest","setAxiosToken","axios","put","API","CLAIMING","_id","reason","console","log","data","success","setReClaimingMsg","setReClaiming","error","errorToText","danger","getReasonById","reason_id","claimReasons","ClaimGetDocTitle","documentCategories","thisDoc","main","onClick","setViewImage","viewImage","validation_status","capitalizeFirstLetter","previous","evaluater","name","validated_by","comment","src","AUTH_FILES","files","alt","map","claim","index","default_claim_resaons","showDate","createdAt","toLocaleLowerCase","evaluation_comment","reClaiming","last_claim_status","PENDING","DELETED","disabled","loadingRequest","placeholder","cols","rows","formError","style","resize","value","onChange","e","target","CandidateAnswersDetails","tomorrow","setDate","date","useState","setClaim","compareWithToday","exam_id","DATE","showAnswers","setFormState","claim_type","PlansTypeKeys","EXAMINATION","file_id","tooday","myDate","todayConverted","get","ChangeLocationComponent","display","setDisplay","changeLocation","_CandidateExams","setLoading","setState","setloadingExamsDone","loadingExamsDone","loadCandidateExams","user","period","QBank","candidateExams","alert","loadUserProfileDetails","FC_GetProfileDetails","user_id","InitializationFn","application","position","candidateExam","user_exams_temp","center_id","exams","application_status","ApplicationStates","Shortlisted","setSelectedPosition","setSelectedCourse","doing_exam","periods","selected_period","InitializeExamDetails","application_session","session_plan_id","district_id","room_id","loadUserApplications","LoadCandidateApplications","findLocation","position_id","candidateApplications","candidate_applications","updateLocation","application_id","post","APPLICATION","selectedCourse","centersModal","maxExamModal","selectedPosition","successMessage","updateLocationFunction","addLocation","course_name","course_code","location","proctoring_type","selPeriod","sex","applicationPeriods","loadApplicationPeriods","removeDuplicatesExams","temp","removeDuplicatesNotPreparedExams","setTimeOut","temps","activeExams","selectApplication","applications","setMaxExamModal","closeModal","selectedExam","FC_Access","UserAccessList","MY_APPLICATION","view","selected_exam_id","selected_exam_details","to","preparedExam","user_status","center_name","room_number","description","school_levels","UserExamStatus","Editing","Paused","Done","Removed","user_marks","discription","termes","rules","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","positionCourses","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","CandidateExams","setSelectedCandidateExam","loadExamsDone","AddUserApplication","filterClaimsByClaimType","claimList","claimType","type_key","claiming","GetClaimingTypes","setSelectedClaimType","getAllClaims","loadingClaimTypes","setLoadingClaimTypes","useEffect","claimTypes","countClaims","thisType","result","allClaims","Fragment","loadingClaims","selectedClaimType","DOCUMENT_VALIDATION","ClaimHeaderTitle","isLoading","loadingSession","periodChanged","headerTitle","thisPeriod","sessions","period_id","application_sessions","selectPeriod","setThisPeriod","setLoadingSession","onPeriodChange","session","session_plan_name","ClaimTypesEnum","thisApplication","position_title","setViewPosition","viewPosition","Rejected","dangerouslySetInnerHTML","__html","school_level_id","school_level_name","education_institute_id","education_category_title","requirements","FC_ApplicationPositionDistinctCategory","DistinctCategoriesTemp","category_title","ViewRequirements","PositionsTemp","req","category_id","NoResult","NoResultThemes","Dark","questionTypes","loadQuestionTypes","thisExam","claimShowAnswer","thisExamSheet","userDetails","user_info","fname","lname","myPlacement","placed","school","school_name","district_name","getMyRejectedApplications","getMyRejectedDocuments","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","candidateDocuments","myClaims","COMPLETED","getDocumentById","document_id","doc_id","whichClaimType","document","exam","MARKS_PUBLICATION","marks_publication","PLACEMENT_TRANSFER","placement","whichClaimStatus","classes","getClaimById","claim_id","getApplicationById","displayDocClaimTitle","claiming_on_id","displayClaimTitle","documentReducer","allCourse","myAnswer","thisAnswer","getCourseIdBySheetId","getCourseById","Index","setViewClaim","viewClaim","setPeriodChanged","setClaimForm","claimForm","setClaimId","claimId","setSearchClaim","searchClaim","loadClaims","getMyClaims","setSession","thisSession","is_active","loadExamAnswers","activeSessionPlan","getMyAnswers","getClaimReasons","loadCourses","GetAllSessionPlans","documentCategory","getDocumentCategory","documentSubCategory","getDocumentSubCategory","documentFields","getDocumentFields","getMyPlacement","isDeleteAllowed","thisCLaim","colSpan","Light","search","ClaimApplView","ClaimExamView","ClaimForm","formState","CandidateClaim","sessionPlan","allSessionPlans"],"mappings":"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","file":"static/js/44.5d3ba229.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, System } from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { NavToogle, PageHasSubNav } from \"../../actions\";\nimport { MdBrightness1, MdSearch } from \"react-icons/md\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  system: System;\n  PageHasSubNav: Function;\n  NavToogle: Function;\n  children: ReactNode;\n}\n//\ninterface AppState {\n  loading: boolean;\n}\n\nclass _SideNavigation extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n    };\n  }\n\n  componentDidMount = () => this.props.PageHasSubNav(true);\n  componentWillUnmount = () => this.props.PageHasSubNav(false);\n\n  render() {\n    const isAuthenticated = this.props.auth.isAuthenticated;\n\n    if (isAuthenticated === false) {\n      return null;\n    }\n\n    const navActive = this.props.system.navigation;\n    return (\n      <div\n        className={`fixed w-48 p-1 pr-2 pl-6 text-gray-700 bg-white ${\n          navActive === true ? \"lg:left-16  left-16\" : \" -left-72 lg:left-16\"\n        }  top-0 bottom-0 pt-20 z-30 shadow-lg  transition-all duration-500 ease-in-out overflow-y-auto`}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  system,\n}: StoreState): { auth: Auth; system: System } => {\n  return { auth: auth, system: system };\n};\n\nexport const SideNavigation = connect(mapStateToProps, {\n  NavToogle,\n  PageHasSubNav,\n})(_SideNavigation);\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SearchComponentInterface = {\n  data: any[];\n};\n\nexport const Search: FC<SearchComponentInterface> = ({\n  data,\n}): ReactElement => {\n  return (\n    <div className=\"m-1 rounded-md shadow-md border border-blue-400 bg-white p-1 flex \">\n      <label htmlFor=\"search-text\" className=\"inline-block text-2xl\">\n        <MdSearch className=\"inline-block text-blue-400\" />\n      </label>\n      <input\n        type=\"search\"\n        className=\"outline-none bg-transparent flex-1 pl-1\"\n        placeholder=\"Search\"\n        id=\"search-text\"\n      />\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype MainItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const MainItem: FC<MainItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n  return (\n    <section\n      className={`${\n        active === true\n          ? \"bg-blue-500 text-white font-bold\"\n          : \"bg-blue-100 text-blue-800\"\n      } mb-1 hover:font-bold py-1 hover:bg-blue-400 hover:text-white --font-bold  px-2 rounded-md flex cursor-pointer items-center`}\n    >\n      <section className=\"flex-1\">\n        <IconDefined className=\"inline-block mr-1 text-xs\" />\n        <span>{title}</span>\n      </section>\n\n      {count > 0 ? (\n        <span className=\"px-0.5 my-1 text-xs bg-blue-600 text-white rounded-full\">\n          {count}\n        </span>\n      ) : null}\n    </section>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemContainerComponentInterface = {\n  children: ReactNode;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const SubItemContainer: FC<SubItemContainerComponentInterface> = ({\n  children,\n}): ReactElement => {\n  return (\n    <div className=\"ml-3 overflow-y-auto border-l-2 border-blue-200 -mt-1 pt-2 mb-2 pl-1 cursor-pointer\">\n      {children}\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n * @important Remenber to use these components inside the <SubItemContainer>...</SubItemContainer>\n */\nexport const SubItem: FC<SubItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n\n  return (\n    <div\n      className={`animate__animated animate__zoomIn animate__faster ${\n        active === true ? \"bg-blue-500 text-white font-bold\" : \" text-blue-800\"\n      } text-blue-800 bg-blue-200 rounded-md px-1 mb-1 flex items-center py-1 font-bold`}\n    >\n      <IconDefined\n        className={`inline-block mr-0.1 text-xs ${\n          active === true ? \"text-white\" : \"\"\n        }`}\n      />\n      <span\n        className={`inline-block pl-1 ${active === true ? \"text-white\" : \"\"}`}\n      >\n        {title}\n      </span>\n      {count >= 1 ? (\n        <span\n          className={`text-sm fint-bold ${active === true ? \"text-white\" : \"\"}`}\n        >\n          {count}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, DocumentClaimUser } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { IoHandLeftSharp } from \"react-icons/io5\";\nimport {\n  compareWithToday,\n  ExamDoneDetailsAnswers,\n} from \"../../containers/CandidateExams/CandidateExams\";\nimport { PlansTypeKeys } from \"../../interfaces\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { DATE } from \"../../utils/functions\";\nimport ClaimFormComponent from \"../ClaimForm/ClaimFormComponent\";\nimport { AnswersDetails } from \"./AnswersDetails\";\n\ninterface CandidateAnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n}\n\nconst CandidateAnswersDetails = (props: CandidateAnswersDetailsProps) => {\n  const today = moment().tz(TimeZone);\n  let tomorrow = new Date();\n  tomorrow.setDate(today.date() + 1);\n  const [claim, setClaim] = useState<boolean>(false);\n  return (\n    <div>\n      {/* Check if period is open for claims */}\n      {compareWithToday(today, props.exam_id.exam_date) === false ? (\n        <div className=\"bg-yellow-100 text-yellow-800 font-extrabold text-center flex flex-col items-center justify-center text-lg px-2 py-6\">\n          <div className=\"mb-5 text-3xl\">\n            Please wait, the exam details will be visible soon!\n          </div>\n          <div className=\"text-gray-600\">Exam details will be visible from</div>\n          <div className=\"bg-white rounded-full px-3 py-1 text-gray-700\">\n            {DATE(tomorrow.toString())}\n          </div>\n        </div>\n      ) : claim === false ? (\n        <div className=\"mb-20\">\n          <AnswersDetails\n            exam_id={props.exam_id}\n            showAnswers={props.showAnswers}\n          />\n          <div\n            onClick={() => setClaim(true)}\n            className=\"bg-blue-100 flex flex-row items-center px-3 py-2 -mt-10\"\n          >\n            <div className=\"btn bg-green-600 text-white text-center w-max px-6 text-2xl flex flex-row item-center justify-center gap-3 cursor-pointer\">\n              <IoHandLeftSharp className=\"text-3xl \" />{\" \"}\n              <span>Exam marks Claim</span>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-100 mt-4 pt-2 rounded\">\n          <ClaimFormComponent\n            setFormState={setClaim}\n            claim_type={PlansTypeKeys.EXAMINATION}\n            file_id={props.exam_id.exam_id}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CandidateAnswersDetails;\n","import React, { Component, Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  applicationPeriodsStoreInterface,\n  InitialExamDetails,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI, PositionAPICourse } from \"../../interfaces\";\nimport {\n  ApplicationPeriodGet,\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\nimport { MdClose } from \"react-icons/md\";\nimport ChooseExamCenter, {\n  LocationTableInterface,\n} from \"../Application/ExamCenter/ChooseExamCenter\";\nimport { sentExamInterface } from \"../Application/ExamCenter/ExamCenter\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\n\nexport const compareWithToday = (tooday: moment.Moment, date: string) => {\n  const myDate = DATE(date, \"MM/DD/YYYY\");\n  let todayConverted =\n    (tooday.get(\"month\") < 9 ? \"0\" : \"\") +\n    (tooday.get(\"month\") + 1).toString() +\n    \"/\" +\n    tooday.get(\"date\") +\n    \"/\" +\n    tooday.get(\"year\");\n  if (new Date(myDate).getTime() < new Date(todayConverted).getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport interface ExamDoneDetailsAnswers {\n  exam_id: string;\n  course: string;\n  course_name: string;\n  discription: string;\n  termes: string;\n  rules: {\n    right_click_enabled: boolean;\n    copy_enabled: boolean;\n    paste_enabled: boolean;\n    stop_candidate_when_comeback: boolean;\n    allow_to_leave_browser: boolean;\n  };\n  period: string;\n  exam_date: string;\n}\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface changeLocProps {\n  changeLocation: () => void;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (selected_exam: InitialExamDetails | null) => void; // Not used\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\n\nconst ChangeLocationComponent = (props: changeLocProps): JSX.Element => {\n  const [display, setDisplay] = useState<boolean>(true);\n  if (display === false) {\n    return <div></div>;\n  }\n  return (\n    <div className=\"absolute right-2 left-2 md:right-1/4 md:left-1/4 lg:left-1/2 lg:right-auto bg-yellow-50 shadow-xl rounded py-1 px-1 flex flex-row justify-between items-center gap-2 text-yellow-800 -mt-5 lg:-mt-8\">\n      <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-1\">\n        <span className=\"font-bold\">You are advised to change location</span>\n        <div\n          onClick={props.changeLocation}\n          className=\"px-2 py-1 rounded bg-blue-100 text-blue-600 w-max cursor-pointer\"\n        >\n          Change\n        </div>\n      </div>\n      <div\n        onClick={() => setDisplay(false)}\n        className=\"bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center p-1 h-8 w-8 cursor-pointer\"\n      >\n        <MdClose className=\"text-4xl\" />\n      </div>\n    </div>\n  );\n};\n\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  loadingExamsDone: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n  selectedCourse: course | null;\n  centersModal: boolean;\n  maxExamModal: boolean;\n  selectedPosition: string;\n  successMessage: string;\n  selectedExam: ExamDoneDetailsAnswers | null;\n  doing_exam: boolean;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingExamsDone: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n      selectedCourse: null,\n      centersModal: false,\n      maxExamModal: false,\n      selectedPosition: \"\",\n      successMessage: \"\",\n      selectedExam: null,\n      doing_exam: false,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setloadingExamsDone = (status: boolean) => {\n    this.setState({ loadingExamsDone: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      // console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setLoading(true);\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setLoading(true);\n        } else {\n          this.setLoading(true);\n        }\n      }\n    );\n  };\n\n  InitializationFn = (\n    application: GetApplicationsAPI,\n    item: UserExamsListInterface\n  ) => {\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          if (\n            application.application_status === ApplicationStates.Shortlisted\n          ) {\n            // Select exam\n            this.props.setSelectedPosition(application.position);\n            this.props.setSelectedCourse(\n              application.position.courses.find(\n                (itm) => itm.course_id === item.course\n              )!\n            );\n            this.setState({ doing_exam: true });\n            return (\n              this.props.periods.selected_period &&\n              this.props.InitializeExamDetails(\n                application.application_session.session_plan_id,\n                course.course_id,\n                center_id.district_id,\n                center_id.center_id,\n                center_id.room_id,\n                application.position,\n                true,\n                this.setLoading\n              )\n            );\n          } else {\n            alert(\"Corresponding application is not shortlisted!\");\n          }\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.props.LoadCandidateApplications(\n      this.props.auth.user.user_id,\n      this.setLoading\n    );\n  };\n  findLocation = (position_id: string, course_id: string) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      const test = this.props.candidateApplications.candidate_applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.exams.filter((itm) => itm.course_id === course_id)\n      );\n      if (test !== undefined) {\n        let course = test.exams.find((itm) => itm.course_id === course_id);\n        if (course !== undefined) {\n          return course;\n        }\n      }\n    }\n    return null;\n  };\n  updateLocation = async (\n    application_id: string,\n    exams: sentExamInterface[]\n  ) => {\n    this.setState({ loading: true });\n    for (let i in exams) {\n      try {\n        const res = await axios.post(\n          `${API.APPLICATION}/application/updatemissed`,\n          {\n            application_id: application_id,\n            exams: exams[i],\n          }\n        );\n        if (res.status === 200) {\n          this.setState({\n            selectedCourse: null,\n            centersModal: false,\n            maxExamModal: false,\n            selectedPosition: \"\",\n            successMessage: \"Location updated successfully!\",\n          });\n          this.loadUserApplications();\n        }\n      } catch (error: any) {\n        console.log(\"Update loc err: \", { ...error });\n      }\n    }\n  };\n  updateLocationFunction = (exams: sentExamInterface[]) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      let application =\n        this.props.candidateApplications.candidate_applications.find(\n          (item) => item.position.position_id === this.state.selectedPosition\n        );\n      if (application !== undefined) {\n        this.updateLocation(application.application_id, exams);\n      } else {\n        alert(\"Invalid application\");\n      }\n    } else {\n      alert(\"Missing application\");\n    }\n  };\n  addLocation = (\n    course_id: string,\n    course_name: string,\n    course_code: string,\n    location: LocationTableInterface,\n    exam_id: string\n  ) => {\n    return this.updateLocationFunction([\n      {\n        course_id: course_id,\n        proctoring_type: \"Center\",\n        center_id: location.center_id,\n        district_id: location.district_id,\n      },\n    ]);\n  };\n  componentDidMount = () => {\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session?.session_plan_id\n        : this.props.periods.selected_period.session_plan_id;\n\n    if (selPeriod !== undefined && this.state.candidateExams === null) {\n      this.loadCandidateExams(this.props.auth.user.user_id, selPeriod);\n    }\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (this.props.periods.applicationPeriods === null) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.candidateApplications.candidate_applications === null) {\n      this.loadUserApplications();\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm._id === item._id) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm.course === item.course) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string,\n    selected_period: ApplicationPeriodGet | null\n  ): GetApplicationsAPI | null => {\n    if (applications !== null && selected_period !== null) {\n      let temp = applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.application_session.session_plan_id ===\n            selected_period.session_plan_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  setMaxExamModal = (status: boolean) => {\n    this.setState({ maxExamModal: status });\n  };\n\n  changeLocation = (item: PositionAPICourse) => {\n    this.setState({ selectedCourse: item, centersModal: true });\n    this.setMaxExamModal(true);\n  };\n\n  closeModal = () => {\n    this.setState({ centersModal: false });\n    this.setMaxExamModal(false);\n  };\n\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session\n        : this.props.periods.selected_period;\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (\n      this.props.candidateExam.selected_exam_id !== null &&\n      this.props.candidateExam.selected_exam_details !== null &&\n      (this.props.candidateExam.doing_exam === true ||\n        this.state.doing_exam === true)\n    ) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.selectedCourse === null ? (\n          <div className=\"mt-2 -ml-2 mr-3 pb-5\">\n            <div className=\"rounded mt-2\">\n              <div className=\"flex flex-row items-center gap-3\">\n                <Link\n                  to=\"/apps-page\"\n                  title=\"Back to menus\"\n                  className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n                >\n                  <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n                </Link>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-3xl\">My exams</span>\n                  <span className=\"text-gray-600 text-sm\">\n                    List of exams that are assigned to you\n                  </span>\n                </div>\n              </div>\n            </div>\n            {this.state.successMessage !== \"\" && (\n              <div\n                title=\"Click to close the message\"\n                onClick={() => this.setState({ successMessage: \"\" })}\n                className=\"animate__animated animate__zoomIn px-3 py-2 bg-green-500 text-white my-2 rounded cursor-pointer\"\n              >\n                {this.state.successMessage}\n              </div>\n            )}\n            {console.log(\"Not found: \", this.state.candidateExams)}\n            {this.state.loading === true ||\n            this.state.loadingExamsDone === true ||\n            this.state.candidateExams === null ||\n            this.props.candidateApplications.candidate_applications == null ? (\n              <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n                <Loading />\n              </div>\n            ) : this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).length === 0 ? (\n              <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n                No exams found\n              </div>\n            ) : (\n              this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).map((item, i) => (\n                <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div>\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                          <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                            Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-gray-100 underline text-gray-500  font-bold rounded-full px-2\">\n                            Start time: {item.start_time}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-blue-100 text-blue-900  font-bold rounded-full px-2\">\n                            Status: {item.user_status}\n                          </div>\n                        </div>\n                        {this.findLocation(item.position, item.course) !==\n                          null && (\n                          <div className=\"flex flex-row items-center gap-2 mt-2\">\n                            <div>\n                              Exam center:{\" \"}\n                              <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                {\n                                  this.findLocation(item.position, item.course)\n                                    ?.center_name\n                                }\n                              </span>\n                            </div>\n                            <div className=\"w-max flex flex-col md:flex-row\">\n                              Room number:{\" \"}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 ? (\n                                <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                  Waiting room\n                                </span>\n                              ) : (\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.room_number\n                                  }\n                                </span>\n                              )}\n                              {/* Change loc */}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 &&\n                                validateExamDate(\n                                  item.exam_date,\n                                  item.start_time,\n                                  item.end_time\n                                ) !== ExamTimeStatus.Expired && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"lg:w-full flex flex-row items-center justify-end\">\n                      {this.state.activeExams.find(\n                        (itm) => itm === item._id\n                      ) !== undefined ||\n                      item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Paused ? (\n                        validateExamDate(\n                          item.exam_date,\n                          item.start_time,\n                          item.end_time\n                        ) !== ExamTimeStatus.Expired ? (\n                          this.selectApplication(\n                            this.props.candidateApplications\n                              .candidate_applications,\n                            item.position,\n                            item.course,\n                            selPeriod\n                          )?.application_status !==\n                          ApplicationStates.Shortlisted ? (\n                            <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                              Not shortlisted\n                            </div>\n                          ) : (\n                            <div\n                              onClick={() => {\n                                let application = this.selectApplication(\n                                  this.props.candidateApplications\n                                    .candidate_applications,\n                                  item.position,\n                                  item.course,\n                                  selPeriod\n                                );\n                                if (application !== null) {\n                                  this.InitializationFn(application, item);\n                                } else {\n                                  alert(\"Invalid exam!\");\n                                }\n                              }}\n                              className={`${\n                                item.user_status === UserExamStatus.Editing ||\n                                item.user_status === UserExamStatus.Paused\n                                  ? \"bg-green-600 group-hover:bg-green-800\"\n                                  : \"bg-blue-600 group-hover:bg-blue-800\"\n                              } btn  text-white cursor-pointer w-max`}\n                            >\n                              {item.user_status === UserExamStatus.Editing\n                                ? \"Back to Exam\"\n                                : item.user_status === UserExamStatus.Paused\n                                ? \"Paused, back to exam\"\n                                : \"Start Exam\"}\n                            </div>\n                          )\n                        ) : item.user_status === UserExamStatus.Editing ||\n                          item.user_status === UserExamStatus.Done ||\n                          item.user_status === UserExamStatus.Paused ||\n                          item.user_status === UserExamStatus.Removed ? (\n                          <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                            <span>Marks</span>\n                            <span className=\"text-2xl font-extrabold -mt-2\">\n                              {item.user_marks.toFixed(\n                                item.user_marks === 100 || item.user_marks === 0\n                                  ? 0\n                                  : 2\n                              )}\n                              %\n                            </span>\n                            <div\n                              onClick={() =>\n                                this.setState({\n                                  selectedExam: {\n                                    course: item.course,\n                                    course_name: item.course_name,\n                                    discription: item.discription,\n                                    termes: item.termes,\n                                    rules: item.rules,\n                                    period: item.period,\n                                    exam_date: item.exam_date,\n                                    exam_id: item._id,\n                                  },\n                                })\n                              }\n                              className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                            >\n                              Check details\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                            Expired\n                          </div>\n                        )\n                      ) : item.found === false ? (\n                        <div\n                          title=\"Please wait for the exam time\"\n                          className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                        >\n                          <CountDown\n                            start_time={new Date(today.toString()).toString()}\n                            duration_min={getMinutesFromTwoDates(\n                              new Date(today.toString()),\n                              new Date(\n                                DATE(item.exam_date, \"MM/DD/YYYY\") +\n                                  \" \" +\n                                  item.start_time\n                              )\n                            )}\n                            timeout={() => this.setTimeOut(item._id)}\n                            returnString={true}\n                            labels={true}\n                            days\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                          <span>Marks</span>\n                          <span className=\"text-2xl font-extrabold -mt-2\">\n                            {item.user_marks.toFixed(\n                              item.user_marks === 100 || item.user_marks === 0\n                                ? 0\n                                : 2\n                            )}\n                            %\n                          </span>\n                          <div\n                            onClick={() =>\n                              this.setState({\n                                selectedExam: {\n                                  course: item.course,\n                                  course_name: item.course_name,\n                                  discription: item.discription,\n                                  termes: item.termes,\n                                  rules: item.rules,\n                                  period: item.period,\n                                  exam_date: item.exam_date,\n                                  exam_id: item._id,\n                                },\n                              })\n                            }\n                            className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                          >\n                            Check details\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {/* Not prepared exams */}\n            {this.state.candidateExams !== null &&\n              this.state.loading !== true &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).length > 0 &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).map((item, i) => (\n                <div\n                  key={i + 1}\n                  className=\"my-2 rounded bg-white p-2 py-3 group\"\n                >\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div className=\"\">\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-base text-gray-600 font-bold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                          {this.findLocation(item.position, item.course) !==\n                            null && (\n                            <div className=\"flex flex-row items-center gap-2 mt-2\">\n                              <div className=\"flex flex-col md:flex-row md:items-center\">\n                                Exam center:{\" \"}\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.center_name\n                                  }\n                                </span>\n                              </div>\n                              <div className=\"w-max flex flex-col md:flex-row md:items-center\">\n                                Room number:{\" \"}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 ? (\n                                  <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                    Waiting room\n                                  </span>\n                                ) : (\n                                  <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                    {\n                                      this.findLocation(\n                                        item.position,\n                                        item.course\n                                      )?.room_number\n                                    }\n                                  </span>\n                                )}\n                                {/* Change loc */}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                      Not prepared\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : this.state.loading === true ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : (\n          <div className=\"animate__animated animate__fadeInUp animate__faster mt-2 mr-1 -ml-3 rounded-t-md bg-white shadow-md pb-5\">\n            <div className=\"flex flex-row gap-4 items-center justify-between bg-blue-100 py-2 px-2 mb-2\">\n              <div className=\"flex flex-col w-full\">\n                <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-2\">\n                  <span className=\"font-bold text-xl text-gray-800\">\n                    Change exam location\n                  </span>\n                  <div className=\"bg-white hover:text-yellow-700 hover:bg-white rounded-full p-1 h-10 w-10 border-2 border-white hover:border-yellow-600 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => {\n                        this.setState({\n                          centersModal: false,\n                          selectedCourse: null,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ChooseExamCenter\n              positionCourses={this.state.selectedCourse}\n              addLocation={this.addLocation}\n              closeModal={this.closeModal}\n            />\n          </div>\n        )}\n        {this.state.selectedExam !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600 px-2\">\n                Exam result details\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectedExam: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <CandidateAnswersDetails\n              exam_id={this.state.selectedExam}\n              showAnswers={false}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    periods: periods,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getAllClaims,\n    PushPopupAlert,\n  })(AdminFilterByType)\n);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(\n    sessions.filter((item) => item.session_plan_id === period_id)[0]\n  );\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod.session_plan_id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option\n                key={session.session_plan_id + item}\n                value={session.session_plan_id}\n              >\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default React.memo(ClaimHeaderTitle);\n","import React, { Component } from \"react\";\nimport { MdAdd, MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport search from \"../../../utils/search\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  // console.log(\"====================================\");\n  // console.log({ claimList, claim_id });\n  // console.log(\"====================================\");\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getClaimReasons: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  searchClaim: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n      searchClaim: \"\",\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  setSearchClaim = (value: string) => {\n    this.setState({ searchClaim: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n      this.loadExamAnswers(\n        thisSession ? thisSession : sessions[0],\n        this.props.auth.user.user_id\n      );\n    }\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan.session_plan_id,\n      user_id,\n      (status: boolean, msg: string, data: SessionPlanInterface | \"none\") => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n    if (this.props.claiming.claimReasons === null) {\n      this.props.getClaimReasons((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status) {\n          if (msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => {\n                this.setClaimForm(true);\n                // alert(\"clicked\");\n              }}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            {/* FILTER FORM =================================== */}\n            <section className=\"flex flex-col-reverse sm:flex-row items-center gap-2 w-full my-2\">\n              <div className=\"w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setSearchClaim(e.target.value)\n                  }\n                  type=\"text\"\n                  className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500 w-full\"\n                  placeholder={`Search claim by title or type`}\n                  value={this.state.searchClaim}\n                  disabled={\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ).length > 0\n                      ? false\n                      : true\n                  }\n                />\n              </div>\n            </section>\n            {/* END FILTER FORM =================================== */}\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim level</td>\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"Nothing found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).map((claim: CandidateClaimInterface, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {claim.title}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap italic\">\n                        Level {claim.claim_level}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.PLACEMENT_TRANSFER && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Placement not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  getClaimReasons,\n  loadCourses,\n  getMyPlacement,\n  getMyAnswers,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline, MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { DATE, errorToText, showDate } from \"../../utils/functions\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span\n              className=\"font-normal\"\n              dangerouslySetInnerHTML={{\n                __html: props.thisClaim.previous.reason,\n              }}\n            ></span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {props.thisApplication.position.description}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  ClaimStatus,\n  course,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { claimShowAnswer } from \"./Candidate/ExaminationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  claimReasons: claimReasonInterface[] | null;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <CandidateAnswersDetails\n                showAnswers={false}\n                exam_id={claimShowAnswer(\n                  props.thisExamSheet,\n                  props.thisExam.course_name\n                )}\n              />\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.userDetails.user_info.fname +\n                          \" \" +\n                          props.thisClaim.userDetails.user_info.lname\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default React.memo(connect(mapStateToProps, {\n  loadQuestionTypes,\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimPlacementView));\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getMyRejectedApplications,\n    getMyRejectedDocuments,\n    PushPopupAlert,\n  })(FilterByType)\n);\n"],"sourceRoot":""}