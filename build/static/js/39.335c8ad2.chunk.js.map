{"version":3,"sources":["containers/QuestionBank/AddQuestionManually/AddQuestionManually.tsx","utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","components/Courses/Courses.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["AddQuestionManually","props","unSelectQuestion","alert","state","loading","id","uuidv4","course","question","type","chapters","customNumber","marks","answers","is_deleted","selectedLanguage","QuestionLanguages","showFilter","selectedKey","showQuestionChapters","selectedQuestion","question_id","this","Component","ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","check","find","itm","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","caption","toMultipleChoice","answer","value","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","CoursesAction","Courses","connect","auth","periods","schoolLevels","system","loadApplicationPeriods","setSelectedPeriod","loadSchoolLevels","setSelectedEducationCategory","PushPopupAlert","loadCourses","setSelectedCourse","useState","setLoading","addNew","setAddNew","search","setSearch","selectedCourse","setSelectedCourseComp","course_selected","deleteCourseFn","a","axios","delete","API","APPLICATION","title","theme","PopupAlertTheme","success","warning","console","log","useEffect","school_levels","className","onClick","onChange","e","target","placeholder","searchData","map","item","course_name","description","action","View","Update","Delete","backDrop","Themes","default","close","widthSizeClass","ModalSize","extraLarge","displayClose","backDropClose","padding","body","closeModal","deleteSelected","chaptersOnly","medium","_UploadQuestion","setState","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedSchoolLevel","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","period","selected_period","session_plan_id","filteredCourses","searched","filtered","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","searchCourseInput","education_category_title","school_level_name","education_categories","loadEducationCategories","style","minHeight","selected_course_id","course_code","educationCategories","UploadQuestion","questionBank","AddCourse","setCourse_id","setCourse_name","setCourse_code","setDescription","setChapters","setSchool_levels","formError","setFormError","openAdd","chapter","addChapter","setAddChapter","submitCourse","preventDefault","obj","patch","info","post","data","errors","message","danger","onSubmit","disabled","name","addNewChapter","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","selectedQuestionItem","QuestionAnswer","wholeQuestion","language","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","setSelectedKey","lang","checkAns","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","_id","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","window","confirm","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","questionAnswers","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","addedChapters","ChangeLanguage","languagesList","visible","setVisible","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","langItem","testLangQ","l","QuestionLang","actionStatus","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","UpdateQuestion","addExamQuestion","loadQuestionTypes","setSelectedLang","questionLangs","testing","Loading","LoadingType","white","Modal","large","selected_course","courseDetail","EditQuestion","prepareExam","setUploadedQuestions","SchoolLevelSelect","height","x","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/39.335c8ad2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../interfaces/question\";\nimport EditQuestion, {\n  SelectedKeysEdit,\n} from \"../AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface AddQuestionManuallyProps {}\n\ninterface AddQuestionManuallyState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  is_deleted: boolean;\n}\n\nexport class AddQuestionManually extends Component<\n  AddQuestionManuallyProps,\n  AddQuestionManuallyState\n> {\n  constructor(props: AddQuestionManuallyProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: uuidv4(),\n      course: \"\",\n      question: [],\n      type: \"Invalid\",\n      chapters: [],\n      customNumber: 1,\n      marks: 100,\n      answers: [],\n      is_deleted: false,\n      selectedLanguage: QuestionLanguages[0],\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n    };\n  }\n\n  unSelectQuestion = () => {\n    alert(\"Hello\");\n  };\n\n  render() {\n    return (\n      <div>\n        Add new question\n        <EditQuestion\n          selectedQuestion={{\n            question_id: this.state.id,\n            course: this.state.course,\n            question: this.state.question,\n            type: this.state.type,\n            chapters: this.state.chapters,\n            customNumber: this.state.customNumber,\n            marks: this.state.marks,\n            answers: this.state.answers,\n            is_deleted: this.state.is_deleted,\n          }}\n          unSelectQuestion={this.unSelectQuestion}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AddQuestionManually;\n","import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}