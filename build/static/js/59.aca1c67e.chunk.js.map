{"version":3,"sources":["utils/question_bank.ts","components/AnswersDetails/CandidateAnswersDetails.tsx","containers/CandidateExams/CandidateExams.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","caption","CandidateAnswersDetails","props","tomorrow","setDate","date","useState","claim","setClaim","compareWithToday","exam_id","className","DATE","showAnswers","setFormState","claim_type","PlansTypeKeys","EXAMINATION","file_id","tooday","myDate","todayConverted","get","ChangeLocationComponent","display","setDisplay","onClick","changeLocation","_CandidateExams","setLoading","setState","loading","setloadingExamsDone","loadingExamsDone","loadCandidateExams","user","period","a","setAxiosToken","axios","API","QBank","candidateExams","data","console","log","alert","errorToText","loadUserProfileDetails","FC_GetProfileDetails","auth","user_id","InitializationFn","application","item","position","candidateExam","user_exams_temp","center_id","exams","application_status","ApplicationStates","Shortlisted","setSelectedPosition","setSelectedCourse","doing_exam","periods","selected_period","InitializeExamDetails","application_session","session_plan_id","district_id","room_id","loadUserApplications","LoadCandidateApplications","findLocation","position_id","candidateApplications","candidate_applications","updateLocation","application_id","post","APPLICATION","selectedCourse","centersModal","maxExamModal","selectedPosition","successMessage","updateLocationFunction","state","addLocation","course_name","course_code","location","proctoring_type","componentDidMount","selPeriod","sex","applicationPeriods","loadApplicationPeriods","removeDuplicatesExams","temp","_id","removeDuplicatesNotPreparedExams","setTimeOut","temps","activeExams","selectApplication","applications","setMaxExamModal","closeModal","selectedExam","this","FC_Access","UserAccessList","MY_APPLICATION","view","selected_exam_id","selected_exam_details","to","title","session_plan_name","preparedExam","map","user_status","center_name","room_number","description","school_levels","UserExamStatus","Editing","Paused","Done","Removed","user_marks","discription","termes","rules","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","positionCourses","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","Component","CandidateExams","connect","setSelectedCandidateExam","loadExamsDone","AddUserApplication"],"mappings":"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","file":"static/js/59.aca1c67e.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { IoHandLeftSharp } from \"react-icons/io5\";\nimport {\n  compareWithToday,\n  ExamDoneDetailsAnswers,\n} from \"../../containers/CandidateExams/CandidateExams\";\nimport { PlansTypeKeys } from \"../../interfaces\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { DATE } from \"../../utils/functions\";\nimport ClaimFormComponent from \"../ClaimForm/ClaimFormComponent\";\nimport { AnswersDetails } from \"./AnswersDetails\";\n\ninterface CandidateAnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n}\n\nconst CandidateAnswersDetails = (props: CandidateAnswersDetailsProps) => {\n  const today = moment().tz(TimeZone);\n  let tomorrow = new Date();\n  tomorrow.setDate(today.date() + 1);\n  const [claim, setClaim] = useState<boolean>(false);\n  return (\n    <div>\n      {/* Check if period is open for claims */}\n      {compareWithToday(today, props.exam_id.exam_date) === false ? (\n        <div className=\"bg-yellow-100 text-yellow-800 font-extrabold text-center flex flex-col items-center justify-center text-lg px-2 py-6\">\n          <div className=\"mb-5 text-3xl\">\n            Please wait, the exam details will be visible soon!\n          </div>\n          <div className=\"text-gray-600\">Exam details will be visible from</div>\n          <div className=\"bg-white rounded-full px-3 py-1 text-gray-700\">\n            {DATE(tomorrow.toString())}\n          </div>\n        </div>\n      ) : claim === false ? (\n        <div className=\"mb-20\">\n          <AnswersDetails\n            exam_id={props.exam_id}\n            showAnswers={props.showAnswers}\n          />\n          {/* <div\n            onClick={() => setClaim(true)}\n            className=\"bg-blue-100 flex flex-row items-center px-3 py-2 -mt-10\"\n          >\n            <div className=\"btn bg-green-600 text-white text-center w-max px-6 text-2xl flex flex-row item-center justify-center gap-3 cursor-pointer\">\n              <IoHandLeftSharp className=\"text-3xl \" />{\" \"}\n              <span>Exam marks Claim</span>\n            </div>\n          </div> */}\n        </div>\n      ) : (\n        <div className=\"bg-gray-100 mt-4 pt-2 rounded\">\n          <ClaimFormComponent\n            setFormState={setClaim}\n            claim_type={PlansTypeKeys.EXAMINATION}\n            file_id={props.exam_id.exam_id}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CandidateAnswersDetails;\n","import React, { Component, Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  applicationPeriodsStoreInterface,\n  InitialExamDetails,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI, PositionAPICourse } from \"../../interfaces\";\nimport {\n  ApplicationPeriodGet,\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\nimport { MdClose } from \"react-icons/md\";\nimport ChooseExamCenter, {\n  LocationTableInterface,\n} from \"../Application/ExamCenter/ChooseExamCenter\";\nimport { sentExamInterface } from \"../Application/ExamCenter/ExamCenter\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\n\nexport const compareWithToday = (tooday: moment.Moment, date: string) => {\n  const myDate = DATE(date, \"MM/DD/YYYY\");\n  let todayConverted =\n    (tooday.get(\"month\") < 9 ? \"0\" : \"\") +\n    (tooday.get(\"month\") + 1).toString() +\n    \"/\" +\n    tooday.get(\"date\") +\n    \"/\" +\n    tooday.get(\"year\");\n  if (new Date(myDate).getTime() < new Date(todayConverted).getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport interface ExamDoneDetailsAnswers {\n  exam_id: string;\n  course: string;\n  course_name: string;\n  discription: string;\n  termes: string;\n  rules: {\n    right_click_enabled: boolean;\n    copy_enabled: boolean;\n    paste_enabled: boolean;\n    stop_candidate_when_comeback: boolean;\n    allow_to_leave_browser: boolean;\n  };\n  period: string;\n  exam_date: string;\n}\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface changeLocProps {\n  changeLocation: () => void;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (selected_exam: InitialExamDetails | null) => void; // Not used\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\n\nconst ChangeLocationComponent = (props: changeLocProps): JSX.Element => {\n  const [display, setDisplay] = useState<boolean>(true);\n  if (display === false) {\n    return <div></div>;\n  }\n  return (\n    <div className=\"absolute right-2 left-2 md:right-1/4 md:left-1/4 lg:left-1/2 lg:right-auto bg-yellow-50 shadow-xl rounded py-1 px-1 flex flex-row justify-between items-center gap-2 text-yellow-800 -mt-5 lg:-mt-8\">\n      <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-1\">\n        <span className=\"font-bold\">You are advised to change location</span>\n        <div\n          onClick={props.changeLocation}\n          className=\"px-2 py-1 rounded bg-blue-100 text-blue-600 w-max cursor-pointer\"\n        >\n          Change\n        </div>\n      </div>\n      <div\n        onClick={() => setDisplay(false)}\n        className=\"bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center p-1 h-8 w-8 cursor-pointer\"\n      >\n        <MdClose className=\"text-4xl\" />\n      </div>\n    </div>\n  );\n};\n\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  loadingExamsDone: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n  selectedCourse: course | null;\n  centersModal: boolean;\n  maxExamModal: boolean;\n  selectedPosition: string;\n  successMessage: string;\n  selectedExam: ExamDoneDetailsAnswers | null;\n  doing_exam: boolean;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingExamsDone: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n      selectedCourse: null,\n      centersModal: false,\n      maxExamModal: false,\n      selectedPosition: \"\",\n      successMessage: \"\",\n      selectedExam: null,\n      doing_exam: false,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setloadingExamsDone = (status: boolean) => {\n    this.setState({ loadingExamsDone: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      // console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setLoading(true);\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setLoading(false);\n        } else {\n          this.setLoading(true);\n        }\n      }\n    );\n  };\n\n  InitializationFn = (\n    application: GetApplicationsAPI,\n    item: UserExamsListInterface\n  ) => {\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          if (\n            application.application_status === ApplicationStates.Shortlisted\n          ) {\n            // Select exam\n            this.props.setSelectedPosition(application.position);\n            this.props.setSelectedCourse(\n              application.position.courses.find(\n                (itm) => itm.course_id === item.course\n              )!\n            );\n            this.setState({ doing_exam: true });\n            return (\n              this.props.periods.selected_period &&\n              this.props.InitializeExamDetails(\n                application.application_session.session_plan_id,\n                course.course_id,\n                center_id.district_id,\n                center_id.center_id,\n                center_id.room_id,\n                application.position,\n                true,\n                this.setLoading\n              )\n            );\n          } else {\n            alert(\"Corresponding application is not shortlisted!\");\n          }\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.props.LoadCandidateApplications(\n      this.props.auth.user.user_id,\n      this.setLoading\n    );\n  };\n  findLocation = (position_id: string, course_id: string) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      const test = this.props.candidateApplications.candidate_applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.exams.filter((itm) => itm.course_id === course_id) &&\n          item.application_session.session_plan_id ===\n            this.props.auth.application_session?.session_plan_id\n      );\n      if (test !== undefined) {\n        let course = test.exams.find((itm) => itm.course_id === course_id);\n        if (course !== undefined) {\n          return course;\n        }\n      }\n    }\n    return null;\n  };\n  updateLocation = async (\n    application_id: string,\n    exams: sentExamInterface[]\n  ) => {\n    this.setState({ loading: true });\n    for (let i in exams) {\n      try {\n        const res = await axios.post(\n          `${API.APPLICATION}/application/updatemissed`,\n          {\n            application_id: application_id,\n            exams: exams[i],\n          }\n        );\n        if (res.status === 200) {\n          this.setState({\n            selectedCourse: null,\n            centersModal: false,\n            maxExamModal: false,\n            selectedPosition: \"\",\n            successMessage: \"Location updated successfully!\",\n          });\n          this.loadUserApplications();\n        }\n      } catch (error: any) {\n        console.log(\"Update loc err: \", { ...error });\n      }\n    }\n  };\n  updateLocationFunction = (exams: sentExamInterface[]) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      let application =\n        this.props.candidateApplications.candidate_applications.find(\n          (item) => item.position.position_id === this.state.selectedPosition\n        );\n      if (application !== undefined) {\n        this.updateLocation(application.application_id, exams);\n      } else {\n        alert(\"Invalid application\");\n      }\n    } else {\n      alert(\"Missing application\");\n    }\n  };\n  addLocation = (\n    course_id: string,\n    course_name: string,\n    course_code: string,\n    location: LocationTableInterface,\n    exam_id: string\n  ) => {\n    return this.updateLocationFunction([\n      {\n        course_id: course_id,\n        proctoring_type: \"Center\",\n        center_id: location.center_id,\n        district_id: location.district_id,\n      },\n    ]);\n  };\n  componentDidMount = () => {\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session?.session_plan_id\n        : this.props.periods.selected_period.session_plan_id;\n\n    if (selPeriod !== undefined && this.state.candidateExams === null) {\n      this.loadCandidateExams(this.props.auth.user.user_id, selPeriod);\n    }\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (this.props.periods.applicationPeriods === null) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.candidateApplications.candidate_applications === null) {\n      this.loadUserApplications();\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm._id === item._id) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm.course === item.course) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string,\n    selected_period: ApplicationPeriodGet | null\n  ): GetApplicationsAPI | null => {\n    if (applications !== null && selected_period !== null) {\n      let temp = applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.application_session.session_plan_id ===\n            selected_period.session_plan_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  setMaxExamModal = (status: boolean) => {\n    this.setState({ maxExamModal: status });\n  };\n\n  changeLocation = (item: PositionAPICourse) => {\n    this.setState({ selectedCourse: item, centersModal: true });\n    this.setMaxExamModal(true);\n  };\n\n  closeModal = () => {\n    this.setState({ centersModal: false });\n    this.setMaxExamModal(false);\n  };\n\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session\n        : this.props.periods.selected_period;\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (\n      this.props.candidateExam.selected_exam_id !== null &&\n      this.props.candidateExam.selected_exam_details !== null &&\n      (this.props.candidateExam.doing_exam === true ||\n        this.state.doing_exam === true)\n    ) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.selectedCourse === null ? (\n          <div className=\"mt-2 -ml-2 mr-3 pb-5\">\n            <div className=\"rounded mt-2\">\n              <div className=\"flex flex-row items-center gap-3\">\n                <Link\n                  to=\"/apps-page\"\n                  title=\"Back to menus\"\n                  className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n                >\n                  <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n                </Link>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-3xl\">My exams</span>\n                  <span className=\"text-gray-600 text-sm\">\n                    List of exams for curent session:{\" \"}\n                    <span className=\"font-bold text-bold text-blue-600\">\n                      {this.props.auth.application_session?.session_plan_name}\n                    </span>\n                  </span>\n                </div>\n              </div>\n            </div>\n            {this.state.successMessage !== \"\" && (\n              <div\n                title=\"Click to close the message\"\n                onClick={() => this.setState({ successMessage: \"\" })}\n                className=\"animate__animated animate__zoomIn px-3 py-2 bg-green-500 text-white my-2 rounded cursor-pointer\"\n              >\n                {this.state.successMessage}\n              </div>\n            )}\n            {console.log(\"Not found: \", this.state.candidateExams)}\n            {this.state.loading === true ||\n            this.state.loadingExamsDone === true ||\n            this.state.candidateExams === null ||\n            this.props.candidateApplications.candidate_applications == null ? (\n              <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n                <Loading />\n              </div>\n            ) : this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).length === 0 ? (\n              <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n                No exams found\n              </div>\n            ) : (\n              this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).map((item, i) => (\n                <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div>\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                          <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                            Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-gray-100 underline text-gray-500  font-bold rounded-full px-2\">\n                            Start time: {item.start_time}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-blue-100 text-blue-900  font-bold rounded-full px-2\">\n                            Status: {item.user_status}\n                          </div>\n                        </div>\n                        {this.findLocation(item.position, item.course) !==\n                          null && (\n                          <div className=\"flex flex-row items-center gap-2 mt-2\">\n                            <div>\n                              Exam center:{\" \"}\n                              <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                {\n                                  this.findLocation(item.position, item.course)\n                                    ?.center_name\n                                }\n                              </span>\n                            </div>\n                            <div className=\"w-max flex flex-col md:flex-row\">\n                              Room number:{\" \"}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 ? (\n                                <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                  Waiting room\n                                </span>\n                              ) : (\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.room_number\n                                  }\n                                </span>\n                              )}\n                              {/* Change loc */}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 &&\n                                validateExamDate(\n                                  item.exam_date,\n                                  item.start_time,\n                                  item.end_time\n                                ) !== ExamTimeStatus.Expired && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"lg:w-full flex flex-row items-center justify-end\">\n                      {this.state.activeExams.find(\n                        (itm) => itm === item._id\n                      ) !== undefined ||\n                      item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Paused ? (\n                        validateExamDate(\n                          item.exam_date,\n                          item.start_time,\n                          item.end_time\n                        ) !== ExamTimeStatus.Expired ? (\n                          this.selectApplication(\n                            this.props.candidateApplications\n                              .candidate_applications,\n                            item.position,\n                            item.course,\n                            selPeriod\n                          )?.application_status !==\n                          ApplicationStates.Shortlisted ? (\n                            <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                              Not shortlisted\n                            </div>\n                          ) : (\n                            <div\n                              onClick={() => {\n                                let application = this.selectApplication(\n                                  this.props.candidateApplications\n                                    .candidate_applications,\n                                  item.position,\n                                  item.course,\n                                  selPeriod\n                                );\n                                if (application !== null) {\n                                  this.InitializationFn(application, item);\n                                } else {\n                                  alert(\"Invalid exam!\");\n                                }\n                              }}\n                              className={`${\n                                item.user_status === UserExamStatus.Editing ||\n                                item.user_status === UserExamStatus.Paused\n                                  ? \"bg-green-600 group-hover:bg-green-800\"\n                                  : \"bg-blue-600 group-hover:bg-blue-800\"\n                              } btn  text-white cursor-pointer w-max`}\n                            >\n                              {item.user_status === UserExamStatus.Editing\n                                ? \"Back to Exam\"\n                                : item.user_status === UserExamStatus.Paused\n                                ? \"Paused, back to exam\"\n                                : \"Start Exam\"}\n                            </div>\n                          )\n                        ) : item.user_status === UserExamStatus.Editing ||\n                          item.user_status === UserExamStatus.Done ||\n                          item.user_status === UserExamStatus.Paused ||\n                          item.user_status === UserExamStatus.Removed ? (\n                          <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                            <span>Marks</span>\n                            <span className=\"text-2xl font-extrabold -mt-2\">\n                              {item.user_marks.toFixed(\n                                item.user_marks === 100 || item.user_marks === 0\n                                  ? 0\n                                  : 2\n                              )}\n                              %\n                            </span>\n                            <div\n                              onClick={() =>\n                                this.setState({\n                                  selectedExam: {\n                                    course: item.course,\n                                    course_name: item.course_name,\n                                    discription: item.discription,\n                                    termes: item.termes,\n                                    rules: item.rules,\n                                    period: item.period,\n                                    exam_date: item.exam_date,\n                                    exam_id: item._id,\n                                  },\n                                })\n                              }\n                              className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                            >\n                              Check details\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                            Expired\n                          </div>\n                        )\n                      ) : item.found === false ? (\n                        <div\n                          title=\"Please wait for the exam time\"\n                          className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                        >\n                          <CountDown\n                            start_time={new Date(today.toString()).toString()}\n                            duration_min={getMinutesFromTwoDates(\n                              new Date(today.toString()),\n                              new Date(\n                                DATE(item.exam_date, \"MM/DD/YYYY\") +\n                                  \" \" +\n                                  item.start_time\n                              )\n                            )}\n                            timeout={() => this.setTimeOut(item._id)}\n                            returnString={true}\n                            labels={true}\n                            days\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                          <span>Marks</span>\n                          <span className=\"text-2xl font-extrabold -mt-2\">\n                            {item.user_marks.toFixed(\n                              item.user_marks === 100 || item.user_marks === 0\n                                ? 0\n                                : 2\n                            )}\n                            %\n                          </span>\n                          <div\n                            onClick={() =>\n                              this.setState({\n                                selectedExam: {\n                                  course: item.course,\n                                  course_name: item.course_name,\n                                  discription: item.discription,\n                                  termes: item.termes,\n                                  rules: item.rules,\n                                  period: item.period,\n                                  exam_date: item.exam_date,\n                                  exam_id: item._id,\n                                },\n                              })\n                            }\n                            className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                          >\n                            Check details\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {/* Not prepared exams */}\n            {this.state.candidateExams !== null &&\n              this.state.loading !== true &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).length > 0 &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).map((item, i) => (\n                <div\n                  key={i + 1}\n                  className=\"my-2 rounded bg-white p-2 py-3 group\"\n                >\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div className=\"\">\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-base text-gray-600 font-bold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                          {this.findLocation(item.position, item.course) !==\n                            null && (\n                            <div className=\"flex flex-row items-center gap-2 mt-2\">\n                              <div className=\"flex flex-col md:flex-row md:items-center\">\n                                Exam center:{\" \"}\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.center_name\n                                  }\n                                </span>\n                              </div>\n                              <div className=\"w-max flex flex-col md:flex-row md:items-center\">\n                                Room number:{\" \"}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 ? (\n                                  <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                    Waiting room\n                                  </span>\n                                ) : (\n                                  <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                    {\n                                      this.findLocation(\n                                        item.position,\n                                        item.course\n                                      )?.room_number\n                                    }\n                                  </span>\n                                )}\n                                {/* Change loc */}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                      Not prepared\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : this.state.loading === true ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : (\n          <div className=\"animate__animated animate__fadeInUp animate__faster mt-2 mr-1 -ml-3 rounded-t-md bg-white shadow-md pb-5\">\n            <div className=\"flex flex-row gap-4 items-center justify-between bg-blue-100 py-2 px-2 mb-2\">\n              <div className=\"flex flex-col w-full\">\n                <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-2\">\n                  <span className=\"font-bold text-xl text-gray-800\">\n                    Change exam location\n                  </span>\n                  <div className=\"bg-white hover:text-yellow-700 hover:bg-white rounded-full p-1 h-10 w-10 border-2 border-white hover:border-yellow-600 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => {\n                        this.setState({\n                          centersModal: false,\n                          selectedCourse: null,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ChooseExamCenter\n              positionCourses={this.state.selectedCourse}\n              addLocation={this.addLocation}\n              closeModal={this.closeModal}\n            />\n          </div>\n        )}\n        {this.state.selectedExam !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600 px-2\">\n                Exam result details\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectedExam: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <CandidateAnswersDetails\n              exam_id={this.state.selectedExam}\n              showAnswers={false}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    periods: periods,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n"],"sourceRoot":""}