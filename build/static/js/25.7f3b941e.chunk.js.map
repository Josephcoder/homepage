{"version":3,"sources":["utils/question_bank.ts","components/Navigation/SideNavigation.tsx","containers/SessionSettings/NoSession.tsx","components/Loading/TableLoading.tsx","utils/ExportToExcel.tsx","utils/mineduc.png","components/DownloadPDF/rest.tsx","containers/Claimings/ClaimDocView.tsx","containers/SessionSettings/ChooseSession.tsx","components/AnswersDetails/CandidateAnswersDetails.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx","containers/CandidateExams/CandidateExams.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx","containers/Admin/Claiming/ClaimingReport.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","caption","_SideNavigation","props","componentDidMount","PageHasSubNav","componentWillUnmount","state","loading","this","auth","isAuthenticated","navActive","system","navigation","className","children","React","Component","SideNavigation","connect","NavToogle","MainItem","title","icon","MdBrightness1","active","count","IconDefined","NoSession","TableLoading","displayCols","colsArray","index","cols","push","map","ExportToExcel","fileData","fileName","btnName","showIcon","onClick","e","apiData","wb","Sheets","data","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","require","addFooters","doc","pageCount","internal","getNumberOfPages","setFont","setFontSize","setPage","text","String","pageSize","width","align","generatePDF","reportSettings","table","callBack","a","orientation","lMargin","jsPDF","setTextColor","addImage","Logo","getWidth","institute","lines","splitTextToSize","subject","pdfInMM","y","subjectTitle","getTextWidth","addPage","period","autoTable","html","startY","margin","horizontal","cellPadding","rowHeight","bodyStyles","valign","columnStyles","email","cellWidth","theme","tableWidth","finalY","lastAutoTable","doneBy","DATE","save","returnPromise","then","isReclaimAllowed","thisClaim","claim_level","_thisClaim","claims","item","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","memo","createReClaim","PushPopupAlert","handleSubmit","isEmptyOrSpaces","reClaimingMsg","setFormError","PopupAlertTheme","warning","setLoadingRequest","setAxiosToken","axios","put","API","CLAIMING","_id","reason","console","log","success","setReClaimingMsg","setReClaiming","error","errorToText","danger","getReasonById","reason_id","claimReasons","ClaimGetDocTitle","documentCategories","thisDoc","main","setViewImage","viewImage","validation_status","capitalizeFirstLetter","previous","evaluater","name","validated_by","comment","src","AUTH_FILES","files","alt","claim","default_claim_resaons","showDate","createdAt","toLocaleLowerCase","evaluation_comment","reClaiming","last_claim_status","PENDING","DELETED","disabled","loadingRequest","placeholder","rows","formError","style","resize","value","onChange","target","isPlansActive","plans","activePlans","plan","startDate","start_date","endDate","end_date","type_status","SessionPlanTypeStatus","OPEN","ChooseSession","searched","useState","selectedPlan","setSelectedPlan","search","setSearch","allSession","chooseAll","currentSelected","setSelectSession","searchData","session_plan_id","session_plan_name","is_active","type_key","type_title","CandidateAnswersDetails","tomorrow","setDate","date","setClaim","compareWithToday","exam_id","showAnswers","setFormState","claim_type","PlansTypeKeys","EXAMINATION","file_id","filterClaimsByClaimType","claimList","claimType","claiming","GetClaimingTypes","setSelectedClaimType","getAllClaims","setLoading","loadingClaimTypes","setLoadingClaimTypes","useEffect","claimTypes","countClaims","thisType","result","allClaims","Fragment","loadingClaims","selectedClaimType","APPLICATION","DOCUMENT_VALIDATION","ClaimHeaderTitle","isLoading","loadingSession","periodChanged","headerTitle","thisPeriod","sessions","period_id","application_sessions","selectPeriod","setThisPeriod","setLoadingSession","onPeriodChange","session","tooday","myDate","todayConverted","get","ChangeLocationComponent","display","setDisplay","changeLocation","_CandidateExams","setState","setloadingExamsDone","loadingExamsDone","loadCandidateExams","user","QBank","candidateExams","alert","loadUserProfileDetails","FC_GetProfileDetails","user_id","InitializationFn","application","position","candidateExam","user_exams_temp","center_id","exams","application_status","ApplicationStates","Shortlisted","setSelectedPosition","setSelectedCourse","doing_exam","periods","selected_period","InitializeExamDetails","application_session","district_id","room_id","loadUserApplications","LoadCandidateApplications","findLocation","position_id","candidateApplications","candidate_applications","updateLocation","application_id","post","selectedCourse","centersModal","maxExamModal","selectedPosition","successMessage","updateLocationFunction","addLocation","course_name","course_code","location","proctoring_type","rooms","room_type","RoomType","Virtual","Physical","sex","applicationPeriods","loadApplicationPeriods","removeDuplicatesExams","temp","removeDuplicatesNotPreparedExams","setTimeOut","temps","activeExams","selectApplication","applications","setMaxExamModal","closeModal","selectedExam","selPeriod","FC_Access","UserAccessList","MY_APPLICATION","view","selected_exam_id","selected_exam_details","to","preparedExam","user_status","center_name","room_number","description","school_levels","UserExamStatus","Editing","Paused","Done","Removed","user_marks","discription","termes","rules","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","positionCourses","changeProctoring","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","CandidateExams","setSelectedCandidateExam","loadExamsDone","AddUserApplication","ClaimTypesEnum","thisApplication","position_title","setViewPosition","viewPosition","Rejected","dangerouslySetInnerHTML","__html","school_level_id","school_level_name","education_institute_id","education_category_title","requirements","FC_ApplicationPositionDistinctCategory","DistinctCategoriesTemp","category_title","ViewRequirements","PositionsTemp","req","category_id","NoResult","NoResultThemes","Dark","questionTypes","loadQuestionTypes","thisExam","claimShowAnswer","thisExamSheet","userDetails","user_info","fname","lname","myPlacement","placed","school","school_name","district_name","getMyRejectedApplications","getMyRejectedDocuments","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","candidateDocuments","myClaims","COMPLETED","getDocumentById","document_id","doc_id","whichClaimType","document","exam","MARKS_PUBLICATION","marks_publication","PLACEMENT_TRANSFER","placement","whichClaimStatus","classes","getClaimById","claim_id","getApplicationById","displayDocClaimTitle","claiming_on_id","displayClaimTitle","documentReducer","allCourse","myAnswer","thisAnswer","getCourseIdBySheetId","getCourseById","Index","setViewClaim","viewClaim","setPeriodChanged","setClaimForm","claimForm","setClaimId","claimId","setSearchClaim","searchClaim","loadClaims","getMyClaims","setSession","thisSession","loadExamAnswers","activeSessionPlan","getMyAnswers","getClaimReasons","loadCourses","GetAllSessionPlans","documentCategory","getDocumentCategory","documentSubCategory","getDocumentSubCategory","documentFields","getDocumentFields","getMyPlacement","isDeleteAllowed","thisCLaim","colSpan","Light","ClaimApplView","ClaimExamView","ClaimForm","formState","CandidateClaim","sessionPlan","allSessionPlans","reportClaimType","defaultReportContent","claimReportContentKeyInterface","names","national_id","gender","phone","claim_session","education_category","decision","claim_title","ClaimingReport","schoolLevels","getAllApplications","loadEducationCategories","thisLevel","setThisLevel","setLoadingClaims","loadingInstitutes","setLoadingInstitutes","downloading","setDownloading","claimToPrint","setClaimToPrint","sortProperty","setSortProperty","isSorted","setIsSorted","sortOrder","setSortOrder","searchInput","setSearchInput","generateReportModal","setGenerateReportModal","reportTitle","setReportTitle","reportContent","setReportContent","selectAll","setSelectAll","setSelectPeriod","thisEducation","setThisEducation","education_categories","objList","setSort","thisProperty","updateClaimToPrint","arrayNew","n","Object","prototype","hasOwnProperty","call","keyClaim","dataArray","n_id","phone_number","FC_ClaimData","institute_id","isChangeAllowed","FC_FilterClaims","claimLevel","output","values","forEach","PlansKey","ClaimTypes","selectedType","currentType","levels","ClaimLevels","reportType","querySelectorAll","getElementById","footer","FC_GeneratePDF","sortThisArray","product","flag","prop","toLowerCase","indexOf","medium","findIndex","newArray","isSelectAllNeeded","updateReportContent","currentState","resetReportContent"],"mappings":"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","file":"static/js/25.7f3b941e.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, System } from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { NavToogle, PageHasSubNav } from \"../../actions\";\nimport { MdBrightness1, MdSearch } from \"react-icons/md\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  system: System;\n  PageHasSubNav: Function;\n  NavToogle: Function;\n  children: ReactNode;\n}\n//\ninterface AppState {\n  loading: boolean;\n}\n\nclass _SideNavigation extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n    };\n  }\n\n  componentDidMount = () => this.props.PageHasSubNav(true);\n  componentWillUnmount = () => this.props.PageHasSubNav(false);\n\n  render() {\n    const isAuthenticated = this.props.auth.isAuthenticated;\n\n    if (isAuthenticated === false) {\n      return null;\n    }\n\n    const navActive = this.props.system.navigation;\n    return (\n      <div\n        className={`fixed w-48 p-1 pr-2 pl-6 text-gray-700 bg-white ${\n          navActive === true ? \"lg:left-16  left-16\" : \" -left-72 lg:left-16\"\n        }  top-0 bottom-0 pt-20 z-30 shadow-lg  transition-all duration-500 ease-in-out overflow-y-auto`}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  system,\n}: StoreState): { auth: Auth; system: System } => {\n  return { auth: auth, system: system };\n};\n\nexport const SideNavigation = connect(mapStateToProps, {\n  NavToogle,\n  PageHasSubNav,\n})(_SideNavigation);\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SearchComponentInterface = {\n  data: any[];\n};\n\nexport const Search: FC<SearchComponentInterface> = ({\n  data,\n}): ReactElement => {\n  return (\n    <div className=\"m-1 rounded-md shadow-md border border-blue-400 bg-white p-1 flex \">\n      <label htmlFor=\"search-text\" className=\"inline-block text-2xl\">\n        <MdSearch className=\"inline-block text-blue-400\" />\n      </label>\n      <input\n        type=\"search\"\n        className=\"outline-none bg-transparent flex-1 pl-1\"\n        placeholder=\"Search\"\n        id=\"search-text\"\n      />\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype MainItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const MainItem: FC<MainItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n  return (\n    <section\n      className={`${\n        active === true\n          ? \"bg-blue-500 text-white font-bold\"\n          : \"bg-blue-100 text-blue-800\"\n      } mb-1 hover:font-bold py-1 hover:bg-blue-400 hover:text-white --font-bold  px-2 rounded-md flex cursor-pointer items-center`}\n    >\n      <section className=\"flex-1\">\n        <IconDefined className=\"inline-block mr-1 text-xs\" />\n        <span>{title}</span>\n      </section>\n\n      {count > 0 ? (\n        <span className=\"px-0.5 my-1 text-xs bg-blue-600 text-white rounded-full\">\n          {count}\n        </span>\n      ) : null}\n    </section>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemContainerComponentInterface = {\n  children: ReactNode;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const SubItemContainer: FC<SubItemContainerComponentInterface> = ({\n  children,\n}): ReactElement => {\n  return (\n    <div className=\"ml-3 overflow-y-auto border-l-2 border-blue-200 -mt-1 pt-2 mb-2 pl-1 cursor-pointer\">\n      {children}\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n * @important Remenber to use these components inside the <SubItemContainer>...</SubItemContainer>\n */\nexport const SubItem: FC<SubItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n\n  return (\n    <div\n      className={`animate__animated animate__zoomIn animate__faster ${\n        active === true ? \"bg-blue-500 text-white font-bold\" : \" text-blue-800\"\n      } text-blue-800 bg-blue-200 rounded-md px-1 mb-1 flex items-center py-1 font-bold`}\n    >\n      <IconDefined\n        className={`inline-block mr-0.1 text-xs ${\n          active === true ? \"text-white\" : \"\"\n        }`}\n      />\n      <span\n        className={`inline-block pl-1 ${active === true ? \"text-white\" : \"\"}`}\n      >\n        {title}\n      </span>\n      {count >= 1 ? (\n        <span\n          className={`text-sm fint-bold ${active === true ? \"text-white\" : \"\"}`}\n        >\n          {count}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\nconst NoSession = () => {\n  return (\n    <div className=\"my-5\">\n      <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n        <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n        <div className=\"text-center flex flex-col\">\n          <span className=\"text-2xl md:text-4xl font-extrabold\">\n            No session available\n          </span>\n          <span className=\"text-lg\">\n            Please Wait for the system to publish the sessions or contact the\n            administrator\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NoSession;\n","import React from \"react\";\n\ntype TableLoadingProps = {\n  cols: number;\n};\nconst TableLoading: React.FC<TableLoadingProps> = (props) => {\n  const displayCols = (): JSX.Element[] => {\n    let colsArray: number[] = [];\n    for (let index = 0; index < props.cols; index++) {\n      colsArray.push(index);\n    }\n    let result = colsArray.map((element) => {\n      return (\n        <td className=\"p-3 text-center whitespace-nowrap\" key={element}>\n          <div className=\"w-full h-4 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </td>\n      );\n    });\n\n    return result;\n  };\n  return (\n    <>\n      <tr className=\"border-b border-gray-200\" key={228}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={22648}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={229768}>\n        {displayCols()}\n      </tr>\n    </>\n  );\n};\n\nexport default TableLoading;\n","import React from \"react\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport { RiFileExcel2Fill } from \"react-icons/ri\";\n\ninterface ExportToExcelProps {\n  fileData: any[];\n  fileName: string;\n  btnName?: string;\n  className?: string;\n  showIcon?: boolean;\n}\n\nconst ExportToExcel: React.FC<ExportToExcelProps> = ({\n  fileData,\n  fileName,\n  btnName = \"Excel\",\n  className = \"flex items-center gap-1 px-4 py-1 rounded text-green-700 bg-white border hover:text-white hover:bg-green-700 border-green-700 font-bold\",\n  showIcon = true,\n}) => {\n  const fileType =\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n  const fileExtension = \".xlsx\";\n\n  const exportToCSV = (apiData: any[], fileName: string) => {\n    const ws = XLSX.utils.json_to_sheet(apiData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  return (\n    <button\n      onClick={(e) => exportToCSV(fileData, fileName)}\n      className={className}\n    >\n      {showIcon && <RiFileExcel2Fill />}\n      {btnName}\n    </button>\n  );\n};\n\nexport default ExportToExcel;\n","export default __webpack_public_path__ + \"static/media/mineduc.11a9ae1c.png\";","import jsPDF from \"jspdf\";\nimport { DATE } from \"../../utils/functions\";\nimport Logo from \"../../utils/mineduc.png\";\nrequire(\"jspdf-autotable\");\n\nexport const addFooters = (doc: any) => {\n  const pageCount = doc.internal.getNumberOfPages();\n\n  doc.setFont(\"helvetica\", \"italic\");\n  doc.setFontSize(8);\n  for (var i = 1; i <= pageCount; i++) {\n    doc.setPage(i);\n    doc.text(\n      \"Page \" + String(i) + \" of \" + String(pageCount),\n      doc.internal.pageSize.width / 2,\n      297,\n      {\n        align: \"center\",\n      }\n    );\n  }\n};\n\nexport type reportSettingsInterface = {\n  doneBy: string;\n  title: string;\n  subjectTitle: string;\n  subject: string;\n  institute: string;\n  period: string;\n  footer: string;\n  orientation?: \"p\" | \"l\";\n};\n\nexport const generatePDF = async (\n  reportSettings: reportSettingsInterface,\n  table: HTMLElement,\n  callBack: (status: boolean) => void\n) => {\n  callBack(true);\n  const orientation: \"p\" | \"l\" = reportSettings.orientation\n    ? reportSettings.orientation\n    : \"p\";\n  var lMargin: number = 20; //left margin in mm\n  var rMargin: number = 20; //right margin in mm\n  var pdfInMM: number = 185; // width of A4 in mm\n\n  //   var doc = new jsPDF(\"p\", \"mm\", \"a4\");\n  var doc: any = new jsPDF(orientation, \"mm\", \"a4\");\n\n  doc.setTextColor(95, 95, 95);\n  doc.setFontSize(28);\n  // doc.text(\n  //   this.props.reportTitle,\n  //   doc.internal.pageSize.getWidth() / 2,\n  //   30,\n  //   undefined,\n  //   \"center\"\n  // );\n  doc.addImage(Logo, \"png\", 20, 20, 10, 10);\n  doc.text(\"MINEDUC\", 32, 28.5, undefined, \"left\");\n  //   doc.setTextColor(19, 90, 152);\n  doc.setFontSize(26);\n  doc.text(\n    reportSettings.title,\n    doc.internal.pageSize.getWidth() / 2,\n    42.7,\n    undefined,\n    \"center\"\n  );\n\n  doc.setFontSize(20);\n  doc.text(\n    reportSettings.institute,\n    doc.internal.pageSize.getWidth() / 2,\n    53.7,\n    undefined,\n    \"center\"\n  );\n\n  var lines;\n  lines = doc.splitTextToSize(\n    reportSettings.subject,\n    pdfInMM - lMargin - rMargin\n  );\n  // if (reportSettings.position) {\n  // } else if (reportSettings.subject) {\n  //   lines = doc.splitTextToSize(\n  //     reportSettings.subject,\n  //     pdfInMM - lMargin - rMargin\n  //   );\n  // }\n\n  //   doc.setTextColor(0, 123, 255);\n  doc.setFontSize(16);\n  //   doc.text(lines, doc.internal.pageSize.getWidth() / 2, 45, {\n  //     maxWidth: 85,\n  //     align: \"center\",\n  //   });\n\n  var y = 63,\n    width;\n  doc.setTextColor(95, 95, 95);\n  doc.text(`${reportSettings.subjectTitle}: `, lMargin, y);\n  width = doc.getTextWidth(`${reportSettings.subjectTitle}: `);\n  // if (reportSettings.position) {\n  // } else if (reportSettings.position) {\n  //   doc.text(`Subject: `, lMargin, y);\n  //   width = doc.getTextWidth(\"Subject: \");\n  // }\n  // doc.setFontType(\"bold\");\n  doc.setTextColor(38, 38, 38);\n  for (var i = 0; i < lines.length; i++) {\n    if (y > 280) {\n      y = 10;\n      doc.addPage();\n    }\n    // doc.text(15, y, lines[i]);\n    doc.text(lines[i], lMargin + width, y);\n    y = y + 7;\n  }\n  doc.setTextColor(95, 95, 95);\n  doc.text(\"Period: \", lMargin, y + 3);\n  width = doc.getTextWidth(\"Period: \");\n  doc.setTextColor(38, 38, 38);\n  doc.text(reportSettings.period, lMargin + width, y + 3);\n\n  doc.autoTable({\n    html: table,\n    startY: 85,\n    margin: { horizontal: 20 },\n    cellPadding: 3, // Horizontal cell padding\n    // fontSize: 12,\n    rowHeight: 20,\n    // styles: { overflow: \"linebreak\" },\n    bodyStyles: { valign: \"top\" },\n    columnStyles: { email: { cellWidth: \"wrap\" } },\n    theme: \"striped\",\n    tableWidth: true,\n  });\n\n  doc.setFontSize(12);\n  let finalY = doc.lastAutoTable.finalY; // The y position on the page\n  doc.text(`Reported by: ${reportSettings.doneBy}`, lMargin, finalY + 15);\n  doc.text(\n    \"Report downloaded on \" + DATE(new Date().toString()),\n    lMargin,\n    finalY + 23\n  );\n\n  addFooters(doc);\n  await doc\n    .save(\n      `${\n        reportSettings.title +\n        \": \" +\n        reportSettings.subject +\n        \": \" +\n        reportSettings.period\n      }.pdf`,\n      { returnPromise: true }\n    )\n    .then(callBack(false));\n};\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, DocumentClaimUser } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import React, { useState } from \"react\";\nimport {\n  MdCheckCircle,\n  MdRadioButtonUnchecked,\n  MdSearch,\n} from \"react-icons/md\";\nimport Loading from \"../../components/Loading/Loading\";\nimport {\n  PlansInterface,\n  SessionPlanInterface,\n  SessionPlanTypeStatus,\n} from \"../../interfaces\";\nimport { DATE } from \"../../utils/functions\";\nimport searchData from \"../../utils/search\";\n\nexport const isPlansActive = (plans: PlansInterface[]): PlansInterface[] => {\n  let today = new Date();\n  let activePlans: PlansInterface[] = [];\n  for (let plan of plans) {\n    let startDate = new Date(plan.start_date);\n    let endDate = new Date(plan.end_date);\n    if (\n      startDate.getTime() <= today.getTime() &&\n      endDate.getTime() >= today.getTime() &&\n      plan.type_status === SessionPlanTypeStatus.OPEN\n    ) {\n      activePlans = [...activePlans, plan];\n    }\n  }\n  return activePlans;\n};\n\ninterface ChooseSessionProps {\n  allSession: SessionPlanInterface[] | null;\n  setSelectSession: (period: SessionPlanInterface | \"all\") => void;\n  currentSelected: SessionPlanInterface | \"all\";\n  chooseAll: boolean;\n}\n\nconst ChooseSession = (props: ChooseSessionProps) => {\n  const [selectedPlan, setSelectedPlan] = useState<SessionPlanInterface | null>(\n    null\n  );\n  const [search, setSearch] = useState<string>(\"\");\n  const getSearch = (\n    period: SessionPlanInterface[],\n    searched: string\n  ): SessionPlanInterface[] => {\n    return searchData(period, searched) as SessionPlanInterface[];\n  };\n\n  return (\n    <div className=\"\">\n      <div className=\"px-3\">\n        <input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setSearch(e.target.value)\n          }\n          type=\"text\"\n          className=\"py-3 px-4 w-full rounded border border-gray-400 mb-3\"\n          placeholder=\"Search by year, name\"\n          disabled={props.allSession === null || props.allSession.length === 0}\n        />\n      </div>\n\n      <div className=\"bg-gray-100 px-3 pt-3 pb-2 rounded-b\">\n        {props.allSession === null ? (\n          <Loading />\n        ) : props.allSession.length === 0 ? (\n          <div className=\"flex flex-col text-gray-400 items-center justify-center mb-2 bg-white py-4\">\n            <MdSearch className=\"text-6xl\" />\n            <div className=\"flex flex-col items-center justify-center\">\n              <span>No session found!</span>\n            </div>\n          </div>\n        ) : (\n          <section>\n            {props.chooseAll && (\n              <div\n                className={`rounded border ${\n                  props.currentSelected === \"all\"\n                    ? \"bg-blue-50 border-blue-300\"\n                    : \"bg-white border-white \"\n                } group hover:border-blue-500 px-2 py-2 mb-2 flex flex-col md:flex-row items-start md:items-center md:justify-between`}\n              >\n                <div className=\"flex flex-row items-center gap-3\">\n                  {props.currentSelected === \"all\" ? (\n                    <MdCheckCircle className={`text-blue-500 text-4xl`} />\n                  ) : (\n                    <MdRadioButtonUnchecked\n                      className={`text-gray-300 text-4xl`}\n                    />\n                  )}\n                  <div className=\"flex flex-col\">\n                    <div className={`text-gray-600 font-bold`}>All session</div>\n                  </div>\n                </div>\n                <div\n                  onClick={() => {\n                    props.setSelectSession(\"all\");\n                  }}\n                  className=\"bg-gray-50 group-hover:bg-blue-600 font-semibold text-gray-400 group-hover:text-white rounded px-3 py-2 cursor-pointer\"\n                >\n                  Select\n                </div>\n              </div>\n            )}\n            {getSearch(props.allSession, search).map((item, i) => (\n              <div\n                key={i + 1}\n                className={`rounded border ${\n                  props.currentSelected !== \"all\" &&\n                  props.currentSelected.session_plan_id === item.session_plan_id\n                    ? \"bg-blue-50 border-blue-300\"\n                    : \"bg-white border-white \"\n                } group hover:border-blue-500 px-2 py-2 mb-2`}\n              >\n                <div className=\"flex flex-col md:flex-row items-start md:items-center md:justify-between \">\n                  <div className=\"flex flex-row items-center gap-3\">\n                    {props.currentSelected !== \"all\" &&\n                    props.currentSelected.session_plan_id ===\n                      item.session_plan_id ? (\n                      <MdCheckCircle className={`text-blue-500 text-4xl`} />\n                    ) : (\n                      <MdRadioButtonUnchecked\n                        className={`text-gray-300 text-4xl`}\n                      />\n                    )}\n                    <div className=\"flex flex-col\">\n                      <div\n                        className={`${\n                          props.currentSelected !== \"all\" &&\n                          props.currentSelected.session_plan_id ===\n                            item.session_plan_id\n                            ? \"text-blue-600\"\n                            : \"text-gray-600\"\n                        } font-bold`}\n                      >\n                        {item.session_plan_name}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        <span>Status: </span>\n                        <span\n                          className={`${\n                            item.is_active === true\n                              ? \"text-gray-900 font-bold underline\"\n                              : \"text-gray-500 italic\"\n                          }`}\n                        >\n                          {item.is_active === true ? \"Active\" : \"Expired\"}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row items-center gap-2\">\n                    {(selectedPlan === null ||\n                      selectedPlan.session_plan_id !==\n                        item.session_plan_id) && (\n                      <div\n                        onClick={() => setSelectedPlan(item)}\n                        className=\"bg-gray-50 group-hover:bg-blue-100 font-semibold text-gray-400 group-hover:text-blue-600 rounded px-3 py-2 cursor-pointer\"\n                      >\n                        Details\n                      </div>\n                    )}\n                    <div\n                      onClick={() => {\n                        props.setSelectSession(item);\n                      }}\n                      className=\"bg-gray-50 group-hover:bg-blue-600 font-semibold text-gray-400 group-hover:text-white rounded px-3 py-2 cursor-pointer\"\n                    >\n                      Select\n                    </div>\n                    {selectedPlan !== null &&\n                      selectedPlan.session_plan_id === item.session_plan_id && (\n                        <div\n                          onClick={() => setSelectedPlan(null)}\n                          className=\"bg-red-100 group-hover:bg-red-200 font-semibold text-red-600 group-hover:text-red-800 rounded px-3 py-2 cursor-pointer\"\n                        >\n                          Close\n                        </div>\n                      )}\n                  </div>\n                </div>\n                {selectedPlan !== null &&\n                  selectedPlan.session_plan_id === item.session_plan_id && (\n                    <div className=\"bg-white rounded border border-blue-50 mt-2 animate__animated animate__fadeIn\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-blue-50\">\n                          <tr className=\"text-left\">\n                            <th className=\"px-3 py-3\">#</th>\n                            <th>Plan</th>\n                            <th>Start date</th>\n                            <th>Ending date</th>\n                            <th>Status</th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"text-sm\">\n                          {selectedPlan !== null &&\n                            selectedPlan.session_plan_id ===\n                              item.session_plan_id &&\n                            selectedPlan.plans.length > 0 &&\n                            item.plans.map((plan, i) => (\n                              <tr\n                                key={i + 1}\n                                className={`${\n                                  isPlansActive(item.plans).find(\n                                    (itm) => itm.type_key === plan.type_key\n                                  ) !== undefined\n                                    ? \"bg-blue-100 text-blue-600 font-bold\"\n                                    : \"\"\n                                } text-left border-b border-blue-50`}\n                              >\n                                <td className=\"px-3 py-1\">{i + 1}</td>\n                                <td>{plan.type_title}</td>\n                                <td>{DATE(plan.start_date, \"DD/MM/YYYY\")}</td>\n                                <td>{DATE(plan.end_date, \"DD/MM/YYYY\")}</td>\n                                <td>{plan.type_status}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n              </div>\n            ))}\n          </section>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ChooseSession);\n","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { IoHandLeftSharp } from \"react-icons/io5\";\nimport {\n  compareWithToday,\n  ExamDoneDetailsAnswers,\n} from \"../../containers/CandidateExams/CandidateExams\";\nimport { PlansTypeKeys } from \"../../interfaces\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { DATE } from \"../../utils/functions\";\nimport ClaimFormComponent from \"../ClaimForm/ClaimFormComponent\";\nimport { AnswersDetails } from \"./AnswersDetails\";\n\ninterface CandidateAnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n}\n\nconst CandidateAnswersDetails = (props: CandidateAnswersDetailsProps) => {\n  const today = moment().tz(TimeZone);\n  let tomorrow = new Date();\n  tomorrow.setDate(today.date() + 1);\n  const [claim, setClaim] = useState<boolean>(false);\n  return (\n    <div>\n      {/* Check if period is open for claims */}\n      {compareWithToday(today, props.exam_id.exam_date) === false ? (\n        <div className=\"bg-yellow-100 text-yellow-800 font-extrabold text-center flex flex-col items-center justify-center text-lg px-2 py-6\">\n          <div className=\"mb-5 text-3xl\">\n            Please wait, the exam details will be visible soon!\n          </div>\n          <div className=\"text-gray-600\">Exam details will be visible from</div>\n          <div className=\"bg-white rounded-full px-3 py-1 text-gray-700\">\n            {DATE(tomorrow.toString())}\n          </div>\n        </div>\n      ) : claim === false ? (\n        <div className=\"mb-20\">\n          <AnswersDetails\n            exam_id={props.exam_id}\n            showAnswers={props.showAnswers}\n          />\n          {/* <div\n            onClick={() => setClaim(true)}\n            className=\"bg-blue-100 flex flex-row items-center px-3 py-2 -mt-10\"\n          >\n            <div className=\"btn bg-green-600 text-white text-center w-max px-6 text-2xl flex flex-row item-center justify-center gap-3 cursor-pointer\">\n              <IoHandLeftSharp className=\"text-3xl \" />{\" \"}\n              <span>Exam marks Claim</span>\n            </div>\n          </div> */}\n        </div>\n      ) : (\n        <div className=\"bg-gray-100 mt-4 pt-2 rounded\">\n          <ClaimFormComponent\n            setFormState={setClaim}\n            claim_type={PlansTypeKeys.EXAMINATION}\n            file_id={props.exam_id.exam_id}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CandidateAnswersDetails;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getAllClaims,\n    PushPopupAlert,\n  })(AdminFilterByType)\n);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(\n    sessions.filter((item) => item.session_plan_id === period_id)[0]\n  );\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod.session_plan_id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option\n                key={session.session_plan_id + item}\n                value={session.session_plan_id}\n              >\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default React.memo(ClaimHeaderTitle);\n","import React, { Component, Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  applicationPeriodsStoreInterface,\n  InitialExamDetails,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI, PositionAPICourse } from \"../../interfaces\";\nimport {\n  ApplicationPeriodGet,\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\nimport { MdClose } from \"react-icons/md\";\nimport ChooseExamCenter, {\n  LocationTableInterface,\n} from \"../Application/ExamCenter/ChooseExamCenter\";\nimport { sentExamInterface } from \"../Application/ExamCenter/ExamCenter\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\nimport { RoomType } from \"../../interfaces/location\";\n\nexport const compareWithToday = (tooday: moment.Moment, date: string) => {\n  const myDate = DATE(date, \"MM/DD/YYYY\");\n  let todayConverted =\n    (tooday.get(\"month\") < 9 ? \"0\" : \"\") +\n    (tooday.get(\"month\") + 1).toString() +\n    \"/\" +\n    tooday.get(\"date\") +\n    \"/\" +\n    tooday.get(\"year\");\n  if (new Date(myDate).getTime() < new Date(todayConverted).getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport interface ExamDoneDetailsAnswers {\n  exam_id: string;\n  course: string;\n  course_name: string;\n  discription: string;\n  termes: string;\n  rules: {\n    right_click_enabled: boolean;\n    copy_enabled: boolean;\n    paste_enabled: boolean;\n    stop_candidate_when_comeback: boolean;\n    allow_to_leave_browser: boolean;\n  };\n  period: string;\n  exam_date: string;\n}\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface changeLocProps {\n  changeLocation: () => void;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (selected_exam: InitialExamDetails | null) => void; // Not used\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\n\nconst ChangeLocationComponent = (props: changeLocProps): JSX.Element => {\n  const [display, setDisplay] = useState<boolean>(true);\n  if (display === false) {\n    return <div></div>;\n  }\n  return (\n    <div className=\"absolute right-2 left-2 md:right-1/4 md:left-1/4 lg:left-1/2 lg:right-auto bg-yellow-50 shadow-xl rounded py-1 px-1 flex flex-row justify-between items-center gap-2 text-yellow-800 -mt-5 lg:-mt-8\">\n      <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-1\">\n        <span className=\"font-bold\">You are advised to change location</span>\n        <div\n          onClick={props.changeLocation}\n          className=\"px-2 py-1 rounded bg-blue-100 text-blue-600 w-max cursor-pointer\"\n        >\n          Change\n        </div>\n      </div>\n      <div\n        onClick={() => setDisplay(false)}\n        className=\"bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center p-1 h-8 w-8 cursor-pointer\"\n      >\n        <MdClose className=\"text-4xl\" />\n      </div>\n    </div>\n  );\n};\n\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  loadingExamsDone: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n  selectedCourse: course | null;\n  centersModal: boolean;\n  maxExamModal: boolean;\n  selectedPosition: string;\n  successMessage: string;\n  selectedExam: ExamDoneDetailsAnswers | null;\n  doing_exam: boolean;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingExamsDone: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n      selectedCourse: null,\n      centersModal: false,\n      maxExamModal: false,\n      selectedPosition: \"\",\n      successMessage: \"\",\n      selectedExam: null,\n      doing_exam: false,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setloadingExamsDone = (status: boolean) => {\n    this.setState({ loadingExamsDone: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      // console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setLoading(true);\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setLoading(false);\n        } else {\n          this.setLoading(true);\n        }\n      }\n    );\n  };\n\n  InitializationFn = (\n    application: GetApplicationsAPI,\n    item: UserExamsListInterface\n  ) => {\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          if (\n            application.application_status === ApplicationStates.Shortlisted\n          ) {\n            // Select exam\n            this.props.setSelectedPosition(application.position);\n            this.props.setSelectedCourse(\n              application.position.courses.find(\n                (itm) => itm.course_id === item.course\n              )!\n            );\n            this.setState({ doing_exam: true });\n            return (\n              this.props.periods.selected_period &&\n              this.props.InitializeExamDetails(\n                application.application_session.session_plan_id,\n                course.course_id,\n                center_id.district_id,\n                center_id.center_id,\n                center_id.room_id,\n                application.position,\n                true,\n                this.setLoading\n              )\n            );\n          } else {\n            alert(\"Corresponding application is not shortlisted!\");\n          }\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.props.LoadCandidateApplications(\n      this.props.auth.user.user_id,\n      this.setLoading\n    );\n  };\n  findLocation = (position_id: string, course_id: string) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      const test = this.props.candidateApplications.candidate_applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.exams.filter((itm) => itm.course_id === course_id) &&\n          item.application_session.session_plan_id ===\n            this.props.auth.application_session?.session_plan_id\n      );\n      if (test !== undefined) {\n        let course = test.exams.find((itm) => itm.course_id === course_id);\n        if (course !== undefined) {\n          return course;\n        }\n      }\n    }\n    return null;\n  };\n  updateLocation = async (\n    application_id: string,\n    exams: sentExamInterface[]\n  ) => {\n    this.setState({ loading: true });\n    for (let i in exams) {\n      try {\n        const res = await axios.post(\n          `${API.APPLICATION}/application/updatemissed`,\n          {\n            application_id: application_id,\n            exams: exams[i],\n          }\n        );\n        if (res.status === 200) {\n          this.setState({\n            selectedCourse: null,\n            centersModal: false,\n            maxExamModal: false,\n            selectedPosition: \"\",\n            successMessage: \"Location updated successfully!\",\n          });\n          this.loadUserApplications();\n        }\n      } catch (error: any) {\n        console.log(\"Update loc err: \", { ...error });\n      }\n    }\n  };\n  updateLocationFunction = (exams: sentExamInterface[]) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      let application =\n        this.props.candidateApplications.candidate_applications.find(\n          (item) =>\n            item.position.position_id === this.state.selectedPosition &&\n            item.application_session.session_plan_id ===\n              this.props.auth.application_session?.session_plan_id\n        );\n      if (application !== undefined) {\n        this.updateLocation(application.application_id, exams);\n      } else {\n        alert(\"Invalid application\");\n      }\n    } else {\n      alert(\"Missing application\");\n    }\n  };\n  addLocation = (\n    course_id: string,\n    course_name: string,\n    course_code: string,\n    location: LocationTableInterface,\n    exam_id: string\n  ) => {\n    return this.updateLocationFunction([\n      {\n        course_id: course_id,\n        proctoring_type:\n          location.rooms.find((itm) => itm.room_type === RoomType.Virtual) !==\n          undefined\n            ? RoomType.Virtual\n            : RoomType.Physical,\n        center_id: location.center_id,\n        district_id: location.district_id,\n      },\n    ]);\n  };\n  componentDidMount = () => {\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session?.session_plan_id\n        : this.props.periods.selected_period.session_plan_id;\n\n    if (\n      this.props.auth.application_session !== null &&\n      this.state.candidateExams === null\n    ) {\n      this.loadCandidateExams(\n        this.props.auth.user.user_id,\n        this.props.auth.application_session.session_plan_id\n      );\n    }\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (this.props.periods.applicationPeriods === null) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.candidateApplications.candidate_applications === null) {\n      this.loadUserApplications();\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm._id === item._id) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm.course === item.course) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string,\n    selected_period: ApplicationPeriodGet | null\n  ): GetApplicationsAPI | null => {\n    if (applications !== null && selected_period !== null) {\n      let temp = applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.application_session.session_plan_id ===\n            selected_period.session_plan_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  setMaxExamModal = (status: boolean) => {\n    this.setState({ maxExamModal: status });\n  };\n\n  changeLocation = (item: PositionAPICourse) => {\n    this.setState({ selectedCourse: item, centersModal: true });\n    this.setMaxExamModal(true);\n  };\n\n  closeModal = () => {\n    this.setState({ centersModal: false });\n    this.setMaxExamModal(false);\n  };\n\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session\n        : this.props.periods.selected_period;\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (\n      this.props.candidateExam.selected_exam_id !== null &&\n      this.props.candidateExam.selected_exam_details !== null &&\n      (this.props.candidateExam.doing_exam === true ||\n        this.state.doing_exam === true)\n    ) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.selectedCourse === null ? (\n          <div className=\"mt-2 -ml-2 mr-3 pb-5\">\n            <div className=\"rounded mt-2\">\n              <div className=\"flex flex-row items-center gap-3\">\n                <Link\n                  to=\"/apps-page\"\n                  title=\"Back to menus\"\n                  className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n                >\n                  <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n                </Link>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-3xl\">My exams</span>\n                  <span className=\"text-gray-600 text-sm\">\n                    List of exams for curent session:{\" \"}\n                    <span className=\"font-bold text-bold text-blue-600\">\n                      {this.props.auth.application_session?.session_plan_name}\n                    </span>\n                  </span>\n                </div>\n              </div>\n            </div>\n            {this.state.successMessage !== \"\" && (\n              <div\n                title=\"Click to close the message\"\n                onClick={() => this.setState({ successMessage: \"\" })}\n                className=\"animate__animated animate__zoomIn px-3 py-2 bg-green-500 text-white my-2 rounded cursor-pointer\"\n              >\n                {this.state.successMessage}\n              </div>\n            )}\n            {console.log(\"Not found: \", this.state.candidateExams)}\n            {this.state.loading === true ||\n            this.state.loadingExamsDone === true ||\n            this.state.candidateExams === null ||\n            this.props.candidateApplications.candidate_applications == null ? (\n              <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n                <Loading />\n              </div>\n            ) : this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).length === 0 ? (\n              <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n                No exams found\n              </div>\n            ) : (\n              this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).map((item, i) => (\n                <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div>\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                          <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                            Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-gray-100 underline text-gray-500  font-bold rounded-full px-2\">\n                            Start time: {item.start_time}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-blue-100 text-blue-900  font-bold rounded-full px-2\">\n                            Status: {item.user_status}\n                          </div>\n                        </div>\n                        {this.findLocation(item.position, item.course) !==\n                          null && (\n                          <div className=\"flex flex-row items-center gap-2 mt-2\">\n                            <div>\n                              Exam center:{\" \"}\n                              <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                {\n                                  this.findLocation(item.position, item.course)\n                                    ?.center_name\n                                }\n                              </span>\n                            </div>\n                            <div className=\"w-max flex flex-col md:flex-row\">\n                              Room number:{\" \"}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 ? (\n                                <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                  Waiting room\n                                </span>\n                              ) : (\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.room_number\n                                  }\n                                </span>\n                              )}\n                              {/* Change loc */}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 &&\n                                validateExamDate(\n                                  item.exam_date,\n                                  item.start_time,\n                                  item.end_time\n                                ) !== ExamTimeStatus.Expired && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"lg:w-full flex flex-row items-center justify-end\">\n                      {this.state.activeExams.find(\n                        (itm) => itm === item._id\n                      ) !== undefined ||\n                      item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Paused ? (\n                        validateExamDate(\n                          item.exam_date,\n                          item.start_time,\n                          item.end_time\n                        ) !== ExamTimeStatus.Expired ? (\n                          this.selectApplication(\n                            this.props.candidateApplications\n                              .candidate_applications,\n                            item.position,\n                            item.course,\n                            selPeriod\n                          )?.application_status !==\n                          ApplicationStates.Shortlisted ? (\n                            <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                              Not shortlisted\n                            </div>\n                          ) : (\n                            <div\n                              onClick={() => {\n                                let application = this.selectApplication(\n                                  this.props.candidateApplications\n                                    .candidate_applications,\n                                  item.position,\n                                  item.course,\n                                  selPeriod\n                                );\n                                if (application !== null) {\n                                  this.InitializationFn(application, item);\n                                } else {\n                                  alert(\"Invalid exam!\");\n                                }\n                              }}\n                              className={`${\n                                item.user_status === UserExamStatus.Editing ||\n                                item.user_status === UserExamStatus.Paused\n                                  ? \"bg-green-600 group-hover:bg-green-800\"\n                                  : \"bg-blue-600 group-hover:bg-blue-800\"\n                              } btn  text-white cursor-pointer w-max`}\n                            >\n                              {item.user_status === UserExamStatus.Editing\n                                ? \"Back to Exam\"\n                                : item.user_status === UserExamStatus.Paused\n                                ? \"Paused, back to exam\"\n                                : \"Start Exam\"}\n                            </div>\n                          )\n                        ) : item.user_status === UserExamStatus.Editing ||\n                          item.user_status === UserExamStatus.Done ||\n                          item.user_status === UserExamStatus.Paused ||\n                          item.user_status === UserExamStatus.Removed ? (\n                          <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                            <span>Marks</span>\n                            <span className=\"text-2xl font-extrabold -mt-2\">\n                              {item.user_marks.toFixed(\n                                item.user_marks === 100 || item.user_marks === 0\n                                  ? 0\n                                  : 2\n                              )}\n                              %\n                            </span>\n                            <div\n                              onClick={() =>\n                                this.setState({\n                                  selectedExam: {\n                                    course: item.course,\n                                    course_name: item.course_name,\n                                    discription: item.discription,\n                                    termes: item.termes,\n                                    rules: item.rules,\n                                    period: item.period,\n                                    exam_date: item.exam_date,\n                                    exam_id: item._id,\n                                  },\n                                })\n                              }\n                              className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                            >\n                              Check details\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                            Expired\n                          </div>\n                        )\n                      ) : item.found === false ? (\n                        <div\n                          title=\"Please wait for the exam time\"\n                          className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                        >\n                          <CountDown\n                            start_time={new Date(today.toString()).toString()}\n                            duration_min={getMinutesFromTwoDates(\n                              new Date(today.toString()),\n                              new Date(\n                                DATE(item.exam_date, \"MM/DD/YYYY\") +\n                                  \" \" +\n                                  item.start_time\n                              )\n                            )}\n                            timeout={() => this.setTimeOut(item._id)}\n                            returnString={true}\n                            labels={true}\n                            days\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                          <span>Marks</span>\n                          <span className=\"text-2xl font-extrabold -mt-2\">\n                            {item.user_marks.toFixed(\n                              item.user_marks === 100 || item.user_marks === 0\n                                ? 0\n                                : 2\n                            )}\n                            %\n                          </span>\n                          <div\n                            onClick={() =>\n                              this.setState({\n                                selectedExam: {\n                                  course: item.course,\n                                  course_name: item.course_name,\n                                  discription: item.discription,\n                                  termes: item.termes,\n                                  rules: item.rules,\n                                  period: item.period,\n                                  exam_date: item.exam_date,\n                                  exam_id: item._id,\n                                },\n                              })\n                            }\n                            className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                          >\n                            Check details\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {/* Not prepared exams */}\n            {this.state.candidateExams !== null &&\n              this.state.loading !== true &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).length > 0 &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).map((item, i) => (\n                <div\n                  key={i + 1}\n                  className=\"my-2 rounded bg-white p-2 py-3 group\"\n                >\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div className=\"\">\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-base text-gray-600 font-bold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                          {this.findLocation(item.position, item.course) !==\n                            null && (\n                            <div className=\"flex flex-row items-center gap-2 mt-2\">\n                              <div className=\"flex flex-col md:flex-row md:items-center\">\n                                Exam center:{\" \"}\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.center_name\n                                  }\n                                </span>\n                              </div>\n                              <div className=\"w-max flex flex-col md:flex-row md:items-center\">\n                                Room number:{\" \"}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 ? (\n                                  <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                    Waiting room\n                                  </span>\n                                ) : (\n                                  <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                    {\n                                      this.findLocation(\n                                        item.position,\n                                        item.course\n                                      )?.room_number\n                                    }\n                                  </span>\n                                )}\n                                {/* Change loc */}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                      Not prepared\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : this.state.loading === true ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : (\n          <div className=\"animate__animated animate__fadeInUp animate__faster mt-2 mr-1 -ml-3 rounded-t-md bg-white shadow-md pb-5\">\n            <div className=\"flex flex-row gap-4 items-center justify-between bg-blue-100 py-2 px-2 mb-2\">\n              <div className=\"flex flex-col w-full\">\n                <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-2\">\n                  <span className=\"font-bold text-xl text-gray-800\">\n                    Change exam location\n                  </span>\n                  <div className=\"bg-white hover:text-yellow-700 hover:bg-white rounded-full p-1 h-10 w-10 border-2 border-white hover:border-yellow-600 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => {\n                        this.setState({\n                          centersModal: false,\n                          selectedCourse: null,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ChooseExamCenter\n              positionCourses={this.state.selectedCourse}\n              addLocation={this.addLocation}\n              closeModal={this.closeModal}\n              changeProctoring={true}\n            />\n          </div>\n        )}\n        {this.state.selectedExam !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600 px-2\">\n                Exam result details\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectedExam: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <CandidateAnswersDetails\n              exam_id={this.state.selectedExam}\n              showAnswers={false}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    periods: periods,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n","import React, { Component } from \"react\";\nimport { MdAdd, MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport search from \"../../../utils/search\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  // console.log(\"====================================\");\n  // console.log({ claimList, claim_id });\n  // console.log(\"====================================\");\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getClaimReasons: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  searchClaim: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n      searchClaim: \"\",\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  setSearchClaim = (value: string) => {\n    this.setState({ searchClaim: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n      this.loadExamAnswers(\n        thisSession ? thisSession : sessions[0],\n        this.props.auth.user.user_id\n      );\n    }\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan.session_plan_id,\n      user_id,\n      (status: boolean, msg: string, data: SessionPlanInterface | \"none\") => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n    if (this.props.claiming.claimReasons === null) {\n      this.props.getClaimReasons((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status) {\n          if (msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => {\n                this.setClaimForm(true);\n                // alert(\"clicked\");\n              }}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            {/* FILTER FORM =================================== */}\n            <section className=\"flex flex-col-reverse sm:flex-row items-center gap-2 w-full my-2\">\n              <div className=\"w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setSearchClaim(e.target.value)\n                  }\n                  type=\"text\"\n                  className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500 w-full\"\n                  placeholder={`Search claim by title or type`}\n                  value={this.state.searchClaim}\n                  disabled={\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ).length > 0\n                      ? false\n                      : true\n                  }\n                />\n              </div>\n            </section>\n            {/* END FILTER FORM =================================== */}\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim level</td>\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"Nothing found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).map((claim: CandidateClaimInterface, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {claim.title}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap italic\">\n                        Level {claim.claim_level}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.PLACEMENT_TRANSFER && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Placement not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  getClaimReasons,\n  loadCourses,\n  getMyPlacement,\n  getMyAnswers,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline, MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { DATE, errorToText, showDate } from \"../../utils/functions\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span\n              className=\"font-normal\"\n              dangerouslySetInnerHTML={{\n                __html: props.thisClaim.previous.reason,\n              }}\n            ></span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {props.thisApplication.position.description}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  ClaimStatus,\n  course,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { claimShowAnswer } from \"./Candidate/ExaminationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  claimReasons: claimReasonInterface[] | null;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <CandidateAnswersDetails\n                showAnswers={false}\n                exam_id={claimShowAnswer(\n                  props.thisExamSheet,\n                  props.thisExam.course_name\n                )}\n              />\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.userDetails.user_info.fname +\n                          \" \" +\n                          props.thisClaim.userDetails.user_info.lname\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default React.memo(connect(mapStateToProps, {\n  loadQuestionTypes,\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimPlacementView));\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getMyRejectedApplications,\n    getMyRejectedDocuments,\n    PushPopupAlert,\n  })(FilterByType)\n);\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { BiExport, BiSort } from \"react-icons/bi\";\nimport { FiEdit } from \"react-icons/fi\";\nimport { ImFilesEmpty } from \"react-icons/im\";\nimport {\n  MdCheckBox,\n  MdCheckBoxOutlineBlank,\n  MdHistory,\n  MdRadioButtonChecked,\n  MdRadioButtonUnchecked,\n} from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadEducationCategories,\n  PushPopupAlert,\n  schoolLevelsStoreInterface,\n} from \"../../../actions\";\nimport {\n  getAllClaims,\n  getAllApplications,\n  setSelectedClaimType,\n  GetClaimingTypes,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport {\n  generatePDF,\n  reportSettingsInterface,\n} from \"../../../components/DownloadPDF/rest\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport {\n  SideNavigation,\n  MainItem,\n} from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  claimReportContentInterface,\n  claimReportContentKeyInterface,\n  ClaimToPrintInterface,\n} from \"../../../interfaces/claimings\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport ExportToExcel from \"../../../utils/ExportToExcel\";\nimport { DATE, sortThisArray } from \"../../../utils/functions\";\nimport { ClaimTypesEnum, whichClaimType } from \"../../Claimings/Candidate\";\nimport TableLoading from \"../../../components/Loading/TableLoading\";\nimport {\n  education_category,\n  PlansTypeKeys,\n  SessionPlanInterface,\n} from \"../../../interfaces\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport {\n  capitalizeFirstLetter,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport ChooseSession from \"../../SessionSettings/ChooseSession\";\nimport NoSession from \"../../SessionSettings/NoSession\";\n\nexport const reportClaimType = (\n  type: PlansTypeKeys | \"all\"\n): ClaimTypesEnum | \"all\" => {\n  let result: ClaimTypesEnum | \"all\" = \"all\";\n  switch (type) {\n    case PlansTypeKeys.APPLICATION:\n      result = ClaimTypesEnum.application;\n      break;\n    case PlansTypeKeys.DOCUMENT_VALIDATION:\n      result = ClaimTypesEnum.document;\n      break;\n    case PlansTypeKeys.EXAMINATION:\n      result = ClaimTypesEnum.exam;\n      break;\n    case PlansTypeKeys.MARKS_PUBLICATION:\n      result = ClaimTypesEnum.marks_publication;\n      break;\n    case PlansTypeKeys.PLACEMENT_TRANSFER:\n      result = ClaimTypesEnum.placement;\n      break;\n    default:\n      result = \"all\";\n      break;\n  }\n\n  return result;\n};\n\nconst searchData = (\n  objList: ClaimToPrintInterface[],\n  text: string\n): ClaimToPrintInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (\n        prop === \"names\" ||\n        prop === \"gender\" ||\n        prop === \"national_id\" ||\n        prop === \"phone\" ||\n        prop === \"email\" ||\n        prop === \"claim_title\" ||\n        prop === \"claim_type\" ||\n        prop === \"claim_level\" ||\n        prop === \"education_category\" ||\n        prop === \"claim_session\" ||\n        prop === \"date\" ||\n        prop === \"decision\"\n      ) {\n        if (product[prop]) {\n          flag =\n            product[prop]!.toString()\n              .toLowerCase()\n              .indexOf(text.toLowerCase()) > -1;\n        }\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n};\n\nconst defaultReportContent: claimReportContentInterface[] = [\n  {\n    key: claimReportContentKeyInterface.names,\n    title: \"Applicant Names\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.national_id,\n    title: \"National ID\",\n    status: true,\n  },\n  { key: claimReportContentKeyInterface.gender, title: \"Gender\", status: true },\n  { key: claimReportContentKeyInterface.phone, title: \"Phone\", status: true },\n  {\n    key: claimReportContentKeyInterface.claim_session,\n    title: \"Claim Session\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.education_category,\n    title: \"Education Institute\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.date,\n    title: \"Claim Date\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.decision,\n    title: \"Decision\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_title,\n    title: \"Claim Title\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_type,\n    title: \"Claim Type\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_level,\n    title: \"Claim Level\",\n    status: true,\n  },\n];\n\ntype AppProps = {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  // systemPositions: PositionAPI[] | null;\n  // courses: course[] | null;\n  schoolLevels: schoolLevelsStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  // loadCourses: Function;\n  // getAllAnswers: Function;\n  setSelectedClaimType: Function;\n  // getPositions: Function;\n  getAllClaims: Function;\n  GetClaimingTypes: Function;\n  // getAllApplications: Function;\n  GetAllSessionPlans: Function;\n  // getDocumentCategory: Function;\n  // getDocumentSubCategory: Function;\n  // getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst _ClaimingReport: React.FC<AppProps> = (props) => {\n  const [thisPeriod, setThisPeriod] = useState<SessionPlanInterface | null>(\n    null\n  );\n  const [thisLevel, setThisLevel] = useState<number | \"all\">(\"all\");\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingSession, setLoadingSession] = useState<boolean>(true);\n  const [periodChanged, setPeriodChanged] = useState<boolean>(false);\n  const [loadingClaims, setLoadingClaims] = useState<boolean>(true);\n  const [loadingInstitutes, setLoadingInstitutes] = useState<boolean>(true);\n  const [downloading, setDownloading] = useState<boolean>(false);\n  const [claimToPrint, setClaimToPrint] = useState<\n    ClaimToPrintInterface[] | null\n  >();\n\n  const [sortProperty, setSortProperty] = useState<string>(\"\");\n  const [isSorted, setIsSorted] = useState<boolean>(false);\n  const [sortOrder, setSortOrder] = useState<\"ASC\" | \"DESC\">(\"ASC\");\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  const [generateReportModal, setGenerateReportModal] = useState<{\n    reportType: \"EXCEL\" | \"PDF\";\n    status: boolean;\n  } | null>(null);\n  const [reportTitle, setReportTitle] = useState<string>(\"\");\n  const [reportContent, setReportContent] =\n    useState<claimReportContentInterface[]>(defaultReportContent);\n  const [selectAll, setSelectAll] = useState<boolean>(true);\n  const [formError, setFormError] = useState<{\n    element: string;\n    msg: string;\n  } | null>(null);\n  const [selectPeriod, setSelectPeriod] = useState<boolean>(false);\n  const [thisEducation, setThisEducation] = useState<\n    education_category | \"all\"\n  >(\"all\");\n\n  useEffect(() => {\n    // LOADING EDUCATION CATEGORY =================================\n    if (\n      props.schoolLevels.education_categories === null ||\n      props.schoolLevels.education_categories.length === 0\n    ) {\n      props.loadEducationCategories(setLoadingInstitutes);\n    } else {\n      setLoadingInstitutes(false);\n    }\n    // END LOADING EDUCATION CATEGORY =================================\n    // LOADING CLAIM TYPES ========================================\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n    // END LOADING CLAIM TYPES ========================================\n    // LOADING APPLICATION SESSION ====================================\n    if (props.application_sessions === null) {\n      props.GetAllSessionPlans((status: boolean, msg: string) => {\n        if (!status) {\n          setLoadingSession(false);\n          setLoading(false);\n          if (msg.length) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    } else if (loadingSession) {\n      setLoading(false);\n      setLoadingSession(false);\n    }\n\n    // SETTING ACTIVE SESSION ==========================\n    if (\n      thisPeriod === null &&\n      !loadingSession &&\n      props.application_sessions &&\n      props.application_sessions.length > 0\n    ) {\n      let thisSession = props.application_sessions.find(\n        (item) => item.is_active === true\n      );\n      setThisPeriod(thisSession ? thisSession : props.application_sessions[0]);\n      // if (props.claiming.allAnswer === null) {\n      //   props.getAllAnswers(\n      //     thisSession\n      //       ? thisSession.session_plan_id\n      //       : props.application_sessions[0].session_plan_id,\n      //     (status: boolean, msg: string) => {\n      //       setLoading(status);\n      //       if (!status && msg.length) {\n      //         props.PushPopupAlert({\n      //           title: msg,\n      //           theme: PopupAlertTheme.danger,\n      //         });\n      //       }\n      //     }\n      //   );\n      // }\n    }\n\n    // LOADING DOCUMENT CATEGORIES ==========================\n    // if (!props.documentReducer.documentCategory && loadingDocuments) {\n    //   props.getDocumentCategory();\n    //   setLoadingDocuments(false);\n    // } else if (loadingDocuments) {\n    //   setLoadingDocuments(false);\n    // }\n    // LOADING DOCUMENT CLARIFICATIONS ==========================\n    // if (!props.documentReducer.documentSubCategory && loadingClarifications) {\n    //   props.getDocumentSubCategory();\n    //   setLoadingClarifications(false);\n    // } else if (loadingClarifications) {\n    //   setLoadingClarifications(false);\n    // }\n    // LOADING DOCUMENT FIELDS ==========================\n    // if (!props.documentReducer.documentFields && loadingFields) {\n    //   props.getDocumentFields();\n    //   setLoadingFields(false);\n    // } else if (loadingFields) {\n    //   setLoadingFields(false);\n    // }\n\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (props.claiming.allClaims === null && thisPeriod !== null) {\n      props.getAllClaims(\n        2,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && setLoadingClaims(status);\n          if (status === false && msg.length) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && loadingClaims) {\n      setLoadingClaims(false);\n    }\n\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    // if (props.claiming.allApplications === null && thisPeriod !== null) {\n    //   props.getAllApplications(\n    //     thisPeriod.session_plan_id,\n    //     (status: boolean, msg: string) => {\n    //       !status && setLoadingApplications(status);\n    //       if (status === false && msg.length) {\n    //         props.PushPopupAlert({\n    //           title: msg,\n    //           theme: PopupAlertTheme.danger,\n    //         });\n    //       }\n    //     }\n    //   );\n    // } else if (thisPeriod && loadingApplications) {\n    //   setLoadingApplications(false);\n    // }\n\n    // if (props.systemPositions === null) {\n    //   props.getPositions((status: boolean, msg: string) => {\n    //     setLoadingPosition(status);\n    //     console.log({ status: status, msg: msg });\n    //     if (msg.length) {\n    //       props.PushPopupAlert({\n    //         title: msg,\n    //         theme: PopupAlertTheme.danger,\n    //       });\n    //     }\n    //   });\n    // } else if (loadingPosition) {\n    //   setLoadingPosition(false);\n    // }\n\n    // LOADING COURSE ====================================\n    // if (\n    //   props.courses === null ||\n    //   (props.courses.length === 0 && loadingCourses)\n    // ) {\n    //   props.loadCourses(setLoadingCourses);\n    // } else if (loadingCourses) {\n    //   setLoadingCourses(false);\n    // }\n  }, [loadingClaims, loadingSession, props, thisPeriod]);\n\n  if (loading === true) {\n    return (\n      <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n        Loading Data...\n      </div>\n    );\n  }\n\n  if (props.application_sessions && props.application_sessions.length === 0) {\n    return <NoSession />;\n  }\n\n  // const displayClaimTitle = (thisClaim: CandidateClaimInterface): string => {\n  //   let result: string = thisClaim.claiming_on_id;\n  //   if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n  //     result =\n  //       thisClaim.userDetails.details.filter(\n  //         (item) => item.validation_status !== \"waiting\"\n  //       ).length > 0\n  //         ? adminDisplayClaimTitle(\n  //             props.documentReducer,\n  //             thisClaim.userDetails.details.filter(\n  //               (item) => item.validation_status !== \"waiting\"\n  //             ),\n  //             thisClaim\n  //           )\n  //         : \"Document not found\";\n  //   }\n  //   if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n  //     if (props.claiming.allApplications) {\n  //       let thisApplication = props.claiming.allApplications.find(\n  //         (item) => item._id === thisClaim.claiming_on_id\n  //       );\n  //       if (\n  //         thisApplication &&\n  //         props.claiming.allApplications &&\n  //         props.systemPositions\n  //       ) {\n  //         let thisPosition = props.systemPositions.find(\n  //           (item) => item.position_id === thisApplication!.position\n  //         );\n  //         if (thisPosition) {\n  //           result = thisPosition.position_title;\n  //         } else {\n  //           result = \"Application not found\";\n  //         }\n  //       }\n  //     }\n  //   }\n\n  //   if (\n  //     thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n  //     props.courses &&\n  //     props.claiming.allAnswer\n  //   ) {\n  //     let thisAnswer = getCourseIdBySheetId(\n  //       props.claiming.allAnswer,\n  //       thisClaim.claiming_on_id\n  //     );\n  //     if (thisAnswer && getCourseById(props.courses, thisAnswer.course)) {\n  //       result =\n  //         \"Exam of \" +\n  //         getCourseById(props.courses, thisAnswer.course)!.course_name;\n  //     } else {\n  //       result = \"Unknown exam\";\n  //     }\n  //   }\n\n  //   return result;\n  // };\n\n  // const getClaimInstitute = (\n  //   thisClaim: CandidateClaimInterface\n  // ): string | null => {\n  //   if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n  //     return null;\n  //   }\n  //   // if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n  //   //   if (props.claiming.allApplications) {\n  //   //     let thisApplication = props.claiming.allApplications.find(\n  //   //       (item) => item._id === thisClaim.claiming_on_id\n  //   //     );\n  //   //     if (\n  //   //       thisApplication &&\n  //   //       props.claiming.allApplications &&\n  //   //       props.systemPositions\n  //   //     ) {\n  //   //       // return thisApplication.\n  //   //       let thisPosition = props.systemPositions.find(\n  //   //         (item) => item.position_id === thisApplication!.position\n  //   //       );\n  //   //       if (thisPosition) {\n  //   //         return thisPosition.education_institute_id.education_institute_id;\n  //   //       }\n  //   //     }\n  //   //   }\n  //   // }\n\n  //   return null;\n  // };\n\n  const onPeriodChange = (period_id: string) => {\n    setPeriodChanged(true);\n    props.getAllClaims(2, period_id, (status: boolean, msg: string) => {\n      !status && setPeriodChanged(false);\n      if (status === false && msg.length) {\n        props.PushPopupAlert({\n          title: msg,\n          theme: PopupAlertTheme.danger,\n        });\n      }\n    });\n  };\n\n  const isClaimTypeActive = (\n    selectedType: PlansTypeKeys | \"all\",\n    currentType: PlansTypeKeys | \"all\"\n  ): boolean => {\n    if (currentType === \"all\" && selectedType === \"all\") {\n      return true;\n    } else if (currentType !== \"all\" && selectedType !== \"all\") {\n      if (currentType === selectedType) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const setSort = (thisProperty: string) => {\n    if (sortProperty === thisProperty && sortOrder === \"ASC\") {\n      setSortOrder(\"DESC\");\n    } else {\n      setSortOrder(\"ASC\");\n    }\n    setSortProperty(thisProperty);\n    setIsSorted(true);\n  };\n\n  const ClaimTypes = (\n    claims: ClaimToPrintInterface[]\n  ): {\n    title: string;\n    count: number;\n    type: PlansTypeKeys | \"all\";\n  }[] => {\n    let output: {\n      title: string;\n      count: number;\n      type: PlansTypeKeys | \"all\";\n    }[] = [{ title: \"All types\", count: claims.length, type: \"all\" }];\n\n    Object.values(PlansTypeKeys).forEach((PlansKey) => {\n      if (PlansKey !== PlansTypeKeys.MARKS_PUBLICATION) {\n        output.push({\n          title: capitalizeFirstLetter(reportClaimType(PlansKey)),\n          count:\n            claims.length > 0\n              ? claims.filter(\n                  (itm) => itm.claim_type === reportClaimType(PlansKey)\n                ).length\n              : 0,\n          type: PlansKey,\n        });\n      }\n    });\n\n    return output;\n  };\n\n  const ClaimLevels = (\n    claims: ClaimToPrintInterface[]\n  ): {\n    title: string;\n    count: number;\n    level: number | \"all\";\n  }[] => {\n    let output: {\n        title: string;\n        count: number;\n        level: number | \"all\";\n      }[] = [{ title: \"All levels\", count: claims.length, level: \"all\" }],\n      levels: number[] = [1, 2];\n    for (let i in levels) {\n      output.push({\n        title: \"Level \" + levels[i],\n        count: claims.filter((itm) => itm.claim_level === levels[i]).length,\n        level: levels[i],\n      });\n    }\n    return output;\n  };\n\n  const updateReportContent = (key: claimReportContentKeyInterface) => {\n    let index: number = reportContent.findIndex((item) => item.key === key);\n    let newArray: claimReportContentInterface[] = reportContent;\n    newArray[index].status = !newArray[index].status;\n    setReportContent(newArray);\n    let isSelectAllNeeded = newArray.find((item) => item.status === false);\n    if (isSelectAllNeeded) {\n      setSelectAll(false);\n    } else {\n      setSelectAll(true);\n    }\n\n    // UPDATE APPLICATION LIST FOR UPDATE ==============================\n    updateClaimToPrint();\n  };\n\n  const updateClaimToPrint = () => {\n    // UPDATE REPORT TITLE ========================\n    if (thisPeriod) {\n      let title = \"Claim Report \" + thisPeriod.session_plan_name;\n      // if (thisLevel!==\"all\") {\n      //   title = \"Claim Report - Level \"+thisLevel + thisPeriod.session_plan_name;\n      // }\n      setReportTitle(title);\n    }\n    // UPDATE CONTENT =============================\n    if (props.claiming.allClaims && props.claiming.claimTypes) {\n      let arrayNew: ClaimToPrintInterface[] = [];\n      let n: number = 1;\n      for (const key in props.claiming.allClaims) {\n        if (\n          Object.prototype.hasOwnProperty.call(props.claiming.allClaims, key)\n        ) {\n          for (const keyClaim in props.claiming.allClaims[key].claims) {\n            if (\n              Object.prototype.hasOwnProperty.call(\n                props.claiming.allClaims[key].claims,\n                keyClaim\n              )\n            ) {\n              const element = props.claiming.allClaims[key].claims[keyClaim];\n              const thisType = whichClaimType(props.claiming.allClaims[key]);\n              let dataArray: ClaimToPrintInterface = {\n                claim_id: n,\n                names:\n                  props.claiming.allClaims[key].userDetails.user_info.fname +\n                  \" \" +\n                  props.claiming.allClaims[key].userDetails.user_info.lname,\n                gender: props.claiming.allClaims[key].userDetails.user_info.sex\n                  ? \"Male\"\n                  : \"Female\",\n                national_id: props.claiming.allClaims[key].userDetails.n_id!,\n                phone: props.claiming.allClaims[key].userDetails.phone_number,\n                email: props.claiming.allClaims[key].userDetails.email,\n                claim_type: thisType ? thisType : \"\",\n                claim_level: element.level,\n                education_category: \"\",\n                claim_session: thisPeriod ? thisPeriod.session_plan_name : \"\",\n                date: DATE(element.createdAt),\n                decision: element.decision_taken_status\n                  ? element.decision_taken_status\n                  : \"PENDING\",\n                claim_title: props.claiming.allClaims[key].title,\n              };\n              for (const key in reportContent) {\n                if (Object.prototype.hasOwnProperty.call(reportContent, key)) {\n                  if (!reportContent[key].status) {\n                    delete dataArray[reportContent[key].key];\n                  }\n                }\n              }\n              arrayNew.push(dataArray);\n              n++;\n            }\n          }\n        }\n      }\n      setClaimToPrint(arrayNew);\n      arrayNew = [];\n      n = 1;\n    }\n  };\n\n  const FC_ClaimData = (\n    allClaims: CandidateClaimInterface[] | null\n  ): ClaimToPrintInterface[] | null => {\n    if (allClaims === null) return null;\n    let arrayNew: ClaimToPrintInterface[] = [];\n    let n: number = 1;\n    // LOOP IN ALL CLAIM ONE BY ONE ###########################\n    for (const key in allClaims) {\n      if (Object.prototype.hasOwnProperty.call(allClaims, key)) {\n        // LOOP IN ALL CLAIM OF ONE FILE ONE BY ONE ===========================\n        for (const keyClaim in allClaims[key].claims) {\n          if (\n            Object.prototype.hasOwnProperty.call(\n              allClaims[key].claims,\n              keyClaim\n            )\n          ) {\n            const element = allClaims[key].claims[keyClaim];\n            const thisType = whichClaimType(allClaims[key]);\n            let dataArray: ClaimToPrintInterface = {\n              claim_id: n,\n              names:\n                allClaims[key].userDetails.user_info.fname +\n                \" \" +\n                allClaims[key].userDetails.user_info.lname,\n              gender: allClaims[key].userDetails.user_info.sex\n                ? \"Male\"\n                : \"Female\",\n              national_id: allClaims[key].userDetails.n_id!,\n              phone: allClaims[key].userDetails.phone_number,\n              email: allClaims[key].userDetails.email,\n              claim_type: thisType ? thisType : \"\",\n              claim_level: element.level,\n              education_category:\n                allClaims[key].institute_id &&\n                !isEmptyOrSpaces(allClaims[key].institute_id)\n                  ? allClaims[key].institute_id\n                  : null,\n              claim_session: thisPeriod ? thisPeriod.session_plan_name : \"\",\n              date: DATE(element.createdAt),\n              decision: element.decision_taken_status\n                ? element.decision_taken_status\n                : \"PENDING\",\n              claim_title: allClaims[key].title\n                ? allClaims[key].title\n                : \"Undefined\",\n            };\n            // for (const key in reportContent) {\n            //   if (Object.prototype.hasOwnProperty.call(reportContent, key)) {\n            //     if (!reportContent[key].status) {\n            //       delete dataArray[reportContent[key].key];\n            //     }\n            //   }\n            // }\n            arrayNew.push(dataArray);\n            n++;\n          }\n        }\n      }\n    }\n    return arrayNew;\n  };\n\n  const resetReportContent = (currentState: boolean) => {\n    let newArray: claimReportContentInterface[] = reportContent;\n    for (const key in newArray) {\n      if (isChangeAllowed(newArray[key].key)) {\n        newArray[key].status = !currentState;\n      }\n    }\n\n    setReportContent(newArray);\n    setSelectAll(!currentState);\n    updateClaimToPrint();\n  };\n\n  const isChangeAllowed = (key: claimReportContentKeyInterface): boolean => {\n    if (\n      key === claimReportContentKeyInterface.names ||\n      key === claimReportContentKeyInterface.decision ||\n      key === claimReportContentKeyInterface.claim_session ||\n      key === claimReportContentKeyInterface.claim_type ||\n      key === claimReportContentKeyInterface.date\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  const FC_GeneratePDF = () => {\n    if (!document.querySelectorAll(\"#report_content tbody tr\").length) {\n      props.PushPopupAlert({\n        title: `Can't generate Report of empty Data`,\n        theme: PopupAlertTheme.warning,\n      });\n      return;\n    }\n\n    if (thisPeriod) {\n      const table: HTMLElement | null =\n        document.getElementById(\"report_content\");\n      const reportSettings: reportSettingsInterface = {\n        doneBy: props.auth.user.fname + \" \" + props.auth.user.lname,\n        title: \"Claim Report\",\n        subjectTitle: \"Claim type\",\n        subject:\n          props.claiming.selectedClaimType === \"all\"\n            ? \"All Types\"\n            : props.claiming.selectedClaimType,\n        period: thisPeriod.session_plan_name,\n        footer: \"Online Recruitment\",\n        institute:\n          thisEducation === \"all\"\n            ? \"All institute\"\n            : thisEducation.education_category_title,\n      };\n      table && generatePDF(reportSettings, table, setDownloading);\n    }\n  };\n\n  const FC_FilterClaims = (\n    allClaims: ClaimToPrintInterface[],\n    claimType: PlansTypeKeys | \"all\",\n    claimLevel: number | \"all\",\n    institute: education_category | \"all\"\n  ): ClaimToPrintInterface[] => {\n    let result: ClaimToPrintInterface[] = allClaims;\n    if (claimType !== \"all\") {\n      result = result.filter((item) => item.claim_type === claimType);\n    }\n    if (claimLevel !== \"all\") {\n      result = result.filter((item) => item.claim_level === claimLevel);\n    }\n\n    if (institute !== \"all\") {\n      result = result.filter(\n        (item) =>\n          item.education_category === null ||\n          item.education_category === institute.education_institute_id\n      );\n    }\n\n    return result;\n  };\n\n  return (\n    <Fragment>\n      <SideNavigation>\n        <div className=\"flex flex-col mb-4\">\n          <span className=\"text-sm text-gray-600 mb-2\">\n            Education categories:\n          </span>\n          {props.schoolLevels.education_categories === null ||\n          loadingInstitutes ? (\n            <Loading />\n          ) : props.schoolLevels.education_categories.length === 0 ? (\n            <span>No result found</span>\n          ) : (\n            <Fragment>\n              <div\n                onClick={() => setThisEducation(\"all\")}\n                className={`border rounded px-2 py-2 mb-2 cursor-pointer ${\n                  thisEducation === \"all\"\n                    ? \"bg-blue-600 text-white hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                    : \"hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                } font-bold flex flex-row items-center gap-2`}\n              >\n                {thisEducation === \"all\" ? (\n                  <MdRadioButtonChecked />\n                ) : (\n                  <MdRadioButtonUnchecked />\n                )}\n                <span>All</span>\n              </div>\n              {props.schoolLevels.education_categories.map((item, i) => (\n                <div\n                  onClick={() => setThisEducation(item)}\n                  key={i + 1}\n                  className={`border rounded px-2 py-2 mb-2 cursor-pointer ${\n                    thisEducation !== \"all\" &&\n                    thisEducation.education_institute_id ===\n                      item.education_institute_id\n                      ? \"bg-blue-600 text-white hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                      : \"hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                  } font-bold flex flex-row items-center gap-2`}\n                >\n                  {thisEducation !== \"all\" &&\n                  thisEducation.education_institute_id ===\n                    item.education_institute_id ? (\n                    <MdRadioButtonChecked />\n                  ) : (\n                    <MdRadioButtonUnchecked />\n                  )}\n                  <span>{item.education_category_title}</span>\n                </div>\n              ))}\n            </Fragment>\n          )}\n        </div>\n        <div className=\"\">\n          <div className=\"text-gray-600 text-sm mb-2\">Selected period:</div>\n          <div\n            onClick={() => setSelectPeriod(true)}\n            className=\"font-bold bg-blue-50 border border-blue-200 rounded py-2 cursor-pointer text-xs px-2 hover:underline  text-blue-600  mb-4 w-full flex flex-row items-center animate__animated animate__zoomIn\"\n          >\n            {thisPeriod !== null\n              ? `${thisPeriod.session_plan_name} - ${thisPeriod.period}`\n              : \"Filter by period\"}\n            <FiEdit className=\"text-3xl text-blue-600\" />\n          </div>\n        </div>\n        <div className=\"pt-1\">\n          <div className=\"text-sm text-gray-700 pb-2 pt-2\">Claim types:</div>\n          {props.claiming.claimTypes === null ||\n          FC_ClaimData(props.claiming.allClaims) === null ? (\n            <Loading />\n          ) : (\n            ClaimTypes(FC_ClaimData(props.claiming.allClaims)!).map(\n              (item, index: number) => (\n                <div\n                  onClick={() =>\n                    props.setSelectedClaimType(reportClaimType(item.type))\n                  }\n                  key={item.title + index}\n                >\n                  <MainItem\n                    title={item.title}\n                    count={item.count}\n                    active={isClaimTypeActive(\n                      props.claiming.selectedClaimType,\n                      item.type\n                    )}\n                  />\n                </div>\n              )\n            )\n          )}\n        </div>\n        <div className=\"pt-1\">\n          <div className=\"text-sm text-gray-700 pb-2 pt-2\">Claim level:</div>\n          {props.claiming.claimTypes === null ||\n          FC_ClaimData(props.claiming.allClaims) === null ? (\n            <Loading />\n          ) : (\n            ClaimLevels(FC_ClaimData(props.claiming.allClaims)!).map(\n              (item, index: number) => (\n                <div\n                  onClick={() => setThisLevel(item.level)}\n                  key={item.title + index}\n                >\n                  <MainItem\n                    title={item.title}\n                    count={item.count}\n                    active={item.level === thisLevel}\n                  />\n                </div>\n              )\n            )\n          )}\n        </div>\n      </SideNavigation>\n      <section>\n        {/* REPORT TITLE ============================================ */}\n        <div className=\"grid md:grid-cols-12\">\n          <div className=\"col-span-8\">\n            <div className=\"mt-4 mx-4 flex flex-col gap-1\">\n              <span className=\"text-3xl font-bold text-gray-700\">\n                Claim report\n              </span>\n            </div>\n          </div>\n          <div className=\"col-span-4\">\n            <div className=\"float-right mt-2\">\n              {props.claiming.allClaims && props.claiming.allClaims.length > 0 && (\n                <div className=\"flex flex-row items-center justify-end font-bold mb-2\">\n                  <BiExport className=\"text-2xl text-gray-500\" />\n                  <span className=\"text-gray-500\">Export as</span>\n                  <button\n                    className=\"px-4 py-1 ml-1 rounded bg-white border hover:text-blue-600 font-bold hover:bg-blue-50 border-gray-200\"\n                    disabled={loading}\n                    onClick={() => {\n                      updateClaimToPrint();\n                      setGenerateReportModal({\n                        reportType: \"EXCEL\",\n                        status: true,\n                      });\n                    }}\n                  >\n                    EXCEL\n                  </button>\n                  <button\n                    className={`px-4 py-1 ml-1 rounded bg-white border hover:text-blue-600 font-bold hover:bg-blue-50 border-gray-200 ${\n                      downloading && \"cursor-wait\"\n                    }`}\n                    onClick={() => FC_GeneratePDF()}\n                    disabled={loading || downloading}\n                  >\n                    PDF\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {/* END REPORT TITLE ============================================ */}\n        <div className=\"bg-white my-4\">\n          <div className=\"w-full px-2 py-2\">\n            <input\n              onChange={(e) => setSearchInput(e.target.value)}\n              type=\"text\"\n              value={searchInput}\n              placeholder=\"Search...\"\n              className=\"w-full bg-gray-100 py-2 px-3 rounded focus:border-gray-800\"\n              disabled={\n                props.claiming.allClaims === null ||\n                props.claiming.claimTypes === null ||\n                FC_ClaimData(props.claiming.allClaims) === null ||\n                periodChanged\n              }\n            />\n          </div>\n          <table className=\"w-full shadow\" id=\"report_content\">\n            <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n              <tr>\n                <td className=\"px-2 py-2\">#</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"names\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Applicant names <BiSort />\n                  </div>\n                </td>\n                <td className=\"px-2 py-2\">National ID</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"gender\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Gender <BiSort />\n                  </div>\n                </td>\n                <td className=\"px-2 py-2\">Phone</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_title\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Title <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_type\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Type <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_level\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Level <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"decision\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Status <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"date\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Date <BiSort />\n                  </div>\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {props.claiming.allClaims === null ||\n              props.claiming.claimTypes === null ||\n              periodChanged ? (\n                <TableLoading cols={10} />\n              ) : FC_ClaimData(props.claiming.allClaims) === null ? (\n                <TableLoading cols={10} />\n              ) : FC_FilterClaims(\n                  FC_ClaimData(props.claiming.allClaims)!,\n                  props.claiming.selectedClaimType,\n                  thisLevel,\n                  thisEducation\n                ).length === 0 ? (\n                <tr>\n                  <td colSpan={10} className=\"px-2 py-2\">\n                    <div className=\"flex flex-col text-gray-400 items-center justify-center bg-gray-100 rounded py-10\">\n                      <ImFilesEmpty className=\"text-8xl text-gray-400 mb-2 animate__animated animate__shakeX\" />\n                      <span className=\"text-sm font-bold\">\n                        No result found! Please try to search again\n                      </span>\n                      <div className=\"w-full mt-2 flex flex-row items-center justify-center\">\n                        <ul className=\"text-sm py-2 text-blue-600 font-bold flex flex-row gap-2\">\n                          <li\n                            onClick={() => setSelectPeriod(true)}\n                            className=\"underline text-gray-500 cursor-pointer\"\n                          >\n                            Filter by period\n                          </li>\n                          <li className=\"text-gray-400 italic\">or</li>\n                          <li className=\"text-gray-500\">\n                            Filter by Claim type\n                          </li>\n                          <li className=\"text-gray-400 italic\">or</li>\n                          <li className=\"text-gray-500\">\n                            Filter by Claim Level\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </td>\n                </tr>\n              ) : (\n                sortThisArray(\n                  isSorted,\n                  searchData(\n                    FC_FilterClaims(\n                      FC_ClaimData(props.claiming.allClaims)!,\n                      props.claiming.selectedClaimType,\n                      thisLevel,\n                      thisEducation\n                    ),\n                    searchInput\n                  ),\n                  sortProperty,\n                  sortOrder\n                ).map((item: ClaimToPrintInterface, i) => (\n                  <tr\n                    key={i + 1}\n                    className={`${\n                      i % 2 !== 0 ? \"bg-gray-100\" : \"bg-white\"\n                    } text-gray-600 hover:bg-blue-100 hover:text-blue-700 border-b border-gray-300 hover:border-blue-500 text-sm`}\n                  >\n                    <td className=\"px-2 py-2\">{i + 1}</td>\n                    <td className=\"px-2 py-2\">{item.names}</td>\n                    <td className=\"px-2 py-2\">{item.national_id}</td>\n                    <td className=\"px-2 py-2\">{item.gender}</td>\n                    <td className=\"px-2 py-2\">{item.phone}</td>\n                    <td className=\"px-2 py-2\">{item.claim_title}</td>\n                    <td className=\"px-2 py-2\">{item.claim_type}</td>\n                    <td className=\"px-2 py-2\">{\"Level \" + item.claim_level}</td>\n                    <td className=\"px-2 py-2\">\n                      {item.decision}\n                      {/* {capitalizeFirstLetter(item.decision)} */}\n                    </td>\n                    <td className=\"px-2 py-2\">{item.date}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </section>\n      {/* GENERATE DYNAMIC REPORT CONTENT MODAL */}\n      {generateReportModal !== null && generateReportModal.status === true && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              {/* <IoBriefcase className=\"text-5xl text-gray-500\" /> */}\n              <div className=\"flex flex-col\">\n                <span className=\"font-bold text-2xl text-gray-500\">\n                  Generating Report contents\n                </span>\n                <span className=\"text-sm text-blue-600 font-normal\">\n                  Generating {generateReportModal.reportType} Report\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setGenerateReportModal(null)}\n          backDropClose={false}\n          widthSizeClass={ModalSize.medium}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <div className=\"px-6\">\n            <div className=\"my-2 text-base text-gray-700 sm:text-lg\">\n              <div className=\"flex flex-col\">\n                <label>Title</label>\n                <input\n                  type=\"text\"\n                  className={`text-left input-white w-20 inline-block ${\n                    formError && formError.element === \"report_title\"\n                      ? \"border-red-500\"\n                      : \"border-gray-500\"\n                  } border-2`}\n                  placeholder=\"Sub Category Title\"\n                  value={reportTitle}\n                  onChange={(e) => {\n                    setFormError(null);\n                    setReportTitle(e.target.value);\n                  }}\n                  disabled={loading}\n                />\n                {formError && formError.element === \"report_title\" && (\n                  <span className=\"text-red-500\">{formError.msg}</span>\n                )}\n              </div>\n              <div className=\"flex flex-col mt-2\">\n                <label>Report content</label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 items-center gap-2 mt-2\">\n                  {reportContent.map((item, index) => (\n                    <div\n                      key={index}\n                      className={`flex items-center gap-1 ${\n                        isChangeAllowed(item.key)\n                          ? \"cursor-pointer\"\n                          : \"cursor-not-allowed\"\n                      }`}\n                      onClick={() =>\n                        isChangeAllowed(item.key) &&\n                        updateReportContent(item.key)\n                      }\n                      title={\n                        !isChangeAllowed(item.key)\n                          ? \"Required for every report!\"\n                          : \"\"\n                      }\n                    >\n                      {item.status ? (\n                        <MdCheckBox className=\"w-6 h-6 text-blue-700\" />\n                      ) : (\n                        <MdCheckBoxOutlineBlank className=\"w-6 h-6\" />\n                      )}\n                      <span>{item.title}</span>\n                    </div>\n                  ))}\n                </div>\n                {formError && formError.element === \"report_content\" && (\n                  <span className=\"text-red-500\">{formError.msg}</span>\n                )}\n              </div>\n            </div>\n            <div className=\"flex justify-between mb-2 mt-4\">\n              <div\n                className={`flex items-center gap-1 cursor-pointer`}\n                onClick={() => resetReportContent(selectAll)}\n              >\n                {selectAll ? (\n                  <MdCheckBox className=\"w-6 h-6 text-blue-700\" />\n                ) : (\n                  <MdCheckBoxOutlineBlank className=\"w-6 h-6\" />\n                )}\n                <span>Select all</span>\n              </div>\n\n              {claimToPrint && !loading && (\n                <ExportToExcel\n                  fileData={claimToPrint}\n                  fileName={reportTitle}\n                  btnName=\"Generate\"\n                />\n              )}\n            </div>\n          </div>\n        </Modal>\n      )}\n      {/* END GENERATE DYNAMIC REPORT CONTENT MODAL */}\n      {selectPeriod && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <MdHistory className=\"text-5xl text-blue-600\" />\n              <span className=\"flex flex-col\">Choose a period</span>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => thisPeriod !== null && setSelectPeriod(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <ChooseSession\n            allSession={props.application_sessions}\n            setSelectSession={(value: SessionPlanInterface | \"all\") => {\n              value !== \"all\" && setThisPeriod(value);\n              value !== \"all\" && onPeriodChange(value.session_plan_id);\n              value !== \"all\" && setSelectPeriod(false);\n            }}\n            chooseAll={false}\n            currentSelected={thisPeriod ? thisPeriod : \"all\"}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  schoolLevels,\n}: StoreState): {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    application_sessions: sessionPlan.allSessionPlans,\n    claiming,\n    documentReducer: document,\n    schoolLevels,\n  };\n};\n\nexport const ClaimingReport = connect(mapStateToProps, {\n  getAllClaims,\n  GetClaimingTypes,\n  getAllApplications,\n  GetAllSessionPlans,\n  loadEducationCategories,\n  setSelectedClaimType,\n  PushPopupAlert,\n})(_ClaimingReport);\n"],"sourceRoot":""}