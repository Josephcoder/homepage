{"version":3,"sources":["components/ProctoringMainTopBar/RoomDetailsModal.tsx","components/CountDown/CountDownLive.tsx","components/ProctoringCandidateDetails/ProctoringCandidateDetails.tsx","components/ProctoringMainTopBar/ProctoringMainTopBar.tsx","components/ProctoringStatistics/ProctoringStatistics.tsx","components/ProctoringEvents/ProctoringEvents.tsx","components/VideoCardProctoring/HoverControls.tsx","components/ProctoringCandidates/ProctoringCandidates.tsx","containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor.tsx","components/CenterCardSupervisor/CenterCardSupervisor.tsx","components/Attendance/Attendance.tsx","components/AddTimeToCandidateModal/AddTimeToCandidateModal.tsx","components/VideoCardProctoring/VideoCardProctoring.tsx","containers/ProctoringOnlineSupervisor/SoundControl.tsx","components/VideoCardProctoring/VideoCardProctoringFocus.tsx","containers/ProctoringCenter/ProctoringCenter.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["RoomDetailsModal","close","active_candidate","room","exam_start","leaveRoomHandler","deleteRoomHandler","exam_rules","addMinutesToRoom","exam_done","className","onClick","title","value","province_name","district_name","center_name","room_number","map","i","allow_to_leave_browser","copy_enabled","paste_enabled","right_click_enabled","stop_candidate_when_comeback","moment","tz","add","ActiveTap","_CountDown","props","interval","timeOutCounter","setInterval","setCountdowm","state","hours","mins","secs","timeout","clearInterval","setState","days","loading","start_time","duration","stop_time","error","setTimeout","startOnlineTimer","this","socket","on","Events","ADD_TIME_TO_CANDIDATE_CLIENT","data","event","user_id","auth","user","emit","GET_ROOM_TIME","room_id","res","console","log","TimerCountDownResult","remaining_minutes","examStopTime","futureDate","today","clockDuration","diff","Math","floor","asDays","minutes","seconds","undefined","returnString","labels","formatStyle","separator","React","Component","CountDownLive","connect","proctoring","ProctoringMainTopBar","course_title","post_title","started_at","startExamHandler","stopExamHandler","focus_mode","focusToggle","leaveRoom","deleteRoom","ExamDone","useState","info_modal","setInfo_modal","htmlFor","format","ProctoringStatistics","candidates","total_candidates","length","active_candidates","filter","itm","active","done_candidates","done","remain_candidate","stopped","removed","removed_candidate","stopped_candidate","left_candidates","joined","non_joined_candidates","label","ProctoringEvents","events","clickOpen","clickHandler","selected","setSelected","evnt","findUser","find","cand","event_id","event_type_id","description","fname","lname","email","HoverControls","stop","only","name","icon","sub_title","Icon","ProctoringCandidateDetails","candidate","focusHandler","stopHandler","restartHandler","warnHandler","closeHandler","homeProctoring","exam_started","removeInExam","micAdd","micStop","micOnly","soundAdd","soundStop","soundOnly","resetDevice","continueHandler","setAiProctoring","Details","setActive","mic","bind","MdOutlineMic","MdMicOff","audio","MdVolumeUp","MdVolumeOff","position_title","course_name","ProctoringCandidates","show_title","large","defaultProps","ActiveSideTap","CenterCardSupervisor","warningHandler","detailsHandler","addMinutes","candidate_done","setCandidate_done","FC_CardStyle","seat_number","added_minutes","CountDown","start_added_time","duration_min","_Attendance","componentDidMount","group_list","candidates_in_with_groups","room_groups","forEach","group","push","group_id","toLowerCase","x","all_candidates","candidate_exist","el","candidates_in_groups","candidate_non_done_exam","submitHandler","e","preventDefault","group_name","target","msg","selected_list","includes","createAttendance","list","FC_CloseProctoringRoomHandler","id","window","confirm","disabling_room","FC_CloseProctoringRoom","status","create_attendance","selected_candidate","search","created_groups","expiredRooms","isExpired","exam_id","exam","FC_ClearProctoring","createdAt","_id","resultCandidates","Modal","footer","widthSizeClass","ModalSize","theme","Themes","default","displayClose","padding","body","backDrop","backDropClose","n_id","district","phone_number","course_code","onSubmit","type","placeholder","maxLength","required","onChange","toUpperCase","colSpan","indexOf","candidateFind","Attendance","AddTimeToCandidateModal","addMinutesHandler","reset_added_minutes","setMinutes","reason","setReason","setError","min","max","rows","styles_videoElement","width","height","minWidth","minHeight","objectFit","objectPosition","LocalVideoCall","localStream","open","focus","localVideoRef","useRef","useEffect","localVideo","current","srcObject","onloadedmetadata","play","username","shortString","style","ref","autoPlay","muted","hand","stroke","Button","accent","click","disabled","SoundControl","sound_text","speaker_text","speakToAll","stopSpeaking","listenAll","stopListening","MdMic","VideoCardProctoringFocus","_ProctoringOnlineSupervisor","myPeer","FC_AddMyStream","stream","webRTCGroupHandler","peer_id","FC_AddPeerId","connectWithMyPeer","my_stream","stream_id","socket_data","socket_id","startProctoringOperations","FC_AddUserStream","course_id","position_id","application_session","loading_room","FC_GetProctoringRoom","session_id","GET_ROOM_INFO_SERVER","FC_RoomNotFoundOnline","FC_RoomDetailsOnline","startListeningToEvents","componentWillUnmount","off","NEW_USER_JOINED_CLIENT","TIME_OUT_CLIENT","USER_DISCONNECTED","EXAM_DONE_CLIENT","CAND_EXAM_EVENT_CLIENT","closeGroupHandler","loading_close_room","JOIN_ROOM","supper","joining_room","user_stream","FC_SetOneActiveCandidate","FC_CandidateTimeOut","userId","start_exam","FC_CandidateOffline","FC_SaveEvent","application_session_id","done_by","CANDIDATE_LEFT_EXAM_EVENT","time","Date","toString","FC_CandidateDoneExamCenter","HOME_PROCTORING__SET_HAND","FC_CandidateHandSupervisor","FC_CandidateExamEvent","USER_USING_MORE_ACCOUNTS","popups","uuidV4","MdSupervisedUserCircle","USER_USING_MORE_DEVICES","MdComputer","events_loading","FC_LoadRoomEvents","USER_CONNECTED","FC_ClearExamToRoomProctoring","removePopup","popup_id","blank","ActiveSIdeTabHandler","active_side_tab","SelectCandidateHandler","alert","START_EXAM_SERVER","end_time","fixed_duration","FC_ExamStartStop","STOP_EXAM_SERVER","room_exists","FC_ContinueExam","CAND_CONTINUE_EXAM_SERVER","CAND_CONTINUE_EXAM_CLIENT","stopCandidateHandler","prompt","CAND_STOP_EXAM_SERVER","CAND_STOP_EXAM_CLIENT","FC_StopCandidate","ejectCandidateHandler","CAND_REMOVE_EXAM_SERVER","CAND_REMOVE_EXAM_CLIENT","FC_CandidateRemoveExam","warnCandidateHandler","CAND_WARNING_EXAM_SERVER","restartCandidateHandler","CAND_RESTART_EXAM_SERVER","prevState","create_server_room","CREATE_ROOM_SERVER","center_id","district_id","create_group_loading","FC_CreateProctoringRoom","DELETE_ROOM_SERVER","addMinutesModal","add_minutes","addMinutesToTheRoom","addMinutesToCandidate","event_data","EventsLabels","ADD_TIME","ADD_TIME_TO_CANDIDATE_SERVER","FC_AddMinutesToCandidate","addMinutesToRoomModal","reset_added_minutesHandler","backToProctoringCenter","FC_AddMic","HOME_PROCTORING__ADD_MIC","FC_StopMic","HOME_PROCTORING__STOP_MIC","FC_MicOnly","HOME_PROCTORING__MIC_ONLY","FC_AddSound","FC_StopSound","FC_SoundOnly","FC_FocusOnUser","FC_SpeakToAll","HOME_PROCTORING__SPEAK_TO_ALL","FC_StopSpeakToAll","HOME_PROCTORING__STOP_SPEAK_TO_ALL","FC_ListenAll","FC_StopListenAll","RESET_USER_DEVICE","room_found","online_room","online_candidates","activeCandidates","nonActiveCandidates","room_not_found","total_mic","total_audio","mic_text_label","audio_text_label","FC_ExamDone","candidate_loaded","Spinner","streams","strm","focusCandidates","VideoCardProctoring","Fragment","Candidates","pop","ProctoringOnlineSupervisor","FC_SetActiveCandidates","_ProctoringCenter","user_access","loading_room_details","FC_RoomDetails","errorMsg","get_exams_list","FC_ExamsDetailsData","exams_error","exams_error_msg","warning","clearError","search_text","socket_failed","size","loaded","list_data","exam_data","room_exams","iterator","examFound","exams_list","exams","exm","course","done_today","isToday","exam_date","courses_results","Alert","AlertInterface","danger","key","FC_LoadExamToRoomProctoring","video_support","period_id","exam_status","FC_AddRules","rules","ProctoringCenter","getRandomValues","rnds8","Uint8Array","rng","crypto","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","substr","stringify","arr","offset","arguments","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/53.2da854df.chunk.js","sourcesContent":["import React, { FC, Fragment, ReactElement } from \"react\";\nimport { MdClose, MdDeleteForever, MdLogout, MdMoreTime } from \"react-icons/md\";\nimport { ExamRules } from \"../../actions\";\nimport { RoomServer } from \"../../interfaces\";\n\ntype RoomDetailsModalProps = {\n  close: Function;\n  active_candidate: number;\n  room: RoomServer;\n  exam_start: boolean;\n  leaveRoomHandler: Function;\n  deleteRoomHandler: Function;\n  exam_rules: ExamRules;\n  addMinutesToRoom: () => void;\n  exam_done: boolean;\n};\n\nconst RoomDetailsModal: FC<RoomDetailsModalProps> = ({\n  close,\n  active_candidate,\n  room,\n  exam_start,\n  leaveRoomHandler,\n  deleteRoomHandler,\n  exam_rules,\n  addMinutesToRoom,\n  exam_done,\n}): ReactElement => {\n  return (\n    <Fragment>\n      <div\n        className=\"fixed bg-black bg-opacity-10  top-0 bottom-0 right-0 left-0 animate__animated animate__fadeIn\"\n        onClick={() => close(false)}\n      ></div>\n      <div className=\"fixed w-80 z-50 shadow-lg bg-white rounded top-16 mt-2 right-2 animate__animated animate__zoomIn animate__faster\">\n        <div className=\"flex items-center border-b\">\n          <div className=\"flex-1 pl-2 text-xl font-bold text-gray-400\">\n            <h4>Room details</h4>\n          </div>\n\n          <div className=\"\">\n            <button\n              onClick={() => close(false)}\n              className=\"p-2 hover:bg-red-700 hover:text-white rounded text-2xl\"\n            >\n              <MdClose />\n            </button>\n          </div>\n        </div>\n        <div className=\"p-2 \">\n          <div className=\"border-separate p-2\">\n            {[\n              { title: \"Province\", value: room.province_name },\n              { title: \"District\", value: room.district_name },\n              { title: \"Center name\", value: room.center_name },\n              { title: \"Group\", value: room.room_number },\n              { title: \"Joined candidates\", value: active_candidate },\n            ].map(({ title, value }, i) => (\n              <div key={i} className=\"flex\">\n                <span className=\"text-gray-500\">{title}: </span>\n                <b className=\"text-right inline-block\"> {value}</b>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"border-separate px-2 pt-2 mt-2 bg-gray-50 border rounded\">\n            <h2 className=\"text-xl font-bold border-b\">Exam rules</h2>\n            {[\n              {\n                title: \"Leave the browser\",\n                value: exam_rules.allow_to_leave_browser,\n              },\n              { title: \"Copy contents\", value: exam_rules.copy_enabled },\n              { title: \"Paste contents\", value: exam_rules.paste_enabled },\n              {\n                title: \"Right click\",\n                value: exam_rules.right_click_enabled,\n              },\n              {\n                title: \"Refresh browser\",\n                value: exam_rules.stop_candidate_when_comeback,\n              },\n            ].map(({ title, value }, i) => (\n              <div key={i} className=\"flex items-center border-b p-1\">\n                <div className=\"flex-1 text-sm\">\n                  <span className=\"\">{title}: </span>\n                </div>\n\n                <div className=\"text-right inline-block\">\n                  {\" \"}\n                  {value === true ? (\n                    <span className=\"p-0.5 px-1 text-xs rounded bg-green-100 text-green-700\">\n                      Enabled\n                    </span>\n                  ) : (\n                    <span className=\"p-0.5 px-1 text-xs rounded bg-red-200 text-red-700\">\n                      Disabled\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"p-2 flex\">\n            <button\n              onClick={() => leaveRoomHandler()}\n              className=\"btn bg-red-700 hover:bg-red-800 text-white w-full mr-2\"\n              title=\"Leave room\"\n            >\n              <MdLogout className=\"inline-block\" /> Leave\n            </button>\n            {exam_start === false && active_candidate <= 1 && (\n              <button\n                onClick={() => deleteRoomHandler()}\n                className=\"btn bg-gray-500 hover:bg-red-500 text-white w-full\"\n                title=\"Close session\"\n              >\n                <MdDeleteForever className=\"inline-block\" /> Close session\n              </button>\n            )}\n            {(exam_start === true || exam_done === true) && (\n              <button\n                onClick={() => addMinutesToRoom()}\n                className=\"btn bg-yellow-700 hover:bg-yellow-600 text-white w-full\"\n                title=\"Add minutes to the room\"\n              >\n                <MdMoreTime className=\"inline-block\" /> Add minutes\n              </button>\n            )}\n          </div>\n        </div>\n      </div>{\" \"}\n    </Fragment>\n  );\n};\nexport default RoomDetailsModal;\n","// import moment, { duration } from \"moment\";\nimport moment, { duration } from \"moment-timezone\";\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring, Socket } from \"../../actions\";\nimport { EventInterface, Events, StartExam_Callback } from \"../../interfaces\";\nimport { StoreState } from \"../../reducers\";\nimport { TimeZone } from \"../../utils/app.config\";\n\nmoment.tz.add(\"Kigali/Africa|PST PDT|80 70|0101|1Lzm0 1zb0 Op0\");\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  room_id: string;\n  timeout: Function;\n\n  returnString?: boolean;\n  separator?: string;\n  labels?: boolean;\n  days?: boolean;\n  socket: Socket;\n}\n\ninterface AppState {\n  loading: boolean;\n  days: number;\n  hours: number;\n  mins: number;\n  secs: number;\n  start_time: Date | null;\n  duration: number;\n  stop_time: any;\n  error: boolean;\n}\n\nclass _CountDown extends React.Component<AppProps, AppState> {\n  interval: any;\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      days: 0,\n      hours: 0,\n      mins: 0,\n      secs: 0,\n      start_time: null,\n      duration: 0,\n      stop_time: null,\n      error: false,\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.startOnlineTimer();\n    }, 1000);\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      Events.ADD_TIME_TO_CANDIDATE_CLIENT,\n      (data: any, event: EventInterface) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.startOnlineTimer();\n        }\n      }\n    );\n  }\n\n  startOnlineTimer() {\n    this.props.socket.socket.emit(\n      Events.GET_ROOM_TIME,\n      {\n        user_id: this.props.auth.user.user_id,\n        room_id: this.props.room_id,\n      },\n      (res: StartExam_Callback | null) => {\n        if (res === null) return this.setState({ error: true });\n        console.log({\n          TimerCountDownResult: res,\n        });\n\n        // compute the dates and start running the functions\n        if (res.remaining_minutes === 0) {\n          return this.setState({\n            days: 0,\n            hours: 0,\n            mins: 0,\n            secs: 0,\n          });\n        } else {\n          let examStopTime = moment().add(res.remaining_minutes, \"minutes\");\n\n          console.log({\n            examStopTime,\n          });\n\n          this.setState({\n            stop_time: examStopTime,\n          });\n          this.setCountdowm();\n          this.timeOutCounter();\n\n          // Count down\n          //   this.setCountdowmDates(examStopTime);\n        }\n      }\n    );\n  }\n\n  timeOutCounter = () => {\n    this.interval = setInterval(() => {\n      this.setCountdowm();\n      if (this.state.hours < 0 || this.state.mins < 0 || this.state.secs < 0) {\n        this.props.timeout();\n        clearInterval(this.interval);\n        this.setState({\n          days: 0,\n          hours: 0,\n          mins: 0,\n          secs: 0,\n        });\n      }\n    }, 1000);\n  };\n\n  //   componentDidUpdate(prevProps: AppProps, prevState: AppState): void {\n  //     if (\n  //       prevProps.duration_min !== this.props.duration_min ||\n  //       prevProps.start_time !== this.props.start_time\n  //     ) {\n  //       clearInterval(this.interval);\n  //       this.setState({\n  //         duration: this.props.duration_min,\n  //         start_time: this.props.start_time,\n  //       });\n  //       this.timeOutCounter();\n  //     }\n  //   }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n\n    // this.props.socket.socket.off(Events.GET_ROOM_TIME);\n  }\n\n  formatStyle(value: number): string {\n    return value <= 9 ? `0${value}` : value + \"\";\n  }\n\n  setCountdowm() {\n    const futureDate = moment(this.state.stop_time);\n\n    const today = moment();\n    const clockDuration = duration(futureDate.diff(today));\n\n    const days = Math.floor(clockDuration.asDays());\n    const hours = clockDuration.hours();\n    const mins = clockDuration.minutes();\n    const secs = clockDuration.seconds();\n\n    this.setState({ days, hours, mins, secs });\n  }\n\n  render() {\n    if (this.state.error === true) return null;\n    if (\n      this.props.returnString === undefined ||\n      this.props.returnString === false\n    ) {\n      return (\n        <div className=\"flex items-center\">\n          {this.props.days !== undefined && this.props.days !== false && (\n            <div className=\"m-0 p-0\">\n              {this.props.labels !== undefined &&\n                this.props.labels !== false && (\n                  <span className=\"m-0 text-xs opacity-80\">Days</span>\n                )}\n              <p className=\"m-0  timer-count-down -mt-2\">\n                {this.formatStyle(this.state.days)}\n                {this.props.separator === undefined\n                  ? \":\"\n                  : this.props.separator}\n              </p>\n            </div>\n          )}\n          <div>\n            {this.props.labels !== undefined && this.props.labels !== false && (\n              <span className=\"m-0 text-xs opacity-80\">Hours</span>\n            )}\n            <p className=\"m-0  timer-count-down -mt-2\">\n              {this.formatStyle(this.state.hours)}\n              {this.props.separator === undefined ? \":\" : this.props.separator}\n            </p>\n          </div>\n\n          <div>\n            {this.props.labels !== undefined && this.props.labels !== false && (\n              <span className=\"m-0 text-xs opacity-80\">Min</span>\n            )}\n            <p className=\"m-0  timer-count-down -mt-2\">\n              {this.formatStyle(this.state.mins)}\n              {this.props.separator === undefined ? \":\" : this.props.separator}\n            </p>\n          </div>\n\n          <div>\n            {this.props.labels !== undefined && this.props.labels !== false && (\n              <span className=\"m-0 text-xs opacity-80\">Sec</span>\n            )}\n            <p className=\"m-0  timer-count-down -mt-2\">\n              {this.formatStyle(this.state.secs)}\n            </p>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <span className=\"timer-count-down\">\n          {(this.props.days !== undefined || this.props.days !== false) && (\n            <span>\n              {this.formatStyle(this.state.days)}\n              {this.props.separator === undefined ? \":\" : this.props.separator}\n            </span>\n          )}\n          <span>{this.formatStyle(this.state.hours)}</span>\n          {this.props.separator === undefined ? \":\" : this.props.separator}\n          <span>{this.formatStyle(this.state.mins)}</span>\n          {this.props.separator === undefined ? \":\" : this.props.separator}\n          <span>{this.formatStyle(this.state.secs)}</span>\n        </span>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  socket,\n  proctoring,\n}: StoreState): { auth: Auth; socket: Socket; proctoring: Proctoring } => {\n  return { auth: auth, socket: socket, proctoring: proctoring };\n};\n\nexport const CountDownLive = connect(mapStateToProps, {})(_CountDown);\n","import React, { FC, ReactElement, useState } from \"react\";\nimport { CandidateProctoringInterface, EventInterface } from \"../../interfaces\";\nimport ProctoringEvents from \"../ProctoringEvents/ProctoringEvents\";\nimport {\n  MdAccountCircle,\n  MdArrowBack,\n  MdVolumeUp,\n  MdFullscreen,\n  MdNotInterested,\n  MdReplay,\n  MdWarning,\n  MdOutlineMic,\n  MdMicOff,\n  MdVolumeOff,\n  MdPhonelinkOff,\n  MdOutlineSmartToy,\n  MdPlayArrow,\n} from \"react-icons/md\";\nimport HoverControls from \"../VideoCardProctoring/HoverControls\";\n\ntype ProctoringCandidateDetailsProps = {\n  candidate: CandidateProctoringInterface | undefined;\n  stopHandler: Function;\n  restartHandler: Function;\n  warnHandler: Function;\n  closeHandler: Function;\n  removeInExam: Function;\n  events: EventInterface[];\n  exam_started: boolean;\n  focus_mode: boolean;\n  homeProctoring: boolean;\n  //\n  continueHandler: (user_id: string) => void;\n  focusHandler: (user_id: string) => void;\n  micAdd: (user_id: string) => void;\n  micStop: (user_id: string) => void;\n  micOnly: (user_id: string) => void;\n  soundAdd: (user_id: string) => void;\n  soundStop: (user_id: string) => void;\n  soundOnly: (user_id: string) => void;\n  resetDevice: (user_id: string) => void;\n  setAiProctoring: (user_id: string, status: boolean) => void;\n};\n\nenum ActiveTap {\n  Details,\n  Events,\n}\n\nconst ProctoringCandidateDetails: FC<ProctoringCandidateDetailsProps> = ({\n  candidate,\n  focusHandler,\n  stopHandler,\n  restartHandler,\n  warnHandler,\n  closeHandler,\n  events,\n  homeProctoring,\n  exam_started,\n  focus_mode,\n  removeInExam,\n  micAdd,\n  micStop,\n  micOnly,\n  soundAdd,\n  soundStop,\n  soundOnly,\n  resetDevice,\n  setAiProctoring,\n  continueHandler,\n}): ReactElement => {\n  const [active, setActive] = useState(ActiveTap.Details);\n\n  if (candidate === undefined) {\n    return (\n      <div className=\"p-4 text-center bg-white\">\n        <h1 className=\"text-3xl text-gray-800\">Oops!!</h1>\n        <p className=\"text-3xl text-gray-700\">\n          The selected candidate can't be found{\" \"}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-1\">\n      <div\n        className={`p-2 border-rounded ${\n          focus_mode === true\n            ? \"bg-blue-900 text-white\"\n            : \"bg-gray-500 text-white\"\n        }  rounded-md flex items-baseline `}\n      >\n        <button\n          onClick={() => closeHandler()}\n          className=\"p-1 block bg-blue-900 bg-opacity-70 rounded-md mr-2 font-bold text-1xl\"\n        >\n          <MdArrowBack />\n        </button>\n        <h3 className=\"text-center -mt-1 mb-0 pb-0 text-1xl font-bold block text-blue-500--\">\n          User details\n        </h3>\n      </div>\n      <div className=\"p-2 text-center\">\n        <MdAccountCircle className=\"text-9xl text-center mx-auto\" />\n\n        <h1\n          className={`text-xl  ${\n            focus_mode === true ? \"text-white\" : \"text-gray-800\"\n          } font-bold`}\n        >\n          {candidate.fname} {candidate.lname}\n        </h1>\n        <h2\n          className={` ${\n            focus_mode === true ? \"text-gray-400\" : \"text-gray-800\"\n          }  text-md`}\n        >\n          {candidate.email}\n        </h2>\n        <div className=\"p-1\">\n          {candidate.joined === true && (\n            <span className=\"inline-block text-sm bg-blue-500 text-white px-1 rounded-md m-0.5\">\n              #Joined\n            </span>\n          )}\n          {candidate.active === true && (\n            <span className=\"inline-block text-sm bg-green-500 text-white px-1 rounded-md m-0.5\">\n              #Active\n            </span>\n          )}\n          {candidate.removed === true && (\n            <span className=\"inline-block text-sm bg-red-500 text-white  px-1 rounded-md m-0.5\">\n              #Removed\n            </span>\n          )}\n          {candidate.done === true && (\n            <span className=\"inline-block text-sm bg-yellow-500 text-white px-1 rounded-md m-0.5\">\n              #Done\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"my-2 py-1 rounded grid grid-cols-3 gap-1\">\n        {/* buttons start here */}\n\n        {candidate.done === false && (\n          <button\n            title=\"Clear device\"\n            onClick={() => resetDevice(candidate.user_id)}\n            className=\"proctoring-action-button\"\n          >\n            <MdPhonelinkOff className=\"text-2xl mx-auto b-0 pb-0\" />\n            <span className=\"text-sm p-0 block -mt-0\">Reset device</span>\n          </button>\n        )}\n\n        {exam_started === true && candidate.active === true && (\n          <>\n            {homeProctoring === true && (\n              <>\n                <div className=\"inline-block hover-parent\">\n                  <button className=\"proctoring-action-button w-full\">\n                    {candidate.mic === true ? (\n                      <MdOutlineMic className=\"text-red-400 text-2xl mx-auto b-0 pb-0\" />\n                    ) : (\n                      <MdMicOff className=\"text-gray-100 text-2xl mx-auto b-0 pb-0\" />\n                    )}\n                    <span className=\"text-sm p-0 block -mt-0\">Speak</span>\n                  </button>\n\n                  <HoverControls\n                    add={micAdd.bind(this, candidate.user_id)}\n                    stop={micStop.bind(this, candidate.user_id)}\n                    only={micOnly.bind(this, candidate.user_id)}\n                    icon={candidate.mic === true ? MdOutlineMic : MdMicOff}\n                    name={candidate.lname}\n                    sub_title={\"speakers\"}\n                    title={\"speak\"}\n                  />\n                </div>\n\n                <div className=\"inline-block hover-parent\">\n                  <button className=\"proctoring-action-button w-full\">\n                    {candidate.audio === true ? (\n                      <MdVolumeUp className=\"text-green-400 text-2xl mx-auto b-0 pb-0\" />\n                    ) : (\n                      <MdVolumeOff className=\"text-gray-100 text-2xl mx-auto b-0 pb-0\" />\n                    )}\n                    <span className=\"text-sm p-0 block -mt-0\">Listen</span>\n                  </button>\n\n                  <HoverControls\n                    add={soundAdd.bind(this, candidate.user_id)}\n                    stop={soundStop.bind(this, candidate.user_id)}\n                    only={soundOnly.bind(this, candidate.user_id)}\n                    icon={candidate.audio === true ? MdVolumeUp : MdVolumeOff}\n                    name={candidate.lname}\n                    sub_title={\"listeners\"}\n                    title={\"listen\"}\n                  />\n                </div>\n\n                <button\n                  onClick={focusHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdFullscreen className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-sm p-0 block -mt-0\">Focus</span>\n                </button>\n                {/* \n                <button\n                  title=\"Ai Assistant\"\n                  onClick={() =>\n                    setAiProctoring(candidate.user_id, !candidate.ai)\n                  }\n                  className=\"proctoring-action-button hover:bg-green-400\"\n                >\n                  <MdOutlineSmartToy className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-sm p-0 block -mt-0\">Ai Assistant</span>\n                </button> */}\n              </>\n            )}\n\n            {/* <button\n              title=\"Clear device\"\n              onClick={() => resetDevice(candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdPhonelinkOff className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-sm p-0 block -mt-0\">Clear device</span>\n            </button> */}\n\n            {candidate.done === false && (\n              <>\n                {/* <button\n                  title=\"Clear device\"\n                  onClick={() => resetDevice(candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdPhonelinkOff className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-sm p-0 block -mt-0\">Clear device</span>\n                </button> */}\n\n                {candidate.stopped === true ? (\n                  <button\n                    onClick={continueHandler.bind(this, candidate.user_id)}\n                    className=\"text-center rounded-md p-1 border-2 border-yellow-600 hover:bg-yellow-600 text-black  bg-yellow-500\"\n                    title=\"Continue exam\"\n                  >\n                    <MdPlayArrow className=\"text-2xl mx-auto b-0 pb-0\" />\n                    <span className=\"text-sm p-0 block font-bold -mt-0\">\n                      Continue\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    onClick={stopHandler.bind(this, candidate.user_id)}\n                    className=\"proctoring-action-button hover:bg-red-400 hover:text-white\"\n                  >\n                    <MdNotInterested className=\"text-2xl mx-auto b-0 pb-0\" />\n                    <span className=\"text-sm p-0 block  font-bold -mt-0\">\n                      Stop\n                    </span>\n                  </button>\n                )}\n              </>\n            )}\n\n            <button\n              onClick={restartHandler.bind(this, candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdReplay className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-sm p-0 block -mt-0\">Restart</span>\n            </button>\n\n            {candidate.done === false && (\n              <button\n                title=\"give a warning\"\n                onClick={() => warnHandler(candidate.user_id)}\n                className=\"proctoring-action-button\"\n              >\n                <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-sm p-0 block -mt-0\">Warn</span>\n              </button>\n            )}\n\n            {candidate.done === false && (\n              <button\n                title=\"Remove in exam\"\n                onClick={() => removeInExam(candidate.user_id)}\n                className=\"text-center rounded-md p-1 border-2 border-red-600 hover:bg-red-600 text-red-900 hover:text-white  hover:text-bg-red-500 bg-red-300\"\n              >\n                <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n                <span className=\"text-sm p-0 block -mt-0\">Remove in exam</span>\n              </button>\n            )}\n          </>\n        )}\n      </div>\n\n      <div className=\"my-1 bg-blue-900 bg-opacity-40 rounded-md p-1 mt-2 grid grid-cols-2 gap-2 text-sm\">\n        <button\n          onClick={() => setActive(ActiveTap.Details)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Details\n              ? \"bg-blue-600 border-2 border-blue-300\"\n              : \"bg-blue-300\"\n          }`}\n        >\n          candidate\n        </button>\n\n        <button\n          onClick={() => setActive(ActiveTap.Events)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Events\n              ? \"bg-blue-600 border-2 border-blue-300\"\n              : \"bg-blue-300\"\n          }`}\n        >\n          Events\n        </button>\n      </div>\n\n      {active === ActiveTap.Details ? (\n        <div\n          className={`mt-2 ${\n            focus_mode === true ? \"text-white\" : \"text-gray-900\"\n          } border-blue-400`}\n        >\n          <h2 className=\" font-bold text-2xl mb-1 opacity-70 text-center border-b\">\n            User information\n          </h2>\n          <div className=\"p-2 rounded-md border   border-opacity-20\">\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Username:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">First name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.fname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Last name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.lname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">email:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Position:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.position_title}\n              </h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Course name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.course_name}\n              </h4>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ProctoringEvents\n          candidates={[candidate]}\n          events={events}\n          focus_mode={focus_mode}\n          loading={false}\n        />\n      )}\n    </div>\n  );\n};\nexport default ProctoringCandidateDetails;\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdFullscreen, MdFullscreenExit } from \"react-icons/md\";\n// import { CountDown } from \"../CountDown/CountDown\";\nimport { RoomServer } from \"../../interfaces\";\nimport RoomDetailsModal from \"./RoomDetailsModal\";\nimport { ExamRules } from \"../../actions\";\nimport moment from \"moment\";\nimport { CountDownLive } from \"../CountDown/CountDownLive\";\n// import { Link } from \"react-router-dom\";\ntype ProctoringMainTopBarProps = {\n  course_title: string;\n  post_title: string;\n  duration: number;\n  started_at: string | null;\n  exam_start: boolean;\n  focus_mode: boolean;\n  room: RoomServer;\n  active_candidate: number;\n  exam_rules: ExamRules;\n  exam_done: boolean;\n  // data\n  startExamHandler: Function;\n  stopExamHandler: Function;\n  focusToggle: Function;\n  leaveRoom: Function;\n  deleteRoom: Function;\n  ExamDone: Function;\n  addMinutesToRoom: () => void;\n};\n\nconst ProctoringMainTopBar: FC<ProctoringMainTopBarProps> = ({\n  course_title,\n  post_title,\n  duration,\n  started_at,\n  exam_start,\n  startExamHandler,\n  stopExamHandler,\n  focus_mode,\n  focusToggle,\n  leaveRoom,\n  room,\n  active_candidate,\n  deleteRoom,\n  ExamDone,\n  exam_rules,\n  exam_done,\n  addMinutesToRoom,\n}): ReactElement => {\n  const [info_modal, setInfo_modal] = useState(false);\n  return (\n    <Fragment>\n      <div\n        className={`${\n          focus_mode === true\n            ? \"border-blue-500 border-opacity-30 text-white proctoring-evaluator-navigation\"\n            : \"bg-white rounded-t-sm  rounded-md\"\n        } py-2 px-3 border-b z-50 grid grid-flow-row md:grid-cols-1 lg:grid-cols-2 transition-all ease-in-out`}\n      >\n        <div className=\"flex\">\n          <button\n            onClick={() => focusToggle()}\n            className={`px-2 ${\n              focus_mode === true\n                ? \"bg-blue-900 hover:bg-blue-500 \"\n                : \"bg-blue-100 hover:bg-blue-500 \"\n            } mr-2  rounded-md  hover:text-white`}\n          >\n            {focus_mode === true ? (\n              <Fragment>\n                <MdFullscreenExit className=\"text-3xl mx-auto -mb-2\" />\n                <span className=\"text-xs inline-block pt-1\">Un-Focus</span>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <MdFullscreen className=\"text-3xl mx-auto -mb-2\" />\n                <span className=\"text-xs inline-block pt-1\">Focus</span>\n              </Fragment>\n            )}\n          </button>\n          <div className=\"flex items-center\">\n            <div className=\"\">\n              <label\n                htmlFor=\"\"\n                className={`${\n                  focus_mode === true ? \"text-gray-200\" : \"\"\n                } text-sm m-0`}\n              >\n                {post_title}\n              </label>\n              <h3 className=\"text-white- text-lg -mt-2 font-bold\">\n                {course_title}\n              </h3>\n            </div>\n          </div>\n        </div>\n        <div className=\"text-red lg:pt-0 sm:pt-3 text-right md:text-left lg:text-right\">\n          <div className=\"grid grid-cols-5 gap-4 text-left\">\n            <div>\n              {exam_start === true && (\n                <>\n                  <label className=\"text-gray-400 text-sm\">Duration</label>\n                  <h2 className=\"text-xl font-bold\">{duration}M</h2>\n                </>\n              )}\n            </div>\n            <div>\n              {exam_start === true && (\n                <>\n                  <label className=\"text-gray-400 text-sm\">Started at:</label>\n                  {exam_start === true && (\n                    <h2 className=\"text-xl font-bold\">\n                      {moment(started_at).format(\"LT\")}\n                    </h2>\n                  )}\n                </>\n              )}\n            </div>\n\n            <div className=\"text-3xl -mt-3 \">\n              {exam_start === true && started_at !== null && started_at !== \"\" && (\n                <>\n                  {/* <CountDown\n                    start_time={started_at}\n                    duration_min={duration}\n                    timeout={() => ExamDone(true)}\n                    returnString={false}\n                    labels\n                  />{\" \"}\n                  -{\" \"} */}\n                  <CountDownLive\n                    room_id={room.room_id}\n                    timeout={() => ExamDone(true)}\n                    returnString={false}\n                    labels\n                  />\n                </>\n              )}\n            </div>\n            <div className=\"flex items-center pl-2\">\n              <button\n                onClick={() => setInfo_modal(true)}\n                className=\"btn bg-gray-100 text-gray-900 w-full hover:bg-gray-500 hover:text-white\"\n                title=\"Room details\"\n              >\n                {/* <MdInfoOutline className=\"inline-block\" />  */}\n                Room\n              </button>\n            </div>\n\n            <div className=\"flex items-center\">\n              {exam_start === false ? (\n                <button\n                  onClick={() => startExamHandler()}\n                  className=\"btn bg-green-500 text-white w-full\"\n                  title=\"Start Exam\"\n                >\n                  Start\n                </button>\n              ) : (\n                <button\n                  onClick={() => stopExamHandler()}\n                  className=\"btn bg-red-600 text-white w-full\"\n                  title=\"stop Exam\"\n                >\n                  Stop\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {info_modal && (\n        <RoomDetailsModal\n          close={setInfo_modal}\n          active_candidate={active_candidate}\n          room={room}\n          exam_start={exam_start}\n          leaveRoomHandler={leaveRoom}\n          deleteRoomHandler={deleteRoom}\n          exam_rules={exam_rules}\n          addMinutesToRoom={() => {\n            addMinutesToRoom();\n            setInfo_modal(false);\n          }}\n          exam_done={exam_done}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default ProctoringMainTopBar;\n","import React, { FC, ReactElement } from \"react\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringStatisticsProps = {\n  focus_mode: boolean;\n  candidates: CandidateProctoringInterface[];\n};\n\nconst ProctoringStatistics: FC<ProctoringStatisticsProps> = ({\n  focus_mode,\n  candidates,\n}): ReactElement => {\n  let total_candidates = candidates.length;\n  let active_candidates = candidates.filter(\n    (itm) => itm.active === true\n  ).length;\n  let done_candidates = candidates.filter((itm) => itm.done === true).length;\n  let remain_candidate = candidates.filter(\n    (itm) =>\n      itm.done === false &&\n      itm.active === true &&\n      itm.stopped === false &&\n      itm.removed === false\n  ).length;\n  let removed_candidate = candidates.filter(\n    (itm) => itm.removed === true\n  ).length;\n  let stopped_candidate = candidates.filter(\n    (itm) => itm.stopped === true && itm.done === false\n  ).length;\n  let left_candidates = candidates.filter(\n    (itm) => itm.active === false && itm.done === false && itm.joined === true\n  ).length;\n  let non_joined_candidates = candidates.filter(\n    (itm) => itm.joined === false\n  ).length;\n\n  /* function body */\n  return (\n    <div\n      className={`grid grid-cols-4 gap-2 p-3 border-separate ${\n        focus_mode === true\n          ? \"bg-blue-900 text-gray-300\"\n          : \"bg-white  shadow-lg border \"\n      } rounded-md my-2 text-center w-90`}\n    >\n      {[\n        {\n          title: \"Total\",\n          label: \"Total candidates\",\n          value: total_candidates,\n        },\n        {\n          title: \"Active\",\n          label: \"Active candidate(s)\",\n          value: active_candidates,\n        },\n        {\n          title: \"Done\",\n          label: \"Candidate(s) who done exam\",\n          value: done_candidates,\n        },\n        {\n          title: \"Left\",\n          label: \"Candidate(s) who left unfinished\",\n          value: left_candidates,\n        },\n        {\n          title: \"Removed\",\n          label: \"Removed candidate(s)\",\n          value: removed_candidate,\n        },\n        {\n          title: \"Stopped\",\n          label: \"Stopped candidate(s)\",\n          value: stopped_candidate,\n        },\n        {\n          title: \"Remain\",\n          label: \"Remain candidate(s)\",\n          value: remain_candidate,\n        },\n        {\n          title: \"Non Joined\",\n          label: \"Non joined exam(s)\",\n          value: non_joined_candidates,\n        },\n      ].map(\n        (\n          {\n            title,\n            label,\n            value,\n          }: { title: string; label: string; value: number },\n          i\n        ) => (\n          <div key={i} title={label} className=\"border rounded-md py-1\">\n            <h1 className=\"text-2xl font-bold -mb-1 p-0 \">{value}</h1>\n            <label htmlFor=\"\" className=\"text-sm -mt-2\">\n              {title}\n            </label>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\nexport default ProctoringStatistics;\n","import moment from \"moment\";\nimport React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport { MdClose } from \"react-icons/md\";\nimport { EventInterface, CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringEventsProps = {\n  events: EventInterface[];\n  clickOpen?: boolean;\n  clickHandler?: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  loading: boolean;\n};\n\nconst ProctoringEvents: FC<ProctoringEventsProps> = ({\n  events,\n  clickOpen = true,\n  clickHandler,\n  candidates,\n  focus_mode,\n  loading,\n}): ReactElement => {\n  /* function body */\n  const [selected, setSelected] = useState(\"\");\n\n  return (\n    <div\n      className={`mt-2 p-2 ${\n        focus_mode === true\n          ? \"bg-gray-900 text-white\"\n          : \"bg-gray-50 shadow-sm border\"\n      } rounded-md `}\n    >\n      <h1 className=\"text-xl\">Events</h1>\n      {loading === true ? (\n        <div className=\"p-2\">\n          <h4 className=\"block animate__animated animate__fadeIn animate__infinite p-3 text-center\">\n            Loading events...\n          </h4>\n        </div>\n      ) : events.length === 0 ? (\n        <div className=\"p-3 py-8 text-center\">\n          <h2 className=\"font-bold text-2xl\">No events found</h2>\n          <h2 className=\"\">No event has been committed yet</h2>\n        </div>\n      ) : (\n        events.map((evnt: EventInterface, i: number) => {\n          let findUser = candidates.find(\n            (cand: CandidateProctoringInterface) =>\n              cand.user_id === evnt.user_id\n          );\n\n          return (\n            <Fragment key={i}>\n              {selected === evnt.event_id ? (\n                <div className=\"animate__animated animate__zoomIn animate__faster\">\n                  <div className=\"overflow-hidden my-1 rounded border bg-blue-900 bg-opacity-30 border-blue-500\">\n                    <div className=\"px-3  flex items-center bg-blue-900 bg-opacity-30\">\n                      <h2 className=\"flex-1 m-0 text-xl py-2 opacity-70\">\n                        Event <b>{i + 1}</b> details\n                      </h2>\n                      <button\n                        onClick={() => setSelected(\"\")}\n                        className=\"hover:bg-red-600 text-2xl p-1.5 rounded-md\"\n                      >\n                        <MdClose />\n                      </button>\n                    </div>\n                    <div className=\"p-2\">\n                      <p>\n                        <span className=\"opacity-70\">Event type: </span>\n                        <b>{evnt.event_type_id}</b>\n                      </p>\n                      {/* <p>\n                        <span className=\"opacity-70\">Time: </span>\n                        <b>{evnt.createdAt}</b>\n                      </p> */}\n                      <p className=\"p-1 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                        <span className=\"opacity-70 block\">Description: </span>\n                        <b>{evnt.description}</b>\n                      </p>\n                      {findUser !== undefined && (\n                        <div className=\"p-1 mt-2 m-1 bg-blue-200 bg-opacity-20 px-2 rounded-md\">\n                          <p>\n                            <span className=\"opacity-70\">Names: </span>\n                            <b>\n                              {findUser.fname} {findUser.lname}\n                            </b>\n                          </p>\n                          <p>\n                            <span className=\"opacity-70\">Email: </span>\n                            <b>{findUser.email}</b>\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div\n                  onClick={() => setSelected(evnt.event_id)}\n                  className=\"p-1 border-t border-blue-400 border-opacity-25 hover:bg-blue-900 bg-opacity-30 cursor-pointer\"\n                >\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-1\">\n                      <h4>\n                        {findUser !== undefined ? (\n                          <span title={findUser?.fname + \" \" + findUser?.lname}>\n                            {findUser?.lname}\n                          </span>\n                        ) : (\n                          <span className=\"opacity-50\">System/Admin</span>\n                        )}\n                      </h4>\n                    </div>\n                    <div className=\"\">\n                      {/* <span className=\"text-sm  text-blue-400\">\n                        {moment(\n                          evnt.time + \" +0000\",\n                          \"YYYY-MM-DD HH:mm:ss Z\"\n                        ).fromNow()}\n                      </span> */}\n                      {/* <span>{evnt.time}</span> */}\n                    </div>\n                  </div>\n\n                  <p className=\"text-red-400 text-sm font-bold\">\n                    {evnt.event_type_id}\n                  </p>\n                </div>\n              )}\n            </Fragment>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nexport default ProctoringEvents;\n","import React, { FC, ReactElement } from \"react\";\n\nconst HoverControls: FC<{\n  icon: any;\n  title: string;\n  sub_title: string;\n  stop: () => void;\n  only: () => void;\n  add: () => void;\n  name: string;\n}> = ({ title, stop, only, add, name, icon, sub_title }): ReactElement => {\n  const Icon = icon;\n  return (\n    <div className=\" hover-child border border-white border-opacity-40 bg-opacity-90 bg-blue-900 w-52 z-50 p-2 rounded -mt-2\">\n      <Icon className=\"text-4xl mb-4 block mx-auto\" />\n      <button\n        onClick={stop}\n        className=\"px-0.5 py-1 hover:bg-red-600 text-center text-sm mb-2 border border-red-300 rounded-md  w-full block bg-red-600 bg-opacity-80\"\n      >\n        <span>\n          Stop {title} to <b>{name}</b>\n        </span>\n      </button>\n      <button\n        onClick={only}\n        className=\"px-0.5 py-1 hover:bg-green-600 text-center text-sm mb-2 border border-green-300 rounded-md  w-full block bg-green-600 bg-opacity-80\"\n      >\n        <span>\n          {title} <b>{name}</b> only\n        </span>\n      </button>\n      <button\n        onClick={add}\n        className=\"px-0.5 hover:bg-blue-600 py-1 text-center text-sm border border-blue-300 rounded-md  w-full block bg-blue-800\"\n      >\n        <span>\n          Add <b>{name}</b> to {sub_title}\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport default HoverControls;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdAccountCircle } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringCandidatesProps = {\n  clickHandler: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  show_title: boolean;\n  large: boolean;\n};\n\nconst ProctoringCandidates: FC<ProctoringCandidatesProps> = ({\n  clickHandler,\n  candidates,\n  focus_mode,\n  show_title,\n  large,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className={`mt-2 ${focus_mode === true ? \"text-white p-2 \" : \"\"}`}>\n      {show_title === true && (\n        <h1 className=\"text-3xl font-bold text-center pb-2 border-b mb-1 border-gray-100\">\n          Candidates\n        </h1>\n      )}\n      <table\n        className={`w-full text-left ${\n          focus_mode === true ? \"\" : \"bg-white rounded-md\"\n        }  p-2\"`}\n      >\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th></th>\n            <th></th>\n            {large === true && <th></th>}\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {candidates.map((cand: CandidateProctoringInterface, i: number) => (\n            <tr\n              key={i}\n              className={`group border-b mb-1 ${\n                focus_mode === true\n                  ? \"border-blue-800 border-opacity-60 hover:bg-blue-900\"\n                  : \"border-gray-200 border-opacity-60 hover:bg-blue-100\"\n              }  cursor-pointer`}\n              onClick={clickHandler.bind(this, cand.user_id)}\n            >\n              <td\n                className={`${\n                  focus_mode === true ? \"text-blue-500\" : \"text-gray-400\"\n                }  w-5 text-left`}\n              >\n                <MdAccountCircle\n                  className={large === true ? \"text-3xl\" : \"text-5xl\"}\n                />\n              </td>\n\n              <td className=\"text-gray-400 pl-1 py-1\">\n                <h4\n                  className={`font-bold ${\n                    large === true ? \"text-md\" : \"text-lg\"\n                  }  p-0 m-0 ${\n                    focus_mode === true ? \"text-white\" : \"text-gray-900\"\n                  }`}\n                >\n                  {cand.fname} {cand.lname}\n                </h4>\n                {large === false && (\n                  <p className=\"text-sm p-0 m-0 -mt-1\">{cand.email}</p>\n                )}\n              </td>\n              {large === true && (\n                <td className=\"\">\n                  <span className=\"text-sm p-0 m-0 -mt-1\">{cand.email}</span>\n                </td>\n              )}\n              <td\n                className={`text-right group-hover:opacity-100 opacity-40 ${\n                  large === false\n                    ? \"grid grid-cols-2 text-center w-10 pt-2\"\n                    : \"\"\n                } md:w-auto`}\n              >\n                {cand.joined === true && (\n                  <span className=\"inline-block text-xs bg-blue-300 px-1 rounded-md m-0.5\">\n                    #Joined\n                  </span>\n                )}\n                {cand.active === true && (\n                  <span className=\"inline-block text-xs bg-green-300 px-1 rounded-md m-0.5\">\n                    #Active\n                  </span>\n                )}\n                {cand.removed === true && (\n                  <span className=\"inline-block text-xs bg-red-300 text-white px-1 rounded-md m-0.5\">\n                    #Removed\n                  </span>\n                )}\n                {cand.done === true && (\n                  <span className=\"inline-block text-xs bg-yellow-300 px-1 rounded-md m-0.5\">\n                    #Done\n                  </span>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nProctoringCandidates.defaultProps = {\n  large: false,\n};\n\nexport default ProctoringCandidates;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../reducers\";\nimport ProctoringMainTopBar from \"../../components/ProctoringMainTopBar/ProctoringMainTopBar\";\nimport ProctoringStatistics from \"../../components/ProctoringStatistics/ProctoringStatistics\";\nimport ProctoringCandidateDetails from \"../../components/ProctoringCandidateDetails/ProctoringCandidateDetails\";\nimport ProctoringEvents from \"../../components/ProctoringEvents/ProctoringEvents\";\nimport ProctoringCandidates from \"../../components/ProctoringCandidates/ProctoringCandidates\";\nimport CenterCardSupervisor from \"../../components/CenterCardSupervisor/CenterCardSupervisor\";\nimport {\n  EventInterface,\n  OnlineCandidates,\n  Events,\n  CandidateProctoringInterface,\n  LiveServer__Room,\n  EventsLabels,\n  LiveServer__Candidate,\n  AudioEventManagement,\n  HandEventInterface,\n  StartExamEvent,\n  StartExam_Callback,\n} from \"../../interfaces\";\nimport {\n  Socket,\n  FC_GetProctoringRoom,\n  Auth,\n  Proctoring,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_CandidateRemoveExam,\n  FC_RoomDetailsOnline,\n  FC_RoomNotFoundOnline,\n  FC_CandidateDoneExamCenter,\n  FC_ExamDone,\n  FC_CandidateTimeOut,\n  FT_LoadRoomEvents,\n  FT_AddMinutesToCandidate,\n  FC_AddMinutesToCandidate,\n  FT_GetProctoringRoom,\n  FT_SetActiveCandidates,\n  FT_SetOneActiveCandidate,\n  FT_CandidateDoneExamCenter,\n  FT_CandidateExamEvent,\n  FT_CandidateOffline,\n  FT_CandidateRemoveExam,\n  FT_CandidateTimeOut,\n  FT_ClearExamToRoomProctoring,\n  FT_ContinueExam,\n  FT_ExamDone,\n  FT_ExamStartStop,\n  FT_RoomDetailsOnline,\n  FT_RoomNotFoundOnline,\n  FT_SaveEvent,\n  FT_StopCandidate,\n  FC_CreateProctoringRoom,\n  FT_CreateProctoringRoom,\n  candidateProctoringRoom,\n  FC_ClearProctoring,\n  FT_ClearProctoring,\n  FT_CloseProctoringRoom,\n  FC_CloseProctoringRoom,\n  FT_AddMyStream,\n  FT_AddUserStream,\n  FC_AddMyStream,\n  FC_AddUserStream,\n  FC_AddPeerId,\n  FT_AddPeerId,\n  FC_SpeakToAll,\n  FC_AddMic,\n  FC_AddSound,\n  FC_FocusOnUser,\n  FC_ListenAll,\n  FC_MicOnly,\n  FC_StopListenAll,\n  FC_StopMic,\n  FC_StopSound,\n  FC_StopSpeakToAll,\n  FT_AddMic,\n  FT_AddSound,\n  FT_FocusOnUser,\n  FT_ListenAll,\n  FT_MicOnly,\n  FT_SpeakToAll,\n  FT_StopListenAll,\n  FT_StopMic,\n  FT_StopSound,\n  FT_StopSpeakToAll,\n  FC_SoundOnly,\n  FT_SoundOnly,\n  FC_CandidateHandSupervisor,\n  FT_CandidateHandSupervisor,\n} from \"../../actions\";\nimport Spinner from \"../../components/Loading/Spinner\";\nimport {\n  MdComputer,\n  MdInfoOutline,\n  MdOutlineClose,\n  MdSupervisedUserCircle,\n} from \"react-icons/md\";\nimport { Attendance } from \"../../components/Attendance/Attendance\";\nimport AddTimeToCandidateModal from \"../../components/AddTimeToCandidateModal/AddTimeToCandidateModal\";\nimport * as webRTCGroupHandler from \"../../actions/VideoCall\";\nimport {\n  CreateRoom__Interface,\n  JoinRoom__Interface,\n} from \"../../interfaces/proctoring\";\nimport VideoCardProctoring from \"../../components/VideoCardProctoring/VideoCardProctoring\";\nimport SoundControl from \"./SoundControl\";\nimport VideoCardProctoringFocus from \"../../components/VideoCardProctoring/VideoCardProctoringFocus\";\nimport { v4 as uuidV4 } from \"uuid\";\n// props for the component\n\nexport interface ProctoringOnlineSupervisorProps {\n  socket: Socket;\n  auth: Auth;\n  proctoring: Proctoring;\n  homeProctoring: boolean;\n  FC_GetProctoringRoom: FT_GetProctoringRoom;\n  FC_SetActiveCandidates: FT_SetActiveCandidates;\n  FC_SetOneActiveCandidate: FT_SetOneActiveCandidate;\n  FC_CandidateOffline: FT_CandidateOffline;\n  FC_ExamStartStop: FT_ExamStartStop;\n  FC_ContinueExam: FT_ContinueExam;\n  FC_StopCandidate: FT_StopCandidate;\n  FC_CandidateExamEvent: FT_CandidateExamEvent;\n  FC_ClearExamToRoomProctoring: FT_ClearExamToRoomProctoring;\n  FC_SaveEvent: FT_SaveEvent;\n  FC_LoadRoomEvents: FT_LoadRoomEvents;\n  FC_CandidateRemoveExam: FT_CandidateRemoveExam;\n  FC_RoomNotFoundOnline: FT_RoomNotFoundOnline;\n  FC_RoomDetailsOnline: FT_RoomDetailsOnline;\n  FC_CandidateDoneExamCenter: FT_CandidateDoneExamCenter;\n  FC_ExamDone: FT_ExamDone;\n  FC_CandidateTimeOut: FT_CandidateTimeOut;\n  FC_AddMinutesToCandidate: FT_AddMinutesToCandidate;\n  FC_CreateProctoringRoom: FT_CreateProctoringRoom;\n  FC_ClearProctoring: FT_ClearProctoring;\n  FC_CloseProctoringRoom: FT_CloseProctoringRoom;\n  FC_AddMyStream: FT_AddMyStream;\n  FC_AddUserStream: FT_AddUserStream;\n  FC_AddPeerId: FT_AddPeerId;\n  FC_SpeakToAll: FT_SpeakToAll;\n  FC_StopSpeakToAll: FT_StopSpeakToAll;\n  FC_ListenAll: FT_ListenAll;\n  FC_StopListenAll: FT_StopListenAll;\n  FC_AddMic: FT_AddMic;\n  FC_StopMic: FT_StopMic;\n  FC_MicOnly: FT_MicOnly;\n  FC_AddSound: FT_AddSound;\n  FC_StopSound: FT_StopSound;\n  FC_FocusOnUser: FT_FocusOnUser;\n  FC_SoundOnly: FT_SoundOnly;\n  FC_CandidateHandSupervisor: FT_CandidateHandSupervisor;\n}\n\nenum ActiveSideTap {\n  Candidates,\n  Events,\n}\n\nexport interface PopupModal {\n  title: string;\n  icon: any;\n  time: string;\n  user_id: string;\n  type: Events;\n  id: string;\n  username: string;\n}\n\ninterface AppState {\n  focus_mode: boolean;\n  loading: boolean;\n  loading_room: boolean;\n  events: EventInterface[];\n  active_side_tab: ActiveSideTap;\n  selected_candidate: string | null;\n  online_room: boolean;\n  online_candidates: OnlineCandidates[];\n  start_exam: boolean;\n  error: {\n    target: string;\n    msg: string;\n  };\n  events_loading: boolean;\n  room_found: boolean;\n  start_time: string;\n  duration: number;\n  add_minutes: {\n    candidate: CandidateProctoringInterface | null;\n    minutes: number;\n    room: boolean;\n    reset_added_minutes: boolean;\n  };\n  popups: PopupModal[];\n  loading_close_room: boolean;\n  create_group_loading: boolean;\n}\n\nclass _ProctoringOnlineSupervisor extends React.Component<\n  ProctoringOnlineSupervisorProps,\n  AppState\n> {\n  private myPeer: any;\n\n  constructor(props: ProctoringOnlineSupervisorProps) {\n    super(props);\n\n    this.state = {\n      room_found: false,\n      focus_mode: false,\n      loading_room: true,\n      loading: false,\n      events: [],\n      active_side_tab: ActiveSideTap.Events,\n      selected_candidate: null,\n      online_room: false,\n      online_candidates: [],\n      start_exam: false,\n      error: {\n        msg: \"\",\n        target: \"\",\n      },\n      events_loading: true,\n      start_time: \"\",\n      duration: 0,\n      add_minutes: {\n        candidate: null,\n        minutes: 0,\n        room: false,\n        reset_added_minutes: true,\n      },\n      popups: [],\n      loading_close_room: false,\n      create_group_loading: false,\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.homeProctoring === true) {\n      this.setState({\n        focus_mode: true,\n      });\n      this.props.FC_AddMyStream(this.props.socket.socket.id, (stream) => {\n        webRTCGroupHandler.connectWithMyPeer(\n          (peer_id) => {\n            this.props.FC_AddPeerId(peer_id);\n\n            console.log({\n              connectWithMyPeer: peer_id,\n              peer_id: this.props.proctoring.my_stream.peer_id,\n              stream_id: this.props.proctoring.my_stream.stream_id,\n              socket_data: this.props.proctoring.my_stream.socket_id,\n            });\n\n            this.startProctoringOperations();\n          },\n          (stream) => this.props.FC_AddUserStream(stream),\n          stream\n        );\n      });\n    } else {\n      this.startProctoringOperations();\n    }\n  };\n\n  startProctoringOperations = () => {\n    const { room_id, course_id, position_id, exam_id } =\n      this.props.proctoring.exam;\n\n    // check if the user have already joined the room\n    if (\n      this.props.proctoring.candidates.length <= 0 &&\n      this.props.auth.application_session !== null &&\n      this.props.auth.application_session._id !== undefined\n    ) {\n      this.setState({\n        loading_room: true,\n      });\n      //* Load candidates on the room\n      this.props.FC_GetProctoringRoom(\n        {\n          room_id,\n          course_id,\n          position_id,\n          session_id: this.props.auth.application_session._id,\n        },\n        (status, msg) => {\n          if (status === true) {\n            this.setState({\n              loading_room: false,\n            });\n\n            // *********************************************************************\n\n            this.props.socket.socket.emit(\n              Events.GET_ROOM_INFO_SERVER,\n              this.props.proctoring.room.room_id,\n              (data: {\n                data: LiveServer__Room;\n                error: boolean;\n                msg: string;\n              }) => {\n                // console.log({ GET_ROOM_SERVER: data.data });\n\n                if (data.error === true) {\n                  this.props.FC_RoomNotFoundOnline(data.msg);\n                } else {\n                  if (data.data.exam_id === exam_id) {\n                    this.props.FC_RoomDetailsOnline(data.data);\n\n                    this.startListeningToEvents(); //* Continue here\n                  } else {\n                    this.setState({\n                      loading_room: false,\n                      error: {\n                        target: \"wrong-room\",\n                        msg: \"Exams does not match the active group\",\n                      },\n                    });\n                  }\n                }\n              }\n            );\n          } else {\n            this.setState({\n              loading_room: false,\n              error: {\n                target: \"all\",\n                msg: msg,\n              },\n            });\n          }\n        }\n      );\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.props.socket.socket.off(Events.NEW_USER_JOINED_CLIENT);\n    this.props.socket.socket.off(Events.TIME_OUT_CLIENT);\n    this.props.socket.socket.off(Events.USER_DISCONNECTED);\n    this.props.socket.socket.off(Events.EXAM_DONE_CLIENT);\n    this.props.socket.socket.off(Events.CAND_EXAM_EVENT_CLIENT);\n  };\n\n  closeGroupHandler = (group_id: string, candidates: string[]) => {\n    this.setState({\n      loading_close_room: true,\n    });\n    this.props.FC_CloseProctoringRoom(group_id, candidates, (status, msg) => {\n      if (status === true) {\n        this.setState({\n          loading_close_room: true,\n        });\n      } else {\n        this.setState({\n          loading_close_room: true,\n          error: {\n            target: \"main\",\n            msg: `Failed to close the room room: ${msg}`,\n          },\n        });\n      }\n    });\n  };\n\n  startListeningToEvents = () => {\n    const { peer_id, socket_id, stream_id } = this.props.proctoring.my_stream;\n    console.log({ exam_id: this.props.proctoring.exam.exam_id });\n\n    this.props.socket.socket.emit(\n      Events.JOIN_ROOM,\n      {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: this.props.auth.user.user_id,\n        supper: true,\n        exam_id: this.props.proctoring.exam.exam_id,\n        socket_id: socket_id,\n        stream_id: stream_id,\n        peer_id: peer_id,\n      } as JoinRoom__Interface,\n      (data: { data: any; error: boolean; msg: string }) => {\n        console.log({ joining_room: data });\n\n        if (data.error === true) {\n          return this.setState({\n            error: {\n              target: \"main\",\n              msg: data.msg,\n            },\n          });\n        }\n\n        if (this.props.homeProctoring === true)\n          //* call the users who are already in the room\n          this.props.proctoring.candidates.forEach((candidate) => {\n            if (\n              candidate.active === true &&\n              candidate.peer_id !== \"\" &&\n              candidate.peer_id !== \"\"\n            ) {\n              console.log(\"older user joined video call\", candidate.user_id);\n              console.log(candidate.peer_id);\n\n              webRTCGroupHandler.connectToNewUser(\n                candidate.peer_id,\n                this.props.proctoring.my_stream.stream,\n                (user_stream) => {\n                  console.log(\"USER STREAM RECEIVED\");\n\n                  this.props.FC_AddUserStream(user_stream);\n                }\n              );\n            }\n          });\n\n        //* New user connected\n        this.props.socket.socket.on(\n          Events.NEW_USER_JOINED_CLIENT,\n          (user: LiveServer__Candidate) => {\n            //* Add activate the new user\n            this.props.FC_SetOneActiveCandidate(user);\n\n            //* Call the peer\n            if (this.props.homeProctoring === true) {\n              console.log(\"new user joined\");\n              console.log(user.peer_id);\n\n              webRTCGroupHandler.connectToNewUser(\n                user.peer_id,\n                this.props.proctoring.my_stream.stream,\n                (user_stream) => {\n                  console.log(\"USER STREAM RECEIVED\");\n\n                  this.props.FC_AddUserStream(user_stream);\n                }\n              );\n            }\n          }\n        );\n\n        this.props.socket.socket.on(\n          Events.TIME_OUT_CLIENT,\n          (event: EventInterface) => {\n            this.props.FC_CandidateTimeOut(event);\n          }\n        );\n\n        //* remove the candidate online\n        this.props.socket.socket.on(Events.USER_DISCONNECTED, (userId: any) => {\n          if (this.props.proctoring.exam.start_exam === true) {\n            this.props.FC_CandidateOffline(userId);\n\n            this.props.FC_SaveEvent(\n              {\n                application_session_id:\n                  this.props.auth.application_session?._id,\n                description: \"Leave the room\",\n                done_by: \"System\",\n                event_type_id: Events.CANDIDATE_LEFT_EXAM_EVENT,\n                exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n                position_id: this.props.proctoring.exam.position_id,\n                room_id: this.props.proctoring.room.room_id,\n                time: new Date().toString(),\n                user_id: userId,\n                group_id: this.props.proctoring.room.group_id,\n              } as EventInterface,\n              (status: boolean, error: string) => {\n                if (status === false)\n                  this.setState({ error: { target: \"main\", msg: error } });\n              }\n            );\n          }\n        });\n\n        //* candidate done exam\n        this.props.socket.socket.on(\n          Events.EXAM_DONE_CLIENT,\n          (event: EventInterface) =>\n            this.props.FC_CandidateDoneExamCenter(event)\n        );\n\n        //* candidate done exam\n        this.props.socket.socket.on(\n          Events.HOME_PROCTORING__SET_HAND,\n          (event: HandEventInterface) => {\n            console.log(\"Rize hand\");\n\n            this.props.FC_CandidateHandSupervisor(event);\n          }\n        );\n\n        /**\n         * @description Exam events\n         */\n        this.props.socket.socket.on(\n          Events.CAND_EXAM_EVENT_CLIENT,\n          (event: EventInterface) => this.props.FC_CandidateExamEvent(event)\n        );\n      }\n    );\n\n    // ***********************  CANDIDATE - DEVICES -EVENTS *********\n    //* candidate done exam\n    this.props.socket.socket.on(\n      Events.USER_USING_MORE_ACCOUNTS,\n      (user_id: string) => {\n        let user = this.props.proctoring.candidates.find(\n          (cand) => cand.user_id === user_id\n        );\n        if (user !== undefined) {\n          this.setState({\n            popups: [\n              ...this.state.popups,\n              {\n                id: uuidV4(),\n                icon: MdSupervisedUserCircle,\n                time: new Date().toString(),\n                title:\n                  \"The candidate is trying to login with multiple devices or tabs\",\n                user_id: user_id,\n                type: Events.USER_USING_MORE_ACCOUNTS,\n                username: user.lname,\n              },\n            ],\n          });\n        }\n\n        this.props.FC_SaveEvent(\n          {\n            application_session_id: this.props.auth.application_session?._id,\n            description:\n              \"The candidate is trying to login with multiple devices or tabs\",\n            done_by: \"System\",\n            event_type_id: Events.USER_USING_MORE_ACCOUNTS,\n            exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n            position_id: this.props.proctoring.exam.position_id,\n            room_id: this.props.proctoring.room.room_id,\n            time: new Date().toString(),\n            user_id: user_id,\n            group_id: this.props.proctoring.room.group_id,\n          } as EventInterface,\n          (status: boolean, error: string) => {\n            if (status === false)\n              this.setState({ error: { target: \"main\", msg: error } });\n          }\n        );\n      }\n    );\n\n    //* candidate done exam\n    this.props.socket.socket.on(\n      Events.USER_USING_MORE_DEVICES,\n      (user_id: string) => {\n        let user = this.props.proctoring.candidates.find(\n          (cand) => cand.user_id === user_id\n        );\n        if (user !== undefined) {\n          this.setState({\n            popups: [\n              ...this.state.popups,\n              {\n                id: uuidV4(),\n                icon: MdComputer,\n                time: new Date().toString(),\n                title: \"The candidate is using another device/browser to login\",\n                user_id: user_id,\n                type: Events.USER_USING_MORE_ACCOUNTS,\n                username: user.lname,\n              },\n            ],\n          });\n        }\n\n        this.props.FC_SaveEvent(\n          {\n            application_session_id: this.props.auth.application_session?._id,\n            description:\n              \"The candidate is trying to login with multiple devices or tabs\",\n            done_by: \"System\",\n            event_type_id: Events.USER_USING_MORE_ACCOUNTS,\n            exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n            position_id: this.props.proctoring.exam.position_id,\n            room_id: this.props.proctoring.room.room_id,\n            time: new Date().toString(),\n            user_id: user_id,\n            group_id: this.props.proctoring.room.group_id,\n          } as EventInterface,\n          (status: boolean, error: string) => {\n            if (status === false)\n              this.setState({ error: { target: \"main\", msg: error } });\n          }\n        );\n      }\n    );\n    // *********************** ALL THE PROCESS CONTINUES HERE *********\n    // load events\n    if (\n      this.props.auth.application_session?._id !== null &&\n      this.props.auth.application_session?._id !== undefined\n    ) {\n      this.setState({\n        events_loading: true,\n      });\n      this.props.FC_LoadRoomEvents(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          exam_id: this.props.proctoring.exam.exam_id,\n          room_id: this.props.proctoring.room.room_id,\n          group_id: this.props.proctoring.room.group_id,\n        },\n        (status: boolean, msg: string) => {\n          if (status === true) {\n            this.setState({\n              events_loading: false,\n            });\n          } else {\n            this.setState({\n              events_loading: false,\n              error: {\n                target: \"main\",\n                msg: msg,\n              },\n            });\n          }\n        }\n      );\n    }\n  };\n\n  leaveRoom = () => {\n    // this.props.socket.socket.off(Events.START_EXAM_CLIENT);\n    this.props.socket.socket.off(Events.USER_CONNECTED);\n    this.props.socket.socket.off(Events.USER_DISCONNECTED);\n    this.props.socket.socket.off(Events.CAND_EXAM_EVENT_CLIENT);\n\n    this.props.FC_ClearExamToRoomProctoring();\n  };\n\n  removePopup = (popup_id: string) =>\n    this.setState({\n      popups: this.state.popups.filter((el) => el.id !== popup_id),\n    });\n  // ***************************************************************************\n\n  blank = (e: any) => console.log(\"clicked\");\n\n  /**\n   * chand the active tab on the side\n   * @param itm\n   * @returns\n   */\n  ActiveSIdeTabHandler = (itm: ActiveSideTap) =>\n    this.setState({ active_side_tab: itm });\n\n  SelectCandidateHandler = (value: string | null) =>\n    this.setState({ selected_candidate: value });\n\n  startExamHandler = () => {\n    if (\n      this.props.proctoring.candidates.filter((cand) => cand.active === true)\n        .length <= 0\n    ) {\n      return window.alert(\"You can't start exam without any active candidate\");\n    }\n    if (window.confirm(\"Are you sure you want to start the exam??\")) {\n      this.props.socket.socket.emit(\n        Events.START_EXAM_SERVER,\n        {\n          room_id: this.props.proctoring.room.room_id,\n          data: \"start exam\",\n          description: \"The exam started on this room\",\n          msg: \"The exam started on this room\",\n          duration: this.props.proctoring.exam.duration,\n        } as StartExamEvent,\n        ({\n          start_time,\n          duration,\n          end_time,\n          fixed_duration,\n        }: StartExam_Callback) => {\n          this.props.FC_ExamStartStop(true, start_time, duration);\n        }\n      );\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"The exam started on this room\",\n          done_by: \"Administrator\",\n          event_type_id: \"EXAM STARTED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  stopExamHandler = () => {\n    if (window.confirm(\"Are you sure you want to stop the exam??\")) {\n      this.props.socket.socket.emit(Events.STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        description: \"Exam stopped on this room\",\n      });\n\n      this.props.FC_ExamStartStop(false);\n\n      // Save to db\n      if (this.props.proctoring.room_groups !== null) {\n        let room_exists = this.props.proctoring.room_groups?.find(\n          (itm) => itm.group_id === this.props.proctoring.room.group_id\n        );\n\n        if (room_exists !== undefined && room_exists?._id !== undefined) {\n          this.closeGroupHandler(\n            room_exists?._id,\n            this.props.proctoring.candidates\n              .filter((itm) => itm.joined === false)\n              .map((itm) => itm.user_id)\n          );\n        }\n      }\n\n      // Save event\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Exam stopped on this room\",\n          done_by: \"Supervisor\",\n          event_type_id: \"EXAM_STOPPED\",\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: this.props.auth.user.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  continueHandler = (user_id: string) => {\n    if (\n      window.confirm(\n        \"Alre you sure you want to give this candidate the permition to continue the exam??\"\n      )\n    ) {\n      this.props.FC_ContinueExam(user_id);\n      this.props.socket.socket.emit(Events.CAND_CONTINUE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        description: \"Allowed a candidate to continue exam\",\n      });\n\n      // Save the contitue action\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Allowed a candidate to continue exam\",\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_CONTINUE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string, event: EventInterface | null) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  stopCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"If you want to stop the candidate add the reason\");\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `STOP: ${msg}`,\n        done_by: \"Supervisor\",\n        event_type_id: Events.CAND_STOP_EXAM_CLIENT,\n      });\n\n      this.props.FC_StopCandidate(user_id);\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `STOP: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_STOP_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  ejectCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to remove the candidate add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_REMOVE_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: msg,\n        description: `REMOVED: ${msg}`,\n        done_by: \"Supervisor\",\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `REMOVED: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_REMOVE_EXAM_CLIENT,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false) {\n            this.setState({ error: { target: \"main\", msg: error } });\n          } else {\n            this.props.FC_CandidateRemoveExam(user_id);\n          }\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n\n  warnCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\n      \"If you want to warn this candidate, add the reason\"\n    );\n    if (msg !== null) {\n      this.props.socket.socket.emit(Events.CAND_WARNING_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `WARNING: ${msg}`,\n        description: `WARNING: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `WARNING: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_WARNING_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  restartCandidateHandler = (user_id: string) => {\n    let msg = window.prompt(\"Restart this candidate's exam, reason\");\n    if (msg !== null) {\n      console.log(\"RESTART EXAM CANDIDATE\");\n      this.props.socket.socket.emit(Events.CAND_RESTART_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n        msg: `RESTART: ${msg}`,\n        description: `RESTART: ${msg}`,\n      });\n\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `RESTART: ${msg}`,\n          done_by: \"Supervisor\",\n          event_type_id: Events.CAND_RESTART_EXAM_SERVER,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({ error: { target: \"main\", msg: error } });\n        }\n      );\n    }\n  };\n\n  focusToggle = () =>\n    this.setState((prevState) => ({\n      focus_mode: !prevState.focus_mode,\n    }));\n\n  createAttendance = (\n    { name, list }: { name: string; list: string[] },\n    create_server_room: boolean = true\n  ) => {\n    this.props.socket.socket.emit(\n      Events.CREATE_ROOM_SERVER,\n      {\n        candidates: list,\n        room_id: this.props.proctoring.room.room_id,\n        user_id: this.props.auth.user.user_id,\n        group_id: name,\n        stop_candidate_when_comeback:\n          this.props.proctoring.exam_rules.stop_candidate_when_comeback,\n        exam_id: this.props.proctoring.exam.exam_id,\n        duration: this.props.proctoring.exam.duration,\n        center_id: this.props.proctoring.room.center_id,\n        district_id: this.props.proctoring.room.district_id,\n      } as CreateRoom__Interface,\n      (data: { data: LiveServer__Room; error: boolean; msg: string }) => {\n        if (data.error === false) {\n          this.props.FC_RoomDetailsOnline(data.data);\n          this.startListeningToEvents();\n          //! this is where the attendance will happening\n\n          if (\n            create_server_room === true &&\n            this.props.auth.application_session?._id !== null &&\n            this.props.auth.application_session?._id !== undefined\n          ) {\n            this.setState({\n              create_group_loading: true,\n            });\n            this.props.FC_CreateProctoringRoom(\n              {\n                candidates: data.data.candidates\n                  .filter((itm) => itm.user_id !== this.props.auth.user.user_id)\n                  .map((candidate) => ({\n                    user_id: candidate.user_id,\n                    seat_number: candidate.seat_number,\n                  })) as candidateProctoringRoom[],\n                application_session_id: this.props.auth.application_session._id,\n                exam_id: data.data.exam_id,\n                group_id: data.data.group_id,\n                room_id: data.data.room_id,\n                course_id: this.props.proctoring.exam.course_id,\n              },\n              (status, msg) => {\n                if (status === true) {\n                  this.setState({\n                    create_group_loading: false,\n                  });\n                } else {\n                  this.setState({\n                    error: {\n                      msg: msg,\n                      target: \"main\",\n                    },\n                    create_group_loading: false,\n                  });\n                }\n              }\n            );\n          }\n\n          // console.log({ CREATED_GROUP: data });\n        } else {\n          this.props.FC_RoomNotFoundOnline(data.msg);\n        }\n      }\n    );\n  };\n\n  deleteRoomHandler = () => {\n    if (\n      this.props.proctoring.candidates.filter((cand) => cand.active === true)\n        .length >= 1\n    ) {\n      return window.alert(\n        \"You can't delete the group while some candidates are already joined.\"\n      );\n    }\n\n    let msg = window.prompt(\"Are you sure you want to close this group??\");\n    if (msg !== null) {\n      this.props.socket.socket.emit(\n        Events.DELETE_ROOM_SERVER,\n        {\n          room_id: this.props.proctoring.room.room_id,\n        },\n        (status: boolean) => {\n          if (status === true) {\n            this.leaveRoom();\n            // Save the event\n            this.props.FC_SaveEvent(\n              {\n                application_session_id:\n                  this.props.auth.application_session?._id,\n                description: `ROOM DELETED: ${msg}`,\n                done_by: \"Supervisor\",\n                event_type_id: `DELETE GROUP ${this.props.proctoring.room.room_number}`,\n                exam_id: this.props.proctoring.exam.exam_id,\n                position_id: this.props.proctoring.exam.position_id,\n                room_id: this.props.proctoring.room.room_id,\n                time: new Date().toString(),\n                user_id: this.props.auth.user.user_id,\n                group_id: this.props.proctoring.room.group_id,\n              } as EventInterface,\n              (status: boolean, error: string) => {\n                if (status === false) {\n                  this.setState({ error: { target: \"main\", msg: error } });\n                }\n              }\n            );\n          } else {\n            this.setState({\n              error: { target: \"main\", msg: \"Failed to delete the group\" },\n            });\n          }\n        }\n      );\n    }\n  };\n\n  addMinutesModal = (candidate: CandidateProctoringInterface) =>\n    this.setState({\n      add_minutes: {\n        ...this.state.add_minutes,\n        candidate: candidate,\n        minutes: 0,\n        room: false,\n      },\n    });\n\n  addMinutesHandler = (minutes: number, reason: string) => {\n    if (\n      this.state.add_minutes.room === true &&\n      this.state.add_minutes.candidate === null\n    ) {\n      this.addMinutesToTheRoom(minutes, reason);\n    } else {\n      this.addMinutesToCandidate(minutes, reason);\n    }\n  };\n\n  // addMinutes to the candidate\n  addMinutesToCandidate = (minutes: number, reason: string) => {\n    if (\n      window.confirm(\n        `Are you sure you want to add ${minutes} to ${this.state.add_minutes.candidate?.fname}?`\n      )\n    ) {\n      if (this.state.add_minutes.candidate?.user_id === undefined) return;\n\n      let duration: number;\n      let start_time: string;\n      // calculate the timeout\n      if (this.props.proctoring.exam.exam_done === true) {\n        start_time = new Date().toString();\n        duration = minutes;\n      } else {\n        start_time =\n          this.props.proctoring.exam.start_time === null\n            ? \"\"\n            : this.props.proctoring.exam.start_time;\n        duration = this.props.proctoring.exam.duration + minutes;\n      }\n\n      let event_data = {\n        application_session_id: this.props.auth.application_session?._id,\n        description: `Added ${minutes}min`,\n        done_by: \"Supervisor\",\n        event_type_id: EventsLabels.ADD_TIME,\n        exam_id: this.props.proctoring.exam.exam_id,\n        position_id: this.props.proctoring.exam.position_id,\n        room_id: this.props.proctoring.room.room_id,\n        time: new Date().toString(),\n        user_id: this.state.add_minutes.candidate?.user_id,\n        group_id: this.props.proctoring.room.group_id,\n      } as EventInterface;\n\n      //* add minutes to the candidate\n      this.props.socket.socket.emit(\n        Events.ADD_TIME_TO_CANDIDATE_SERVER,\n        {\n          start_time,\n          duration,\n          minutes,\n        },\n        event_data\n      );\n\n      // Add minutes to the candidate\n      this.props.FC_AddMinutesToCandidate({\n        user_id: this.state.add_minutes.candidate?.user_id,\n        duration: duration,\n        start_time,\n      });\n\n      // Save the event\n      this.props.FC_SaveEvent(event_data, (status: boolean, error: string) => {\n        if (status === false) {\n          this.setState({ error: { target: \"main\", msg: error } });\n        }\n      });\n    }\n  };\n\n  // Add minutes to the candidate\n  addMinutesToTheRoom = (minutes: number, reason: string) => {\n    if (\n      window.confirm(\n        `Are you sure you want to add ${minutes} to the whole room ${\n          this.state.add_minutes.reset_added_minutes === true &&\n          \"And ignore the minutes you added to some candidates?\"\n        }?`\n      )\n    ) {\n      this.props.proctoring.candidates.forEach((candidate) => {\n        let duration: number;\n        let start_time: string;\n        // calculate the timeout\n        if (this.props.proctoring.exam.exam_done === true) {\n          start_time = new Date().toString();\n          if (this.state.add_minutes.reset_added_minutes === true) {\n            duration = minutes;\n          } else {\n            duration = minutes + candidate.added_minutes;\n          }\n        } else {\n          start_time =\n            this.props.proctoring.exam.start_time === null\n              ? \"\"\n              : this.props.proctoring.exam.start_time;\n          if (this.state.add_minutes.reset_added_minutes === true) {\n            duration = this.props.proctoring.exam.duration + minutes;\n          } else {\n            duration =\n              this.props.proctoring.exam.duration +\n              minutes +\n              candidate.added_minutes;\n          }\n        }\n\n        let event_data = {\n          application_session_id: this.props.auth.application_session?._id,\n          description: `Added ${minutes}min`,\n          done_by: \"Supervisor\",\n          event_type_id: EventsLabels.ADD_TIME,\n          exam_id: this.props.proctoring.exam.exam_id,\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: candidate?.user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface;\n\n        //* add minutes to the candidate\n        this.props.socket.socket.emit(\n          Events.ADD_TIME_TO_CANDIDATE_SERVER,\n          {\n            start_time,\n            duration,\n            minutes,\n          },\n          event_data\n        );\n\n        // Add minutes to the candidate\n        // this.props.FC_AddMinutesToCandidate({\n        //   user_id: this.state.add_minutes.candidate?.user_id,\n        //   duration: duration,\n        //   start_time,\n        // });\n\n        // Save the event\n        this.props.FC_SaveEvent(\n          event_data,\n          (status: boolean, error: string) => {\n            if (status === false) {\n              this.setState({ error: { target: \"main\", msg: error } });\n            }\n          }\n        );\n      });\n    }\n  };\n\n  addMinutesToRoomModal = () =>\n    this.setState({\n      add_minutes: {\n        ...this.state.add_minutes,\n        candidate: null,\n        minutes: 0,\n        room: true,\n      },\n    });\n\n  reset_added_minutesHandler = () => {\n    this.setState({\n      add_minutes: {\n        ...this.state.add_minutes,\n        reset_added_minutes: !this.state.add_minutes.reset_added_minutes,\n      },\n    });\n  };\n\n  backToProctoringCenter = () => this.props.FC_ClearProctoring();\n\n  //* Manage on user\n  micAdd = (user_id: string) => {\n    this.props.FC_AddMic(user_id);\n    //* Send socket event\n    this.props.socket.socket.emit(Events.HOME_PROCTORING__ADD_MIC, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n    } as AudioEventManagement);\n  };\n\n  micStop = (user_id: string) => {\n    this.props.FC_StopMic(user_id);\n    //* Send socket event\n    this.props.socket.socket.emit(Events.HOME_PROCTORING__STOP_MIC, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n    } as AudioEventManagement);\n  };\n\n  micOnly = (user_id: string) => {\n    this.props.FC_MicOnly(user_id);\n    //* Send socket event\n    this.props.socket.socket.emit(Events.HOME_PROCTORING__MIC_ONLY, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n    } as AudioEventManagement);\n  };\n\n  soundAdd = this.props.FC_AddSound;\n  soundStop = this.props.FC_StopSound;\n  soundOnly = this.props.FC_SoundOnly;\n  focus = this.props.FC_FocusOnUser;\n\n  //* Manage all the sounds\n  speakToAll = () => {\n    this.props.FC_SpeakToAll();\n    this.props.socket.socket.emit(\n      Events.HOME_PROCTORING__SPEAK_TO_ALL,\n      this.props.proctoring.room.room_id\n    );\n  };\n  stopSpeaking = () => {\n    this.props.FC_StopSpeakToAll();\n    this.props.socket.socket.emit(\n      Events.HOME_PROCTORING__STOP_SPEAK_TO_ALL,\n      this.props.proctoring.room.room_id\n    );\n  };\n  listenAll = this.props.FC_ListenAll;\n  stopListening = this.props.FC_StopListenAll;\n\n  // Reset room\n  resetDevice = (user_id: string) => {\n    if (window.confirm(\"Are you sure you want to reset the device\")) {\n      this.props.socket.socket.emit(Events.RESET_USER_DEVICE, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n      } as { room_id: string; user_id: string });\n\n      // Save the event\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Supervisor reset the device of the candidate\",\n          done_by: \"Supervisor\",\n          event_type_id: Events.RESET_USER_DEVICE,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({\n              error: { target: \"main\", msg: \"failed to save event\" },\n            });\n        }\n      );\n    }\n  };\n\n  setAiProctoring = (user_id: string, status: boolean) => {\n    if (window.confirm(\"Are you sure you want to reset the device\")) {\n      this.props.socket.socket.emit(Events.RESET_USER_DEVICE, {\n        room_id: this.props.proctoring.room.room_id,\n        user_id: user_id,\n      } as { room_id: string; user_id: string });\n\n      // Save the event\n      this.props.FC_SaveEvent(\n        {\n          application_session_id: this.props.auth.application_session?._id,\n          description: \"Supervisor reset the device of the candidate\",\n          done_by: \"Supervisor\",\n          event_type_id: Events.RESET_USER_DEVICE,\n          exam_id: this.props.proctoring.exam.exam_id, //this.props.proctoring.exam.\n          position_id: this.props.proctoring.exam.position_id,\n          room_id: this.props.proctoring.room.room_id,\n          time: new Date().toString(),\n          user_id: user_id,\n          group_id: this.props.proctoring.room.group_id,\n        } as EventInterface,\n        (status: boolean, error: string) => {\n          if (status === false)\n            this.setState({\n              error: { target: \"main\", msg: \"failed to save event\" },\n            });\n        }\n      );\n    }\n  };\n\n  render() {\n    if (this.state.error.target === \"wrong-room\") {\n      return (\n        <div className=\"text-center p-8 mx-2 rounded bg-white m-6 animate__animated animate__zoomIn animate__faster\">\n          <h1 className=\"font-bold text-3xl text-red-800\">\n            {this.state.error.msg}\n          </h1>\n          <p className=\"text-gray-600\">\n            The you created a group which is doing another exam <br /> Please go\n            back the the created room\n          </p>\n          <button\n            className=\"btn bg-blue-500 p-2 px-3 text-white rounded hover:bg-blue-600 mt-3\"\n            onClick={this.backToProctoringCenter.bind(this)}\n          >\n            Back to exams list\n          </button>\n        </div>\n      );\n    }\n\n    let activeCandidates = this.props.proctoring.candidates.filter(\n      (itm: CandidateProctoringInterface) =>\n        itm.active === true && itm.done === false\n    );\n\n    let nonActiveCandidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === false || itm.done === true\n    );\n\n    if (this.props.proctoring.room_not_found === true) {\n      return <Attendance createAttendance={this.createAttendance} />;\n    }\n\n    let active_candidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === true\n    ).length;\n\n    let total_mic = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === true && itm.mic === true\n    ).length;\n\n    let total_audio = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === true && itm.audio === true\n    ).length;\n\n    let mic_text_label: string =\n      total_mic === 0\n        ? \"No one listening\"\n        : total_mic === active_candidates\n        ? \"Speaking to the room\"\n        : `Speaking to ${total_mic} candidates`;\n\n    let audio_text_label: string =\n      total_audio === 0\n        ? \"Muted\"\n        : total_audio === active_candidates\n        ? \"Listening to the room\"\n        : `Listening to ${total_audio} candidates`;\n\n    return (\n      <>\n        {this.state.create_group_loading === true && (\n          <div className=\"p-2 text-center bg-blue-500 text-white \">\n            <p className=\"animate__animated animate__fadeIn animate__infinite\">\n              Creating group...\n            </p>\n          </div>\n        )}\n        <div\n          className={`${\n            this.state.focus_mode === false\n              ? \" p-1 \"\n              : \"fixed right-0 left-0 bottom-0 top-0 z-50 overflow-y-auto\"\n          } transition-all ease-in-out`}\n        >\n          {((this.state.add_minutes.candidate !== null &&\n            this.state.add_minutes.room === false) ||\n            (this.state.add_minutes.room === true &&\n              this.state.add_minutes.candidate === null)) &&\n            this.state.add_minutes.minutes === 0 && (\n              <AddTimeToCandidateModal\n                candidate={this.state.add_minutes.candidate}\n                close={() =>\n                  this.setState({\n                    add_minutes: {\n                      ...this.state.add_minutes,\n                      candidate: null,\n                      minutes: 0,\n                      room: false,\n                    },\n                  })\n                }\n                addMinutesHandler={this.addMinutesHandler}\n                reset_added_minutes={this.state.add_minutes.reset_added_minutes}\n                reset_added_minutesHandler={this.reset_added_minutesHandler}\n              />\n            )}\n\n          {this.state.error.target === \"main\" && (\n            <div\n              className=\"animate__animated animate__slideInDown p-2 rounded-md animate__faster text-center text-sm bg-red-200 text-red-900\"\n              onClick={() => this.setState({ error: { target: \"\", msg: \"\" } })}\n            >\n              {this.state.error.msg}\n            </div>\n          )}\n\n          <ProctoringMainTopBar\n            focusToggle={this.focusToggle}\n            focus_mode={this.state.focus_mode}\n            course_title={this.props.proctoring.exam.course_name}\n            post_title={this.props.proctoring.exam.position_title}\n            duration={this.props.proctoring.exam.duration}\n            started_at={this.props.proctoring.exam.start_time}\n            exam_start={this.props.proctoring.exam.start_exam}\n            startExamHandler={this.startExamHandler}\n            stopExamHandler={this.stopExamHandler}\n            leaveRoom={this.leaveRoom}\n            room={this.props.proctoring.room}\n            active_candidate={active_candidates}\n            deleteRoom={this.deleteRoomHandler}\n            ExamDone={this.props.FC_ExamDone}\n            exam_rules={this.props.proctoring.exam_rules}\n            exam_done={this.props.proctoring.exam.exam_done}\n            addMinutesToRoom={this.addMinutesToRoomModal}\n          />\n\n          {/* this is the body */}\n          <div\n            className={`${\n              this.state.focus_mode === true\n                ? \"proctoring-body-contents text-white\"\n                : \"\"\n            }  h-screen`}\n          >\n            <div className=\"lg:flex\">\n              <div\n                className={`flex-1 ${\n                  this.props.homeProctoring === true ? \"\" : \"pt-3\"\n                } lg:h-screen \n              \n              ${this.state.focus_mode === true ? \"lg:ml-2\" : \"\"}`}\n              >\n                {this.props.homeProctoring === true && (\n                  <SoundControl\n                    sound_text={mic_text_label}\n                    speaker_text={audio_text_label}\n                    speakToAll={this.speakToAll}\n                    stopSpeaking={this.stopSpeaking}\n                    listenAll={this.listenAll}\n                    stopListening={this.stopListening}\n                  />\n                )}\n\n                <div className=\"flex-1  overflow-y-auto\">\n                  {/* pictures or images */}\n                  {this.props.proctoring.candidate_loaded === false ? (\n                    <div className=\"p-8 text-center animate__animated animate__zoomIn\">\n                      <Spinner />\n                      <h2 className=\"text-xl font-bold text-gray-400\">\n                        Loading room details...\n                      </h2>\n                    </div>\n                  ) : (\n                    <div className=\"animate__animated animate__zoomI\">\n                      <div\n                        className={`${\n                          this.state.focus_mode === true\n                            ? \"bg-blue-900 bg-opacity-30\"\n                            : \"bg-gray-100\"\n                        } rounded-md mb-4`}\n                      >\n                        <h3\n                          className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                            this.state.focus_mode === true\n                              ? \"text-blue-100 bg-blue-900\"\n                              : \"text-white bg-gray-500\"\n                          } pb-1 mb-1`}\n                        >\n                          <span className=\"flex-1\">Active candidates </span>\n\n                          <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                            {activeCandidates.length}\n                          </span>\n                        </h3>\n                        {activeCandidates.length === 0 ? (\n                          <div className=\"py-8 text-center w-full\">\n                            <MdInfoOutline className=\"inline-block text-6xl\" />\n                            <h3 className=\"text-center text-2xl font-bold\">\n                              No active candidates\n                            </h3>\n                            <h3 className=\"text-center text-gray-500\">\n                              Active candidate is any candidate who is online\n                              and still doing the exam\n                            </h3>\n                          </div>\n                        ) : (\n                          <>\n                            <div className=\"grid grid-flow-row sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2 2xl:grid-cols-2\">\n                              {this.props.proctoring.focus.map((user_id) => {\n                                let candidate =\n                                  this.props.proctoring.candidates.find(\n                                    (cand) =>\n                                      cand.user_id === user_id &&\n                                      cand.active === true\n                                  );\n                                if (candidate === undefined)\n                                  return <div>cand not found</div>;\n\n                                let localStream =\n                                  this.props.proctoring.streams.find(\n                                    (strm) => strm.id === candidate?.stream_id\n                                  );\n                                if (candidate === undefined)\n                                  return <div>Stream does not found</div>;\n\n                                return (\n                                  <VideoCardProctoringFocus\n                                    key={candidate.user_id}\n                                    localStream={localStream}\n                                    candidate={candidate}\n                                    micAdd={this.micAdd}\n                                    micStop={this.micStop}\n                                    micOnly={this.micOnly}\n                                    soundAdd={this.soundAdd}\n                                    soundStop={this.soundStop}\n                                    soundOnly={this.soundOnly}\n                                    open={this.SelectCandidateHandler}\n                                    focus={this.focus}\n                                    focusCandidates={\n                                      this.props.proctoring.focus\n                                    }\n                                  />\n                                );\n                              })}\n                            </div>\n\n                            <div\n                              className={`grid grid-flow-row sm:grid-cols-2 \n                          ${\n                            this.props.homeProctoring === true\n                              ? \"md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-5\"\n                              : \"md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-4\"\n                          } gap-4 p-2`}\n                            >\n                              {activeCandidates.map(\n                                (\n                                  candidate: CandidateProctoringInterface,\n                                  i: number\n                                ) => {\n                                  if (this.props.homeProctoring === true) {\n                                    let localStream: any =\n                                      this.props.proctoring.streams.find(\n                                        (stream) =>\n                                          stream.id === candidate.stream_id\n                                      );\n\n                                    if (\n                                      this.props.proctoring.focus.indexOf(\n                                        candidate.user_id\n                                      ) >= 0\n                                    )\n                                      return null;\n\n                                    return localStream === undefined ? (\n                                      <div className=\"w-full h-full items-center text-center\">\n                                        <p>Failed to load the stream</p>\n                                      </div>\n                                    ) : (\n                                      <VideoCardProctoring\n                                        key={i}\n                                        localStream={localStream}\n                                        candidate={candidate}\n                                        micAdd={this.micAdd}\n                                        micStop={this.micStop}\n                                        micOnly={this.micOnly}\n                                        soundAdd={this.soundAdd}\n                                        soundStop={this.soundStop}\n                                        soundOnly={this.soundOnly}\n                                        open={this.SelectCandidateHandler}\n                                        focus={this.focus}\n                                      />\n                                    );\n                                  } else {\n                                    return (\n                                      <CenterCardSupervisor\n                                        focus_mode={this.state.focus_mode}\n                                        key={i}\n                                        candidate={candidate}\n                                        stopHandler={this.stopCandidateHandler}\n                                        warningHandler={\n                                          this.warnCandidateHandler\n                                        }\n                                        detailsHandler={\n                                          this.SelectCandidateHandler\n                                        }\n                                        continueHandler={this.continueHandler}\n                                        exam_started={\n                                          this.props.proctoring.exam.start_exam\n                                        }\n                                        exam_done={\n                                          this.props.proctoring.exam.exam_done\n                                        }\n                                        addMinutes={this.addMinutesModal}\n                                        duration={\n                                          this.props.proctoring.exam.duration\n                                        }\n                                      />\n                                    );\n                                  }\n                                }\n                              )}\n                            </div>\n                          </>\n                        )}\n                      </div>\n                      {nonActiveCandidates.length !== 0 && (\n                        <div\n                          className={`${\n                            this.state.focus_mode === true\n                              ? \"bg-blue-900 bg-opacity-30\"\n                              : \"bg-gray-100\"\n                          } rounded-md`}\n                        >\n                          <h3\n                            className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                              this.state.focus_mode === true\n                                ? \"text-blue-100 bg-blue-900\"\n                                : \"text-white bg-gray-500\"\n                            } pb-1 mb-1`}\n                          >\n                            <span className=\"flex-1\">Others candidates </span>\n                            <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                              {nonActiveCandidates.length}\n                            </span>\n                          </h3>\n                          <div className=\"mt-3 mx-2 pb-2\">\n                            <ProctoringCandidates\n                              candidates={nonActiveCandidates}\n                              clickHandler={this.SelectCandidateHandler}\n                              show_title={false}\n                              focus_mode={this.state.focus_mode}\n                              large={true}\n                            />\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div\n                className={`${\n                  this.state.focus_mode === true\n                    ? \"proctoring-side-section border-blue-500  border-opacity-30\"\n                    : \"lg:bg-gray-100 \"\n                } p-2  transition-all ease-in-out  lg:h-screen overflow-y-auto lg:ml-2 lg:border-l `}\n              >\n                {/* statistics */}{\" \"}\n                {(this.props.proctoring.exam.start_exam === true ||\n                  this.props.proctoring.exam.exam_done === true) && (\n                  <ProctoringStatistics\n                    focus_mode={this.state.focus_mode}\n                    candidates={this.props.proctoring.candidates}\n                  />\n                )}\n                {this.state.selected_candidate === null ? (\n                  <React.Fragment>\n                    {/* {this.state.online_room === true && ( */}\n                    <div className=\"my-2 p-1 rounded-md bg-blue-800 bg-opacity-60 grid grid-col-2 grid-flow-col gap-1\">\n                      <button\n                        onClick={this.ActiveSIdeTabHandler.bind(\n                          this,\n                          ActiveSideTap.Events\n                        )}\n                        className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                          this.state.active_side_tab === ActiveSideTap.Events\n                            ? \"border-2 border-blue-400\"\n                            : \"bg-blue-800 bg-opacity-60\"\n                        }`}\n                      >\n                        Event list\n                      </button>\n\n                      <button\n                        onClick={this.ActiveSIdeTabHandler.bind(\n                          this,\n                          ActiveSideTap.Candidates\n                        )}\n                        className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                          this.state.active_side_tab ===\n                          ActiveSideTap.Candidates\n                            ? \"border-2 border-blue-400\"\n                            : \"bg-blue-800 bg-opacity-60\"\n                        }`}\n                      >\n                        Candidates\n                      </button>\n                    </div>\n\n                    {/* events */}\n                    {this.state.active_side_tab === ActiveSideTap.Events ? (\n                      <ProctoringEvents\n                        candidates={this.props.proctoring.candidates}\n                        events={this.props.proctoring.events}\n                        focus_mode={this.state.focus_mode}\n                        loading={this.state.events_loading}\n                      />\n                    ) : (\n                      <ProctoringCandidates\n                        candidates={this.props.proctoring.candidates}\n                        clickHandler={this.SelectCandidateHandler}\n                        focus_mode={this.state.focus_mode}\n                        show_title={false}\n                        large={false}\n                      />\n                    )}\n                  </React.Fragment>\n                ) : (\n                  <ProctoringCandidateDetails\n                    candidate={this.props.proctoring.candidates.find(\n                      (itm) => itm.user_id === this.state.selected_candidate\n                    )}\n                    events={this.props.proctoring.events.filter(\n                      (evnt: EventInterface) =>\n                        evnt.user_id === this.state.selected_candidate\n                    )}\n                    removeInExam={this.ejectCandidateHandler}\n                    homeProctoring={this.props.homeProctoring}\n                    micAdd={this.micAdd}\n                    micStop={this.micStop}\n                    micOnly={this.micOnly}\n                    soundAdd={this.soundAdd}\n                    soundStop={this.soundStop}\n                    soundOnly={this.soundOnly}\n                    focusHandler={this.focus}\n                    stopHandler={this.stopCandidateHandler}\n                    restartHandler={this.restartCandidateHandler}\n                    warnHandler={this.warnCandidateHandler}\n                    closeHandler={() => this.SelectCandidateHandler(null)}\n                    exam_started={this.props.proctoring.exam.start_exam}\n                    focus_mode={this.state.focus_mode}\n                    continueHandler={this.continueHandler}\n                    resetDevice={this.resetDevice}\n                    setAiProctoring={this.setAiProctoring}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fixed bottom-0 right-6 z-50\">\n          {this.state.popups.map((pop) => {\n            let Icon = pop.icon;\n            return (\n              <div\n                key={pop.id}\n                className=\"my-2 bg-red-800  w-80 border border-red-400 text-white flex rounded-lg \"\n              >\n                <div\n                  className=\"p-2 flex-1 flex items-center cursor-pointer\"\n                  onClick={() => {\n                    this.SelectCandidateHandler(pop.user_id);\n                    this.removePopup(pop.id);\n                  }}\n                >\n                  <div className=\"mr-2\">\n                    <Icon className=\"text-4xl text-red-300\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-xs text-red-100 font-bold\">{pop.type}</p>\n                    <h3 className=\"text-sm my-0.5 font-bold \">\n                      {pop.username}\n                    </h3>\n                    <p className=\"text-xs font-light text-gray-300\">\n                      {pop.title}\n                    </p>\n                  </div>\n                </div>\n\n                <button\n                  className=\"hover:bg-red-300 h-auto rounded-r px-1\"\n                  onClick={this.removePopup.bind(this, pop.id)}\n                >\n                  <MdOutlineClose className=\"text-4xl\" />\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; auth: Auth; proctoring: Proctoring } => {\n  return { socket: socket, auth: auth, proctoring: proctoring };\n};\n\nexport const ProctoringOnlineSupervisor = connect(mapStateToProps, {\n  FC_GetProctoringRoom,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n  FC_SaveEvent,\n  FC_LoadRoomEvents,\n  FC_CandidateRemoveExam,\n  FC_RoomNotFoundOnline,\n  FC_RoomDetailsOnline,\n  FC_CandidateDoneExamCenter,\n  FC_ExamDone,\n  FC_CandidateTimeOut,\n  FC_AddMinutesToCandidate,\n  FC_CreateProctoringRoom,\n  FC_ClearProctoring,\n  FC_CloseProctoringRoom,\n  FC_AddUserStream,\n  FC_AddMyStream,\n  FC_AddPeerId,\n  FC_SpeakToAll,\n  FC_StopSpeakToAll,\n  FC_ListenAll,\n  FC_StopListenAll,\n  FC_AddMic,\n  FC_StopMic,\n  FC_MicOnly,\n  FC_AddSound,\n  FC_StopSound,\n  FC_FocusOnUser,\n  FC_SoundOnly,\n  FC_CandidateHandSupervisor,\n})(_ProctoringOnlineSupervisor);\n\n//* Interfaces Export */\nexport type FT_createAttendance = (\n  data: {\n    name: string;\n    list: string[];\n  },\n  status: boolean\n) => void;\nexport type warnCandidateHandler = (user_id: string) => void;\nexport type stopCandidateHandler = (user_id: string) => void;\nexport type SelectCandidateHandler = (value: string | null) => void;\nexport type continueHandler = (user_id: string) => void;\nexport type addMinutesModal = (candidate: CandidateProctoringInterface) => void;\n","import React, { FC, ReactElement, useState } from \"react\";\nimport { MdNotInterested, MdOutlineTimer, MdWarning } from \"react-icons/md\";\nimport { FC_CardStyle } from \"../../actions\";\nimport {\n  addMinutesModal,\n  continueHandler,\n  SelectCandidateHandler,\n  stopCandidateHandler,\n  warnCandidateHandler,\n} from \"../../containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\nimport { CountDown } from \"../CountDown/CountDown\";\n\ntype CenterCardSupervisorProps = {\n  candidate: CandidateProctoringInterface;\n  exam_started: boolean;\n  focus_mode: boolean;\n  exam_done: boolean;\n  duration: number;\n  warningHandler: warnCandidateHandler;\n  stopHandler: stopCandidateHandler;\n  detailsHandler: SelectCandidateHandler;\n  continueHandler: continueHandler;\n  addMinutes: addMinutesModal;\n};\n\nconst CenterCardSupervisor: FC<CenterCardSupervisorProps> = ({\n  candidate,\n  warningHandler,\n  stopHandler,\n  detailsHandler,\n  continueHandler,\n  exam_started,\n  focus_mode,\n  exam_done,\n  addMinutes,\n  // duration,\n}): ReactElement => {\n  // let color = candidate?.stopped === true ? \"red\" : focus_mode === true ? \"blue\" : \"gray\";\n  const [candidate_done, setCandidate_done] = useState(true);\n  return (\n    <div\n      // className={`bg-${color}-900 bg-opacity-50 hover:bg-opacity-100 border-${color}-400 border text-white    cursor-pointer  p-2 rounded-md transition-all ease-in-out`}\n      className={`${FC_CardStyle(\n        candidate?.stopped,\n        focus_mode,\n        candidate.done\n      )} text-white    cursor-pointer  p-2 rounded-md transition-all ease-in-out`}\n      onClick={detailsHandler.bind(this, candidate.user_id)}\n    >\n      <div className=\"text-center\">\n        <span className={`text-gray-200`}>Seat number</span>\n        <h1 className=\"text-5xl font-bold\">{candidate.seat_number}</h1>\n      </div>\n\n      {candidate.added_minutes !== 0 && (\n        <div className=\"flex items-center text-sm\">\n          <div className=\"\">\n            <section className=\"p-0.5 bg-blue-500 rounded w-\">\n              {candidate.added_minutes}m\n            </section>\n          </div>\n          <div className=\"flex-1\"></div>\n          <div className=\" pl-2 font-bold text-center\">\n            {exam_done === true && (\n              <section className=\"p-0.5 bg-blue-500 rounded w-auto px-1\">\n                <CountDown\n                  start_time={candidate.start_added_time}\n                  duration_min={candidate.added_minutes}\n                  timeout={() => setCandidate_done(false)}\n                  returnString={true}\n                  labels\n                />\n              </section>\n            )}\n          </div>\n        </div>\n      )}\n\n      <div className={`mt-1 border-t border-gray-200 pt-2`}>\n        <h4 className={`text-xs text-gray-200`}>Full names</h4>\n        <h4 className=\"text-sm font-bold\">\n          {candidate.fname} {candidate.lname}\n        </h4>\n      </div>\n\n      {((exam_started === true && exam_done === false) ||\n        (candidate.added_minutes !== 0 && candidate_done !== false)) && (\n        <div className=\"mt-2 flex\">\n          {candidate.stopped === false ? (\n            <button\n              onClick={warningHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-yellow-300 flex-1 border border-white\"\n              title=\"Send a warning\"\n            >\n              <MdWarning className=\"inline\" /> Warn\n            </button>\n          ) : (\n            <button\n              onClick={continueHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-green-400 flex-1\"\n              title=\"Allow to continue exam\"\n            >\n              <MdWarning className=\"inline\" /> Continue\n            </button>\n          )}\n          <button\n            onClick={stopHandler.bind(this, candidate.user_id)}\n            className=\"px-2 text-sm py-1 rounded-md text-white- bg-red-700 ml-1 flex-1\"\n            title=\"Stop candidate\"\n          >\n            <MdNotInterested className=\"inline\" /> Stop\n          </button>\n        </div>\n      )}\n\n      {(exam_done === true || exam_started === true) && (\n        <div className=\"mr-2 mt-2\">\n          <button\n            onClick={() => {\n              addMinutes(candidate);\n              setCandidate_done(true);\n            }}\n            className=\"px-2 py-1 rounded-md text-sm w-full bg-blue-700 ml-1\"\n            title=\"Add minutes\"\n          >\n            <MdOutlineTimer className=\"inline\" /> Add minutes\n          </button>{\" \"}\n        </div>\n      )}\n      {/* {exam_done === true &&\n        candidate.added_minutes !== 0 &&\n        candidate.stopped !== true && <div> Time out dom </div>} */}\n    </div>\n  );\n};\nexport default CenterCardSupervisor;\n","import moment from \"moment\";\nimport React, { Fragment } from \"react\";\nimport {\n  MdAddCircle,\n  MdError,\n  MdInfoOutline,\n  MdKeyboardBackspace,\n} from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Proctoring,\n  createCandidateRoomAPI,\n  FT_CloseProctoringRoom,\n  FC_CloseProctoringRoom,\n  FC_ClearProctoring,\n  FT_ClearProctoring,\n} from \"../../actions\";\nimport { FT_createAttendance } from \"../../containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\n// import { EditProfileDetails } from \"../../containers/ProfileDetails/EditProfileDetails\";\nimport { CandidateProctoringInterfaceAPI } from \"../../interfaces\";\nimport { StoreState } from \"../../reducers\";\nimport search from \"../../utils/search\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  createAttendance: FT_createAttendance;\n  FC_CloseProctoringRoom: FT_CloseProctoringRoom;\n  FC_ClearProctoring: FT_ClearProctoring;\n}\n\ninterface AppState {\n  loading: boolean;\n  create_attendance: boolean;\n  search: string;\n  selected_list: string[];\n  selected_candidate: CandidateProctoringInterfaceAPI | null;\n  group_name: string;\n  error: {\n    target: string;\n    msg: string;\n  };\n  created_groups: string[];\n  candidates_in_groups: CandidateProctoringInterfaceAPI[];\n  candidate_non_done_exam: CandidateProctoringInterfaceAPI[];\n  disabling_room: boolean;\n  group_list: string[];\n}\n\nclass _Attendance extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      create_attendance: false,\n      selected_list: [],\n      selected_candidate: null,\n      search: \"\",\n      group_name: \"\",\n      error: {\n        target: \"\",\n        msg: \"\",\n      },\n      created_groups: [],\n      candidates_in_groups: [],\n      candidate_non_done_exam: [],\n      disabling_room: false,\n      group_list: [],\n    };\n  }\n\n  componentDidMount = () => {\n    let group_list: string[] = [];\n    let done_candidates: {\n      user_id: string;\n      seat_number: number;\n      group_id: string;\n    }[] = [];\n    let candidates_in_with_groups: CandidateProctoringInterfaceAPI[] = [];\n    // let candidate_non_done_exam: CandidateProctoringInterfaceAPI[] = [];\n\n    this.props.proctoring.room_groups?.forEach((group) => {\n      group_list.push(group.group_id.toLowerCase());\n      done_candidates = [\n        ...done_candidates,\n        ...group.candidates.map((x) => ({ ...x, group_id: group.group_id })),\n      ];\n    });\n\n    candidates_in_with_groups = this.props.proctoring.all_candidates.map(\n      (itm) => {\n        // check if the candidate exists\n        let candidate_exist = done_candidates.find(\n          (el) => el.user_id === itm.user_id\n        );\n        if (candidate_exist === undefined) {\n          return { ...itm, group_id: \"\" };\n        } else {\n          return { ...itm, group_id: candidate_exist.group_id };\n        }\n      }\n    );\n\n    this.setState({\n      candidates_in_groups: candidates_in_with_groups.filter(\n        (cand) => cand.group_id !== \"\"\n      ),\n      candidate_non_done_exam: candidates_in_with_groups.filter(\n        (cand) => cand.group_id === \"\"\n      ),\n      group_list: group_list,\n    });\n  };\n\n  submitHandler = (e: any) => {\n    e.preventDefault();\n\n    if (this.state.group_name.length === 0) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"Please add the group name\",\n        },\n      });\n    }\n\n    if (this.state.selected_list.length === 0) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"You can't create an empty group\",\n        },\n      });\n    }\n\n    if (\n      this.state.group_list.includes(this.state.group_name.toLowerCase()) ===\n      true\n    ) {\n      return this.setState({\n        error: {\n          target: \"form\",\n          msg: \"This name already used on previous group\",\n        },\n      });\n    }\n\n    this.props.createAttendance(\n      {\n        list: this.state.selected_list,\n        name: this.state.group_name,\n      },\n      true\n    );\n  };\n\n  FC_CloseProctoringRoomHandler = (id: string | undefined) => {\n    if (id === undefined) return;\n    if (\n      window.confirm(\n        \"Are you sure you want to set this room to finished status??\"\n      ) === false\n    )\n      return;\n\n    this.setState({ disabling_room: true });\n    this.props.FC_CloseProctoringRoom(id, [], (status, msg) => {\n      if (status === false) {\n        this.setState({\n          error: { target: \"main\", msg: msg },\n          disabling_room: false,\n        });\n      } else {\n        this.setState({ disabling_room: false });\n      }\n    });\n  };\n\n  render() {\n    let expiredRooms: createCandidateRoomAPI[] = [];\n\n    // check if there is a room which is not yet closed\n    if (this.props.proctoring.room_groups !== null) {\n      expiredRooms = this.props.proctoring.room_groups?.filter(\n        (data) =>\n          data.isExpired === false &&\n          data.exam_id === this.props.proctoring.exam.exam_id\n      );\n    }\n\n    if (expiredRooms.length >= 1) {\n      return (\n        <div className=\"p-4 bg-white rounded mt-3 mr-2\">\n          <button\n            className=\"py-1 px-2 bg-blue-300 rounded-md text-white\"\n            onClick={() => this.props.FC_ClearProctoring()}\n          >\n            back\n          </button>\n          <div className=\" p-2 text-center\">\n            <h1 className=\"text-4xl\">Some previous room are not closed yet</h1>\n            <h3 className=\"text-lg text-gray-700\">\n              If you want to create another room, please close all the rooms\n              first\n            </h3>\n          </div>\n\n          {this.state.disabling_room === true && (\n            <div className=\"my-2 bg-blue-500 text-white px-2 text-center rounded animate__animated animate__fadeIn animate_infinite cursor-pointer\">\n              Updating groups...\n            </div>\n          )}\n\n          {this.state.error.target === \"main\" && (\n            <div\n              className=\"my-2 bg-red-500 text-white px-2 text-center rounded animate__animated animate__zoomIn cursor-pointer\"\n              onClick={() => this.setState({ error: { target: \"\", msg: \"\" } })}\n            >\n              {this.state.error.msg}\n            </div>\n          )}\n\n          <div className=\"mt-3\">\n            <table className=\"w-full table table-auto\">\n              <thead className=\"text-left bg-gray-100 text-gray-600\">\n                <tr>\n                  <th>#</th>\n                  <th>Group name</th>\n                  <th>Created time</th>\n                  <th>Total candidates</th>\n                  <th>Course</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {expiredRooms.map((itm, i) => (\n                  <tr key={itm._id} className=\"border-b\">\n                    <td className=\"p-3\">{i + 1}</td>\n                    <td>\n                      <b>{itm.group_id}</b>\n                    </td>\n                    <td>{moment(itm.createdAt).format(\"LLLL\")}</td>\n                    <td>{itm.candidates.length}</td>\n                    <td>{this.props.proctoring.exam.course_name}</td>\n                    <td className=\"text-right\">\n                      <button\n                        onClick={(e) => {\n                          if (\n                            window.confirm(\n                              \"Are you sure you want to re0create the group?? this is only used once some candidates have not done the exam\"\n                            )\n                          ) {\n                            this.props.createAttendance(\n                              {\n                                list: itm.candidates.map((itm) => itm.user_id),\n                                name: itm.group_id,\n                              },\n                              false\n                            );\n                          }\n                        }}\n                        className=\"p-1 rounded bg-blue-400 mr-2 text-white px-3\"\n                      >\n                        Backup <b>{itm.group_id}</b> group\n                      </button>\n                      <button\n                        onClick={this.FC_CloseProctoringRoomHandler.bind(\n                          this,\n                          itm._id\n                        )}\n                        className=\"p-1 rounded bg-red-400 text-white px-3\"\n                      >\n                        Close <b>{itm.group_id}</b> group\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      );\n    }\n\n    let resultCandidates: CandidateProctoringInterfaceAPI[] = search(\n      this.state.candidate_non_done_exam,\n      this.state.search,\n      {\n        email: true,\n        fname: true,\n        lname: true,\n      }\n    );\n\n    if (\n      this.props.proctoring.candidates.length === 0 &&\n      this.state.create_attendance === false\n    ) {\n      return (\n        <div className=\"mt-4 mx-4\">\n          {this.props.proctoring.error !== \"\" && (\n            <div className=\"p-2 mb-3 bg-yellow-300 animate__zoomIn animate__faster animate__animated text-black rounded-md flex items-center\">\n              <MdError className=\"text-2xl\" />\n              <p className=\"m-0 text-xl ml-1.5\">\n                {this.props.proctoring.error}\n              </p>\n            </div>\n          )}\n\n          <div className=\"p-6 bg-white animate__fadeIn animate__animated mt-4 rounded shadow-md\">\n            <h2 className=\"text-3xl font-bold mb-2\">Create a group</h2>\n            <p className=\"text-md text-gray-700 \">\n              To create a group click on <b>create group</b> button and check\n              list of all the candidates and add them to the attendance with the\n              room name\n            </p>\n\n            <div className=\"my-2 border-- w-4/5 py-2\">\n              {[\n                {\n                  title: \"Province\",\n                  value: this.props.proctoring.room.province_name,\n                },\n                {\n                  title: \"District\",\n                  value: this.props.proctoring.room.district_name,\n                },\n                {\n                  title: \"Center name\",\n                  value: this.props.proctoring.room.center_name,\n                },\n                {\n                  title: \"Room number\",\n                  value: this.props.proctoring.room.room_number,\n                },\n              ].map((itm) => (\n                <section key={itm.title} className=\"border-t py-1\">\n                  <span>{itm.title}: </span>\n                  <b>{itm.value}</b>\n                </section>\n              ))}\n            </div>\n\n            <div className=\"\">\n              <button\n                className=\"p-2 px-3 rounded text-lg mt-2 bg-red-500 text-white hover:bg-600\"\n                onClick={() => this.props.FC_ClearProctoring()}\n              >\n                Cancel\n              </button>{\" \"}\n              <button\n                className=\"p-2 px-3 rounded text-lg mt-2 bg-blue-500 text-white hover:bg-600\"\n                onClick={() => this.setState({ create_attendance: true })}\n              >\n                Create group\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Fragment>\n        {this.state.selected_candidate !== null && (\n          <Modal\n            footer={false}\n            widthSizeClass={ModalSize.large}\n            title=\"User info\"\n            theme={Themes.default}\n            displayClose={true}\n            padding={{ title: true, body: true, footer: false }}\n            backDrop={true}\n            backDropClose={true}\n            close={() => this.setState({ selected_candidate: null })}\n          >\n            <div className=\"p-2\">\n              {[\n                {\n                  title: \"National Id\",\n                  value: this.state.selected_candidate.n_id,\n                },\n                {\n                  title: \"First name\",\n                  value: this.state.selected_candidate.fname,\n                },\n                {\n                  title: \"Last name\",\n                  value: this.state.selected_candidate.lname,\n                },\n                {\n                  title: \"District\",\n                  value: this.state.selected_candidate.district,\n                },\n                {\n                  title: \"Phone number\",\n                  value: this.state.selected_candidate.phone_number,\n                },\n                {\n                  title: \"Course\",\n                  value:\n                    this.state.selected_candidate.course_code +\n                    \" \" +\n                    this.state.selected_candidate.course_name,\n                },\n                { title: \"Email\", value: this.state.selected_candidate.email },\n                {\n                  title: \"Position\",\n                  value: this.state.selected_candidate.position_title,\n                },\n              ].map((itm) => (\n                <section key={itm.title} className=\"border-t py-1\">\n                  <span>{itm.title}: </span>\n                  <b>{itm.value}</b>\n                </section>\n              ))}\n            </div>\n          </Modal>\n        )}\n\n        <form onSubmit={this.submitHandler}>\n          <div className=\"bg-white p-2 mr-2 mt-3 rounded-md animate__animated animate__fadeIn\">\n            <div className=\" px-2 pb-3 flex items-center\">\n              <div className=\"flex-1\">\n                <div className=\"flex\">\n                  <button\n                    className=\"text-sm mr-2 hover:text-white hover:bg-blue-600 rounded-md px-1 text-blue-500\"\n                    onClick={() => this.props.FC_ClearProctoring()}\n                  >\n                    <MdKeyboardBackspace className=\"inline-block \" /> Back\n                  </button>\n                  <h2 className=\"font-bold text-xl\">Create a group</h2>\n                </div>\n                <p className=\"text-gray-400 m-0 mt- text-sm\">\n                  Please create a room by adding the list of the users to the\n                  attendee list\n                </p>\n              </div>\n              <div className=\"\">\n                <div className=\"flex items-end\">\n                  <div className=\"\">\n                    <label htmlFor=\"input-group-name\" className=\"block text-xs\">\n                      Group name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"input-group-name\"\n                      className={`p-1 px-2 bg-gray-50 rounded-md ${\n                        this.state.error.target === \"form\"\n                          ? \"border-red-600\"\n                          : \"\"\n                      }  border`}\n                      placeholder=\"A\"\n                      maxLength={2}\n                      required\n                      value={this.state.group_name}\n                      onChange={(e) =>\n                        this.setState({\n                          group_name: e.target.value.toUpperCase(),\n                        })\n                      }\n                    />\n                  </div>\n                  <div className=\"flex-1 pl-1\">\n                    <button\n                      type=\"submit\"\n                      className=\"py-1 px-3 text-md hover:bg-blue-600 rounded-md bg-blue-500 text-white block\"\n                    >\n                      Create group\n                    </button>\n                  </div>\n                </div>\n                {this.state.error.target === \"form\" && (\n                  <span className=\"text-red-500 text-sm\">\n                    {this.state.error.msg}\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"md:flex\">\n              {this.state.selected_list.length !== 0 &&\n              this.state.selected_list.length ===\n                this.props.proctoring.all_candidates.length ? null : (\n                <div className=\"flex-1 mr-2 mb-8 md:mb-2\">\n                  <div className=\"p-2 flex bg-gray-200 items-center\">\n                    <h4 className=\"text-xl font-light text-gray-700\">\n                      All candidates\n                    </h4>\n                    <input\n                      type=\"search\"\n                      name=\"search\"\n                      id=\"\"\n                      placeholder=\"search name\"\n                      className=\"py-1 px-2 flex-1 ml-3 bg-gray-50 border rounded\"\n                      value={this.state.search}\n                      onChange={(e) =>\n                        this.setState({ search: e.target.value })\n                      }\n                    />\n                  </div>\n                  <div className=\" shadow\">\n                    <table className=\"w-full\">\n                      <thead className=\"text-left bg-gray-400\">\n                        <tr>\n                          <th className=\"text-center\">#</th>\n                          <th>Names</th>\n                          <th>Email</th>\n                          <th className=\"text-right\">\n                            <button\n                              type=\"button\"\n                              className=\"p-0.5 px-2 rounded-md hover:bg-blue-700 m-1 inline-block bg-blue-600 text-white text-sm\"\n                              onClick={() =>\n                                this.setState({\n                                  selected_list:\n                                    this.state.candidate_non_done_exam.map(\n                                      (itm) => itm.user_id\n                                    ),\n                                })\n                              }\n                            >\n                              Select all\n                            </button>\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultCandidates.length === 0 ? (\n                          <tr>\n                            <td colSpan={4}>\n                              <div className=\"p-2 text-center py-4\">\n                                <MdInfoOutline className=\"text-6xl text-gray-500 mx-auto my-1\" />\n                                <h2>\n                                  <b>{this.state.search}</b> can't be found in\n                                  waiting candidates\n                                </h2>\n                              </div>\n                            </td>\n                          </tr>\n                        ) : (\n                          <>\n                            {resultCandidates.map(\n                              (itm: CandidateProctoringInterfaceAPI, i) =>\n                                this.state.selected_list.indexOf(itm.user_id) >\n                                -1 ? null : (\n                                  <tr\n                                    key={i}\n                                    className=\"border-b group hover:bg-blue-50\"\n                                  >\n                                    <td className=\"text-gray-400 px-1 text-sm text-center\">\n                                      {\" \"}\n                                      {i + 1}\n                                    </td>\n                                    <td\n                                      title=\"Click to see details\"\n                                      className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                      onClick={() =>\n                                        this.setState({\n                                          selected_candidate: itm,\n                                        })\n                                      }\n                                    >\n                                      {itm.fname} {itm.lname}\n                                    </td>\n                                    <td className=\"text-sm\">{itm.email}</td>\n                                    <td className=\"text-right\">\n                                      <button\n                                        type=\"button\"\n                                        onClick={() =>\n                                          this.setState({\n                                            selected_list: [\n                                              ...this.state.selected_list,\n                                              itm.user_id,\n                                            ],\n                                            error: {\n                                              target: \"\",\n                                              msg: \"\",\n                                            },\n                                          })\n                                        }\n                                        className=\"my-1 p-1 px-2 rounded-md group-hover:opacity-95 opacity-5 bg-blue-500 text-white text-sm\"\n                                      >\n                                        <MdAddCircle className=\"inline-block mr-1\" />\n                                        Add\n                                      </button>\n                                    </td>\n                                  </tr>\n                                )\n                            )}\n\n                            {this.state.search === \"\" && (\n                              <>\n                                <tr>\n                                  <td colSpan={5}>\n                                    <h4 className=\"text-center text-2xl text-gray-400 p-2 border-b\">\n                                      Candidates who are done the exam\n                                    </h4>\n                                  </td>\n                                </tr>\n                                {this.state.candidates_in_groups.map(\n                                  (itm: CandidateProctoringInterfaceAPI, i) =>\n                                    this.state.selected_list.indexOf(\n                                      itm.user_id\n                                    ) > -1 ? null : (\n                                      <tr\n                                        key={i}\n                                        className=\"border-b group  opacity-70\"\n                                      >\n                                        <td className=\"text-gray-400 px-1 text-sm text-center\">\n                                          {\" \"}\n                                          {i + 1}\n                                        </td>\n                                        <td\n                                          title=\"Click to see details\"\n                                          className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                          onClick={() =>\n                                            this.setState({\n                                              selected_candidate: itm,\n                                            })\n                                          }\n                                        >\n                                          {itm.fname} {itm.lname}\n                                        </td>\n                                        <td className=\"text-sm\">{itm.email}</td>\n                                        <td className=\"\">\n                                          Group: <b>{itm.group_id}</b>\n                                        </td>\n                                      </tr>\n                                    )\n                                )}\n                              </>\n                            )}\n                          </>\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n              <div className=\"flex-1 ml-1 shadow border\">\n                <div className=\"p-1 bg-blue-100 py-1 px-2 flex items-center\">\n                  <div className=\"flex-1\">\n                    <h2 className=\"font-bold text-blue-900 text-2xl\">Group</h2>\n                    <p className=\"text-blue-800 m-0 mt- text-sm\">\n                      This is the list of the candidate who are allowed to do\n                      the exam\n                    </p>\n                  </div>\n                  <div className=\"\">\n                    <h2 className=\"text-xl font-bold -mb-2\">\n                      <b>{this.state.selected_list.length}</b> of{\" \"}\n                      <b>{this.props.proctoring.all_candidates.length}</b>\n                    </h2>\n                    <p className=\"text-sm\">Selected</p>\n                  </div>\n                </div>\n                <div className=\"\">\n                  <table className=\"w-full\">\n                    <thead className=\"text-left bg-blue-800 text-white\">\n                      <tr>\n                        <th className=\"px-2\">#</th>\n                        <th>Names</th>\n                        <th>Email</th>\n                        <th className=\"text-right\">\n                          {this.state.selected_list.length >= 2 && (\n                            <button\n                              type=\"button\"\n                              className=\"p-0.5 px-2 rounded-md hover:bg-red-700 hover:text-red-100 m-1 inline-block bg-red-200 text-red-800 text-sm\"\n                              onClick={() =>\n                                this.setState({\n                                  selected_list: [],\n                                })\n                              }\n                            >\n                              Remove all\n                            </button>\n                          )}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.selected_list.length === 0 ? (\n                        <tr>\n                          <td colSpan={4}>\n                            <div className=\"p-2 text-center py-4\">\n                              <MdInfoOutline className=\"text-6xl text-gray-500 mx-auto my-1\" />\n                              <h2>No candidate found on the attendance</h2>\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        this.state.selected_list.map(\n                          (user_id: string, i: number) => {\n                            let candidateFind =\n                              this.props.proctoring.all_candidates.find(\n                                (cand) => cand.user_id === user_id\n                              );\n                            if (candidateFind === undefined) {\n                              return null;\n                            }\n                            return (\n                              <tr\n                                key={i}\n                                className=\"border-b group hover:bg-blue-50 animate__animated animate__zoomIn animate__faster\"\n                              >\n                                <td className=\"text-gray-400 pr-1 text-center\">\n                                  {i + 1}\n                                </td>\n                                <td\n                                  title=\"Click to see details\"\n                                  className=\"font-bold text-blue-900 hover:underline cursor-pointer\"\n                                  onClick={() =>\n                                    candidateFind !== undefined &&\n                                    this.setState({\n                                      selected_candidate: candidateFind,\n                                    })\n                                  }\n                                >\n                                  {candidateFind.fname} {candidateFind.lname}\n                                </td>\n                                <td>{candidateFind.email}</td>\n                                <td className=\"text-right\">\n                                  <button\n                                    type=\"button\"\n                                    onClick={() =>\n                                      this.setState({\n                                        selected_list:\n                                          this.state.selected_list.filter(\n                                            (el) => el !== user_id\n                                          ),\n                                      })\n                                    }\n                                    className=\"my-1 p-1 px-2 rounded-md group-hover:opacity-95 opacity-5 bg-red-500 text-white text-sm\"\n                                  >\n                                    Remove\n                                  </button>\n                                </td>\n                              </tr>\n                            );\n                          }\n                        )\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nexport const Attendance = connect(mapStateToProps, {\n  FC_CloseProctoringRoom,\n  FC_ClearProctoring,\n})(_Attendance);\n","import React, { FC, Fragment, ReactElement, useState } from \"react\";\nimport {\n  MdAddAlarm,\n  MdCheckBox,\n  MdCheckBoxOutlineBlank,\n  MdClose,\n} from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype AddTimeToCandidateModalProps = {\n  close: Function;\n  candidate: CandidateProctoringInterface | null;\n  addMinutesHandler: Function;\n  reset_added_minutesHandler: () => void;\n  reset_added_minutes: boolean;\n};\n\nconst AddTimeToCandidateModal: FC<AddTimeToCandidateModalProps> = ({\n  close,\n  candidate,\n  addMinutesHandler,\n  // reset_added_minutesHandler,\n  reset_added_minutes,\n}): ReactElement => {\n  const [minutes, setMinutes] = useState(1);\n  const [reason, setReason] = useState(\"\");\n  const [error, setError] = useState({ target: \"\", msg: \"\" } as {\n    target: string;\n    msg: string;\n  });\n\n  const submitHandler = () => {\n    if (minutes < 2) {\n      return setError({ target: \"minutes\", msg: \"Minimum is 2m\" });\n    }\n\n    if (reason.length <= 3) {\n      return setError({\n        target: \"reason\",\n        msg: \"Reason must me up to 4 characters\",\n      });\n    }\n    addMinutesHandler(minutes, reason);\n    close();\n  };\n\n  return (\n    <Fragment>\n      <div\n        className=\"fixed bg-black bg-opacity-10 top-0 bottom-0 right-0 left-0 animate__animated animate__fadeIn\"\n        onClick={() => close(false)}\n      ></div>\n      <div className=\"fixed w-80 shadow-lg bg-white rounded top-16 mt-2 right-2 animate__animated animate__zoomIn animate__faster\">\n        <div className=\"flex items-center border-b\">\n          <div className=\"flex-1 pl-2 text-xl font-bold text-gray-400\">\n            <h4>Room details</h4>\n          </div>\n\n          <div className=\"\">\n            <button\n              onClick={() => close(false)}\n              className=\"p-2 hover:bg-red-700 hover:text-white rounded text-2xl\"\n            >\n              <MdClose />\n            </button>\n          </div>\n        </div>\n        <div className=\"p-2 \">\n          {candidate !== null ? (\n            <div className=\"border-separate p-2\">\n              {[\n                {\n                  title: \"Names\",\n                  value: candidate?.fname + \" \" + candidate?.lname,\n                },\n                { title: \"Email\", value: candidate?.email },\n                { title: \"Seat\", value: candidate?.seat_number },\n              ].map(({ title, value }, i) => (\n                <div key={i} className=\"flex\">\n                  <span className=\"text-gray-500\">{title}: </span>\n                  <b className=\"text-right inline-block\"> {value}</b>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div\n              className=\"p-2 flex items-center bg-gray-100 border mb-3 cursor-pointer hover:bg-green-100 rounded-md\"\n              // onClick={reset_added_minutesHandler.bind(this)}\n            >\n              <div className=\"p-1\">\n                {reset_added_minutes === true ? (\n                  <MdCheckBox className=\"text-3xl text-green-500\" />\n                ) : (\n                  <MdCheckBoxOutlineBlank className=\"text-3xl text-gray-500\" />\n                )}\n              </div>\n              <div className=\"flex-1 p-1\">\n                <p\n                  className={`${\n                    reset_added_minutes === true ? \"\" : \"text-gray-600\"\n                  }`}\n                >\n                  {reset_added_minutes === true\n                    ? \"All the candidate will lose the minutes you added on them\"\n                    : \"All the candidate will keep the minutes you added on them\"}\n                </p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"p-2 text-center pt-1 bg-gray-100 mx-2 rounded\">\n            <p className=\"m-0 text-sm text-gray-500\">Minutes</p>\n            <div className=\"flex\">\n              <button\n                className=\"text-3xl px-4 hover:bg-blue-200 hover:text-blue-900 rounded\"\n                onClick={setMinutes.bind(this, minutes - 1)}\n              >\n                -\n              </button>\n              <input\n                type=\"number\"\n                className=\"flex-1 text-4xl text-center font-bold bg-transparent text-blue-700\"\n                min={1}\n                max={10}\n                value={minutes}\n                onChange={(e) => setMinutes(+e.target.value)}\n              />\n              <button\n                className=\"text-3xl px-4 hover:bg-blue-200 hover:text-blue-900 rounded\"\n                onClick={setMinutes.bind(this, minutes + 1)}\n              >\n                +\n              </button>\n            </div>\n            {error.target === \"minutes\" && (\n              <span className=\"text-red-500 text-sm\">{error.msg}</span>\n            )}\n          </div>\n\n          <div className=\"p-2\">\n            <label htmlFor=\"minutes-reason\">Reason</label>\n            <textarea\n              id=\"minutes-reason\"\n              className={`w-full bg-gray-100 rounded border-2 ${\n                error.target === \"reason\" ? \"border-red-500\" : \"border-blue-500\"\n              } p-1`}\n              rows={3}\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n            ></textarea>\n            {error.target === \"reason\" && (\n              <span className=\"text-red-500 text-sm\">{error.msg}</span>\n            )}\n          </div>\n\n          <div className=\"p-2 mx-1\">\n            <button\n              className=\"btn bg-blue-500 text-white w-full hover:bg-blue-600\"\n              onClick={() => submitHandler()}\n            >\n              <MdAddAlarm className=\"inline-block text-2xl\" /> Add minutes\n            </button>\n          </div>\n        </div>\n      </div>{\" \"}\n    </Fragment>\n  );\n};\nexport default AddTimeToCandidateModal;\n","import React, { FC, ReactElement, useEffect } from \"react\";\nimport {\n  MdOutlineMic,\n  MdVolumeUp,\n  MdOutlineCenterFocusStrong,\n  MdBackHand,\n  MdMicOff,\n  MdVolumeOff,\n} from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\nimport { shortString } from \"../../utils/functions\";\nimport HoverControls from \"./HoverControls\";\n\nconst styles_videoElement: React.CSSProperties = {\n  width: \"100%\",\n  height: \"10rem\",\n  minWidth: \"100%\",\n  minHeight: \"100%\",\n  objectFit: \"cover\",\n  objectPosition: \"top\",\n};\n\ntype LocalVideoCallProps = {\n  localStream: any;\n  candidate: CandidateProctoringInterface;\n  micAdd: (candidate_id: string) => void;\n  micStop: (candidate_id: string) => void;\n  micOnly: (candidate_id: string) => void;\n  soundAdd: (candidate_id: string) => void;\n  soundStop: (candidate_id: string) => void;\n  soundOnly: (candidate_id: string) => void;\n  open: (candidate_id: string) => void;\n  focus: (candidate_id: string) => void;\n};\n\nconst LocalVideoCall: FC<LocalVideoCallProps> = ({\n  localStream,\n  candidate,\n  micAdd,\n  micStop,\n  micOnly,\n  soundAdd,\n  soundStop,\n  soundOnly,\n  open,\n  focus,\n}): ReactElement => {\n  const localVideoRef = React.useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (localStream) {\n      const localVideo = localVideoRef.current;\n\n      if (localVideo !== null) {\n        localVideo.srcObject = localStream;\n        localVideo.onloadedmetadata = () => {\n          localVideo.play();\n        };\n      }\n    }\n  }, [localStream]);\n\n  let user_id = candidate.user_id;\n  let username = shortString(candidate.lname, 11);\n\n  return (\n    <div\n      className={`group  border-2 ${\n        candidate.stopped === true\n          ? \"border-red-300 bg-red-300\"\n          : \"border-blue-400 bg-blue-400\"\n      }  h-52 relative rounded-md`}\n      title={`${candidate.fname} ${candidate.lname}`}\n    >\n      <video\n        style={styles_videoElement}\n        className=\"w-full  h-52 z-10\"\n        ref={localVideoRef}\n        autoPlay\n        muted={!candidate.audio}\n      />\n\n      {candidate.hand === true && (\n        <div className=\"absolute top-0 left-0 z-50 bg-black bg-opacity-40 rounded-tl-sm rounded-br-2xl p-1\">\n          <MdBackHand className=\"text-2xl text-yellow-300\" stroke=\"red\" />\n        </div>\n      )}\n\n      <div className=\"absolute top-1 right-1 z-50 \">\n        <button\n          onClick={focus.bind(this, user_id)}\n          title=\"Focus on user\"\n          className=\"inline-block text-xl ml-1 p-0.5 text-white bg-black bg-opacity-60 rounded-lg  hover:bg-blue-800\"\n        >\n          <MdOutlineCenterFocusStrong />\n        </button>\n      </div>\n\n      <div className=\"w-full flex items-center px-1 -mt-10 absolute\">\n        <div className=\"flex-1\">\n          <button\n            onClick={open.bind(this, user_id)}\n            className=\"p-0.5 px-2 rounded-xl bg-black bg-opacity-50 inline-block text-white hover:bg-blue-800\"\n          >\n            <h2 className=\"font-bold\">{username}</h2>\n          </button>\n        </div>\n\n        <div className=\"text-right\">\n          <div className=\"inline-block hover-parent z-50\">\n            <button\n              className={\n                \"inline-block text-2xl ml-1 p-1 text-white bg-black bg-opacity-60 rounded-lg hover:bg-blue-900\"\n              }\n            >\n              {candidate.mic === true ? (\n                <MdOutlineMic className=\"text-red-400\" />\n              ) : (\n                <MdMicOff className=\"text-gray-100\" />\n              )}\n            </button>\n\n            <HoverControls\n              add={micAdd.bind(this, user_id)}\n              stop={micStop.bind(this, user_id)}\n              only={micOnly.bind(this, user_id)}\n              icon={candidate.mic === true ? MdOutlineMic : MdMicOff}\n              name={username}\n              sub_title={\"speakers\"}\n              title={\"speak\"}\n            />\n          </div>\n\n          <div className=\"inline-block hover-parent z-50\">\n            <button className=\"inline-block text-2xl ml-1 p-1 text-white bg-black bg-opacity-60 rounded-lg  hover:bg-blue-900\">\n              {candidate.audio === true ? (\n                <MdVolumeUp className=\"text-green-400\" />\n              ) : (\n                <MdVolumeOff className=\"text-gray-100\" />\n              )}\n            </button>\n\n            <HoverControls\n              add={soundAdd.bind(this, user_id)}\n              stop={soundStop.bind(this, user_id)}\n              only={soundOnly.bind(this, user_id)}\n              icon={candidate.audio === true ? MdVolumeUp : MdVolumeOff}\n              name={username}\n              sub_title={\"listeners\"}\n              title={\"listen\"}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default LocalVideoCall;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdMic, MdMicOff, MdVolumeOff, MdVolumeUp } from \"react-icons/md\";\ntype SoundControlProps = {\n  sound_text: string;\n  speaker_text: string;\n  speakToAll: () => void;\n  stopSpeaking: () => void;\n  listenAll: () => void;\n  stopListening: () => void;\n};\n\nconst Button: FC<{\n  icon: any;\n  title: string;\n  active: boolean;\n  accent: string;\n  click: () => void;\n  disabled: boolean;\n  description: string;\n}> = ({\n  title,\n  icon,\n  active,\n  accent,\n  click,\n  disabled,\n  description,\n}): ReactElement => {\n  const Icon = icon;\n  return (\n    <button\n      onClick={click}\n      disabled={disabled}\n      className={`flex text-xs items-center p-1 mx-0.5 px-2 rounded-full ${\n        active === true ? `bg-${accent}-600 text-white` : \"\"\n      } border border-${accent}-300 hover:bg-${accent}-700 hover:text-white text-${accent}-300`}\n      title={description}\n    >\n      <Icon className=\"text-xl \" />\n      <span className=\"opacity-80\">{title}</span>\n    </button>\n  );\n};\n\nconst SoundControl: FC<SoundControlProps> = ({\n  sound_text,\n  speaker_text,\n  speakToAll,\n  stopSpeaking,\n  listenAll,\n  stopListening,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className=\"flex p-1 bg-blue-900 mb-2 sticky bg-opacity-50 border-b border-blue-500\">\n      <div className=\"flex-1\">\n        <h6 className=\"text-xs text-blue-200\">\n          Audio{\" \"}\n          <span className=\"font-light opacity-40\">(what they listen)</span>\n        </h6>\n        <div className=\"mt-1 flex items-center\">\n          <Button\n            title=\"Speak to all\"\n            description=\"Speak to all candidates\"\n            accent=\"green\"\n            icon={MdMic}\n            click={speakToAll}\n            active={false}\n            disabled={false}\n          />\n          <Button\n            title=\"\"\n            description=\"Stop speaking to all candidates\"\n            accent=\"red\"\n            icon={MdMicOff}\n            click={stopSpeaking}\n            active={false}\n            disabled={false}\n          />\n\n          <p className=\"px-1 text-white\">{sound_text}</p>\n        </div>\n      </div>\n      <div className=\"flex-1 text-right\">\n        <h6 className=\"text-xs text-blue-200\">\n          Speaker{\" \"}\n          <span className=\"font-light opacity-40\">(what you listen)</span>\n        </h6>\n        <div className=\"mt-1 flex items-center flex-row-reverse\">\n          <Button\n            title=\"listen all\"\n            description=\"listen all candidates\"\n            accent=\"green\"\n            icon={MdVolumeUp}\n            click={listenAll}\n            active={false}\n            disabled={false}\n          />\n          <Button\n            title=\"\"\n            description=\"Stop listening to all candidate\"\n            accent=\"red\"\n            icon={MdVolumeOff}\n            click={stopListening}\n            active={false}\n            disabled={false}\n          />\n          <p className=\"px-1 text-white\">{speaker_text}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default SoundControl;\n","import React, { FC, ReactElement, useEffect } from \"react\";\nimport {\n  MdOutlineMic,\n  MdVolumeUp,\n  MdOutlineCenterFocusStrong,\n  MdBackHand,\n  MdMicOff,\n  MdVolumeOff,\n} from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\nimport { shortString } from \"../../utils/functions\";\nimport HoverControls from \"./HoverControls\";\n\nconst styles_videoElement: React.CSSProperties = {\n  width: \"100%\",\n  height: \"10rem\",\n  minWidth: \"100%\",\n  minHeight: \"100%\",\n  objectFit: \"cover\",\n  objectPosition: \"top\",\n};\n\ntype VideoCardProctoringFocusProps = {\n  localStream: any;\n  candidate: CandidateProctoringInterface;\n  focusCandidates: string[];\n  micAdd: (candidate_id: string) => void;\n  micStop: (candidate_id: string) => void;\n  micOnly: (candidate_id: string) => void;\n  soundAdd: (candidate_id: string) => void;\n  soundStop: (candidate_id: string) => void;\n  soundOnly: (candidate_id: string) => void;\n  open: (candidate_id: string) => void;\n  focus: (candidate_id: string) => void;\n};\n\nconst VideoCardProctoringFocus: FC<VideoCardProctoringFocusProps> = ({\n  localStream,\n  candidate,\n  micAdd,\n  micStop,\n  micOnly,\n  soundAdd,\n  soundStop,\n  soundOnly,\n  open,\n  focus,\n}): ReactElement | null => {\n  const localVideoRef = React.useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (localStream) {\n      const localVideo = localVideoRef.current;\n\n      if (localVideo !== null) {\n        localVideo.srcObject = localStream;\n        localVideo.onloadedmetadata = () => {\n          localVideo.play();\n        };\n      }\n    }\n  }, [localStream]);\n\n  let user_id = candidate.user_id;\n  let username = shortString(candidate.lname, 20);\n\n  return (\n    <div\n      className=\" bg-blue-300 border-2 border-blue-300 h-64 relative rounded-md\"\n      title={`${candidate.fname} ${candidate.lname}`}\n    >\n      <video\n        style={styles_videoElement}\n        className=\"w-full  h-64 z-10\"\n        ref={localVideoRef}\n        autoPlay\n        muted={!candidate.audio}\n      />\n\n      {candidate.hand === true && (\n        <div className=\"absolute top-0 right-0 z-50 bg-black bg-opacity-40 rounded-tr-sm rounded-bl-2xl p-1\">\n          <MdBackHand className=\"text-2xl text-yellow-300\" stroke=\"red\" />\n        </div>\n      )}\n      <div className=\"w-full flex items-center px-1 -mt-10 absolute\">\n        <div className=\"flex-1\">\n          <button\n            onClick={open.bind(this, user_id)}\n            className=\"p-0.5 px-2 rounded-xl bg-black bg-opacity-50 inline-block text-white hover:bg-blue-800\"\n          >\n            <h2 className=\"font-bold\">{username}</h2>\n          </button>\n        </div>\n\n        <div className=\"text-right\">\n          <div className=\"inline-block hover-parent z-50\">\n            <button\n              className={\n                \"inline-block text-2xl ml-1 p-1 text-white bg-black bg-opacity-60 rounded-lg hover:bg-blue-900\"\n              }\n            >\n              {candidate.mic === true ? (\n                <MdOutlineMic className=\"text-red-400\" />\n              ) : (\n                <MdMicOff className=\"text-gray-100\" />\n              )}\n            </button>\n\n            <HoverControls\n              add={micAdd.bind(this, user_id)}\n              stop={micStop.bind(this, user_id)}\n              only={micOnly.bind(this, user_id)}\n              icon={candidate.mic === true ? MdOutlineMic : MdMicOff}\n              name={username}\n              sub_title={\"speakers\"}\n              title={\"speak\"}\n            />\n          </div>\n\n          <div className=\"inline-block hover-parent z-50\">\n            <button className=\"inline-block text-2xl ml-1 p-1 text-white bg-black bg-opacity-60 rounded-lg  hover:bg-blue-900\">\n              {candidate.audio === true ? (\n                <MdVolumeUp className=\"text-green-400\" />\n              ) : (\n                <MdVolumeOff className=\"text-gray-100\" />\n              )}\n            </button>\n\n            <HoverControls\n              add={soundAdd.bind(this, user_id)}\n              stop={soundStop.bind(this, user_id)}\n              only={soundOnly.bind(this, user_id)}\n              icon={candidate.audio === true ? MdVolumeUp : MdVolumeOff}\n              name={username}\n              sub_title={\"listeners\"}\n              title={\"listen\"}\n            />\n          </div>\n\n          <button\n            onClick={focus.bind(this, user_id)}\n            title=\"Focus on user\"\n            className=\"inline-block text-2xl ml-1 p-1 text-white bg-black bg-opacity-60 rounded-lg  hover:bg-blue-800\"\n          >\n            <MdOutlineCenterFocusStrong />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default VideoCardProctoringFocus;\n","import moment from \"moment\";\nimport React, { Fragment } from \"react\";\nimport { FaSchool } from \"react-icons/fa\";\nimport { MdLocationOn, MdSignalWifiConnectedNoInternet4 } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  FC_RoomDetails,\n  Proctoring,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n  FT_AddRules,\n  FC_AddRules,\n  FT_LoadExamToRoomProctoring,\n  FT_ExamsDetailsData,\n  FT_RoomDetails,\n  FT_ClearExamToRoomProctoring,\n  ExamsListDates,\n} from \"../../actions\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  ProctoringExam,\n  ProctoringRoomExam,\n} from \"../../interfaces/socketInterfaces\";\nimport { StoreState } from \"../../reducers\";\nimport { isToday } from \"../../utils/functions\";\nimport search from \"../../utils/search\";\nimport { ProctoringOnlineSupervisor } from \"../ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_RoomDetails: FT_RoomDetails;\n  FC_ExamsDetailsData: FT_ExamsDetailsData;\n  FC_LoadExamToRoomProctoring: FT_LoadExamToRoomProctoring;\n  FC_ClearExamToRoomProctoring: FT_ClearExamToRoomProctoring;\n  FC_AddRules: FT_AddRules;\n}\n\ninterface AppState {\n  error: boolean;\n  errorMsg: string;\n  exams_error: boolean;\n  exams_error_msg: string;\n  search_text: string;\n  loading_room_details: boolean;\n  get_exams_list: boolean;\n  warning: {\n    target: \"main-error\" | null;\n    msg: string;\n  };\n}\n\ninterface UpdatedList extends ExamsListDates, ProctoringRoomExam {\n  done_today: boolean;\n}\n\nclass _ProctoringCenter extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      error: false,\n      errorMsg: \"\",\n      exams_error: false,\n      exams_error_msg: \"\",\n      search_text: \"\",\n      loading_room_details: false,\n      get_exams_list: false,\n      warning: {\n        msg: \"\",\n        target: null,\n      },\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.auth.user_access.room_id.length >= 3) {\n      //** GET ROOM DETAILS */\n\n      if (\n        this.props.proctoring.room.room_id === \"\" &&\n        this.props.auth.application_session?._id !== undefined\n      ) {\n        this.setState({ loading_room_details: true });\n        this.props.FC_RoomDetails(\n          this.props.auth.user_access.room_id,\n          this.props.auth.application_session?._id,\n\n          (status: boolean, errorMsg: string) => {\n            if (status === true) {\n              this.setState({ loading_room_details: false });\n\n              if (\n                this.props.auth.application_session?._id !== undefined &&\n                this.props.auth.application_session._id !== \"\"\n              ) {\n                //** GET EXAMS DETAILS */\n                this.setState({ get_exams_list: true });\n\n                this.props.FC_ExamsDetailsData(\n                  this.props.auth.application_session?._id,\n                  (status: boolean, error: string) => {\n                    if (status === false) {\n                      this.setState({\n                        exams_error: true,\n                        exams_error_msg: error,\n                        get_exams_list: false,\n                      });\n                    } else {\n                      this.setState({ get_exams_list: false });\n                    }\n                  }\n                );\n              } else {\n                this.setState({\n                  error: true,\n                  errorMsg: \"No application session found\",\n                  warning: {\n                    msg: errorMsg,\n                    target: \"main-error\",\n                  },\n                  loading_room_details: false,\n                });\n                this.clearError();\n              }\n            } else {\n              this.setState({\n                error: true,\n                errorMsg: errorMsg,\n                loading_room_details: false,\n                warning: {\n                  msg: errorMsg,\n                  target: \"main-error\",\n                },\n              });\n              this.clearError();\n            }\n          }\n        );\n      } else {\n        this.setState({\n          warning: {\n            target: \"main-error\",\n            msg: \"Failed to load the data\",\n          },\n        });\n        this.clearError();\n      }\n    }\n  };\n\n  clearError = () =>\n    setTimeout(() => {\n      this.setState({\n        warning: {\n          target: null,\n          msg: \"\",\n        },\n      });\n    }, 2000);\n\n  render() {\n    if (this.props.auth.socket_failed === true)\n      return (\n        <div className=\" py-8 mt-2 text-center rounded container mx-auto\">\n          <MdSignalWifiConnectedNoInternet4\n            size={100}\n            className=\"mx-auto text-yellow-500 opacity-70 animate__animated animate__fadeIn animate__infinite animate__slow\"\n          />\n\n          <h3 className=\"pt-6 text-xl text-gray-600\">\n            Your computer is not connected to the <b>Live-server</b>\n          </h3>\n          <p>PLease refresh your browser, or use incognito mode</p>\n        </div>\n      );\n\n    if (this.state.error === true) {\n      return (\n        <div className=\"mt-4\">\n          <div className=\"p-5 bg-red-100 rounded-md mx-auto text-center text-red-900 animate__animated animate__bounceIn\">\n            <h1 className=\"text-3xl font-bold\">Failed do load data</h1>\n            <p>{this.state.errorMsg}</p>\n          </div>\n        </div>\n      );\n    }\n    if (\n      this.state.error === false &&\n      this.props.proctoring.room.loaded === false\n    ) {\n      return (\n        <div className=\"m-5 text-center\">\n          <h5 className=\"text-gray-400 animate__animated animate__fadeIn animate__infinite text-xl\">\n            Loading room details\n          </h5>\n        </div>\n      );\n    }\n    if (\n      this.props.proctoring.exam.course_id !== \"\" &&\n      this.props.proctoring.exam.position_id !== \"\"\n    ) {\n      return <ProctoringOnlineSupervisor homeProctoring={false} />;\n    }\n    const { room_number, center_name, district_name, province_name } =\n      this.props.proctoring.room;\n\n    let list_data: UpdatedList[] = [];\n    let exam_data: ProctoringRoomExam[] = this.props.proctoring.room_exams;\n\n    for (const iterator of exam_data) {\n      let examFound = this.props.proctoring.exams_list.exams.find(\n        (exm) => exm.course === iterator.course_id\n      );\n\n      if (examFound === undefined) {\n        continue;\n      } else {\n        list_data.push({\n          ...examFound,\n          ...iterator,\n          done_today: isToday(examFound.exam_date),\n        });\n      }\n    }\n\n    let courses_results = search(list_data, this.state.search_text, {\n      course_id: true,\n      course_name: true,\n      course_code: true,\n    });\n    return (\n      <Fragment>\n        {this.state.warning.target !== null && (\n          <Alert theme={AlertInterface.danger} title={this.state.warning.msg} />\n        )}\n        <div className=\"mr-2\">\n          <div className=\"p-5 bg-white rounded-b-md \">\n            <h2 className=\"text-2xl text-gray-600 font-bold text-center border-b pb-2\">\n              Room details\n            </h2>\n            <div className=\"flex flex-col md:flex-row\">\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <MdLocationOn className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 pt-3 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Province:</span>{\" \"}\n                    <b> {province_name}</b>\n                  </div>\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">District:</span>{\" \"}\n                    <b> {district_name}</b>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <FaSchool className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Center name:</span>{\" \"}\n                    <b> {center_name}</b>\n                  </div>\n\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Room Number:</span>{\" \"}\n                    <b> {room_number}</b>\n                  </div>\n                </div>\n              </div>\n            </div>{\" \"}\n          </div>\n          {this.state.loading_room_details === true && (\n            <div className=\"p-2 rounded-md text-xl text-center bg-blue-400 text-white animate__fadeIn animate__animated animate__infinite my-2\">\n              Loading room details...\n            </div>\n          )}\n          {this.state.get_exams_list === true && (\n            <div className=\"p-2 rounded-md text-xl text-center bg-blue-400 text-white animate__fadeIn animate__animated animate__infinite my-2\">\n              Loading exams...\n            </div>\n          )}\n          <h2 className=\"mt-5 text-2xl font-bold text-gray-500\">\n            Active exams\n          </h2>\n          <div className=\"mt-2 p-2 bg-white rounded-md\">\n            {this.state.get_exams_list === true ? (\n              <div className=\"text-gray-300 text-center\">Loading room...</div>\n            ) : this.props.proctoring.room_exams.length <= 0 ? (\n              <div className=\"p-5 text-center\">\n                No exams assigned to this room\n              </div>\n            ) : (\n              <>\n                <div className=\"pt-1 pb-3\">\n                  <input\n                    type=\"search\"\n                    onChange={(e) =>\n                      this.setState({ search_text: e.target.value })\n                    }\n                    value={this.state.search_text}\n                    className=\"input bg-gray-100 p-1\"\n                    placeholder=\"Search\"\n                  />\n                </div>\n\n                <table className=\"w-full text-left\">\n                  <thead className=\"bg-gray-100 rounded-md\">\n                    <tr>\n                      <th className=\"p-2\">#</th>\n                      <th className=\"p-2\">Course</th>\n                      <th className=\"p-2\">Position</th>\n                      <th className=\"p-2\">Code</th>\n                      <th className=\"p-2\">Date</th>\n                      <th className=\"p-2\"></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {courses_results.length === 0 && (\n                      <tr>\n                        <td colSpan={7} className=\"py-6 text-center\">\n                          <h2 className=\"text-3xl text-gray-500\">\n                            No data found\n                          </h2>\n                        </td>\n                      </tr>\n                    )}\n\n                    {courses_results\n                      .filter((itm: UpdatedList) => itm.done_today === true)\n                      .map((room: UpdatedList, key) => {\n                        return (\n                          <tr\n                            className=\"p-2 border-t group hover:bg-blue-50\"\n                            key={key}\n                          >\n                            <td className=\"p-2 text-gray-400\">{key + 1}</td>\n                            <td className=\"p-2 font-bold\">\n                              {room.course_name}\n                            </td>\n                            <td className=\"p-2\">\n                              <span className=\"p-1 text-sm bg-yellow-100 font-bold text-yellow-900 rounded\">\n                                {room.position_title}\n                              </span>\n                            </td>\n                            <td className=\"p-2\">{room.course_code}</td>\n                            <td className=\"p-2 text-sm\">\n                              {this.state.error === false &&\n                              this.props.proctoring.exams_list.loaded ===\n                                false ? (\n                                <span className=\"text-blue-500 animate__animated animate__fadeIn animate__infinite\">\n                                  Loading...\n                                </span>\n                              ) : (\n                                moment(room.exam_date).format(\"LLLL\")\n                              )}\n                            </td>\n                            <td className=\"p-2 text-right\">\n                              <Fragment>\n                                {room.course_id ===\n                                  this.props.proctoring.exam.course_id &&\n                                  room.position_id ===\n                                    this.props.proctoring.exam.position_id && (\n                                    <button\n                                      className=\" group-hover:bg-red-500 py-1 px-3 rounded text-red-500 group-hover:text-white bg-red-100\"\n                                      onClick={() =>\n                                        window.confirm(\n                                          \"Are you sure you want to exist the room\"\n                                        ) &&\n                                        this.props.FC_ClearExamToRoomProctoring()\n                                      }\n                                    >\n                                      Leave Room\n                                    </button>\n                                  )}\n\n                                {this.props.proctoring.exam.room_id === \"\" && (\n                                  <button\n                                    onClick={() => {\n                                      this.props.FC_LoadExamToRoomProctoring({\n                                        video_support: false,\n                                        start_exam: false,\n                                        start_time: room?.start_time,\n                                        end_time: \"\",\n                                        exam_done: false,\n                                        period_id:\n                                          this.props.auth.application_session\n                                            ?._id,\n                                        exam_status: room?.exam_status,\n                                        exam_date: room?.exam_date,\n                                        duration: room?.duration,\n                                        position_id: room.position_id,\n                                        position_title: room.position_title,\n                                        course_id: room.course_id,\n                                        course_code: room.course_code,\n                                        course_name: room.course_name,\n                                        room_id:\n                                          this.props.proctoring.room.room_id,\n                                        exam_id: room.id,\n                                      } as ProctoringExam);\n                                      this.props.FC_AddRules(room.rules);\n                                    }}\n                                    className=\" group-hover:bg-blue-500 py-1 px-3 rounded text-blue-500 group-hover:text-white bg-blue-100\"\n                                  >\n                                    Open\n                                  </button>\n                                )}\n                              </Fragment>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                  </tbody>\n                </table>\n              </>\n            )}\n          </div>\n        </div>\n\n        <h2 className=\"mt-5 text-2xl font-bold text-gray-500\">\n          Others exams on this room\n        </h2>\n        <div className=\"p-2 bg-white mt-2 rounded-md\">\n          <table className=\"w-full text-left\">\n            <thead className=\"bg-gray-100 rounded-md\">\n              <tr>\n                <th className=\"p-2\">#</th>\n                <th className=\"p-2\">Course</th>\n                <th className=\"p-2\">Position</th>\n                <th className=\"p-2\">Code</th>\n                <th className=\"p-2\">Date</th>\n                <th className=\"p-2\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {courses_results.length === 0 && (\n                <tr>\n                  <td colSpan={7} className=\"py-6 text-center\">\n                    <h2 className=\"text-3xl text-gray-500\">No data found</h2>\n                  </td>\n                </tr>\n              )}\n\n              {courses_results\n                .filter((itm: UpdatedList) => itm.done_today === false)\n                .map((room: UpdatedList, key) => {\n                  return (\n                    <tr className=\"p-2 border-t  hover:bg-blue-50-\" key={key}>\n                      <td className=\"p-2 text-gray-400\">{key + 1}</td>\n                      <td className=\"p-2 font-bold\">{room.course_name}</td>\n                      <td className=\"p-2\">\n                        <span className=\"p-1 text-sm bg-yellow-100 font-bold text-yellow-900 rounded\">\n                          {room.position_title}\n                        </span>\n                      </td>\n                      <td className=\"p-2\">{room.course_code}</td>\n                      <td className=\"p-2 text-sm\">\n                        {this.state.error === false &&\n                        this.props.proctoring.exams_list.loaded === false ? (\n                          <span className=\"text-blue-500 animate__animated animate__fadeIn animate__infinite\">\n                            Loading...\n                          </span>\n                        ) : (\n                          moment(room.exam_date).format(\"LLLL\")\n                        )}\n                      </td>\n                      <td className=\"p-2 text-right\">{room.exam_status}</td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth, proctoring };\n};\n\nexport const ProctoringCenter = connect(mapStateToProps, {\n  FC_RoomDetails,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n  FC_AddRules,\n})(_ProctoringCenter);\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}