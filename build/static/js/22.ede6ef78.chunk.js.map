{"version":3,"sources":["shared/dataTest.tsx","utils/question_bank.ts","components/Table/Table.tsx","actions/session.ts","actions/document.ts","components/Navigation/SideNavigation.tsx","containers/Claimings/Candidate/FormPlacementList.tsx","containers/Claimings/Candidate/ClaimForm.tsx","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/SessionSettings/NoSession.tsx","components/Loading/TableLoading.tsx","utils/ExportToExcel.tsx","utils/mineduc.png","components/DownloadPDF/rest.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/Essay.tsx","containers/Claimings/ClaimDocView.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","components/QuestionPreview/QuestionPreview.tsx","containers/Positions/ViewRequirements.tsx","components/AnswersDetails/CandidateAnswersDetails.tsx","containers/Claimings/Candidate/ApplicationFormView.tsx","components/AnswersDetails/AnswersDetails.tsx","containers/SessionSettings/ChooseSession.tsx","containers/Claimings/Candidate/ExaminationFormView.tsx","containers/Claimings/Candidate/FormExamList.tsx","components/ClaimForm/ClaimFormComponent.tsx","containers/Claimings/Candidate/ChooseReason.tsx","containers/Claimings/Candidate/DocFormView.tsx","containers/Claimings/Candidate/FormApplicationList.tsx","containers/Claimings/Candidate/FormDocumentList.tsx","containers/DoExam/QuestionDetails/Answers/AnswersTypesCollection.tsx","containers/DoExam/QuestionDetails/Answers/HybridAnswers.tsx","containers/CandidateExams/CandidateExams.tsx","containers/SessionSettings/ApplicationSession/SessionDetails.tsx","containers/DoExam/DoExamTitle/FindAnswer.tsx","containers/DoExam/DoExamTitle/FindAnswerHybrid.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx","containers/Admin/Claiming/ClaimingReport.tsx"],"names":["isEmptyOrSpaces","str","match","getRoleById","roles","roleId","filter","role","system_user_role_id","getInstituteById","institutes","instituteId","find","item","education_institute_id","getPositionById","positions","position_id","position","toTwoDigit","value","dec","Math","floor","slice","toString","substr","toAnyDigit","padding","zeroes","Array","join","capitalizeFirstLetter","charAt","toUpperCase","ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","caption","Table","props","table","tr","tableId","result","charactersLength","random","FC_makeID","useState","totalItems","setTotalItems","totalPages","setTotalPages","currentPage","setCurrentPage","pages","setPages","pageSize","setPageSize","startIndex","setStartIndex","endIndex","setEndIndex","useEffect","pagination","tablePagination","document","getElementById","getElementsByTagName","ceil","min","_pages","from","keys","map","style","display","className","tableSize","search","searchBG","placeholder","onChange","e","data","filterType","td","rows","cols","toLowerCase","columns","textContent","innerText","indexOf","filterTable","target","disabled","loading","Number","tableClass","rounded","hideColumns","thColor","column","index","alignText","isSortAllowed","onClick","switching","x","y","shouldSwitch","colIndex","dir","switchcount","innerHTML","parentNode","insertBefore","sortThisColumn","columnTitle","aria-label","page","pageIndex","GetPlansTypes","callback","dispatch","a","setAxiosToken","axios","get","API","CLAIMING","console","log","GET_PLANS_TYPES","plan_types","ActionTypes","payload","error","errorToText","setSelectedPlanType","thisType","SELECT_PLAN_TYPE","getActiveSessionPlan","GET_ACTIVE_SESSION_PLANS","session_plan","is_active","GetAllSessionPlans","GET_ALL_SESSION_PLANS","session_data","createSessionPlan","CREATE_SESSION_PLAN","updateSessionPlan","UPDATE_SESSION_PLAN","sessionActivation","SESSION_ACTIVATION","deleteSessionPlan","DELETE_SESSION_PLAN","createAcademicSession","CREATE_ACADEMIC_SESSION","GetAllAcademicSession","PLACEMENT","GET_ALL_ACADEMIC_SESSION","updateAcademicSession","UPDATE_ACADEMIC_SESSION","academicSessionActivation","ACADEMIC_SESSION_ACTIVATION","deleteAcademicSession","DELETE_ACADEMIC_SESSION","getActiveAcademicSession","GET_ACTIVE_ACADEMIC_SESSION","getDocumentCategory","AUTH","docCategory","GET_DOCUMENT_CATEGORY","createDocumentCategory","CREATE_DOCUMENT_CATEGORY","updateDocumentCategory","UPDATE_DOCUMENT_CATEGORY","deleteDocumentCategory","DELETE_DOCUMENT_CATEGORY","getDocumentSubCategory","docSubCategory","GET_DOCUMENT_SUB_CATEGORY","doc_SUB_category_error","createDocumentSubCategory","CREATE_DOCUMENT_SUB_CATEGORY","updateDocumentSubCategory","UPDATE_DOCUMENT_SUB_CATEGORY","deleteDocumentSubCategory","DELETE_DOCUMENT_SUB_CATEGORY","getDocumentFields","docFields","GET_DOCUMENT_FIELDS","createDocumentFields","CREATE_DOCUMENT_FIELDS","updateDocumentFields","reducer","UPDATE_DOCUMENT_FIELDS","deleteDocumentFields","DELETE_DOCUMENT_FIELDS","distinctCandidates","candidatesData","user_ids","candidate","forEach","includes","user_id","push","getCandidatesInInstitute","educatin_type_id","session_id","APPLICATION","GET_CANDIDATE_IN_INSTITUTE","verifyDocument","VERIFY_DOCUMENT","_SideNavigation","componentDidMount","PageHasSubNav","componentWillUnmount","state","this","auth","isAuthenticated","navActive","system","navigation","children","React","Component","SideNavigation","connect","NavToogle","MainItem","title","icon","MdBrightness1","active","count","IconDefined","memo","searchInput","setSearchInput","myPlacement","isClaimAllowed","myClaims","activeSession","session_plan_id","placed","_id","setChooseClaimFile","setViewThisFile","setClaimFileId","school","school_name","ClaimGetDocTitle","documentCategories","doc","DocCategory","DocSubCategory","DocField","DocTitle","sub_category_id","documentSubCategory","c","user_detail_subcategory_id","category_id","documentCategory","user_detail_category_id","category_subcategory_data","category_subcategory_Data_id","documentFields","category","sub_category","field","main","allClaim","period_id","claimOnId","claiming_on_id","ClaimForm","setLoading","setState","setLoadingForm","loadingForm","setFormError","formError","setAlertError","alertError","claimFileId","viewThisFile","chooseClaimFile","setChooseClaimReason","chooseClaimReason","setClaimReason","claimReason","setClaimComment","claimComment","isClaimTypeOpen","thisSession","PlansTypeKeys","plans","type_key","isPlanActive","DOCUMENT_VALIDATION","PLACEMENT_TRANSFER","displayClaimType","claimType","EXAMINATION","MARKS_PUBLICATION","loadExamAnswers","activeSessionPlan","getMyAnswers","PushPopupAlert","theme","PopupAlertTheme","danger","application_session","setFormState","thisClaimType","thisClaimTypeId","formType","documentReducer","claiming","claimReasons","getClaimReasons","getDocumentById","documents","doc_id","getApplicationById","applications","application_id","getExamById","exams","answer_sheet_id","getValidation","thisId","old_reason","old_status","old_evaluated_by","candidateDocuments","validated_by","comment","validation_status","candidateApplications","override_by","application_status","cleanToClose","response","loadUserById","getClaimTitle","position_title","myAnswer","getCourseIdBySheetId","getCourseById","course_name","getClaimInstitute","handleSubmit","preventDefault","toLocaleLowerCase","old_evaluator_email","old_evaluator_name","evaluator_email","evaluator_name","institute_id","email","user_info","fname","lname","post","user","default_claim_resaons","reason","createClaim","success","selectClaimType","thisClaim","getMyRejectedApplications","loadCourses","getMyRejectedDocuments","getMyPlacement","generateChooseFileTitle","formState","Modal","backDrop","Themes","default","close","displayClose","backDropClose","widthSizeClass","ModalSize","extraLarge","medium","body","footer","onSubmit","Object","values","replace","FormDocumentList","FormApplicationList","FormExamList","candidateAnswers","ChooseReason","allClaimReasons","resize","DocFormView","thisDoc","ApplicationFormView","thisApplication","ExaminationFormView","thisAnswerSheet","getMyClaims","GetClaimingTypes","toMultipleChoice","answers","answer","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","NoSession","TableLoading","displayCols","colsArray","ExportToExcel","fileData","fileName","btnName","showIcon","apiData","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","require","addFooters","pageCount","internal","getNumberOfPages","setFont","setFontSize","setPage","text","String","width","align","generatePDF","reportSettings","callBack","orientation","lMargin","jsPDF","setTextColor","addImage","Logo","getWidth","institute","lines","splitTextToSize","subject","pdfInMM","subjectTitle","getTextWidth","addPage","period","autoTable","html","startY","margin","horizontal","cellPadding","rowHeight","bodyStyles","valign","columnStyles","cellWidth","tableWidth","finalY","lastAutoTable","doneBy","DATE","save","returnPromise","then","MultipleChoice","checkAnswer","available_answers","question_id","selectedQuestionAnswer","checkA","tes","reference","selectedAns","addAnswerItemFn","newAnswers","questionAnswer","question","answerQuestionFn","language","oldAnswers","selAns","tester","temp","questionTypeElementsType","SingleMultiple","t","newAnswersMultiple","xItem","addAnswer","dangerouslySetInnerHTML","__html","TrueFalse","SimpleCalculated","answeredValue","checkB","ShortAnswer","minHeight","Numerical","CalculatedMultipleChoice","getRandomArbitrary","Essay","isReclaimAllowed","claim_level","_thisClaim","claims","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","createReClaim","reClaimingMsg","warning","setLoadingRequest","put","setReClaimingMsg","setReClaiming","getReasonById","reason_id","setViewImage","viewImage","previous","evaluater","name","src","AUTH_FILES","files","alt","claim","showDate","createdAt","evaluation_comment","reClaiming","last_claim_status","PENDING","DELETED","loadingRequest","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","selectedLanguage","checkIfSelected","Matching","displayWindow","setDisplayWindow","setSelectedAnswer","ans","selectedQuestionId","selectedLang","ansi","selectedExam","testing","questions","QuestionLanguages","lang","testLang","checkE","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","EmbeddedQuestion","selectedQuestion","questionTypes","questionAnswers","newTextResult","findQuestionType","Embedded","answeredQuestions","userQuestionAnswers","originalText","description","sub_question","answerCheck","answered","QuestionForEmbedded","select","alert","returnSelect","typeShort","QuestionPreview","doExam","candidateExam","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","selectLang","setSelectLang","setSelectedLanguage","filterLanguages","langs","langItem","testLangQ","l","LoadingType","white","marks","question_answers","Hybrid","candidate_exam","Shuffle","SimpleCalculate","Numeric","wholeQuestion","ViewRequirements","requirements","colSpan","subcategory_title","field_id","field_title","subcategory_required","required","CandidateAnswersDetails","tomorrow","setDate","date","setClaim","compareWithToday","exam_id","showAnswers","claim_type","file_id","FC_ApplicationPositionDistinctCategory","thisPosition","PositionsTemp","DistinctCategoriesTemp","DistinctCategoriesIds","DistinctSubCategoriesTemp","DistinctSubCategoriesIds","req","thisRequirements","thisCategory","thisSubCategory","subcategory","thisField","position_requirement","category_title","subcategory_id","ApplicationStates","Rejected","school_level_id","school_level_name","education_category_title","course_code","NoResultThemes","Dark","_AnswersDetails","setLoadingStatus","loadingStatus","user_exams_done","allAnswers","loadExamsDone","exam_paper","requestUserAnswers","userAnswersTotalMarks","user_answers","total","user_marks","user_exam_details","discription","termes","answersList","submitQuestionAnswer","submitExam","setSubmitModal","is_deleted","chapters","customNumber","showCorrectAnswer","exam_total_marks","AnswersDetails","FC_GetProfileDetails","LoadCandidateApplications","setSelectedCandidateExam","setSelectedCourse","setSelectedPosition","InitializeExamDetails","AddUserApplication","loadApplicationPeriods","isPlansActive","activePlans","plan","startDate","start_date","endDate","end_date","type_status","SessionPlanTypeStatus","OPEN","ChooseSession","searched","selectedPlan","setSelectedPlan","setSearch","allSession","chooseAll","currentSelected","setSelectSession","searchData","session_plan_name","type_title","claimShowAnswer","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","getFailedExam","allData","allCourses","sheet_id","ClaimFormComponent","isDocumentIdValid","info","isApplicationIdValid","app_id","app","isExamIdValid","exam","candidate_applications","_isDocumentIdValid","_isApplicationIdValid","_isExamIdValid","application_period","updatedAt","application_history","getClaimById","fileId","sessionId","getRejectedApplicants","applicationData","objList","product","flag","prop","DocumentTitleData","documentData","documentTemp","company","end_year","names","phone_number","school_id","start_year","year","doc_title","getRejectedDocuments","rejected","AnswersTypesCollection","QuestionForHybrid","Calculated","HybridAnswers","stri","fromCharCode","charCodeAt","hybrid","tooday","myDate","todayConverted","ChangeLocationComponent","setDisplay","changeLocation","_CandidateExams","setloadingExamsDone","loadingExamsDone","loadCandidateExams","QBank","candidateExams","loadUserProfileDetails","InitializationFn","application","user_exams_temp","center_id","Shortlisted","doing_exam","periods","selected_period","district_id","room_id","loadUserApplications","findLocation","updateLocation","selectedCourse","centersModal","maxExamModal","selectedPosition","successMessage","updateLocationFunction","addLocation","location","proctoring_type","selPeriod","sex","applicationPeriods","removeDuplicatesExams","removeDuplicatesNotPreparedExams","setTimeOut","temps","activeExams","selectApplication","setMaxExamModal","closeModal","FC_Access","UserAccessList","MY_APPLICATION","view","selected_exam_id","selected_exam_details","to","preparedExam","user_status","center_name","room_number","school_levels","UserExamStatus","Editing","Paused","Done","Removed","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","positionCourses","CandidateExams","isActivationAllowed","thisPlans","getPlanTypeByKey","allPlanTypes","viewThisSession","thisPlan","planEndDate","planStartDate","CLOSED","SessionDetails","handlePlanActivation","session","newState","window","confirm","newData","prototype","hasOwnProperty","call","allowed_claim_level","history","setViewThisSession","resultDiv","subQuestionType","userAnswer","userAnswerSingle","userAnswer1","userAnswerMatch","userAnswerTureFalse","userAnswerNumerical","userAnswerSimpleCalculate","userAnswerShortAnswer","userAnswerEssay","FindAnswer","UserAnswersSel","SubQ","findQType","user_answer","testQ","changed","FindAnswerHybrid","maxHeight","filterClaimsByClaimType","claimList","setSelectedClaimType","getAllClaims","loadingClaimTypes","setLoadingClaimTypes","claimTypes","countClaims","allClaims","Fragment","loadingClaims","selectedClaimType","ClaimHeaderTitle","isLoading","loadingSession","periodChanged","headerTitle","thisPeriod","sessions","application_sessions","selectPeriod","setThisPeriod","setLoadingSession","onPeriodChange","ClaimTypesEnum","setViewPosition","viewPosition","NoResult","thisExam","thisExamSheet","userDetails","district_name","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","COMPLETED","document_id","whichClaimType","marks_publication","placement","whichClaimStatus","classes","claim_id","displayDocClaimTitle","displayClaimTitle","allCourse","thisAnswer","Index","setViewClaim","viewClaim","setPeriodChanged","setClaimForm","claimForm","setClaimId","claimId","setSearchClaim","searchClaim","loadClaims","setSession","isDeleteAllowed","thisCLaim","Light","ClaimApplView","ClaimExamView","CandidateClaim","sessionPlan","allSessionPlans","reportClaimType","defaultReportContent","claimReportContentKeyInterface","national_id","gender","phone","claim_session","education_category","decision","claim_title","ClaimingReport","schoolLevels","getAllApplications","loadEducationCategories","thisLevel","setThisLevel","setLoadingClaims","loadingInstitutes","setLoadingInstitutes","downloading","setDownloading","claimToPrint","setClaimToPrint","sortProperty","setSortProperty","isSorted","setIsSorted","sortOrder","setSortOrder","generateReportModal","setGenerateReportModal","reportTitle","setReportTitle","reportContent","setReportContent","selectAll","setSelectAll","setSelectPeriod","thisEducation","setThisEducation","education_categories","setSort","thisProperty","updateClaimToPrint","arrayNew","n","keyClaim","dataArray","n_id","FC_ClaimData","isChangeAllowed","FC_FilterClaims","claimLevel","output","PlansKey","ClaimTypes","selectedType","currentType","levels","ClaimLevels","reportType","querySelectorAll","FC_GeneratePDF","sortThisArray","findIndex","newArray","isSelectAllNeeded","updateReportContent","currentState","resetReportContent"],"mappings":"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","file":"static/js/22.ede6ef78.chunk.js","sourcesContent":["import { education_category } from \"../interfaces\";\nimport { PositionAPI } from \"../interfaces/position\";\nimport {\n  CustomeAccessInterface,\n  PostSchoolInterface,\n  RoleToUserInterface,\n  SchoolInfoInterface,\n  SystemUserRoleInterface,\n} from \"./interfaces\";\n\nexport const data_posts_school: PostSchoolInterface[] = [];\n\nexport const isEmptyOrSpaces = (str: string): boolean => {\n  return str === null || str.match(/^ *$/) !== null;\n};\n\nexport const getUserTitle = (\n  accessRoles: SystemUserRoleInterface[],\n  roleId: string\n): string => {\n  const result = accessRoles.find((e) => e.system_user_role_id === roleId);\n  return result ? result.role : \"\";\n};\n\nexport const getRoleById = (\n  roles: SystemUserRoleInterface[],\n  roleId: string\n): SystemUserRoleInterface => {\n  return roles.filter((role) => role.system_user_role_id === roleId)[0];\n};\n\nexport const getInstituteById = (\n  institutes: education_category[],\n  instituteId: string\n): education_category | undefined => {\n  return institutes.find((item) => item.education_institute_id === instituteId);\n};\n\nexport const getPositionById_old = (\n  positions: PositionAPI[],\n  position_id: string\n): PositionAPI => {\n  console.log({\n    positions,\n    position_id,\n    data: positions.filter(\n      (position) => position.position_id === position_id\n    )[0],\n  });\n  return positions.filter(\n    (position) => position.position_id === position_id\n  )[0];\n};\n\nexport const getPositionById = (\n  positions: PositionAPI[],\n  position_id: string\n): PositionAPI | undefined => {\n  return positions.find((position) => position.position_id === position_id);\n};\n\nexport const getSchoolById = (\n  schools: SchoolInfoInterface[],\n  school_id: string\n): SchoolInfoInterface => {\n  return schools.filter((school) => school.school_id === school_id)[0];\n};\n\nexport const getPostById = (\n  posts: PostSchoolInterface[],\n  post_id: string\n): PostSchoolInterface => {\n  return posts.filter((post) => post.school_id === post_id)[0];\n};\n\nexport const getPostsBySchoolId = (\n  posts: PostSchoolInterface[],\n  school_id: string\n): PostSchoolInterface[] => {\n  return posts.filter((post) => post.school_id === school_id);\n};\n\nexport const getPostsByIds = (\n  posts: PostSchoolInterface[],\n  school_id: string,\n  position_id: string\n): PostSchoolInterface[] => {\n  return posts.filter(\n    (post) => post.school_id === school_id && post.position_id === position_id\n  );\n};\n\nexport const displayDate = (dateToDisplay: Date): string => {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\",\n  }).format(dateToDisplay);\n};\n\nexport const userAccess = (\n  defaultAccess: RoleToUserInterface,\n  customAccess: CustomeAccessInterface\n): RoleToUserInterface => {\n  // const data = defaultAccess.access.map((default,index,customAccess)=>{\n  //   let data_custom = customAccess\n  //   if\n  // })\n  // return customAccess.filter((custom) => custom.id === accecc_id)[0];\n  return defaultAccess;\n};\n\n// export const groupBy = (list: [], keyGetter: Function) => {\n//   const map = new Map();\n//   list.forEach((item) => {\n//     const key = keyGetter(item);\n//     const collection = map.get(key);\n//     if (!collection) {\n//       map.set(key, [item]);\n//     } else {\n//       collection.push(item);\n//     }\n//   });\n//   return map;\n// };\n\nexport const toTwoDigit = (value: number): string => {\n  var dec = value - Math.floor(value);\n  value = value - dec;\n  return (\"0\" + value).slice(-2) + dec.toString().substr(1);\n};\n\nexport const toAnyDigit = (\n  value: string | number,\n  padding: number = 3\n): string => {\n  var zeroes = new Array(padding + 1).join(\"0\");\n  return (zeroes + value).slice(-padding);\n};\n\nexport const capitalizeFirstLetter = (value: string): string => {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n\nexport const isDateExpiried = (paramDate: string) => {\n  const thisDate = new Date(paramDate);\n  const today = new Date();\n  if (thisDate.getTime() < today.getTime()) {\n    return true;\n  }\n\n  return false;\n};\n","import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { useEffect, useState } from \"react\";\nimport { BiSort } from \"react-icons/bi\";\nimport { MdNavigateBefore, MdNavigateNext, MdSearch } from \"react-icons/md\";\n\nconst FC_makeID = (length: number = 5): string => {\n  let result: string = \"\";\n  let characters: string =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let charactersLength = characters.length;\n  for (let i: number = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const sortThisColumn = (\n  tableId: string,\n  colIndex: number = 0,\n  dir: \"asc\" | \"desc\" = \"asc\"\n) => {\n  var table,\n    rows,\n    switching,\n    i,\n    x,\n    y,\n    shouldSwitch,\n    switchcount = 0;\n  table = document.getElementById(tableId) as HTMLTableElement;\n  switching = true;\n  /* Make a loop that will continue until\n  no switching has been done: */\n  if (table) {\n    while (switching) {\n      //start by saying: no switching is done:\n      switching = false;\n      rows = table.rows;\n      /*Loop through all table rows (except the\n    first, which contains table headers):*/\n      for (i = 1; i < rows.length - 1; i++) {\n        //start by saying there should be no switching:\n        shouldSwitch = false;\n        /*Get the two elements you want to compare,\n      one from current row and one from the next:*/\n        x = rows[i].getElementsByTagName(\"TD\")[colIndex];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[colIndex];\n        /*check if the two rows should switch place,\n      based on the direction, asc or desc:*/\n        if (dir === \"asc\" && x && y) {\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n            //if so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        } else if (dir === \"desc\" && x && y) {\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n            //if so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        }\n      }\n      if (shouldSwitch && rows[i].parentNode) {\n        /*If a switch has been marked, make the switch\n      and mark that a switch has been done:*/\n        rows[i].parentNode!.insertBefore(rows[i + 1], rows[i]);\n        switching = true;\n        //Each time a switch is done, increase this count by 1:\n        switchcount++;\n      } else {\n        /*If no switching has been done AND the direction is \"asc\",\n      set the direction to \"desc\" and run the while loop again.*/\n        if (switchcount === 0 && dir === \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n      // if (i === 0) continue;\n      // rows.cells[i].style.backgroundColor = \"blue\";\n    }\n  }\n};\n\nexport interface TableColumnsInterface {\n  columnTitle: JSX.Element | string;\n  alignText: string;\n  padding?: string;\n  isSortAllowed?: boolean;\n}\n\ninterface TableProps {\n  columns: TableColumnsInterface[];\n  rows: Function;\n  hideColumns?: boolean;\n  pagination?: boolean;\n  search?: boolean;\n  tableSize?: string;\n  tableClass?: string;\n  tableId?: string;\n  rounded?: boolean;\n  searchBG?: string;\n  thColor?: string;\n  loading?: boolean;\n}\n\nconst Table: React.FC<TableProps> = (props) => {\n  const startPage = 1;\n  const tableId =\n    !props.tableId || props.tableId === \"myTable\" ? FC_makeID() : props.tableId;\n  let table: HTMLElement, tr: HTMLCollectionOf<HTMLTableRowElement>;\n  const [totalItems, setTotalItems] = useState<number>(0);\n  const [totalPages, setTotalPages] = useState<number>(1);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [pages, setPages] = useState<number[]>();\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [startIndex, setStartIndex] = useState<number>(0);\n  const [endIndex, setEndIndex] = useState<number>(0);\n\n  useEffect(() => {\n    props.pagination && tablePagination();\n  });\n\n  const filterTable = (\n    data: string,\n    filterType?: \"default\" | \"field\"\n  ): void => {\n    var filter, tr, td, rows: number, cols: number, txtValue;\n    if (filterType === \"field\" && data === \"all\") data = \"\";\n    filter = data.toLowerCase();\n    table = document.getElementById(tableId!)!;\n    tr = table.getElementsByTagName(\"tr\");\n    for (rows = 0; rows < tr.length; rows++) {\n      for (cols = 0; cols < props.columns.length; cols++) {\n        td = tr[rows].getElementsByTagName(\"td\")[cols];\n        if (td) {\n          txtValue = td.textContent || td.innerText;\n          if (txtValue.toLowerCase().indexOf(filter) > -1) {\n            tr[rows].style.display = \"\";\n            break;\n          } else {\n            tr[rows].style.display = \"none\";\n          }\n        }\n      }\n    }\n  };\n\n  const tablePagination = (): void => {\n    table = document.getElementById(tableId)!;\n    tr = table.getElementsByTagName(\"tr\");\n    setTotalItems(tr.length);\n    setTotalPages(Math.ceil(totalItems / pageSize));\n\n    // calculate start and end item indexes on the current page\n    setStartIndex((currentPage - 1) * pageSize);\n    setEndIndex(Math.min(startIndex + pageSize - 1, totalItems - 1));\n\n    /**\n     * TODO!\n     * There is a problem with this condition\n     */\n    let _pages = Array.from(Array(totalPages + 1 - startPage).keys()).map(\n      (i) => startPage + i\n    );\n    if (!pages || _pages.length !== pages.length) {\n      setPages(_pages);\n    }\n\n    for (let i: number = 0; i < tr.length; i++) {\n      if (i >= startIndex && i <= endIndex) {\n        tr[i].style.display = \"\";\n      } else {\n        tr[i].style.display = \"none\";\n      }\n    }\n  };\n\n  return (\n    <div className={`${props.tableSize} overflow-x-auto`}>\n      {/* search box  */}\n      {props.search && (\n        <div className={`${props.searchBG} w-full mb-2`}>\n          {props.search && (\n            <div className=\"bg-white rounded flex items-center w-full p-2 border-2 border-gray-500\">\n              <MdSearch className=\"h-5 w-5 fill-current text-gray-400\" />\n              <input\n                type=\"search\"\n                placeholder=\"search\"\n                onChange={(e) => filterTable(e.target.value)}\n                className=\"w-full h-6 pl-4 text-sm outline-none focus:outline-none bg-white\"\n                disabled={props.loading}\n              />\n\n              {props.pagination && (\n                <div className=\"select\">\n                  <select\n                    className=\"text-base outline-none focus:outline-none bg-white\"\n                    onChange={(e) => setPageSize(Number(e.target.value))}\n                    disabled={props.loading}\n                  >\n                    <option value=\"10\">10</option>\n                    <option value=\"25\">25</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                  </select>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      <div className=\"overflow-x-auto w-full\">\n        <table\n          className={\n            props.tableClass\n              ? props.tableClass\n              : `w-full shadow ${\n                  props.rounded && \"sm:rounded-lg\"\n                } table-auto order-table`\n          }\n          id={tableId}\n        >\n          {!props.hideColumns && (\n            <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-base\">\n              <tr\n                className={`text-left tracking-wide bg-${props.thColor}-100 border-b-2 border-${props.thColor}-500 text-${props.thColor}-600`}\n              >\n                {props.columns.map((column, index) => (\n                  <th\n                    key={index}\n                    className={`${column.padding} text-${\n                      column.alignText\n                    } px-3 py-2 ${column.isSortAllowed && \"cursor-pointer\"}`}\n                    onClick={() =>\n                      column.isSortAllowed && sortThisColumn(tableId, index)\n                    }\n                  >\n                    <div className=\"flex items-center gap-1\">\n                      {column.columnTitle}\n                      {column.isSortAllowed && <BiSort />}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n          )}\n          <tbody id=\"table-data\" className=\"bg-white text-black text-base\">\n            {props.rows()}\n          </tbody>\n        </table>\n        {props.pagination && (\n          <div className=\"sm:flex-1 sm:flex sm:items-center sm:justify-between mt-4 work-sans\">\n            <div>\n              <span className=\"text-xs xs:text-sm text-gray-900\">\n                Showing 1 to {pageSize} of {totalItems - 1} Entries\n              </span>\n            </div>\n            <div>\n              <nav className=\"inline-flex shadow-sm\">\n                <div>\n                  <button\n                    type=\"button\"\n                    className={`inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 text-sm font-medium text-gray-500 ${\n                      currentPage !== 1 && \"bg-white\"\n                    }`}\n                    aria-label=\"Previous\"\n                    disabled={currentPage === 1 || props.loading}\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                  >\n                    <MdNavigateBefore className=\"h-5 w-5\" />\n                  </button>\n                </div>\n                <div>\n                  {pages &&\n                    pages.map((page, pageIndex) => (\n                      <button\n                        key={pageIndex}\n                        className={`-ml-px inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 ${\n                          page !== currentPage\n                            ? \"bg-white\"\n                            : \"bg-gray-100 cursor-default\"\n                        }`}\n                        disabled={page === currentPage || props.loading}\n                        onClick={() => setCurrentPage(page)}\n                      >\n                        {page}\n                      </button>\n                    ))}\n                </div>\n                <div>\n                  <button\n                    type=\"button\"\n                    className={`inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 text-sm leading-5 font-medium text-gray-500 ${\n                      currentPage !== totalPages && \"bg-white\"\n                    }`}\n                    aria-label=\"Next\"\n                    disabled={currentPage === totalPages || props.loading}\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                  >\n                    <MdNavigateNext className=\"h-5 w-5\" />\n                  </button>\n                </div>\n              </nav>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Table;\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport {\n  AcademicSessionInterface,\n  PlansTypeInterface,\n  SessionPlanInterface,\n} from \"../interfaces\";\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// GET ACTIVE PLAN TYPES\nexport interface GetPlansTypesAction {\n  type: ActionTypes.GET_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// GET INACTIVE PLAN TYPES\nexport interface GetDeletedPlansTypesAction {\n  type: ActionTypes.GET_DELETED_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// CREATE PLAN TYPE\nexport interface CreatePlansTypeAction {\n  type: ActionTypes.CREATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// UPDATE PLAN TYPE\nexport interface UpdatePlansTypeAction {\n  type: ActionTypes.UPDATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// DELETE PLAN TYPE\nexport interface DeletePlansTypeAction {\n  type: ActionTypes.DELETE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// SET PLAN TYPE =====================================\nexport interface setSelectedPlanTypeActions {\n  type: ActionTypes.SELECT_PLAN_TYPE;\n  payload: PlansTypeInterface | \"all\";\n}\n\n// GET ALL SESSION PLAN\nexport interface GetAllSessionPlansAction {\n  type: ActionTypes.GET_ALL_SESSION_PLANS;\n  payload: SessionPlanInterface[];\n}\n\n// GET ACTIVE SESSION PLAN\nexport interface GetActiveSessionPlanAction {\n  type: ActionTypes.GET_ACTIVE_SESSION_PLANS;\n  payload: SessionPlanInterface | \"none\";\n}\n\n// CREATE SESSION PLAN\nexport interface CreateSessionPlansAction {\n  type: ActionTypes.CREATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// UPDATE SESSION PLAN\nexport interface UpdateSessionPlansAction {\n  type: ActionTypes.UPDATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// ACTIVATE SESSION PLAN\nexport interface ActivateSessionPlansAction {\n  type: ActionTypes.SESSION_ACTIVATION;\n  payload: SessionPlanInterface;\n}\n\n// DELETE SESSION PLAN\nexport interface DeleteSessionPlanAction {\n  type: ActionTypes.DELETE_SESSION_PLAN;\n  payload: string;\n}\n\n// GET ALL ACADEMIC SESSION\nexport interface GetAllAcademicSessionAction {\n  type: ActionTypes.GET_ALL_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface[];\n}\n\n// CREATE ACADEMIC SESSION\nexport interface CreateAcademicSessionAction {\n  type: ActionTypes.CREATE_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface;\n}\n\n// UPDATE ACADEMIC SESSION\nexport interface UpdateAcademicSessionAction {\n  type: ActionTypes.UPDATE_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface;\n}\n\n// ACTIVATE ACADEMIC SESSION\nexport interface ActivateAcademicSessionAction {\n  type: ActionTypes.ACADEMIC_SESSION_ACTIVATION;\n  payload: AcademicSessionInterface;\n}\n\n// DELETE ACADEMIC SESSION\nexport interface DeleteAcademicSessionAction {\n  type: ActionTypes.DELETE_ACADEMIC_SESSION;\n  payload: string;\n}\n\n// GET ACTIVE ACADEMIC SESSION\nexport interface GetActiveAcademicSessionAction {\n  type: ActionTypes.GET_ACTIVE_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface | \"none\";\n}\n\nexport type SessionActionType =\n  | GetPlansTypesAction\n  | GetDeletedPlansTypesAction\n  | CreatePlansTypeAction\n  | UpdatePlansTypeAction\n  | DeletePlansTypeAction\n  | GetAllSessionPlansAction\n  | GetActiveSessionPlanAction\n  | CreateSessionPlansAction\n  | UpdateSessionPlansAction\n  | ActivateSessionPlansAction\n  | DeleteSessionPlanAction\n  | setSelectedPlanTypeActions\n  | GetAllAcademicSessionAction\n  | CreateAcademicSessionAction\n  | UpdateAcademicSessionAction\n  | ActivateAcademicSessionAction\n  | DeleteAcademicSessionAction\n  | GetActiveAcademicSessionAction;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type`\n      );\n      console.log({ GET_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetPlansTypesAction>({\n        type: ActionTypes.GET_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetDeletedPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type/deleted`\n      );\n      console.log({ GET_DELETED_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetDeletedPlansTypesAction>({\n        type: ActionTypes.GET_DELETED_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE PLAN TYPE\nexport const createPlanType = (\n  data: PlansTypeInterface\n): CreatePlansTypeAction => {\n  return {\n    type: ActionTypes.CREATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// UPDATE PLAN TYPE\nexport const updatePlanType = (\n  data: PlansTypeInterface\n): UpdatePlansTypeAction => {\n  return {\n    type: ActionTypes.UPDATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// DELETE PLAN TYPE\nexport const deletePlanType = (\n  data: PlansTypeInterface\n): DeletePlansTypeAction => {\n  return {\n    type: ActionTypes.DELETE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// SELECT PLAN TYPES ==========================\nexport const setSelectedPlanType = (\n  thisType: PlansTypeInterface | \"all\"\n): setSelectedPlanTypeActions => {\n  console.log({ thisType });\n  return {\n    type: ActionTypes.SELECT_PLAN_TYPE,\n    payload: thisType,\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const getActiveSessionPlan = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface>(\n        `${API.CLAIMING}/session/active/`\n      );\n      console.log({ GET_ACTIVE_SESSION_PLANS: res.data });\n      let session_plan: SessionPlanInterface | undefined = undefined;\n      // if (res.status === 200) {\n      //   // setApplications(res.data);\n      // }\n      if (res.data && res.data.is_active !== undefined) {\n        session_plan = res.data;\n      }\n      console.log({ session_plan: res.data });\n\n      dispatch<GetActiveSessionPlanAction>({\n        type: ActionTypes.GET_ACTIVE_SESSION_PLANS,\n        payload: session_plan ? session_plan : \"none\",\n      });\n      callback(false, \"\", session_plan ? session_plan : \"none\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ALL PLAN TYPES ==========================\nexport const GetAllSessionPlans = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface[]>(\n        `${API.CLAIMING}/session/`\n      );\n      console.log({ GET_ALL_SESSION_PLANS: res.data });\n      let session_data: SessionPlanInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          session_data = res.data;\n        }\n      }\n      dispatch<GetAllSessionPlansAction>({\n        type: ActionTypes.GET_ALL_SESSION_PLANS,\n        payload: session_data,\n      });\n      callback(false, \"\", session_data);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE SESSION PLAN\nexport const createSessionPlan = (\n  data: SessionPlanInterface\n): CreateSessionPlansAction => {\n  return {\n    type: ActionTypes.CREATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// UPDATE SESSION PLAN\nexport const updateSessionPlan = (\n  data: SessionPlanInterface\n): UpdateSessionPlansAction => {\n  return {\n    type: ActionTypes.UPDATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// ACTIVATE SESSION PLAN\nexport const sessionActivation = (\n  data: SessionPlanInterface\n): ActivateSessionPlansAction => {\n  return {\n    type: ActionTypes.SESSION_ACTIVATION,\n    payload: data,\n  };\n};\n\n// DELETE SESSION PLAN\nexport const deleteSessionPlan = (data: string): DeleteSessionPlanAction => {\n  return {\n    type: ActionTypes.DELETE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// CREATE ACADEMIC SESSION\nexport const createAcademicSession = (\n  data: AcademicSessionInterface\n): CreateAcademicSessionAction => {\n  return {\n    type: ActionTypes.CREATE_ACADEMIC_SESSION,\n    payload: data,\n  };\n};\n\n// GET ALL ACADEMIC SESSION ==========================\nexport const GetAllAcademicSession = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<AcademicSessionInterface[]>(\n        `${API.PLACEMENT}/postrequestperiod/`\n      );\n      console.log({ GET_ALL_SESSION_PLANS: res.data });\n      let session_data: AcademicSessionInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          session_data = res.data;\n        }\n      }\n      console.log(\"====================================\");\n      console.log({ GetAllAcademicSession: res });\n      console.log(\"====================================\");\n      dispatch<GetAllAcademicSessionAction>({\n        type: ActionTypes.GET_ALL_ACADEMIC_SESSION,\n        payload: session_data,\n      });\n      callback(false, \"\", session_data);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// UPDATE ACADEMIC SESSION\nexport const updateAcademicSession = (\n  data: AcademicSessionInterface\n): UpdateAcademicSessionAction => {\n  return {\n    type: ActionTypes.UPDATE_ACADEMIC_SESSION,\n    payload: data,\n  };\n};\n\n// ACTIVATE ACADEMIC SESSION\nexport const academicSessionActivation = (\n  data: AcademicSessionInterface\n): ActivateAcademicSessionAction => {\n  return {\n    type: ActionTypes.ACADEMIC_SESSION_ACTIVATION,\n    payload: data,\n  };\n};\n\n// DELETE ACADEMIC SESSION\nexport const deleteAcademicSession = (\n  data: string\n): DeleteAcademicSessionAction => {\n  return {\n    type: ActionTypes.DELETE_ACADEMIC_SESSION,\n    payload: data,\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const getActiveAcademicSession = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<AcademicSessionInterface>(\n        `${API.PLACEMENT}/postrequestperiod/one`\n      );\n      console.log({ GET_ACTIVE_ACADEMIC_SESSION: res.data });\n      let session_plan: AcademicSessionInterface | undefined = undefined;\n      // if (res.status === 200) {\n      //   // setApplications(res.data);\n      // }\n      if (res.data) {\n        session_plan = res.data;\n      }\n      console.log({ session_plan: res.data });\n\n      dispatch<GetActiveAcademicSessionAction>({\n        type: ActionTypes.GET_ACTIVE_ACADEMIC_SESSION,\n        payload: session_plan ? session_plan : \"none\",\n      });\n      callback(false, \"\", session_plan ? session_plan : \"none\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport {\n  CandidatesInterface,\n  DocumentCategoryInterface,\n  DocumentFieldsInterface,\n  DocumentSubCategoryInterface,\n} from \"../shared/interfaces\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport { VerifyDocumentInterface } from \"./users\";\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// CATEGORY\nexport interface GetDocumentCategoryAction {\n  type: ActionTypes.GET_DOCUMENT_CATEGORY;\n  payload: DocumentCategoryInterface[];\n}\n\nexport interface CreateDocumentCategoryAction {\n  type: ActionTypes.CREATE_DOCUMENT_CATEGORY;\n  payload: DocumentCategoryInterface;\n}\n\nexport interface UpdateDocumentCategoryAction {\n  type: ActionTypes.UPDATE_DOCUMENT_CATEGORY;\n  payload: DocumentCategoryInterface;\n}\n\nexport interface DeleteDocumentCategoryAction {\n  type: ActionTypes.DELETE_DOCUMENT_CATEGORY;\n  payload: string;\n}\n\n// SUB CATEGORY\nexport interface GetDocumentSubCategoryAction {\n  type: ActionTypes.GET_DOCUMENT_SUB_CATEGORY;\n  payload: DocumentSubCategoryInterface[];\n}\n\nexport interface CreateDocumentSubCategoryAction {\n  type: ActionTypes.CREATE_DOCUMENT_SUB_CATEGORY;\n  payload: DocumentSubCategoryInterface;\n}\n\nexport interface UpdateDocumentSubCategoryAction {\n  type: ActionTypes.UPDATE_DOCUMENT_SUB_CATEGORY;\n  payload: DocumentSubCategoryInterface;\n}\n\nexport interface DeleteDocumentSubCategoryAction {\n  type: ActionTypes.DELETE_DOCUMENT_SUB_CATEGORY;\n  payload: string;\n}\n\n// FIELDS\nexport interface GetDocumentFieldsAction {\n  type: ActionTypes.GET_DOCUMENT_FIELDS;\n  payload: DocumentFieldsInterface[];\n}\n\nexport interface CreateDocumentFieldsAction {\n  type: ActionTypes.CREATE_DOCUMENT_FIELDS;\n  payload: DocumentFieldsInterface;\n}\n\nexport interface UpdateDocumentFieldsAction {\n  type: ActionTypes.UPDATE_DOCUMENT_FIELDS;\n  payload: DocumentFieldsInterface;\n}\n\nexport interface DeleteDocumentFieldsAction {\n  type: ActionTypes.DELETE_DOCUMENT_FIELDS;\n  payload: string;\n}\n\n// DOCUMENT CHECKING\nexport interface GetCandidatesInInstituteAtion {\n  type: ActionTypes.GET_CANDIDATE_IN_INSTITUTE;\n  payload: CandidatesInterface[];\n}\n\nexport interface VerifyDocumentAction {\n  type: ActionTypes.VERIFY_DOCUMENT;\n  payload: VerifyDocumentInterface;\n}\n\nexport type DocumentCategoryActionType =\n  | GetDocumentCategoryAction\n  | CreateDocumentCategoryAction\n  | UpdateDocumentCategoryAction\n  | DeleteDocumentCategoryAction\n  | GetDocumentSubCategoryAction\n  | CreateDocumentSubCategoryAction\n  | UpdateDocumentSubCategoryAction\n  | DeleteDocumentSubCategoryAction\n  | GetDocumentFieldsAction\n  | CreateDocumentFieldsAction\n  | UpdateDocumentFieldsAction\n  | DeleteDocumentFieldsAction\n  | GetCandidatesInInstituteAtion\n  | VerifyDocumentAction;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\n// CATEGORY\n\nexport const getDocumentCategory = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get(`${API.AUTH}/detailcategory`);\n      console.log({ docCategory: res });\n      dispatch<GetDocumentCategoryAction>({\n        type: ActionTypes.GET_DOCUMENT_CATEGORY,\n        payload: res.data,\n      });\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n    }\n  };\n};\n\nexport const createDocumentCategory = (data: DocumentCategoryInterface) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<CreateDocumentCategoryAction>({\n      type: ActionTypes.CREATE_DOCUMENT_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const updateDocumentCategory = (data: DocumentCategoryInterface) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdateDocumentCategoryAction>({\n      type: ActionTypes.UPDATE_DOCUMENT_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const deleteDocumentCategory = (data: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DeleteDocumentCategoryAction>({\n      type: ActionTypes.DELETE_DOCUMENT_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\n// SUB CATEGORY\nexport const getDocumentSubCategory = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<DocumentSubCategoryInterface[]>(\n        `${API.AUTH}/detailsubcategory`\n      );\n      console.log({ docSubCategory: res });\n      dispatch<GetDocumentSubCategoryAction>({\n        type: ActionTypes.GET_DOCUMENT_SUB_CATEGORY,\n        payload: res.data,\n        // payload: response.data,\n      });\n    } catch (error) {\n      console.log({ doc_SUB_category_error: error });\n    }\n  };\n};\n\nexport const createDocumentSubCategory = (\n  data: DocumentSubCategoryInterface\n) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<CreateDocumentSubCategoryAction>({\n      type: ActionTypes.CREATE_DOCUMENT_SUB_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const updateDocumentSubCategory = (\n  data: DocumentSubCategoryInterface\n) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdateDocumentSubCategoryAction>({\n      type: ActionTypes.UPDATE_DOCUMENT_SUB_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const deleteDocumentSubCategory = (data: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DeleteDocumentSubCategoryAction>({\n      type: ActionTypes.DELETE_DOCUMENT_SUB_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\n// FIELDS\nexport const getDocumentFields = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<DocumentFieldsInterface[]>(\n        `${API.AUTH}/categorysubcatedata`\n      );\n      console.log({ docFields: res });\n      dispatch<GetDocumentFieldsAction>({\n        type: ActionTypes.GET_DOCUMENT_FIELDS,\n        payload: res.data,\n        // payload: response.data,\n      });\n    } catch (error) {\n      console.log({ doc_SUB_category_error: error });\n    }\n  };\n};\n\nexport const createDocumentFields = (data: DocumentFieldsInterface) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<CreateDocumentFieldsAction>({\n      type: ActionTypes.CREATE_DOCUMENT_FIELDS,\n      payload: data,\n    });\n  };\n};\n\nexport const updateDocumentFields = (data: DocumentFieldsInterface) => {\n  console.log({ reducer: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdateDocumentFieldsAction>({\n      type: ActionTypes.UPDATE_DOCUMENT_FIELDS,\n      payload: data,\n    });\n  };\n};\n\nexport const deleteDocumentFields = (data: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DeleteDocumentFieldsAction>({\n      type: ActionTypes.DELETE_DOCUMENT_FIELDS,\n      payload: data,\n    });\n  };\n};\n\n// REMOVE DUPLICATION IN CANDIDATES IN EDUCATION CATEGORY PER SESSION\nconst distinctCandidates = (\n  candidatesData: CandidatesInterface[]\n): CandidatesInterface[] => {\n  let result: CandidatesInterface[] = [];\n  let user_ids: string[] = [];\n  const newArray: CandidatesInterface[] = candidatesData.filter((candidate) => {\n    return candidate !== null && candidate !== undefined;\n  });\n  newArray.forEach((candidate) => {\n    if (!user_ids.includes(candidate.user_id)) {\n      result.push(candidate);\n      user_ids.push(candidate.user_id);\n    }\n  });\n  return result;\n};\n// CANDIDATE IN EDUCATION CATEGORY PER SESSION\nexport const getCandidatesInInstitute = (\n  educatin_type_id: string,\n  session_id: string,\n  callback: Function\n) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\", null);\n    try {\n      setAxiosToken();\n      const res = await axios.get<CandidatesInterface[]>(\n        `${API.APPLICATION}/educationtypeuserdocs/${educatin_type_id}/${session_id}`\n      );\n\n      console.log(\"====================================\");\n      console.log({\n        getCandidatesInInstitute: res,\n        distinctCandidates: distinctCandidates(res.data),\n      });\n      console.log(\"====================================\");\n      dispatch<GetCandidatesInInstituteAtion>({\n        type: ActionTypes.GET_CANDIDATE_IN_INSTITUTE,\n        payload: distinctCandidates(res.data),\n        // payload: response.data,\n      });\n      callback(false, \"\", distinctCandidates(res.data));\n    } catch (error) {\n      console.log({ getCandidatesInInstitute: error });\n      callback(false, errorToText(error), null);\n    }\n  };\n};\n\nexport const verifyDocument = (data: VerifyDocumentInterface) => {\n  console.log(\"================verifyDocument====================\");\n  console.log({ verifyDocument: data });\n  console.log(\"================verifyDocument====================\");\n  return async (dispatch: Dispatch) => {\n    dispatch<VerifyDocumentAction>({\n      type: ActionTypes.VERIFY_DOCUMENT,\n      payload: data,\n    });\n  };\n};\n","import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, System } from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { NavToogle, PageHasSubNav } from \"../../actions\";\nimport { MdBrightness1, MdSearch } from \"react-icons/md\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  system: System;\n  PageHasSubNav: Function;\n  NavToogle: Function;\n  children: ReactNode;\n}\n//\ninterface AppState {\n  loading: boolean;\n}\n\nclass _SideNavigation extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n    };\n  }\n\n  componentDidMount = () => this.props.PageHasSubNav(true);\n  componentWillUnmount = () => this.props.PageHasSubNav(false);\n\n  render() {\n    const isAuthenticated = this.props.auth.isAuthenticated;\n\n    if (isAuthenticated === false) {\n      return null;\n    }\n\n    const navActive = this.props.system.navigation;\n    return (\n      <div\n        className={`fixed w-48 p-1 pr-2 pl-6 text-gray-700 bg-white ${\n          navActive === true ? \"lg:left-16  left-16\" : \" -left-72 lg:left-16\"\n        }  top-0 bottom-0 pt-20 z-30 shadow-lg  transition-all duration-500 ease-in-out overflow-y-auto`}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  system,\n}: StoreState): { auth: Auth; system: System } => {\n  return { auth: auth, system: system };\n};\n\nexport const SideNavigation = connect(mapStateToProps, {\n  NavToogle,\n  PageHasSubNav,\n})(_SideNavigation);\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SearchComponentInterface = {\n  data: any[];\n};\n\nexport const Search: FC<SearchComponentInterface> = ({\n  data,\n}): ReactElement => {\n  return (\n    <div className=\"m-1 rounded-md shadow-md border border-blue-400 bg-white p-1 flex \">\n      <label htmlFor=\"search-text\" className=\"inline-block text-2xl\">\n        <MdSearch className=\"inline-block text-blue-400\" />\n      </label>\n      <input\n        type=\"search\"\n        className=\"outline-none bg-transparent flex-1 pl-1\"\n        placeholder=\"Search\"\n        id=\"search-text\"\n      />\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype MainItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const MainItem: FC<MainItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n  return (\n    <section\n      className={`${\n        active === true\n          ? \"bg-blue-500 text-white font-bold\"\n          : \"bg-blue-100 text-blue-800\"\n      } mb-1 hover:font-bold py-1 hover:bg-blue-400 hover:text-white --font-bold  px-2 rounded-md flex cursor-pointer items-center`}\n    >\n      <section className=\"flex-1\">\n        <IconDefined className=\"inline-block mr-1 text-xs\" />\n        <span>{title}</span>\n      </section>\n\n      {count > 0 ? (\n        <span className=\"px-0.5 my-1 text-xs bg-blue-600 text-white rounded-full\">\n          {count}\n        </span>\n      ) : null}\n    </section>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemContainerComponentInterface = {\n  children: ReactNode;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const SubItemContainer: FC<SubItemContainerComponentInterface> = ({\n  children,\n}): ReactElement => {\n  return (\n    <div className=\"ml-3 overflow-y-auto border-l-2 border-blue-200 -mt-1 pt-2 mb-2 pl-1 cursor-pointer\">\n      {children}\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n * @important Remenber to use these components inside the <SubItemContainer>...</SubItemContainer>\n */\nexport const SubItem: FC<SubItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n\n  return (\n    <div\n      className={`animate__animated animate__zoomIn animate__faster ${\n        active === true ? \"bg-blue-500 text-white font-bold\" : \" text-blue-800\"\n      } text-blue-800 bg-blue-200 rounded-md px-1 mb-1 flex items-center py-1 font-bold`}\n    >\n      <IconDefined\n        className={`inline-block mr-0.1 text-xs ${\n          active === true ? \"text-white\" : \"\"\n        }`}\n      />\n      <span\n        className={`inline-block pl-1 ${active === true ? \"text-white\" : \"\"}`}\n      >\n        {title}\n      </span>\n      {count >= 1 ? (\n        <span\n          className={`text-sm fint-bold ${active === true ? \"text-white\" : \"\"}`}\n        >\n          {count}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { ApplicationSession } from \"../../../actions\";\nimport {\n  course,\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimExamResultsDetails,\n} from \"../../../interfaces\";\nimport { candidatePlacementInterface } from \"../../../interfaces/placement\";\nimport { isClaimAllowed } from \"./ClaimForm\";\n\nexport const getCourseById = (courses: course[], course_id: string) => {\n  return courses.find((item) => item.course_id === course_id);\n};\n\nexport const getCourseIdBySheetId = (\n  allData: ClaimExamResultsDetails[],\n  sheet_id: string\n) => {\n  return allData.find((item) => item.answer_sheet_id === sheet_id);\n};\n\nexport const searchApplication = (\n  objList: claimApplicationsInterface[],\n  text: any\n): claimApplicationsInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (prop === \"position\") {\n        flag =\n          product.position.position_title\n            .toString()\n            .toLowerCase()\n            .indexOf(text.toLowerCase()) > -1;\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n  // return objList.filter((product) =>\n  //   product.position.position_title.includes(text)\n  // );\n};\n\ntype FormPlacementListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  myPlacement: candidatePlacementInterface | null;\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n\n  // REDUX //////////////////////\n};\n\nconst FormPlacementList: React.FC<FormPlacementListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            props.myPlacement === null ||\n            isClaimAllowed(\n              props.myClaims,\n              props.activeSession.session_plan_id,\n              props.myPlacement.placed._id\n            )\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}{\" \"}\n      {/* searchData(props.candidateAnswers, searchInput) */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {props.myPlacement ? (\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            props.myPlacement.placed._id\n          ) && (\n            <div className=\"group flex items-center justify-between my-1 hover:bg-gray-100\">\n              <div\n                className=\"p-1 w-full mr-2 cursor-pointer\"\n                onClick={() => {\n                  props.setChooseClaimFile(false);\n                  props.setClaimFileId(props.myPlacement!.placed._id);\n                }}\n              >\n                <p className=\"text-base font-medium text-black\">\n                  Placed on {props.myPlacement.placed.school.school_name}\n                </p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                onClick={() => {\n                  props.setViewThisFile(props.myPlacement!.placed._id);\n                }}\n              >\n                View\n              </button>\n            </div>\n          )\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No placement to claim on!\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\n// const mapStateToProps = ({\n//   course,\n// }: StoreState): {\n//   courses: course[] | null;\n// } => {\n//   return {\n//     courses: course.courses,\n//   };\n// };\nexport default React.memo(connect(null, {})(FormPlacementList));\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  createClaim,\n  DocumentClaimUser,\n  GetClaimingTypes,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  course,\n  PlansInterface,\n  PlansTypeKeys,\n  SessionPlanInterface,\n} from \"../../../interfaces\";\nimport { candidatePlacementInterface } from \"../../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport {\n  capitalizeFirstLetter,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport { UserInterface } from \"../../../shared/interfaces\";\nimport { API } from \"../../../utils/api\";\nimport { setAxiosToken } from \"../../../utils/AxiosToken\";\nimport { errorToText } from \"../../../utils/errors\";\nimport { isPlanActive } from \"../../SessionSettings/ApplicationSession/SessionDetails\";\nimport ApplicationFormView from \"./ApplicationFormView\";\nimport ChooseReason from \"./ChooseReason\";\nimport DocFormView from \"./DocFormView\";\nimport ExaminationFormView from \"./ExaminationFormView\";\nimport FormApplicationList from \"./FormApplicationList\";\nimport FormDocumentList from \"./FormDocumentList\";\nimport FormExamList, {\n  getCourseById,\n  getCourseIdBySheetId,\n} from \"./FormExamList\";\nimport FormPlacementList from \"./FormPlacementList\";\n\nexport const ClaimGetDocTitle = (\n  documentCategories: DocumentReducerInterface,\n  doc: DocumentClaimUser\n): { category: string; sub_category: string; field: string; main: string } => {\n  let DocCategory: string = \"\",\n    DocSubCategory: string = \"\",\n    DocField: string = \"\",\n    DocTitle: string = \"\";\n  if (\n    doc.sub_category_id.length > 0 &&\n    documentCategories.documentSubCategory\n  ) {\n    DocTitle = documentCategories.documentSubCategory.filter(\n      (c) => c.user_detail_subcategory_id === doc.sub_category_id\n    )[0].title;\n    DocSubCategory = DocTitle;\n  } else if (\n    doc.category_id.length > 0 &&\n    documentCategories.documentCategory\n  ) {\n    DocTitle = documentCategories.documentCategory.filter(\n      (c) => c.user_detail_category_id === doc.category_id\n    )[0].title;\n    DocCategory = DocTitle;\n  }\n  if (\n    doc.category_subcategory_data &&\n    doc.category_subcategory_data.category_subcategory_Data_id.length > 0 &&\n    documentCategories.documentFields\n  ) {\n    console.log({ doc });\n    DocField = documentCategories.documentFields.filter(\n      (c) =>\n        c._id === doc.category_subcategory_data?.category_subcategory_Data_id\n    )[0].title;\n    DocTitle += \" in \" + DocField;\n  }\n\n  return {\n    category: DocCategory,\n    sub_category: DocSubCategory,\n    field: DocField,\n    main: DocTitle,\n  };\n};\n\nexport const isClaimAllowed = (\n  allClaim: CandidateClaimInterface[],\n  period_id: string,\n  claimOnId: string\n): boolean => {\n  if (\n    allClaim.find(\n      (item) =>\n        item.period_id === period_id && item.claiming_on_id === claimOnId\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\ntype ClaimFormProps = {\n  // REQUIRED PROPS\n  formState: boolean;\n  setFormState: (value: boolean, response?: boolean) => void;\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getMyPlacement: Function;\n  getClaimReasons: Function;\n  createClaim: Function;\n  GetClaimingTypes: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  getMyClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype ClaimFormState = {\n  loading: boolean;\n  loadingForm: boolean;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  thisClaimType: PlansTypeKeys | null;\n  thisClaimTypeId: string;\n  claimComment: string;\n  claimFileId: string;\n  chooseClaimFile: boolean;\n  chooseClaimReason: boolean;\n  claimReason: claimReasonInterface | null;\n  myPlacement: candidatePlacementInterface | null;\n  viewThisFile: string;\n  formType: \"DEFAULT\" | \"PROPS\";\n  alertError: string | null;\n};\n\nclass ClaimForm extends Component<ClaimFormProps, ClaimFormState> {\n  constructor(props: ClaimFormProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingForm: false,\n      formError: null,\n      thisClaimType: null,\n      thisClaimTypeId: \"\",\n      claimComment: \"\",\n      claimFileId: \"\",\n      chooseClaimFile: false,\n      viewThisFile: \"\",\n      formType: \"DEFAULT\",\n      alertError: null,\n      myPlacement: this.props.claiming.myPlacement,\n      chooseClaimReason: false,\n      claimReason: null,\n    };\n  }\n\n  setLoading = (state: boolean) => {\n    this.setState({ loading: state });\n  };\n\n  setLoadingForm = (state: boolean) => {\n    this.setState({ loadingForm: state });\n  };\n\n  setFormError = (\n    data: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: data });\n  };\n\n  setAlertError = (data: string | null) => {\n    this.setState({ alertError: data });\n  };\n\n  setClaimFileId = (data: string) => {\n    this.setState({ claimFileId: data });\n  };\n\n  setViewThisFile = (data: string) => {\n    this.setState({ viewThisFile: data });\n  };\n\n  setChooseClaimFile = (data: boolean) => {\n    this.setState({ chooseClaimFile: data });\n  };\n\n  setChooseClaimReason = (data: boolean) => {\n    this.setState({ chooseClaimReason: data });\n  };\n\n  setClaimReason = (value: claimReasonInterface | null) => {\n    this.setState({ claimReason: value });\n  };\n\n  setClaimComment = (data: string) => {\n    this.setState({ claimComment: data });\n  };\n\n  isClaimTypeOpen = (\n    thisSession: SessionPlanInterface,\n    thisType: PlansTypeKeys\n  ): boolean => {\n    let data: PlansInterface | undefined;\n    if (thisType === PlansTypeKeys.APPLICATION) {\n      data = thisSession.plans.find(\n        (item) => item.type_key === PlansTypeKeys.APPLICATION\n      );\n      if (data && isPlanActive(thisSession, data) === \"OPEN\") {\n        return true;\n      }\n    } else if (thisType === PlansTypeKeys.DOCUMENT_VALIDATION) {\n      data = thisSession.plans.find(\n        (item) => item.type_key === PlansTypeKeys.DOCUMENT_VALIDATION\n      );\n      if (data && isPlanActive(thisSession, data) === \"OPEN\") {\n        return true;\n      }\n    } else if (thisType === PlansTypeKeys.PLACEMENT_TRANSFER) {\n      data = thisSession.plans.find(\n        (item) => item.type_key === PlansTypeKeys.PLACEMENT_TRANSFER\n      );\n      if (data && isPlanActive(thisSession, data) === \"OPEN\") {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  displayClaimType = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    switch (claimType) {\n      case PlansTypeKeys.APPLICATION:\n        result = \"application\";\n        break;\n      case PlansTypeKeys.DOCUMENT_VALIDATION:\n        result = \"document\";\n        break;\n      case PlansTypeKeys.EXAMINATION:\n        result = \"exam\";\n        break;\n      case PlansTypeKeys.MARKS_PUBLICATION:\n        result = \"marks publication\";\n        break;\n      case PlansTypeKeys.PLACEMENT_TRANSFER:\n        result = \"placement\";\n        break;\n      default:\n        result = \"\";\n        break;\n    }\n\n    return result;\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan.session_plan_id,\n      user_id,\n      (status: boolean, msg: string, data: ClaimExamResultsDetails[]) => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n  };\n\n  componentDidMount = () => {\n    if (this.props.auth.application_session === null) {\n      this.props.PushPopupAlert({\n        title: \"No session active session\",\n        theme: PopupAlertTheme.danger,\n      });\n      this.props.setFormState(false);\n      this.setState({\n        claimFileId: \"\",\n        thisClaimType: null,\n        thisClaimTypeId: \"\",\n        claimComment: \"\",\n        chooseClaimFile: false,\n        formType: \"DEFAULT\",\n        viewThisFile: \"\",\n        formError: null,\n      });\n    } else {\n      if (this.props.documentReducer.documentCategory === null) {\n        this.props.getDocumentCategory();\n      }\n      if (this.props.documentReducer.documentSubCategory === null) {\n        this.props.getDocumentSubCategory();\n      }\n      if (this.props.documentReducer.documentFields === null) {\n        this.props.getDocumentFields();\n      }\n      if (this.props.claiming.claimReasons === null) {\n        this.props.getClaimReasons((status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length > 0) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        });\n      }\n    }\n  };\n\n  getDocumentById = (\n    documents: DocumentClaimUser[],\n    doc_id: string\n  ): DocumentClaimUser => {\n    return documents.filter((item) => item.doc_id === doc_id)[0];\n  };\n\n  getApplicationById = (\n    applications: claimApplicationsInterface[],\n    application_id: string\n  ): claimApplicationsInterface => {\n    return applications.filter(\n      (item) => item.application_id === application_id\n    )[0];\n  };\n\n  getExamById = (\n    exams: ClaimExamResultsDetails[],\n    answer_sheet_id: string\n  ): ClaimExamResultsDetails | undefined => {\n    return exams.find((item) => item.answer_sheet_id === answer_sheet_id);\n  };\n\n  getValidation = (\n    thisId: string\n  ): {\n    old_reason: string;\n    old_status: string;\n    old_evaluated_by: string;\n  } => {\n    let result: {\n      old_reason: string;\n      old_status: string;\n      old_evaluated_by: string;\n    } = { old_reason: \"\", old_status: \"\", old_evaluated_by: \"\" };\n\n    if (\n      this.state.thisClaimType === PlansTypeKeys.DOCUMENT_VALIDATION &&\n      this.props.claiming.candidateDocuments\n    ) {\n      result = {\n        old_reason: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.comment,\n        old_status: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.validation_status,\n        old_evaluated_by: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.user_id,\n      };\n    } else if (\n      this.state.thisClaimType === PlansTypeKeys.APPLICATION &&\n      this.props.claiming.candidateApplications\n    ) {\n      result = {\n        old_reason: this.getApplicationById(\n          this.props.claiming.candidateApplications,\n          thisId\n        ).override_by.comment,\n        old_status: this.getApplicationById(\n          this.props.claiming.candidateApplications,\n          thisId\n        ).override_by.application_status,\n        old_evaluated_by: this.getApplicationById(\n          this.props.claiming.candidateApplications,\n          thisId\n        ).override_by.user_id,\n      };\n    }\n\n    return result;\n  };\n\n  cleanToClose = (response?: boolean) => {\n    this.props.setFormState(false);\n    this.setState({\n      claimFileId: \"\",\n      thisClaimType: null,\n      thisClaimTypeId: \"\",\n      claimComment: \"\",\n      chooseClaimFile: false,\n      formType: \"DEFAULT\",\n      viewThisFile: \"\",\n      formError: null,\n    });\n  };\n\n  loadUserById = async (user_id: string, callback: Function) => {\n    if (isEmptyOrSpaces(user_id)) {\n      return this.props.PushPopupAlert({\n        title: \"No user id provided\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    try {\n      setAxiosToken();\n      const res = await axios.get<UserInterface>(\n        `${API.AUTH}/users/${user_id}`\n      );\n      console.log(\"====================================\");\n      console.log({ loadUserById: res });\n      console.log(\"====================================\");\n      if (res) {\n        callback(res.data);\n      }\n    } catch (error) {\n      console.error({ error });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  getClaimTitle = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    if (\n      claimType === PlansTypeKeys.DOCUMENT_VALIDATION &&\n      this.props.claiming.candidateDocuments\n    ) {\n      result = ClaimGetDocTitle(\n        this.props.documentReducer,\n        this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          this.state.claimFileId\n        )\n      ).main;\n    }\n    if (\n      claimType === PlansTypeKeys.APPLICATION &&\n      this.props.claiming.candidateApplications\n    ) {\n      result = this.getApplicationById(\n        this.props.claiming.candidateApplications,\n        this.state.claimFileId\n      ).position.position_title;\n    }\n    if (\n      claimType === PlansTypeKeys.EXAMINATION &&\n      this.props.courses &&\n      this.props.claiming.myAnswer &&\n      getCourseIdBySheetId(\n        this.props.claiming.myAnswer,\n        this.state.claimFileId\n      ) &&\n      getCourseById(\n        this.props.courses,\n        getCourseIdBySheetId(\n          this.props.claiming.myAnswer,\n          this.state.claimFileId\n        )!.course\n      )\n    ) {\n      result = getCourseById(\n        this.props.courses,\n        getCourseIdBySheetId(\n          this.props.claiming.myAnswer,\n          this.state.claimFileId\n        )!.course\n      )!.course_name;\n    }\n    if (\n      claimType === PlansTypeKeys.PLACEMENT_TRANSFER &&\n      this.state.myPlacement\n    ) {\n      result = \"Placed on \" + this.state.myPlacement.placed.school.school_name;\n    }\n\n    return result;\n  };\n\n  getClaimInstitute = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    if (\n      claimType === PlansTypeKeys.APPLICATION &&\n      this.props.claiming.candidateApplications\n    ) {\n      result = this.getApplicationById(\n        this.props.claiming.candidateApplications,\n        this.state.claimFileId\n      ).position.education_institute_id.education_institute_id;\n    }\n\n    return result;\n  };\n\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!this.state.thisClaimType) {\n      return this.setFormError({\n        element: \"claim_type\",\n        msg: \"Claim type is required!\",\n      });\n    }\n    if (isEmptyOrSpaces(this.state.claimFileId)) {\n      return this.setFormError({\n        element: \"claim_file\",\n        msg: `Please select ${this.state.thisClaimType.toLocaleLowerCase()} you are claiming on!`,\n      });\n    }\n\n    if (!this.state.claimReason) {\n      return this.setFormError({\n        element: \"claim_reason\",\n        msg: `Please select the reason of your claim!`,\n      });\n    }\n\n    if (isEmptyOrSpaces(this.state.claimComment)) {\n      return this.setFormError({\n        element: \"claim_comment\",\n        msg: `Claim comment is required!`,\n      });\n    }\n\n    if (!this.props.auth.application_session) {\n      return this.setAlertError(`No active claiming session is available!`);\n    }\n\n    this.setLoadingForm(true);\n    let old_evaluator_email: string = \"info@system.com\";\n    let old_evaluator_name: string = \"System\";\n    let evaluator_email: string = \"\";\n    let evaluator_name: string = \"\";\n    let title: string = this.getClaimTitle(this.state.thisClaimType);\n    let institute_id: string = this.getClaimInstitute(this.state.thisClaimType);\n\n    if (\n      this.state.thisClaimType !== PlansTypeKeys.EXAMINATION &&\n      this.getValidation(this.state.claimFileId).old_evaluated_by !== \"system\"\n    ) {\n      await this.loadUserById(\n        this.getValidation(this.state.claimFileId).old_evaluated_by,\n        (data: UserInterface) => {\n          old_evaluator_email = data.email;\n          old_evaluator_name =\n            data.user_info.fname + \" \" + data.user_info.lname;\n        }\n      );\n    }\n\n    if (this.state.thisClaimType === PlansTypeKeys.EXAMINATION) {\n    }\n\n    try {\n      // console.log(\"====================================\");\n      // console.log({\n      //   claiming_on_id: this.state.claimFileId,\n      //   type_key: this.state.thisClaimType,\n      //   user: this.props.auth.user.user_id,\n      //   period_id: this.props.auth.application_session.session_plan_id,\n      //   default_claim_resaons: this.state.claimReason.id,\n      //   reason: this.state.claimComment,\n      //   old_reason:\n      //     this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n      //     this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n      //       ? \"System\"\n      //       : this.getValidation(this.state.claimFileId).old_reason,\n      //   old_status:\n      //     this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n      //     this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n      //       ? \"Failed\"\n      //       : this.getValidation(this.state.claimFileId).old_status,\n      //   old_evaluated_by:\n      //     this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n      //     this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n      //       ? \"\"\n      //       : this.getValidation(this.state.claimFileId).old_evaluated_by,\n      //   old_evaluator_email,\n      //   old_evaluator_name,\n      //   evaluator_email,\n      //   evaluator_name,\n      //   title,\n      // });\n      // console.log(\"====================================\");\n\n      setAxiosToken();\n      const res = await axios.post<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/create`,\n        {\n          claiming_on_id: this.state.claimFileId,\n          type_key: this.state.thisClaimType,\n          user: this.props.auth.user.user_id,\n          period_id: this.props.auth.application_session.session_plan_id,\n          default_claim_resaons: this.state.claimReason.id,\n          reason: this.state.claimComment,\n          old_reason:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"System\"\n              : this.getValidation(this.state.claimFileId).old_reason,\n          old_status:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"Failed\"\n              : this.getValidation(this.state.claimFileId).old_status,\n          old_evaluated_by:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"\"\n              : this.getValidation(this.state.claimFileId).old_evaluated_by,\n          old_evaluator_email,\n          old_evaluator_name,\n          evaluator_email,\n          evaluator_name,\n          title,\n          institute_id,\n        }\n      );\n      console.log({ createClaim: res });\n      if (res.status === 201 || res.status === 200) {\n        this.props.createClaim(res.data);\n        this.props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        this.cleanToClose(true);\n      }\n    } catch (error) {\n      console.error({ error });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setLoadingForm(false);\n  };\n\n  selectClaimType = (thisClaim: string) => {\n    this.setState({\n      thisClaimType: isEmptyOrSpaces(thisClaim)\n        ? null\n        : (thisClaim as PlansTypeKeys),\n    });\n\n    if ((thisClaim as PlansTypeKeys) === PlansTypeKeys.APPLICATION) {\n      if (this.props.claiming.candidateApplications === null) {\n        this.props.getMyRejectedApplications(\n          this.props.auth.user.user_id,\n          (\n            status: boolean,\n            msg: string,\n            data?: claimApplicationsInterface[]\n          ) => {\n            this.setLoading(status);\n            if (!status) {\n              if (msg.length > 0) {\n                this.props.PushPopupAlert({\n                  title: msg,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            }\n          }\n        );\n      }\n      if (\n        this.props.courses === null ||\n        (this.props.courses.length === 0 && this.state.loading)\n      ) {\n        this.props.loadCourses(this.setLoading);\n        this.setLoading(false);\n      } else {\n        this.setLoading(false);\n      }\n    } else if ((thisClaim as PlansTypeKeys) === PlansTypeKeys.EXAMINATION) {\n      if (\n        this.props.courses === null ||\n        (this.props.courses.length === 0 && this.state.loading)\n      ) {\n        this.props.loadCourses(this.setLoading);\n        this.setLoading(false);\n      } else {\n        this.setLoading(false);\n      }\n    } else if (\n      (thisClaim as PlansTypeKeys) === PlansTypeKeys.DOCUMENT_VALIDATION\n    ) {\n      if (this.props.claiming.candidateDocuments === null) {\n        this.props.getMyRejectedDocuments(\n          (status: boolean, msg: string, data?: DocumentClaimUser[]) => {\n            this.setLoading(status);\n            if (!status) {\n              if (msg.length > 0) {\n                this.props.PushPopupAlert({\n                  title: msg,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            }\n          }\n        );\n      }\n    } else if (\n      (thisClaim as PlansTypeKeys) === PlansTypeKeys.PLACEMENT_TRANSFER\n    ) {\n      if (this.props.claiming.myPlacement === null) {\n        this.props.getMyPlacement(\n          this.props.auth.user.user_id,\n          (\n            status: boolean,\n            msg: string,\n            data?: candidatePlacementInterface | null\n          ) => {\n            this.setLoading(status);\n            if (!status) {\n              if (msg.length > 0) {\n                this.props.PushPopupAlert({\n                  title: msg,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            }\n            if (data) {\n              this.setState({ myPlacement: data });\n            }\n          }\n        );\n      }\n    }\n  };\n\n  generateChooseFileTitle = (thisClaimType: PlansTypeKeys | null): string => {\n    let result: string = \"\";\n\n    switch (thisClaimType) {\n      case PlansTypeKeys.APPLICATION:\n        result = `Select application you are claiming on?`;\n        break;\n      case PlansTypeKeys.DOCUMENT_VALIDATION:\n        result = `Select document you are claiming on?`;\n        break;\n      case PlansTypeKeys.EXAMINATION:\n        result = `Select exam you are claiming on?`;\n        break;\n      case PlansTypeKeys.MARKS_PUBLICATION:\n        result = `Select marks publication you are claiming on?`;\n        break;\n      case PlansTypeKeys.PLACEMENT_TRANSFER:\n        result = `Select placement you are claiming on?`;\n        break;\n      default:\n        result = \"Select file you are claiming on?\";\n        break;\n    }\n\n    return result;\n  };\n\n  render() {\n    if (\n      this.props.auth.application_session === null ||\n      this.props.claiming.myClaims === null\n    ) {\n      return null;\n    }\n\n    return (\n      <div className=\"pb-3\">\n        {this.props.formState && (\n          <Modal\n            backDrop={true}\n            theme={Themes.default}\n            close={(): void => {\n              !this.state.loadingForm &&\n                this.state.viewThisFile.length <= 0 &&\n                this.cleanToClose();\n              !this.state.loadingForm &&\n                this.state.viewThisFile.length > 0 &&\n                this.setViewThisFile(\"\");\n            }}\n            displayClose={true}\n            backDropClose={false}\n            title={\n              <div className=\"text-gray-900 font-bold text-xl md:ml-1\">\n                {this.state.viewThisFile.length <= 0 && \"Claiming form\"}\n                {this.state.viewThisFile.length > 0 &&\n                  this.state.thisClaimType ===\n                    PlansTypeKeys.DOCUMENT_VALIDATION &&\n                  \"Viewing document\"}\n                {this.state.viewThisFile.length > 0 &&\n                  this.state.thisClaimType === PlansTypeKeys.APPLICATION &&\n                  \"Viewing application\"}\n              </div>\n            }\n            widthSizeClass={\n              this.state.viewThisFile.length > 0\n                ? ModalSize.extraLarge\n                : ModalSize.medium\n            }\n            padding={{ title: true, body: false, footer: false }}\n          >\n            {/* CLAIM FORM ============================================== */}\n            {this.state.viewThisFile.length <= 0 && (\n              <form onSubmit={(e) => this.handleSubmit(e)}>\n                <div className=\"px-6 pb-3\">\n                  {this.state.alertError && (\n                    <div\n                      className=\"alert-warning cursor-pointer\"\n                      onClick={() => this.setAlertError(null)}\n                    >\n                      {this.state.alertError}\n                    </div>\n                  )}\n                  <div className=\"text-base text-gray-700 sm:text-lg\">\n                    {/* SELECT CLAIM TYPE ============================================== */}\n                    <div className=\"flex flex-col mb-2\">\n                      <label>Claim type</label>\n                      <select\n                        className={`rounded px-2 py-2 w-full bg-white focus:outline-none ${\n                          this.state.formType === \"PROPS\" &&\n                          \"cursor-not-allowed\"\n                        } ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_type\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        } border-2`}\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.selectClaimType(e.target.value);\n                          this.setClaimFileId(\"\");\n                          this.state.formError &&\n                            this.state.formError.element === \"claim_type\" &&\n                            this.setFormError(null);\n                        }}\n                        value={\n                          this.state.thisClaimType\n                            ? this.state.thisClaimType\n                            : \"\"\n                        }\n                        disabled={\n                          this.state.loadingForm ||\n                          this.state.formType === \"PROPS\"\n                        }\n                      >\n                        <option value=\"\">Choose claim type</option>\n                        {Object.values(PlansTypeKeys).map((item, index) => (\n                          <option\n                            value={item}\n                            key={index + item}\n                            className={`${\n                              item === PlansTypeKeys.MARKS_PUBLICATION ||\n                              item === PlansTypeKeys.PLACEMENT_TRANSFER\n                                ? \"hidden\"\n                                : \"block\"\n                            }`}\n                          >\n                            {capitalizeFirstLetter(\n                              item.toLocaleLowerCase().replace(/_/g, \" \")\n                            )}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_type\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END SELECT CLAIM TYPE ============================================== */}\n\n                    {/* SELECT FILE TO CLAIM ON ============================================== */}\n                    <div className=\"flex flex-col mb-2\">\n                      <label>\n                        {this.generateChooseFileTitle(this.state.thisClaimType)}\n                      </label>\n                      <div\n                        className={`text-left bg-white border-2 ${\n                          this.state.formType !== \"PROPS\"\n                            ? \"border-gray-700\"\n                            : \"border-gray-400 text-gray-500\"\n                        } rounded w-full ${\n                          this.state.chooseClaimFile ? \"h-64\" : \"h-10\"\n                        } ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_file\"\n                            ? \"border-red-500\"\n                            : \"\"\n                        } border-2 ${\n                          this.state.loading\n                            ? \"cursor-waiting\"\n                            : this.state.thisClaimType &&\n                              !this.state.chooseClaimFile &&\n                              this.state.formType !== \"PROPS\"\n                            ? \"cursor-pointer\"\n                            : !this.state.chooseClaimFile &&\n                              \"cursor-not-allowed\"\n                        }`}\n                        title={\n                          !this.state.thisClaimType\n                            ? \"Choose claim type first!\"\n                            : \"\"\n                        }\n                        onClick={() => {\n                          !this.state.loading &&\n                            this.state.formType === \"DEFAULT\" &&\n                            this.state.thisClaimType &&\n                            !this.state.chooseClaimFile &&\n                            this.setChooseClaimFile(true);\n                          !this.state.loading &&\n                            this.state.formError &&\n                            this.state.formError.element === \"claim_file\" &&\n                            this.setFormError(null);\n                        }}\n                      >\n                        {/* DISPLAYING FILTERED SELECTING FILE ============================ */}\n                        {this.state.claimFileId.length > 0 &&\n                        this.state.thisClaimType &&\n                        !this.state.chooseClaimFile ? (\n                          <p className=\"my-1 mx-2\">\n                            {this.getClaimTitle(this.state.thisClaimType)}\n                          </p>\n                        ) : (\n                          !this.state.chooseClaimFile && (\n                            <p className=\"my-1 mx-2\">\n                              Select Claim{\" \"}\n                              {this.state.thisClaimType &&\n                                this.state.thisClaimType\n                                  .toLocaleLowerCase()\n                                  .replace(/_/g, \" \")}\n                            </p>\n                          )\n                        )}\n                        {/* END DISPLAYING FILTERED SELECTING FILE ============================ */}\n\n                        {/* LISTING OF REJECTED DOCUMENTS ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.DOCUMENT_VALIDATION &&\n                          this.props.claiming.candidateDocuments &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormDocumentList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              candidateDocuments={\n                                this.props.claiming.candidateDocuments\n                              }\n                              documentCategories={this.props.documentReducer}\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                            />\n                          )}\n                        {/* END LISTING OF REJECTED DOCUMENTS ============================ */}\n                        {/* ---------------------------------------------------------- */}\n                        {/* LISTING OF REJECTED APPLICATION ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.APPLICATION &&\n                          this.props.claiming.candidateApplications &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormApplicationList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              candidateApplications={\n                                this.props.claiming.candidateApplications\n                              }\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                            />\n                          )}\n                        {/* END LISTING OF REJECTED APPLICATION ============================ */}\n                        {/* ---------------------------------------------------------- */}\n                        {/* LISTING OF FAILED EXAM ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.EXAMINATION &&\n                          this.props.claiming.myAnswer &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormExamList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              candidateAnswers={this.props.claiming.myAnswer}\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                            />\n                          )}\n                        {/* END LISTING OF FAILED EXAM ============================ */}\n                        {/* ---------------------------------------------------------- */}\n                        {/* PENDING PLACEMENT ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.PLACEMENT_TRANSFER &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormPlacementList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                              myPlacement={this.state.myPlacement}\n                            />\n                          )}\n                        {/* END LISTING OF FAILED Placement ============================ */}\n                      </div>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_file\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END SELECT FILE TO CLAIM ON ============================================== */}\n\n                    {/* CLAIM REASONS ========================================== */}\n                    <div className=\"flex flex-col mb-2\">\n                      <label>Choose reason of your claim</label>\n                      <div\n                        className={`text-left bg-white border-2 border-gray-700 rounded w-full ${\n                          this.state.chooseClaimReason ? \"h-64\" : \"h-auto\"\n                        } ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_reason\"\n                            ? \"border-red-500\"\n                            : \"\"\n                        } border-2 ${\n                          this.props.claiming.claimReasons === null\n                            ? \"cursor-wait\"\n                            : \"cursor-pointer\"\n                        }`}\n                        title=\"Choose the reason for your claim!\"\n                        onClick={() => {\n                          !this.state.chooseClaimReason &&\n                            this.setState({ chooseClaimReason: true });\n                          this.state.formError &&\n                            this.state.formError.element === \"claim_reason\" &&\n                            this.setFormError(null);\n                        }}\n                      >\n                        {/* DISPLAYING SELECTED REASON ============================ */}\n                        {this.state.claimReason &&\n                        !this.state.chooseClaimReason ? (\n                          <p className=\"my-1 mx-2\">\n                            {this.state.claimReason.reason}\n                          </p>\n                        ) : (\n                          !this.state.chooseClaimReason && (\n                            <p className=\"my-1 mx-2\">Select reason</p>\n                          )\n                        )}\n                        {/* END DISPLAYING SELECTED REASON ============================ */}\n\n                        {/* LISTING OF CLAIM REASONS ============================ */}\n                        {this.state.chooseClaimReason &&\n                          this.props.claiming.claimReasons && (\n                            <ChooseReason\n                              setChooseClaimReason={this.setChooseClaimReason}\n                              setClaimReason={this.setClaimReason}\n                              claimReason={this.state.claimReason}\n                              allClaimReasons={this.props.claiming.claimReasons}\n                            />\n                          )}\n                        {/* END LISTING OF CLAIM REASONS ============================ */}\n                      </div>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_reason\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END CLAIM REASONS ========================================== */}\n\n                    {/* CLAIM COMMENT ============================================== */}\n                    <div className=\"flex flex-col\">\n                      <label>Comment</label>\n                      <textarea\n                        className={`text-left input-white w-20 inline-block ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_comment\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        } border-2`}\n                        placeholder={`Claim comment`}\n                        style={{ resize: \"none\" }}\n                        value={this.state.claimComment}\n                        onChange={(e) => {\n                          this.setClaimComment(e.target.value);\n                          this.state.formError &&\n                            this.state.formError.element === \"claim_comment\" &&\n                            this.setFormError(null);\n                        }}\n                        rows={3}\n                        disabled={this.state.loadingForm}\n                      ></textarea>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_comment\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END CLAIM COMMENT ============================================== */}\n                  </div>\n\n                  <div className=\"pt-3 flex justify-between\">\n                    <button\n                      onClick={() => this.cleanToClose()}\n                      className={`btn bg-gray-400 text-white hover:bg-gray-600 focus:outline-none ${\n                        this.state.loadingForm && \"cursor-not-allowed\"\n                      }`}\n                      type=\"button\"\n                      disabled={this.state.loadingForm || this.state.loading}\n                    >\n                      Exit\n                    </button>\n                    <button\n                      className={`btn bg-primary text-white hover:bg-blue-600 focus:outline-none ${\n                        this.state.loadingForm && \"cursor-wait\"\n                      }`}\n                      type=\"submit\"\n                      disabled={this.state.loadingForm || this.state.loading}\n                    >\n                      {this.state.loadingForm ? \"Loading...\" : \"Claim\"}\n                    </button>\n                  </div>\n                </div>\n              </form>\n            )}\n            {/* END CLAIM FORM ============================================== */}\n\n            {/* CLAIM DOCUMENT VIEW ============================================== */}\n            {this.state.viewThisFile.length > 0 &&\n              this.props.claiming.candidateDocuments &&\n              this.state.thisClaimType ===\n                PlansTypeKeys.DOCUMENT_VALIDATION && (\n                <DocFormView\n                  thisDoc={this.getDocumentById(\n                    this.props.claiming.candidateDocuments,\n                    this.state.viewThisFile\n                  )}\n                  setViewThisFile={this.setViewThisFile}\n                  documentCategories={this.props.documentReducer}\n                  setChooseClaimFile={this.setChooseClaimFile}\n                  setClaimFileId={this.setClaimFileId}\n                />\n              )}\n            {/* END CLAIM DOCUMENT VIEW ============================================== */}\n            {/* ------------------------------------------------------------------------- */}\n            {/* CLAIM APPLICATION VIEW ============================================== */}\n            {this.state.viewThisFile.length > 0 &&\n              this.props.claiming.candidateApplications &&\n              this.state.thisClaimType === PlansTypeKeys.APPLICATION && (\n                <ApplicationFormView\n                  thisApplication={this.getApplicationById(\n                    this.props.claiming.candidateApplications,\n                    this.state.viewThisFile\n                  )}\n                  documentCategories={this.props.documentReducer}\n                  setChooseClaimFile={this.setChooseClaimFile}\n                  setClaimFileId={this.setClaimFileId}\n                  setViewThisFile={this.setViewThisFile}\n                />\n              )}\n            {/* END CLAIM APPLICATION VIEW ============================================== */}\n            {/* ------------------------------------------------------------------------- */}\n            {/* CLAIM EXAMINATION VIEW ============================================== */}\n            {this.state.viewThisFile.length > 0 &&\n              this.props.claiming.myAnswer &&\n              this.state.thisClaimType === PlansTypeKeys.EXAMINATION &&\n              this.getExamById(\n                this.props.claiming.myAnswer,\n                this.state.viewThisFile\n              ) && (\n                <ExaminationFormView\n                  thisAnswerSheet={\n                    this.getExamById(\n                      this.props.claiming.myAnswer,\n                      this.state.viewThisFile\n                    )!\n                  }\n                  setChooseClaimFile={this.setChooseClaimFile}\n                  setClaimFileId={this.setClaimFileId}\n                  setViewThisFile={this.setViewThisFile}\n                  // thisAnswerSheet={undefined}\n                  // setViewThisFile={undefined}\n                  // setChooseClaimFile={undefined}\n                  // setClaimFileId={undefined}\n                />\n              )}\n            {/* END CLAIM EXAMINATION VIEW ============================================== */}\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  document,\n  claiming,\n  course,\n}: StoreState): {\n  auth: Auth;\n  documentReducer: DocumentReducerInterface;\n  claiming: ClaimingReducerType;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    documentReducer: document,\n    claiming,\n    courses: course.courses,\n  };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    loadCourses,\n    getMyClaims,\n    getClaimReasons,\n    getMyAnswers,\n    getMyPlacement,\n    createClaim,\n    GetClaimingTypes,\n    getMyRejectedApplications,\n    getMyRejectedDocuments,\n    getDocumentCategory,\n    getDocumentSubCategory,\n    getDocumentFields,\n    PushPopupAlert,\n  })(ClaimForm)\n);\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React from \"react\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\nconst NoSession = () => {\n  return (\n    <div className=\"my-5\">\n      <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n        <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n        <div className=\"text-center flex flex-col\">\n          <span className=\"text-2xl md:text-4xl font-extrabold\">\n            No session available\n          </span>\n          <span className=\"text-lg\">\n            Please Wait for the system to publish the sessions or contact the\n            administrator\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NoSession;\n","import React from \"react\";\n\ntype TableLoadingProps = {\n  cols: number;\n};\nconst TableLoading: React.FC<TableLoadingProps> = (props) => {\n  const displayCols = (): JSX.Element[] => {\n    let colsArray: number[] = [];\n    for (let index = 0; index < props.cols; index++) {\n      colsArray.push(index);\n    }\n    let result = colsArray.map((element) => {\n      return (\n        <td className=\"p-3 text-center whitespace-nowrap\" key={element}>\n          <div className=\"w-full h-4 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </td>\n      );\n    });\n\n    return result;\n  };\n  return (\n    <>\n      <tr className=\"border-b border-gray-200\" key={228}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={22648}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={229768}>\n        {displayCols()}\n      </tr>\n    </>\n  );\n};\n\nexport default TableLoading;\n","import React from \"react\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport { RiFileExcel2Fill } from \"react-icons/ri\";\n\ninterface ExportToExcelProps {\n  fileData: any[];\n  fileName: string;\n  btnName?: string;\n  className?: string;\n  showIcon?: boolean;\n}\n\nconst ExportToExcel: React.FC<ExportToExcelProps> = ({\n  fileData,\n  fileName,\n  btnName = \"Excel\",\n  className = \"flex items-center gap-1 px-4 py-1 rounded text-green-700 bg-white border hover:text-white hover:bg-green-700 border-green-700 font-bold\",\n  showIcon = true,\n}) => {\n  const fileType =\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n  const fileExtension = \".xlsx\";\n\n  const exportToCSV = (apiData: any[], fileName: string) => {\n    const ws = XLSX.utils.json_to_sheet(apiData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  return (\n    <button\n      onClick={(e) => exportToCSV(fileData, fileName)}\n      className={className}\n    >\n      {showIcon && <RiFileExcel2Fill />}\n      {btnName}\n    </button>\n  );\n};\n\nexport default ExportToExcel;\n","export default __webpack_public_path__ + \"static/media/mineduc.11a9ae1c.png\";","import jsPDF from \"jspdf\";\nimport { DATE } from \"../../utils/functions\";\nimport Logo from \"../../utils/mineduc.png\";\nrequire(\"jspdf-autotable\");\n\nexport const addFooters = (doc: any) => {\n  const pageCount = doc.internal.getNumberOfPages();\n\n  doc.setFont(\"helvetica\", \"italic\");\n  doc.setFontSize(8);\n  for (var i = 1; i <= pageCount; i++) {\n    doc.setPage(i);\n    doc.text(\n      \"Page \" + String(i) + \" of \" + String(pageCount),\n      doc.internal.pageSize.width / 2,\n      297,\n      {\n        align: \"center\",\n      }\n    );\n  }\n};\n\nexport type reportSettingsInterface = {\n  doneBy: string;\n  title: string;\n  subjectTitle: string;\n  subject: string;\n  institute: string;\n  period: string;\n  footer: string;\n  orientation?: \"p\" | \"l\";\n};\n\nexport const generatePDF = async (\n  reportSettings: reportSettingsInterface,\n  table: HTMLElement,\n  callBack: (status: boolean) => void\n) => {\n  callBack(true);\n  const orientation: \"p\" | \"l\" = reportSettings.orientation\n    ? reportSettings.orientation\n    : \"p\";\n  var lMargin: number = 20; //left margin in mm\n  var rMargin: number = 20; //right margin in mm\n  var pdfInMM: number = 185; // width of A4 in mm\n\n  //   var doc = new jsPDF(\"p\", \"mm\", \"a4\");\n  var doc: any = new jsPDF(orientation, \"mm\", \"a4\");\n\n  doc.setTextColor(95, 95, 95);\n  doc.setFontSize(28);\n  // doc.text(\n  //   this.props.reportTitle,\n  //   doc.internal.pageSize.getWidth() / 2,\n  //   30,\n  //   undefined,\n  //   \"center\"\n  // );\n  doc.addImage(Logo, \"png\", 20, 20, 10, 10);\n  doc.text(\"MINEDUC\", 32, 28.5, undefined, \"left\");\n  //   doc.setTextColor(19, 90, 152);\n  doc.setFontSize(26);\n  doc.text(\n    reportSettings.title,\n    doc.internal.pageSize.getWidth() / 2,\n    42.7,\n    undefined,\n    \"center\"\n  );\n\n  doc.setFontSize(20);\n  doc.text(\n    reportSettings.institute,\n    doc.internal.pageSize.getWidth() / 2,\n    53.7,\n    undefined,\n    \"center\"\n  );\n\n  var lines;\n  lines = doc.splitTextToSize(\n    reportSettings.subject,\n    pdfInMM - lMargin - rMargin\n  );\n  // if (reportSettings.position) {\n  // } else if (reportSettings.subject) {\n  //   lines = doc.splitTextToSize(\n  //     reportSettings.subject,\n  //     pdfInMM - lMargin - rMargin\n  //   );\n  // }\n\n  //   doc.setTextColor(0, 123, 255);\n  doc.setFontSize(16);\n  //   doc.text(lines, doc.internal.pageSize.getWidth() / 2, 45, {\n  //     maxWidth: 85,\n  //     align: \"center\",\n  //   });\n\n  var y = 63,\n    width;\n  doc.setTextColor(95, 95, 95);\n  doc.text(`${reportSettings.subjectTitle}: `, lMargin, y);\n  width = doc.getTextWidth(`${reportSettings.subjectTitle}: `);\n  // if (reportSettings.position) {\n  // } else if (reportSettings.position) {\n  //   doc.text(`Subject: `, lMargin, y);\n  //   width = doc.getTextWidth(\"Subject: \");\n  // }\n  // doc.setFontType(\"bold\");\n  doc.setTextColor(38, 38, 38);\n  for (var i = 0; i < lines.length; i++) {\n    if (y > 280) {\n      y = 10;\n      doc.addPage();\n    }\n    // doc.text(15, y, lines[i]);\n    doc.text(lines[i], lMargin + width, y);\n    y = y + 7;\n  }\n  doc.setTextColor(95, 95, 95);\n  doc.text(\"Period: \", lMargin, y + 3);\n  width = doc.getTextWidth(\"Period: \");\n  doc.setTextColor(38, 38, 38);\n  doc.text(reportSettings.period, lMargin + width, y + 3);\n\n  doc.autoTable({\n    html: table,\n    startY: 85,\n    margin: { horizontal: 20 },\n    cellPadding: 3, // Horizontal cell padding\n    // fontSize: 12,\n    rowHeight: 20,\n    // styles: { overflow: \"linebreak\" },\n    bodyStyles: { valign: \"top\" },\n    columnStyles: { email: { cellWidth: \"wrap\" } },\n    theme: \"striped\",\n    tableWidth: true,\n  });\n\n  doc.setFontSize(12);\n  let finalY = doc.lastAutoTable.finalY; // The y position on the page\n  doc.text(`Reported by: ${reportSettings.doneBy}`, lMargin, finalY + 15);\n  doc.text(\n    \"Report downloaded on \" + DATE(new Date().toString()),\n    lMargin,\n    finalY + 23\n  );\n\n  addFooters(doc);\n  await doc\n    .save(\n      `${\n        reportSettings.title +\n        \": \" +\n        reportSettings.subject +\n        \": \" +\n        reportSettings.period\n      }.pdf`,\n      { returnPromise: true }\n    )\n    .then(callBack(false));\n};\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    // Problem here!\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        // Check type of question\n        let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n        if (props.type === questionTypeElementsType.SingleMultiple) {\n          for (let t of selAns.answer) {\n            temp = [\n              ...temp,\n              {\n                id: t.id,\n                value: t.value,\n                status: false,\n              },\n            ];\n          }\n          addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n        }\n        let newAnswersMultiple: MultipleChoiceQuestionAnswerInterface[] = [];\n\n        for (let xItem of temp.length === 0 ? selAns.answer : temp) {\n          if (xItem.id === item.id) {\n            newAnswersMultiple = [\n              ...newAnswersMultiple,\n              {\n                id: xItem.id,\n                value: xItem.value,\n                status:\n                  props.type === questionTypeElementsType.SingleMultiple\n                    ? true\n                    : !xItem.status,\n              },\n            ];\n          } else {\n            newAnswersMultiple = [...newAnswersMultiple, xItem];\n          }\n\n          addAnswerItemFn(\n            newAnswersMultiple,\n            props.selectedQuestionAnswer.selectedAns\n          );\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: TrueFalseQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const addAnswer = (\n    //This has a problem\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let temp: TrueFalseQuestionAnswerInterface[] = [];\n        for (let t of selAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, selAns);\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let x of temp.length === 0 ? selAns.answer : temp) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: !x.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: [\n                {\n                  id: newAnswers[0].id,\n                  value: [newAnswers[0].value],\n                  status: newAnswers[0].status,\n                },\n              ],\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  ShortAnswerQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: ShortAnswerQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer === undefined ? (\n        <div\n          className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n        >\n          <textarea\n            value={\"\"}\n            className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 bg-gray-50`}\n            style={{ minHeight: \"80px\" }}\n          ></textarea>\n        </div>\n      ) : (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"80px\" }}\n            ></textarea>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: [item.value],\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        // props.answerQuestionFn({\n        //   question_id: props.selectedQuestionAnswer.question_id,\n        //   status: true,\n        //   answer: [\n        //     {\n        //       id: props.selectedQuestionAnswer.answers[0].id,\n        //       value: [\"\"],\n        //       status: props.selectedQuestionAnswer.answers[0].status,\n        //     },\n        //   ],\n        // });\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of props.selectedQuestionAnswer.selectedAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0\n        ? props.selectedQuestionAnswer.selectedAns.answer\n        : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers, props.selectedQuestionAnswer.selectedAns);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EssayQuestionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: EssayQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Essay = (props: EssayQuestionProps) => {\n  const checkAnswer = (item: EssayQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        addAnswerItemFn(\n          [\n            {\n              id: selAns.answer[0].id,\n              value: item.value,\n              status: selAns.answer[0].status,\n            },\n          ],\n          selAns\n        );\n      }\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"300px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, DocumentClaimUser } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (\n    newAnswers: MatchingQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let x of selAns.answer) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: item.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ansi: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let checkE = testLang.answers.find(\n              (tes) =>\n                tes.reference ===\n                props.selectedQuestionAnswer.selectedAns.reference\n            );\n            if (checkE !== undefined) {\n              let testAnswerLang = checkE.answer.find(\n                (it) => it.status.toString() === ansi.status\n              );\n              if (testAnswerLang !== undefined) {\n                return testAnswerLang.status.toString();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let selAns = temp.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let ans = selAns.answer.find((itm) => itm.id === x);\n        if (ans !== undefined && ans.status !== \"\") {\n          if (props.selectedQuestionAnswer.question_id !== null) {\n            return checkAnswerStatus(\n              props.selectedQuestionAnswer.question_id,\n              props.selectedLanguage,\n              ans\n            );\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        let selAns = item.answers.find(\n          (tester) =>\n            tester.reference ===\n            props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (selAns !== undefined) {\n          for (let ans of selAns.answer) {\n            res = [\n              ...res,\n              {\n                id: ans.id,\n                lang: item.language,\n                status: ans.status.toString(),\n              },\n            ];\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toEmbedded,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\nimport Essay from \"../../containers/DoExam/QuestionDetails/Answers/Essay\";\nimport {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n  regExEmbedded,\n} from \"@mastrecruit/common\";\nimport Embedded from \"../../containers/DoExam/QuestionDetails/Answers/Embedded\";\nimport Hybrid from \"../../containers/DoExam/QuestionDetails/Answers/Hybrid\";\nimport HybridAnswers from \"../../containers/DoExam/QuestionDetails/Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst returnSelect = (\n  data: QuestionAnswerInterface,\n  type: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid,\n  questionAnswers: QuestionAnswerInterface[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let answers: QuestionAnswerFormat[] = [];\n  for (let answer of data.answer) {\n    answers.push({\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    });\n  }\n  let answerCheck: QuestionAnswerInterface | undefined = questionAnswers.find(\n    (itm) => itm.reference === data.reference\n  );\n  let answered: QuestionAnswerFormat[] = [];\n  if (answerCheck !== undefined) {\n    answered = answerCheck.answer;\n  }\n  if (answers.length > 0) {\n    if (type === QuestionForEmbedded.SingleMultiple) {\n      return (\n        <span className=\"w-max\">\n          <select\n            className={`px-3 py-2 rounded text-base max-w-full border border-gray-300 ${\n              answered.length !== 0 &&\n              answers.find((itm) => itm.id === answered[0].id) !== undefined\n                ? \"text-blue-600 font-bold\"\n                : \"text-gray-700 font-bold\" //Example of condition of changing color\n            }`}\n            value={answered.length === 0 ? \"\" : answered[0].id}\n            onChange={(e) => {\n              let select = answers.find((itm) => itm.id === e.target.value);\n              if (select !== undefined) {\n                addAnswer({\n                  _id: data._id,\n                  reference: data.reference,\n                  answer: [\n                    {\n                      id: select.id,\n                      value: select.value,\n                      status: select.status,\n                    },\n                  ],\n                });\n              } else {\n                alert(\"Invalid choice!\");\n              }\n            }}\n          >\n            <option value={\"\"}>Choose correct answer</option>\n            {answers.map((item, i) => (\n              <option value={item.id} key={i + 1}>\n                {item.value}\n              </option>\n            ))}\n          </select>\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"w-max bg-green-100\">\n          <input\n            value={\n              answered.length === 0\n                ? \"\"\n                : type === QuestionForEmbedded.ShortAnswer\n                ? answered[0].value\n                : answered[0].value[0]\n            }\n            onChange={(e) => {\n              addAnswer({\n                _id: data._id,\n                reference: data.reference,\n                answer: [\n                  {\n                    id: answers[0].id,\n                    value:\n                      type === QuestionForEmbedded.ShortAnswer\n                        ? e.target.value\n                        : [e.target.value],\n                    status: answers[0].status,\n                  },\n                ],\n              });\n            }}\n            type=\"text\"\n            className=\"bg-white px-3 py-1 rounded text-base text-blue-600 font-bold border border-gray-300\"\n          />\n        </span>\n      );\n    }\n  } else {\n    return <div>Question not valid!</div>;\n  }\n};\n\nexport const EmbeddedQuestion = (\n  selectedQuestion: QuestionInterface,\n  questionTypes: questionType[] | null,\n  language: QuestionLanguage,\n  questionAnswers: QuestionAnswersStore[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let newTextResult = [];\n  // Testing Question\n  let question = selectedQuestion.question.find(\n    (itm) => itm.language === language\n  );\n  if (\n    findQuestionType(selectedQuestion.type, questionTypes) !== null &&\n    findQuestionType(selectedQuestion.type, questionTypes) ===\n      questionTypeElementsType.Embedded\n  ) {\n    let answeredQuestions: QuestionAnswerInterface[] = [];\n    if (question !== undefined) {\n      let userQuestionAnswers = questionAnswers.find(\n        (itm) => itm.question_id === selectedQuestion.question_id\n      );\n      if (userQuestionAnswers !== undefined) {\n        answeredQuestions = userQuestionAnswers.answers;\n      }\n\n      var answers = question.answers;\n      var originalText = question.description.split(\" \");\n      // var newTexts = question.description.match(regExEmbedded);\n\n      for (let check of originalText) {\n        let test = answers.find((itm) => itm.reference === parseInt(check[1]));\n        if (test !== undefined) {\n          // Find type of subQuestion\n          let type = question.sub_question.find(\n            (itm) => itm.reference === parseInt(check[1])\n          );\n          if (type !== undefined) {\n            newTextResult.push(\n              returnSelect(test, type.typeShort, answeredQuestions, addAnswer)\n            );\n          }\n        } else {\n          newTextResult.push(check);\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"w-full text-base font-semibold mt-2\">\n      {newTextResult.map((item, i) => (\n        <span key={i + 1} className=\"mr-1\">\n          {item}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-40 md:pb-10\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div className=\"flex flex-row justify-between w-full\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.title,\n                      }}\n                      className=\"text-sm text-gray-600 mb-2\"\n                    ></div>\n\n                    {/* Languages */}\n                    <div className=\"flex flex-row gap-2\">\n                      <div className=\"px-3 py-1 rounded-full flex items-center justify-center text-base font-bold bg-white text-blue-800\">\n                        {props.selectedQuestion.marks} marks\n                      </div>\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                    setSelectedLanguage(item.key);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    selectedLanguage === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {selectedLanguage === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {props.selectedQuestion.question_id !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) === questionTypeElementsType.Embedded ? (\n                    EmbeddedQuestion(\n                      props.selectedQuestion,\n                      props.questionTypes.questionTypes,\n                      selectedLanguage,\n                      props.candidateExam.question_answers,\n                      () => {}\n                    )\n                  ) : (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold mt-2\"\n                    ></div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.Hybrid)\n                ? \"\"\n                : \"bg-white\"\n            } rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n\n            {/* Numerical */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Essay answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toEssay(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers,\n                  }}\n                  wholeQuestion={props.selectedQuestion.question.find(\n                    (itm) => itm.language === selectedLanguage\n                  )}\n                  answerQuestionFn={props.answerQuestionFn}\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import React from \"react\";\nimport Table from \"../../components/Table/Table\";\nimport { isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { PositionRequirementTableInterface } from \"./ViewPosition\";\n\ninterface RequirementProps {\n  requirements: PositionRequirementTableInterface[];\n}\n\nconst ViewRequirements: React.FC<RequirementProps> = (props) => {\n  const tableData = (): JSX.Element[] => {\n    let data: PositionRequirementTableInterface[] = props.requirements;\n    // let data: PositionSubcategoryData[] =\n    //   props.position_requirement.position_requirement;\n    if (data.length === 0) {\n      return [\n        <tr key={153} className=\"border-b border-gray-200 hover:bg-gray-100\">\n          <td className=\"p-3 text-center\" colSpan={3}>\n            No Data Found\n          </td>\n        </tr>,\n      ];\n    }\n\n    return data.map((item, index) => (\n      <tr\n        key={index + item.field_id}\n        className=\"border-b border-gray-200 hover:bg-gray-100\"\n      >\n        <td className=\"p-3 text-left whitespace-nowrap\">{index + 1}</td>\n        <td className=\"p-3 text-left\">\n          <span>{item.subcategory_title}</span>\n        </td>\n        <td className=\"p-3 text-left\">\n          <span>\n            {isEmptyOrSpaces(item.field_id) ? \"Any document\" : item.field_title}\n          </span>\n        </td>\n        <td className=\"p-3 text-left text-lg italic\">\n          {isEmptyOrSpaces(item.field_id) ? (\n            item.subcategory_required ? (\n              <span className=\"text-yellow-800\">Required</span>\n            ) : (\n              \"Optional\"\n            )\n          ) : item.required ? (\n            <span className=\"text-yellow-800\">Required</span>\n          ) : (\n            \"Optional\"\n          )}\n        </td>\n      </tr>\n    ));\n  };\n\n  return (\n    <div>\n      <Table\n        columns={[\n          { columnTitle: \"#\", alignText: \"left\", padding: \"p-3\" },\n          { columnTitle: \"Qualification\", alignText: \"left\", padding: \"p-3\" },\n          // {\n          //   columnTitle: \"Qualification Status\",\n          //   alignText: \"left\",\n          //   padding: \"p-3\",\n          // },\n          { columnTitle: \"Document\", alignText: \"left\", padding: \"p-3\" },\n          { columnTitle: \"Status\", alignText: \"left\", padding: \"p-3\" },\n          // { columnTitle: \"\", alignText: \"left\", padding: \"p-3\" },\n        ]}\n        rows={tableData}\n        pagination={false}\n        search={false}\n        thColor=\"gray\"\n      />\n    </div>\n  );\n};\n\nexport default React.memo(ViewRequirements);\n","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { IoHandLeftSharp } from \"react-icons/io5\";\nimport {\n  compareWithToday,\n  ExamDoneDetailsAnswers,\n} from \"../../containers/CandidateExams/CandidateExams\";\nimport { PlansTypeKeys } from \"../../interfaces\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { DATE } from \"../../utils/functions\";\nimport ClaimFormComponent from \"../ClaimForm/ClaimFormComponent\";\nimport { AnswersDetails } from \"./AnswersDetails\";\n\ninterface CandidateAnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n}\n\nconst CandidateAnswersDetails = (props: CandidateAnswersDetailsProps) => {\n  const today = moment().tz(TimeZone);\n  let tomorrow = new Date();\n  tomorrow.setDate(today.date() + 1);\n  const [claim, setClaim] = useState<boolean>(false);\n  return (\n    <div>\n      {/* Check if period is open for claims */}\n      {compareWithToday(today, props.exam_id.exam_date) === false ? (\n        <div className=\"bg-yellow-100 text-yellow-800 font-extrabold text-center flex flex-col items-center justify-center text-lg px-2 py-6\">\n          <div className=\"mb-5 text-3xl\">\n            Please wait, the exam details will be visible soon!\n          </div>\n          <div className=\"text-gray-600\">Exam details will be visible from</div>\n          <div className=\"bg-white rounded-full px-3 py-1 text-gray-700\">\n            {DATE(tomorrow.toString())}\n          </div>\n        </div>\n      ) : claim === false ? (\n        <div className=\"mb-20\">\n          <AnswersDetails\n            exam_id={props.exam_id}\n            showAnswers={props.showAnswers}\n          />\n          <div\n            onClick={() => setClaim(true)}\n            className=\"bg-blue-100 flex flex-row items-center px-3 py-2 -mt-10\"\n          >\n            <div className=\"btn bg-green-600 text-white text-center w-max px-6 text-2xl flex flex-row item-center justify-center gap-3 cursor-pointer\">\n              <IoHandLeftSharp className=\"text-3xl \" />{\" \"}\n              <span>Exam marks Claim</span>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-100 mt-4 pt-2 rounded\">\n          <ClaimFormComponent\n            setFormState={setClaim}\n            claim_type={PlansTypeKeys.EXAMINATION}\n            file_id={props.exam_id.exam_id}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CandidateAnswersDetails;\n","import React from \"react\";\nimport { MdTurnedIn } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../../actions\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  claimApplicationsInterface,\n  claimApplicationsPositionInterface,\n} from \"../../../interfaces\";\nimport { ApplicationStates } from \"../../../interfaces/application\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { UserInterface } from \"../../../shared/interfaces\";\nimport { DATE } from \"../../../utils/functions\";\nimport { PositionRequirementTableInterface } from \"../../Positions/ViewPosition\";\nimport ViewRequirements from \"../../Positions/ViewRequirements\";\n\nexport const FC_ApplicationPositionDistinctCategory = (\n  thisPosition: claimApplicationsPositionInterface,\n  documentCategories: DocumentReducerInterface\n): {\n  PositionsTemp: PositionRequirementTableInterface[];\n  DistinctCategoriesTemp: PositionRequirementTableInterface[];\n  DistinctSubCategoriesTemp: PositionRequirementTableInterface[];\n} => {\n  let PositionsTemp: PositionRequirementTableInterface[] = [];\n  let DistinctCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctCategoriesIds: string[] = [];\n  let DistinctSubCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctSubCategoriesIds: string[] = [];\n  // GET REQUIREMENTS OF THE CURRENT POSITION ====================\n  let requirements = thisPosition.requirements;\n  // LOOP THROUGH CURRENT POSITION REQUIREMENTS ==========================\n  for (let req in requirements) {\n    let thisRequirements = requirements[req];\n    // GET DOC CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisCategory = documentCategories.documentCategory\n      ? documentCategories.documentCategory.find(\n          (item) =>\n            item.user_detail_category_id ===\n            thisRequirements.category.user_detail_category_id\n        ) && {\n          title: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.category.user_detail_category_id\n          )!.title,\n          user_detail_category_id: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.category.user_detail_category_id\n          )!.user_detail_category_id,\n        }\n      : {\n          title: \"\",\n          user_detail_category_id:\n            thisRequirements.category.user_detail_category_id,\n        };\n    // GET DOC SUB CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisSubCategory = documentCategories.documentSubCategory\n      ? documentCategories.documentSubCategory.find(\n          (item) =>\n            item.user_detail_subcategory_id ===\n            thisRequirements.subcategory.user_detail_subcategory_id\n        )\n        ? {\n            title: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.subcategory.user_detail_subcategory_id\n            )!.title,\n            user_detail_subcategory_id:\n              documentCategories.documentSubCategory.find(\n                (item) =>\n                  item.user_detail_subcategory_id ===\n                  thisRequirements.subcategory.user_detail_subcategory_id\n              )!.user_detail_subcategory_id,\n            category_id: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.subcategory.user_detail_subcategory_id\n            )!.category_id,\n          }\n        : {\n            title: \"\",\n            user_detail_subcategory_id:\n              thisRequirements.subcategory.user_detail_subcategory_id,\n            category_id: \"\",\n          }\n      : {\n          title: \"\",\n          user_detail_subcategory_id:\n            thisRequirements.subcategory.user_detail_subcategory_id,\n          category_id: \"\",\n        };\n    // LOOP THROUGH FIELDS OF THE CURRENT POSITION REQUIREMENTS ==========================\n    if (thisCategory) {\n      for (let field in thisRequirements.position_requirement) {\n        // GET FIELDS OF THE CURRENT POSITION REQUIREMENTS ====================\n        let thisField = documentCategories.documentFields\n          ? documentCategories.documentFields.find(\n              (item) =>\n                item._id === thisRequirements.position_requirement[field]._id\n            )\n            ? {\n                title: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]._id\n                )!.title,\n                _id: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]._id\n                )!._id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n            : {\n                title: \"\",\n                _id: thisRequirements.subcategory.user_detail_subcategory_id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n          : {\n              title: \"\",\n              _id: thisRequirements.subcategory.user_detail_subcategory_id,\n              required: thisRequirements.position_requirement[field].required,\n            };\n        // ADD CURRENT CATEGORY, SUB CATEGORY & FIELDS OF THE CURRENT POSITION REQUIREMENTS IN POSITIONS TEMP ====================\n        PositionsTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: thisField.title,\n          field_id: thisField._id,\n          required: thisField.required,\n        });\n      }\n\n      // ADD CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctCategoriesIds.includes(thisCategory.user_detail_category_id)\n      ) {\n        DistinctCategoriesIds.push(thisCategory.user_detail_category_id);\n        DistinctCategoriesTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: \"\",\n          subcategory_title: \"\",\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n\n      // ADD SUB CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctSubCategoriesIds.includes(\n          thisSubCategory.user_detail_subcategory_id\n        )\n      ) {\n        DistinctSubCategoriesIds.push(\n          thisSubCategory.user_detail_subcategory_id\n        );\n        DistinctSubCategoriesTemp.push({\n          category_id: thisSubCategory.category_id,\n          category_title: \"\",\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n    }\n  }\n  // DistinctCategoriesIds.;\n\n  return { PositionsTemp, DistinctCategoriesTemp, DistinctSubCategoriesTemp };\n};\n\nexport const showEvaluator = (\n  userList: UserInterface[],\n  user_id: string\n): string => {\n  let result: string = \"\";\n  if (user_id === \"system\") {\n    result = \"System\";\n  } else {\n    // let user = getUserDocuments(userList, user_id);\n    // let user = undefined;\n    // if (user) {\n    //   result = user.user.user_info.fname + \" \" + user.user.user_info.lname;\n    // }\n  }\n  return result;\n};\n\ntype ApplicationFormViewProps = {\n  thisApplication: claimApplicationsInterface;\n  setViewThisFile: (value: string) => void;\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  PushPopupAlert: Function;\n};\n\nconst ApplicationFormView: React.FC<ApplicationFormViewProps> = (props) => {\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-gray-100 px-4 py-1 animate__animated animate__fadeIn\">\n        <div className=\"flex flex-col mb-2\">\n          {/* APPLICATION TITLE ========== */}\n          <section className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"btn btn-blue\"\n              onClick={() => {\n                props.setChooseClaimFile(false);\n                props.setClaimFileId(props.thisApplication.application_id);\n                props.setViewThisFile(\"\");\n              }}\n            >\n              Choose\n            </button>\n          </section>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisApplication.application_status ===\n                ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } py-1`}\n            >\n              {capitalizeFirstLetter(props.thisApplication.application_status)}\n            </span>\n          </div>\n          {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {props.thisApplication.}\n            </span>\n          </div> */}\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span\n              className=\"font-semibold text-gray-900\"\n              dangerouslySetInnerHTML={{\n                __html: props.thisApplication.override_by.comment,\n              }}\n            ></span>\n          </div>\n        </div>\n        <div className=\"bg-white w-full rounded p-2 mb-2\">\n          <div className=\"text-gray-800 text-2xl font-bold my-2\">\n            Position Details\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>Desc:</span>\n            <span className=\"font-semibold\">\n              {props.thisApplication.position.description}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>School level:</span>\n            <span className=\"font-semibold\">\n              {props.thisApplication.position.school_level_id.school_level_name}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>Institute:</span>\n            <span className=\"font-semibold\">\n              {\n                props.thisApplication.position.education_institute_id\n                  .education_category_title\n              }\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>Courses:</span>\n            <span className=\"flex items-center gap-2\">\n              {props.thisApplication.position.courses.map((item, index) => (\n                <div\n                  key={index + item.course_id}\n                  className=\"flex items-center gap-1\"\n                >\n                  <span className=\"font-semibold\">{item.course_name}</span>\n                  <span className=\"text-gray-600\">({item.course_code})</span>\n                  {index !==\n                    props.thisApplication.position.courses.length - 1 && \",\"}\n                </div>\n              ))}\n            </span>\n          </div>\n\n          <div className=\"text-gray-800 text-2xl font-bold my-2\">\n            Position Requirements\n          </div>\n          {props.thisApplication.position.requirements.length > 0 ? (\n            FC_ApplicationPositionDistinctCategory(\n              props.thisApplication.position,\n              props.documentCategories\n            ).DistinctCategoriesTemp.map((item, index) => (\n              <div\n                className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                key={index + item.category_id}\n              >\n                <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                  <MdTurnedIn />\n                  <span>{item.category_title}</span>\n                </div>\n                <div className=\"border bg-white mt-1\">\n                  <ViewRequirements\n                    requirements={FC_ApplicationPositionDistinctCategory(\n                      props.thisApplication.position,\n                      props.documentCategories\n                    ).PositionsTemp.filter(\n                      (req) => req.category_id === item.category_id\n                    )}\n                  />\n                </div>\n              </div>\n            ))\n          ) : (\n            <NoResult\n              theme={NoResultThemes.Dark}\n              value={\"No requirements\"}\n            ></NoResult>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, { PushPopupAlert })(ApplicationFormView));\n","import React, { Component } from \"react\";\nimport FindAnswer from \"../../containers/DoExam/DoExamTitle/FindAnswer\";\nimport { ExamAnswerSheetDone } from \"../../interfaces/exam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  requestUserAnswers,\n  loadQuestionTypes,\n  questionTypesStoreInterface,\n  System,\n  courseStoreInterface,\n  loadCourses,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { DATE } from \"../../utils/functions\";\nimport { AiOutlineFileText } from \"react-icons/ai\";\nimport { ExamDoneDetailsAnswers } from \"../../containers/CandidateExams/CandidateExams\";\nimport Loading from \"../Loading/Loading\";\nimport { QuestionLanguage } from \"../../interfaces\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport { EmbeddedQuestion } from \"../QuestionPreview/QuestionPreview\";\nimport FindAnswerHybrid from \"../../containers/DoExam/DoExamTitle/FindAnswerHybrid\";\n\ninterface AnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n  allAnswers?: ExamAnswerSheetDone[];\n  user_id?: string;\n  questionTypes: questionTypesStoreInterface;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  system: System;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n}\ninterface AnswersDetailsState {\n  loading: boolean;\n  loadingStatus: boolean;\n}\n\nexport class _AnswersDetails extends Component<\n  AnswersDetailsProps,\n  AnswersDetailsState\n> {\n  constructor(props: AnswersDetailsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingStatus: false,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setLoadingStatus = (status: boolean) => {\n    this.setState({ loadingStatus: status });\n  };\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (this.props.exam_id) {\n      if (this.props.course.courses === null) {\n        this.props.loadCourses(this.setLoading);\n      }\n      let check = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.course === this.props.exam_id.course &&\n          itm.period === this.props.exam_id.period &&\n          DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n      );\n      // Check if user exams loaded\n      if (\n        (this.props.candidateExam.user_exams_done.length === 0 ||\n          check === undefined) &&\n        this.props.allAnswers === undefined\n      ) {\n        this.props.loadExamsDone(\n          this.props.exam_id.period,\n          this.props.auth.user.user_id,\n          this.setLoadingStatus\n        );\n      }\n      if (check !== undefined) {\n        if (\n          this.props.candidateExam.user_exams_done.find(\n            (item) => item.exam_paper === check?.exam_paper\n          ) === undefined\n        ) {\n          this.props.requestUserAnswers(\n            check.exam_paper,\n            this.props.user_id === undefined\n              ? this.props.auth.user.user_id\n              : this.props.user_id,\n            this.setLoading\n          );\n        }\n      }\n    }\n  };\n  userAnswersTotalMarks = (user_answers: ExamAnswerSheetDone) => {\n    let total: number = 0;\n    for (let item of user_answers.user_answers) {\n      total += item.user_marks;\n    }\n    return total;\n  };\n  render() {\n    let user_exam_details: ExamAnswerSheetDone | undefined =\n      this.props.allAnswers === undefined\n        ? this.props.candidateExam.user_exams_done.find(\n            (itm) =>\n              itm.course === this.props.exam_id.course &&\n              itm.period === this.props.exam_id.period &&\n              DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n          )\n        : this.props.allAnswers.find(\n            (itm) =>\n              itm.course === this.props.exam_id.course &&\n              itm.period === this.props.exam_id.period &&\n              DATE(itm.exam_date) === DATE(this.props.exam_id.exam_date)\n          );\n    if (\n      this.state.loading === true ||\n      this.state.loadingStatus === true ||\n      this.props.course.courses === null\n    ) {\n      return (\n        <div className=\"my-6 rounded bg-white p-3\">\n          <Loading />\n        </div>\n      );\n    }\n    if (user_exam_details === undefined) {\n      return (\n        <div className=\"my-6 rounded bg-white p-3\">\n          <span className=\"text-4xl font-bold\">Exam details not found!</span>\n        </div>\n      );\n    }\n    return (\n      <div className=\"p-2 bg-gray-100\">\n        <div className=\"mb-5 -mt-5\">\n          {user_exam_details !== undefined && (\n            <div className=\"mt-5\">\n              <div className=\"px-3 mb-2 flex flex-row items-center gap-3\">\n                <div>\n                  <AiOutlineFileText className=\"text-5xl text-gray-500\" />\n                </div>\n                <div\n                  className=\"text-2xl font-extrabold\"\n                  dangerouslySetInnerHTML={{\n                    __html: \"Exam for \" + this.props.exam_id.course_name,\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white rounded-t mb-0 border-b\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam date:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: DATE(this.props.exam_id.exam_date),\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white mb-0 border-b\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam description:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.exam_id.discription,\n                  }}\n                ></div>\n              </div>\n              <div className=\" p-3 bg-white rounded-b mb-0\">\n                <div className=\"text-sm text-gray-500 font-bold\">\n                  Exam terms and conditions:\n                </div>\n                <div\n                  className=\"text-base font-bold\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.exam_id.termes,\n                  }}\n                ></div>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"text-2xl font-extrabold text-blue-600 px-2 mb-3\">\n          Exam answers & marks\n        </div>\n        {user_exam_details === undefined ? (\n          \"Not Found\"\n        ) : user_exam_details.user_answers.length === 0 ? (\n          <div>\n            <div className=\"p-5 rounded-lg bg-yellow-100 text-black text-xl mb-5 text-center border border-white shadow-lg animate__animated animate__shakeX\">\n              Exam answers not found, You did not submit the exam!\n            </div>\n          </div>\n        ) : (\n          user_exam_details.user_answers.map((item, i) => (\n            <div\n              key={i + 1}\n              className=\"bg-white hover:bg-white border border-white hover:border-blue-400 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast group mb-2\"\n            >\n              <div className=\"grid md:grid-cols-11 w-full\">\n                <div className=\"col-span-12 flex flex-row items-center gap-3\">\n                  <div\n                    key={i + 1}\n                    className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\"\n                  >\n                    {i + 1}\n                  </div>\n                  {user_exam_details &&\n                    user_exam_details.questions.find(\n                      (itm) => itm.question_id === item.question\n                    ) !== undefined && (\n                      <div className=\"text-sm w-full\">\n                        {user_exam_details.questions.find(\n                          (itm) => itm.question_id === item.question\n                        ) &&\n                        findQuestionType(\n                          user_exam_details.questions.find(\n                            (itm) => itm.question_id === item.question\n                          )!.type,\n                          this.props.questionTypes.questionTypes\n                        ) !== null &&\n                        findQuestionType(\n                          user_exam_details.questions.find(\n                            (itm) => itm.question_id === item.question\n                          )!.type,\n                          this.props.questionTypes.questionTypes\n                        ) === questionTypeElementsType.Embedded ? (\n                          EmbeddedQuestion(\n                            user_exam_details.questions.find(\n                              (itm) => itm.question_id === item.question\n                            )!,\n                            this.props.questionTypes.questionTypes,\n                            item.language as QuestionLanguage,\n                            [\n                              {\n                                question_id: item.question,\n                                status: true,\n                                answers: item.answers,\n                                language: item.language as QuestionLanguage,\n                              },\n                            ],\n                            () => {}\n                          )\n                        ) : (\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: user_exam_details.questions\n                                .find(\n                                  (itm) => itm.question_id === item.question\n                                )!\n                                .question.find(\n                                  (test) => test.language === item.language\n                                )!.description,\n                            }}\n                            className=\"font-bold text-gray-700 text-base\"\n                          ></div>\n                        )}\n                        {console.log(\n                          \"Test selected exam: \",\n                          item.answers,\n                          item.language\n                        )}\n                        <div className=\"text-blue-700 font-bold text-sm w-full\">\n                          {findQuestionType(\n                            user_exam_details.questions.find(\n                              (itm) => itm.question_id === item.question\n                            )!.type,\n                            this.props.questionTypes.questionTypes\n                          ) !== null &&\n                          findQuestionType(\n                            user_exam_details.questions.find(\n                              (itm) => itm.question_id === item.question\n                            )!.type,\n                            this.props.questionTypes.questionTypes\n                          ) === questionTypeElementsType.Embedded\n                            ? \"\"\n                            : \"Answer: \"}\n                          {this.props.questionTypes.questionTypes !== null &&\n                            user_exam_details.user_answers.find(\n                              (itm) => itm.question === item.question\n                            ) && (\n                              <div className=\"mb-2\">\n                                {findQuestionType(\n                                  user_exam_details.questions.find(\n                                    (itm) => itm.question_id === item.question\n                                  )!.type,\n                                  this.props.questionTypes.questionTypes\n                                ) &&\n                                findQuestionType(\n                                  user_exam_details.questions.find(\n                                    (itm) => itm.question_id === item.question\n                                  )!.type,\n                                  this.props.questionTypes.questionTypes\n                                ) === questionTypeElementsType.Hybrid ? (\n                                  <FindAnswerHybrid\n                                    selectedLanguage={\n                                      item.language as QuestionLanguage\n                                    }\n                                    questionTypes={this.props.questionTypes}\n                                    auth={this.props.auth}\n                                    candidateExam={this.props.candidateExam}\n                                    answersList={[\n                                      {\n                                        question_id: item.question,\n                                        status: true,\n                                        answers: item.answers,\n                                        language:\n                                          item.language as QuestionLanguage,\n                                      },\n                                    ]}\n                                    system={this.props.system}\n                                    setSelectedExamQuestion={() => {}}\n                                    submitQuestionAnswer={false}\n                                    loadQuestionTypes={\n                                      this.props.loadQuestionTypes\n                                    }\n                                    submitExam={() => {}}\n                                    selectedExam={\n                                      user_exam_details === undefined ||\n                                      this.props.course.courses === null\n                                        ? null\n                                        : this.props.course.courses.find(\n                                            (itm) =>\n                                              user_exam_details !== undefined &&\n                                              itm.course_id ===\n                                                user_exam_details.questions.find(\n                                                  (itm) =>\n                                                    itm.question_id ===\n                                                    item.question\n                                                )!.course\n                                          )!\n                                    }\n                                    setSubmitModal={(status: boolean) => {}}\n                                    wholeQuestion={\n                                      user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!\n                                    }\n                                  />\n                                ) : (\n                                  <FindAnswer\n                                    selectedLanguage={item.language}\n                                    question={{\n                                      is_deleted:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.is_deleted,\n                                      question_id: item.question,\n                                      course: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.course,\n                                      question:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.question,\n                                      type: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.type,\n                                      chapters:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.chapters,\n                                      customNumber:\n                                        user_exam_details.questions.find(\n                                          (itm) =>\n                                            itm.question_id === item.question\n                                        )!.customNumber,\n                                      marks: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.marks,\n                                      answers: user_exam_details.questions.find(\n                                        (itm) =>\n                                          itm.question_id === item.question\n                                      )!.answers,\n                                    }}\n                                    answersList={[\n                                      {\n                                        question_id: item.question,\n                                        status: true,\n                                        answers:\n                                          user_exam_details.user_answers.find(\n                                            (itm) =>\n                                              itm.question === item.question\n                                          )!.answers,\n                                        language:\n                                          item.language as QuestionLanguage,\n                                      },\n                                    ]}\n                                    questionTypes={\n                                      this.props.questionTypes.questionTypes\n                                    }\n                                    showCorrectAnswer={this.props.showAnswers}\n                                    onClick={() => {}}\n                                  />\n                                )}\n                              </div>\n                            )}\n                        </div>\n                      </div>\n                    )}\n                </div>\n              </div>\n              <div className=\"col-span-1 flex items-center justify-between\">\n                <div></div>\n\n                <div className=\"w-max flex flex-col items-end justify-center bg-blue-50 rounded-md px-3 py-1 group-hover:bg-blue-100\">\n                  <div className=\"text-sm font-semibold text-gray-700\">\n                    Marks\n                  </div>\n                  <div className=\"text-sm font-extrabold text-gray-900 -mt-1\">\n                    <span className=\"text-blue-500\">\n                      {item.user_marks.toFixed(\n                        user_exam_details &&\n                          item.user_marks ===\n                            user_exam_details.questions.find(\n                              (itm) => itm.question_id === item.question\n                            )?.marks\n                          ? 0\n                          : 2\n                      )}\n                    </span>{\" \"}\n                    /{\" \"}\n                    {user_exam_details &&\n                      user_exam_details.questions.find(\n                        (itm) => itm.question_id === item.question\n                      )?.marks}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n        <div className=\"flex flex-row items-center justify-between gap-3 mb-10\">\n          <div className=\"bg-blue-100 p-3 pr-3 text-blue-700 flex flex-col items-start justify-center rounded-lg border-2 border-white\">\n            <span className=\"text-gray-700\">Total marks percentage</span>\n            <span className=\"text-3xl font-extrabold\">\n              {user_exam_details &&\n                user_exam_details.total_marks.toFixed(\n                  user_exam_details.total_marks === 100 ||\n                    user_exam_details.total_marks === 0\n                    ? 0\n                    : 2\n                )}\n              %\n            </span>\n          </div>\n          <div>\n            <div className=\"bg-white rounded-lg p-3\">\n              <div className=\"text-gray-500 font-bold text-base text-right\">\n                Exam total marks\n              </div>\n              {user_exam_details !== undefined && (\n                <div className=\"font-extrabold text-3xl text-gray-900 text-right\">\n                  {this.userAnswersTotalMarks(user_exam_details).toFixed(\n                    this.userAnswersTotalMarks(user_exam_details) ===\n                      user_exam_details.exam_total_marks ||\n                      this.userAnswersTotalMarks(user_exam_details) === 0\n                      ? 0\n                      : 2\n                  )}{\" \"}\n                  / {user_exam_details.exam_total_marks}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  questionTypes,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    questionTypes: questionTypes,\n    system: system,\n    course: course,\n  };\n};\n\nexport const AnswersDetails = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  requestUserAnswers,\n  loadQuestionTypes,\n  loadCourses,\n})(_AnswersDetails);\n","import React, { useState } from \"react\";\nimport {\n  MdCheckCircle,\n  MdRadioButtonUnchecked,\n  MdSearch,\n} from \"react-icons/md\";\nimport Loading from \"../../components/Loading/Loading\";\nimport {\n  PlansInterface,\n  SessionPlanInterface,\n  SessionPlanTypeStatus,\n} from \"../../interfaces\";\nimport { DATE } from \"../../utils/functions\";\nimport searchData from \"../../utils/search\";\n\nexport const isPlansActive = (plans: PlansInterface[]): PlansInterface[] => {\n  let today = new Date();\n  let activePlans: PlansInterface[] = [];\n  for (let plan of plans) {\n    let startDate = new Date(plan.start_date);\n    let endDate = new Date(plan.end_date);\n    if (\n      startDate.getTime() <= today.getTime() &&\n      endDate.getTime() >= today.getTime() &&\n      plan.type_status === SessionPlanTypeStatus.OPEN\n    ) {\n      activePlans = [...activePlans, plan];\n    }\n  }\n  return activePlans;\n};\n\ninterface ChooseSessionProps {\n  allSession: SessionPlanInterface[] | null;\n  setSelectSession: (period: SessionPlanInterface | \"all\") => void;\n  currentSelected: SessionPlanInterface | \"all\";\n  chooseAll: boolean;\n}\n\nconst ChooseSession = (props: ChooseSessionProps) => {\n  const [selectedPlan, setSelectedPlan] = useState<SessionPlanInterface | null>(\n    null\n  );\n  const [search, setSearch] = useState<string>(\"\");\n  const getSearch = (\n    period: SessionPlanInterface[],\n    searched: string\n  ): SessionPlanInterface[] => {\n    return searchData(period, searched) as SessionPlanInterface[];\n  };\n\n  return (\n    <div className=\"\">\n      <div className=\"px-3\">\n        <input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setSearch(e.target.value)\n          }\n          type=\"text\"\n          className=\"py-3 px-4 w-full rounded border border-gray-400 mb-3\"\n          placeholder=\"Search by year, name\"\n          disabled={props.allSession === null || props.allSession.length === 0}\n        />\n      </div>\n\n      <div className=\"bg-gray-100 px-3 pt-3 pb-2 rounded-b\">\n        {props.allSession === null ? (\n          <Loading />\n        ) : props.allSession.length === 0 ? (\n          <div className=\"flex flex-col text-gray-400 items-center justify-center mb-2 bg-white py-4\">\n            <MdSearch className=\"text-6xl\" />\n            <div className=\"flex flex-col items-center justify-center\">\n              <span>No session found!</span>\n            </div>\n          </div>\n        ) : (\n          <section>\n            {props.chooseAll && (\n              <div\n                className={`rounded border ${\n                  props.currentSelected === \"all\"\n                    ? \"bg-blue-50 border-blue-300\"\n                    : \"bg-white border-white \"\n                } group hover:border-blue-500 px-2 py-2 mb-2 flex flex-col md:flex-row items-start md:items-center md:justify-between`}\n              >\n                <div className=\"flex flex-row items-center gap-3\">\n                  {props.currentSelected === \"all\" ? (\n                    <MdCheckCircle className={`text-blue-500 text-4xl`} />\n                  ) : (\n                    <MdRadioButtonUnchecked\n                      className={`text-gray-300 text-4xl`}\n                    />\n                  )}\n                  <div className=\"flex flex-col\">\n                    <div className={`text-gray-600 font-bold`}>All session</div>\n                  </div>\n                </div>\n                <div\n                  onClick={() => {\n                    props.setSelectSession(\"all\");\n                  }}\n                  className=\"bg-gray-50 group-hover:bg-blue-600 font-semibold text-gray-400 group-hover:text-white rounded px-3 py-2 cursor-pointer\"\n                >\n                  Select\n                </div>\n              </div>\n            )}\n            {getSearch(props.allSession, search).map((item, i) => (\n              <div\n                key={i + 1}\n                className={`rounded border ${\n                  props.currentSelected !== \"all\" &&\n                  props.currentSelected.session_plan_id === item.session_plan_id\n                    ? \"bg-blue-50 border-blue-300\"\n                    : \"bg-white border-white \"\n                } group hover:border-blue-500 px-2 py-2 mb-2`}\n              >\n                <div className=\"flex flex-col md:flex-row items-start md:items-center md:justify-between \">\n                  <div className=\"flex flex-row items-center gap-3\">\n                    {props.currentSelected !== \"all\" &&\n                    props.currentSelected.session_plan_id ===\n                      item.session_plan_id ? (\n                      <MdCheckCircle className={`text-blue-500 text-4xl`} />\n                    ) : (\n                      <MdRadioButtonUnchecked\n                        className={`text-gray-300 text-4xl`}\n                      />\n                    )}\n                    <div className=\"flex flex-col\">\n                      <div\n                        className={`${\n                          props.currentSelected !== \"all\" &&\n                          props.currentSelected.session_plan_id ===\n                            item.session_plan_id\n                            ? \"text-blue-600\"\n                            : \"text-gray-600\"\n                        } font-bold`}\n                      >\n                        {item.session_plan_name}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        <span>Status: </span>\n                        <span\n                          className={`${\n                            item.is_active === true\n                              ? \"text-gray-900 font-bold underline\"\n                              : \"text-gray-500 italic\"\n                          }`}\n                        >\n                          {item.is_active === true ? \"Active\" : \"Expired\"}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row items-center gap-2\">\n                    {(selectedPlan === null ||\n                      selectedPlan.session_plan_id !==\n                        item.session_plan_id) && (\n                      <div\n                        onClick={() => setSelectedPlan(item)}\n                        className=\"bg-gray-50 group-hover:bg-blue-100 font-semibold text-gray-400 group-hover:text-blue-600 rounded px-3 py-2 cursor-pointer\"\n                      >\n                        Details\n                      </div>\n                    )}\n                    <div\n                      onClick={() => {\n                        props.setSelectSession(item);\n                      }}\n                      className=\"bg-gray-50 group-hover:bg-blue-600 font-semibold text-gray-400 group-hover:text-white rounded px-3 py-2 cursor-pointer\"\n                    >\n                      Select\n                    </div>\n                    {selectedPlan !== null &&\n                      selectedPlan.session_plan_id === item.session_plan_id && (\n                        <div\n                          onClick={() => setSelectedPlan(null)}\n                          className=\"bg-red-100 group-hover:bg-red-200 font-semibold text-red-600 group-hover:text-red-800 rounded px-3 py-2 cursor-pointer\"\n                        >\n                          Close\n                        </div>\n                      )}\n                  </div>\n                </div>\n                {selectedPlan !== null &&\n                  selectedPlan.session_plan_id === item.session_plan_id && (\n                    <div className=\"bg-white rounded border border-blue-50 mt-2 animate__animated animate__fadeIn\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-blue-50\">\n                          <tr className=\"text-left\">\n                            <th className=\"px-3 py-3\">#</th>\n                            <th>Plan</th>\n                            <th>Start date</th>\n                            <th>Ending date</th>\n                            <th>Status</th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"text-sm\">\n                          {selectedPlan !== null &&\n                            selectedPlan.session_plan_id ===\n                              item.session_plan_id &&\n                            selectedPlan.plans.length > 0 &&\n                            item.plans.map((plan, i) => (\n                              <tr\n                                key={i + 1}\n                                className={`${\n                                  isPlansActive(item.plans).find(\n                                    (itm) => itm.type_key === plan.type_key\n                                  ) !== undefined\n                                    ? \"bg-blue-100 text-blue-600 font-bold\"\n                                    : \"\"\n                                } text-left border-b border-blue-50`}\n                              >\n                                <td className=\"px-3 py-1\">{i + 1}</td>\n                                <td>{plan.type_title}</td>\n                                <td>{DATE(plan.start_date, \"DD/MM/YYYY\")}</td>\n                                <td>{DATE(plan.end_date, \"DD/MM/YYYY\")}</td>\n                                <td>{plan.type_status}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n              </div>\n            ))}\n          </section>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ChooseSession);\n","import React from \"react\";\nimport { AnswersDetails } from \"../../../components/AnswersDetails/AnswersDetails\";\nimport {\n  claimApplicationsPositionInterface,\n  ClaimExamResultsDetails,\n} from \"../../../interfaces\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { UserInterface } from \"../../../shared/interfaces\";\nimport { DATE } from \"../../../utils/functions\";\nimport { ExamDoneDetailsAnswers } from \"../../CandidateExams/CandidateExams\";\nimport { PositionRequirementTableInterface } from \"../../Positions/ViewPosition\";\n\nexport const FC_ApplicationPositionDistinctCategory = (\n  thisPosition: claimApplicationsPositionInterface,\n  documentCategories: DocumentReducerInterface\n): {\n  PositionsTemp: PositionRequirementTableInterface[];\n  DistinctCategoriesTemp: PositionRequirementTableInterface[];\n  DistinctSubCategoriesTemp: PositionRequirementTableInterface[];\n} => {\n  let PositionsTemp: PositionRequirementTableInterface[] = [];\n  let DistinctCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctCategoriesIds: string[] = [];\n  let DistinctSubCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctSubCategoriesIds: string[] = [];\n  // GET REQUIREMENTS OF THE CURRENT POSITION ====================\n  let requirements = thisPosition.requirements;\n  // LOOP THROUGH CURRENT POSITION REQUIREMENTS ==========================\n  for (let req in requirements) {\n    let thisRequirements = requirements[req];\n    // GET DOC CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisCategory = documentCategories.documentCategory\n      ? documentCategories.documentCategory.find(\n          (item) =>\n            item.user_detail_category_id ===\n            thisRequirements.category.user_detail_category_id\n        ) && {\n          title: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.category.user_detail_category_id\n          )!.title,\n          user_detail_category_id: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.category.user_detail_category_id\n          )!.user_detail_category_id,\n        }\n      : {\n          title: \"\",\n          user_detail_category_id:\n            thisRequirements.category.user_detail_category_id,\n        };\n    // GET DOC SUB CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisSubCategory = documentCategories.documentSubCategory\n      ? documentCategories.documentSubCategory.find(\n          (item) =>\n            item.user_detail_subcategory_id ===\n            thisRequirements.subcategory.user_detail_subcategory_id\n        )\n        ? {\n            title: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.subcategory.user_detail_subcategory_id\n            )!.title,\n            user_detail_subcategory_id:\n              documentCategories.documentSubCategory.find(\n                (item) =>\n                  item.user_detail_subcategory_id ===\n                  thisRequirements.subcategory.user_detail_subcategory_id\n              )!.user_detail_subcategory_id,\n            category_id: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.subcategory.user_detail_subcategory_id\n            )!.category_id,\n          }\n        : {\n            title: \"\",\n            user_detail_subcategory_id:\n              thisRequirements.subcategory.user_detail_subcategory_id,\n            category_id: \"\",\n          }\n      : {\n          title: \"\",\n          user_detail_subcategory_id:\n            thisRequirements.subcategory.user_detail_subcategory_id,\n          category_id: \"\",\n        };\n    // LOOP THROUGH FIELDS OF THE CURRENT POSITION REQUIREMENTS ==========================\n    if (thisCategory) {\n      for (let field in thisRequirements.position_requirement) {\n        // GET FIELDS OF THE CURRENT POSITION REQUIREMENTS ====================\n        let thisField = documentCategories.documentFields\n          ? documentCategories.documentFields.find(\n              (item) =>\n                item._id === thisRequirements.position_requirement[field]._id\n            )\n            ? {\n                title: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]._id\n                )!.title,\n                _id: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]._id\n                )!._id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n            : {\n                title: \"\",\n                _id: thisRequirements.subcategory.user_detail_subcategory_id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n          : {\n              title: \"\",\n              _id: thisRequirements.subcategory.user_detail_subcategory_id,\n              required: thisRequirements.position_requirement[field].required,\n            };\n        // ADD CURRENT CATEGORY, SUB CATEGORY & FIELDS OF THE CURRENT POSITION REQUIREMENTS IN POSITIONS TEMP ====================\n        PositionsTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: thisField.title,\n          field_id: thisField._id,\n          required: thisField.required,\n        });\n      }\n\n      // ADD CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctCategoriesIds.includes(thisCategory.user_detail_category_id)\n      ) {\n        DistinctCategoriesIds.push(thisCategory.user_detail_category_id);\n        DistinctCategoriesTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: \"\",\n          subcategory_title: \"\",\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n\n      // ADD SUB CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctSubCategoriesIds.includes(\n          thisSubCategory.user_detail_subcategory_id\n        )\n      ) {\n        DistinctSubCategoriesIds.push(\n          thisSubCategory.user_detail_subcategory_id\n        );\n        DistinctSubCategoriesTemp.push({\n          category_id: thisSubCategory.category_id,\n          category_title: \"\",\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n    }\n  }\n  // DistinctCategoriesIds.;\n\n  return { PositionsTemp, DistinctCategoriesTemp, DistinctSubCategoriesTemp };\n};\n\nexport const showEvaluator = (\n  userList: UserInterface[],\n  user_id: string\n): string => {\n  let result: string = \"\";\n  if (user_id === \"system\") {\n    result = \"System\";\n  } else {\n    // let user = getUserDocuments(userList, user_id);\n    // let user = undefined;\n    // if (user) {\n    //   result = user.user.user_info.fname + \" \" + user.user.user_info.lname;\n    // }\n  }\n  return result;\n};\n\nexport const claimShowAnswer = (\n  answer: ClaimExamResultsDetails,\n  course_name: string\n): ExamDoneDetailsAnswers => {\n  const result: ExamDoneDetailsAnswers = {\n    course: answer.course,\n    course_name: course_name,\n    discription: answer.discription,\n    termes: answer.termes,\n    rules: {\n      right_click_enabled: false,\n      copy_enabled: false,\n      paste_enabled: false,\n      stop_candidate_when_comeback: false,\n      allow_to_leave_browser: false,\n    },\n    period: answer.period,\n    exam_date: answer.exam_date,\n    exam_id: answer.exam_id,\n  };\n  return result;\n};\n\ntype ExaminationFormViewProps = {\n  thisAnswerSheet: ClaimExamResultsDetails;\n  setViewThisFile: (value: string) => void;\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n};\n\nconst ExaminationFormView: React.FC<ExaminationFormViewProps> = (props) => {\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-gray-100 px-4 py-1 animate__animated animate__fadeIn\">\n        <div className=\"flex flex-col mb-2\">\n          {/* APPLICATION TITLE ========== */}\n          <section className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisAnswerSheet.course_name}\n            </span>\n            <button\n              type=\"button\"\n              className=\"btn btn-blue\"\n              onClick={() => {\n                props.setChooseClaimFile(false);\n                props.setClaimFileId(props.thisAnswerSheet.answer_sheet_id);\n                props.setViewThisFile(\"\");\n              }}\n            >\n              Choose\n            </button>\n          </section>\n\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisAnswerSheet.createdAt)}\n            </span>\n          </div>\n        </div>\n        {/* QUESTIONS ----------------------------- */}\n        <AnswersDetails\n          showAnswers={false}\n          exam_id={claimShowAnswer(\n            props.thisAnswerSheet,\n            props.thisAnswerSheet.course_name\n          )}\n        />\n        {/* END QUESTIONS ----------------------------- */}\n      </div>\n    </section>\n  );\n};\n\nexport default React.memo(ExaminationFormView);\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { ApplicationSession } from \"../../../actions\";\nimport {\n  course,\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimExamResultsDetails,\n} from \"../../../interfaces\";\nimport { StoreState } from \"../../../reducers\";\nimport { search } from \"../../../utils/functions\";\nimport { isClaimAllowed } from \"./ClaimForm\";\n\nconst getFailedExam = (\n  allData: ClaimExamResultsDetails[],\n  allCourses: course[]\n): ClaimExamResultsDetails[] => {\n  let result: ClaimExamResultsDetails[] = [];\n  allData.forEach((element) => {\n    if (element.total_marks < 100) {\n      let data = element;\n      data.course_name = getCourseById(allCourses, element.course)\n        ? getCourseById(allCourses, element.course)!.course_name\n        : \"Unknown exam\";\n      result.push(data);\n    }\n  });\n\n  return result;\n};\n\nexport const getCourseById = (courses: course[], course_id: string) => {\n  return courses.find((item) => item.course_id === course_id);\n};\n\nexport const getCourseIdBySheetId = (\n  allData: ClaimExamResultsDetails[],\n  sheet_id: string\n) => {\n  return allData.find((item) => item.answer_sheet_id === sheet_id);\n};\n\nexport const searchApplication = (\n  objList: claimApplicationsInterface[],\n  text: any\n): claimApplicationsInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (prop === \"position\") {\n        flag =\n          product.position.position_title\n            .toString()\n            .toLowerCase()\n            .indexOf(text.toLowerCase()) > -1;\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n  // return objList.filter((product) =>\n  //   product.position.position_title.includes(text)\n  // );\n};\n\ntype FormExamListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  candidateAnswers: ClaimExamResultsDetails[];\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n\n  // REDUX //////////////////////\n  courses: course[] | null;\n};\n\nconst FormExamList: React.FC<FormExamListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            !props.courses ||\n            getFailedExam(props.candidateAnswers, props.courses).filter(\n              (item) =>\n                isClaimAllowed(\n                  props.myClaims,\n                  props.activeSession.session_plan_id,\n                  item.answer_sheet_id\n                )\n            ).length > 0\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}{\" \"}\n      {/* searchData(props.candidateAnswers, searchInput) */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {props.courses &&\n        getFailedExam(props.candidateAnswers, props.courses).filter((item) =>\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            item.answer_sheet_id\n          )\n        ).length > 0 ? (\n          search(\n            getFailedExam(props.candidateAnswers, props.courses).filter(\n              (item) =>\n                isClaimAllowed(\n                  props.myClaims,\n                  props.activeSession.session_plan_id,\n                  item.answer_sheet_id\n                )\n            ),\n            searchInput\n          ).map((item: ClaimExamResultsDetails, index: number) => (\n            <div\n              className={`group flex items-center justify-between my-1 hover:bg-gray-100 ${\n                props.claimFileId === item.answer_sheet_id &&\n                \"bg-blue-50 border-l-4 border-blue-500\"\n              }`}\n              key={index + item.answer_sheet_id}\n            >\n              <div\n                className=\"p-1 w-full mr-2 cursor-pointer\"\n                onClick={() => {\n                  props.setChooseClaimFile(false);\n                  props.setClaimFileId(item.answer_sheet_id);\n                }}\n              >\n                <p className=\"text-base font-medium text-black\">\n                  {item.course_name}\n                </p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                onClick={() => {\n                  props.setViewThisFile(item.answer_sheet_id);\n                }}\n              >\n                View\n              </button>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No failed exam available\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  course,\n}: StoreState): {\n  courses: course[] | null;\n} => {\n  return {\n    courses: course.courses,\n  };\n};\nexport default React.memo(connect(mapStateToProps, {})(FormExamList));\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  getMyClaims,\n  createClaim,\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  PushPopupAlert,\n  DocumentClaimUser,\n  getMyAnswers,\n  getClaimReasons,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n} from \"../../actions\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../actions/document\";\nimport ApplicationFormView from \"../../containers/Claimings/Candidate/ApplicationFormView\";\nimport ChooseReason from \"../../containers/Claimings/Candidate/ChooseReason\";\nimport { ClaimGetDocTitle } from \"../../containers/Claimings/Candidate/ClaimForm\";\nimport DocFormView from \"../../containers/Claimings/Candidate/DocFormView\";\nimport FormApplicationList from \"../../containers/Claimings/Candidate/FormApplicationList\";\nimport FormDocumentList from \"../../containers/Claimings/Candidate/FormDocumentList\";\nimport {\n  PlansTypeKeys,\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  claimReasonInterface,\n} from \"../../interfaces\";\nimport {\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../../interfaces/exam\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { ClaimingReducerType } from \"../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { UserInterface } from \"../../shared/interfaces\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText } from \"../../utils/errors\";\nimport { DATE } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../Alert/Popup\";\nimport Loading from \"../Loading/Loading\";\n\nconst getCourseIdBySheetId = (\n  allData: ExamAnswerSheetDone[],\n  sheet_id: string\n) => {\n  return allData.find((item) => item.answer_sheet_id === sheet_id);\n};\n\ntype ClaimFormProps = {\n  claim_type: PlansTypeKeys;\n  file_id: string;\n  setFormState: (value: boolean, response?: boolean) => void;\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  candidateExam: candidateExamStoreInterface;\n  createClaim: Function;\n  GetClaimingTypes: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  getMyClaims: Function;\n  getMyAnswers: Function;\n  getClaimReasons: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n\n  // DEFAULT DATA ==========\n  // candidateDocuments?: DocumentClaimUser[];\n  // candidateAnswers?: ClaimExamResultsDetails[];\n  // candidateApplications?: claimApplicationsInterface[];\n};\n\ntype ClaimFormState = {\n  loading: boolean;\n  loadingForm: boolean;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  thisClaimType: PlansTypeKeys | null;\n  thisClaimTypeId: string;\n  claimComment: string;\n  claimFileId: string;\n  chooseClaimFile: boolean;\n  chooseClaimReason: boolean;\n  claimReason: claimReasonInterface | null;\n  viewThisFile: string;\n  formType: \"DEFAULT\" | \"PROPS\";\n  alertError: string | null;\n};\n\nexport class ClaimFormComponent extends Component<\n  ClaimFormProps,\n  ClaimFormState\n> {\n  constructor(props: ClaimFormProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingForm: false,\n      formError: null,\n      thisClaimType: null,\n      thisClaimTypeId: \"\",\n      claimComment: \"\",\n      claimFileId: \"\",\n      chooseClaimFile: false,\n      viewThisFile: \"\",\n      formType: \"DEFAULT\",\n      alertError: null,\n      chooseClaimReason: false,\n      claimReason: null,\n    };\n  }\n\n  // GENERATE SET STATES FUNCTIONS\n  setLoading = (state: boolean) => {\n    this.setState({ loading: state });\n  };\n\n  setLoadingForm = (state: boolean) => {\n    this.setState({ loadingForm: state });\n  };\n\n  setFormError = (\n    data: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: data });\n  };\n\n  setAlertError = (data: string | null) => {\n    this.setState({ alertError: data });\n  };\n\n  setClaimFileId = (data: string) => {\n    this.setState({ claimFileId: data });\n  };\n\n  setViewThisFile = (data: string) => {\n    this.setState({ viewThisFile: data });\n  };\n\n  setChooseClaimFile = (data: boolean) => {\n    this.setState({ chooseClaimFile: data });\n  };\n\n  setClaimComment = (data: string) => {\n    this.setState({ claimComment: data });\n  };\n\n  setChooseClaimReason = (value: boolean) => {\n    this.setState({ chooseClaimReason: value });\n  };\n\n  setClaimReason = (value: claimReasonInterface | null) => {\n    this.setState({ claimReason: value });\n  };\n\n  // CHECK IF PASSED ID IS VALID\n  isDocumentIdValid = (\n    documents: DocumentClaimUser[],\n    doc_id: string\n  ): {\n    status: boolean;\n    msg: string;\n    alert: PopupAlertTheme;\n  } => {\n    let doc = documents.find((item) => item.doc_id === doc_id);\n    if (doc) {\n      // CHECK IF DOCUMENT HAS REJECTED STATUS\n      if (doc.validated_by.validation_status !== \"rejected\") {\n        return {\n          status: false,\n          msg: \"Only rejected document are allowed for claim\",\n          alert: PopupAlertTheme.info,\n        };\n      }\n      return { status: true, msg: \"\", alert: PopupAlertTheme.success };\n    } else {\n      return {\n        status: false,\n        msg: \"Invalid document id\",\n        alert: PopupAlertTheme.warning,\n      };\n    }\n  };\n\n  isApplicationIdValid = (\n    applications: GetApplicationsAPI[],\n    app_id: string\n  ): {\n    status: boolean;\n    msg: string;\n    alert: PopupAlertTheme;\n  } => {\n    const app = applications.find((item) => item.application_id === app_id);\n    if (app) {\n      // CHECK IF DOCUMENT HAS REJECTED STATUS\n      if (app.application_status !== ApplicationStates.Rejected) {\n        return {\n          status: false,\n          msg: \"Only rejected application are allowed for claim\",\n          alert: PopupAlertTheme.info,\n        };\n      }\n      // CHECK IF DOCUMENT HAS ALREADY CLAIMED ON\n      return { status: true, msg: \"\", alert: PopupAlertTheme.info };\n    } else {\n      return {\n        status: false,\n        msg: \"Invalid application id\",\n        alert: PopupAlertTheme.warning,\n      };\n    }\n  };\n\n  isExamIdValid = (\n    exams: ExamAnswerSheetDone[],\n    exam_id: string\n  ): {\n    status: boolean;\n    msg: string;\n    alert: PopupAlertTheme;\n  } => {\n    const exam = exams.find((item) => item.answer_sheet_id === exam_id);\n    if (exam) {\n      // CHECK IF DOCUMENT HAS REJECTED STATUS\n      if (exam.total_marks === 100) {\n        return {\n          status: false,\n          msg: \"You can't claim on exam which you have 100%\",\n          alert: PopupAlertTheme.info,\n        };\n      }\n\n      return { status: true, msg: \"\", alert: PopupAlertTheme.info };\n    } else {\n      return {\n        status: false,\n        msg: \"Invalid answer sheet id\",\n        alert: PopupAlertTheme.warning,\n      };\n    }\n    // return {\n    //   status: false,\n    //   msg: \"No Application, please try again!\",\n    //   alert: PopupAlertTheme.info,\n    // };\n  };\n\n  componentDidMount = () => {\n    if (this.props.auth.application_session === null) {\n      this.props.PushPopupAlert({\n        title: \"No session active session\",\n        theme: PopupAlertTheme.danger,\n      });\n      this.props.setFormState(false);\n      this.setState({\n        claimFileId: \"\",\n        thisClaimType: null,\n        thisClaimTypeId: \"\",\n        claimComment: \"\",\n        chooseClaimFile: false,\n        formType: \"DEFAULT\",\n        viewThisFile: \"\",\n        formError: null,\n      });\n    } else {\n      if (\n        this.props.documentReducer.documentCategory === null &&\n        this.props.claim_type === PlansTypeKeys.DOCUMENT_VALIDATION\n      ) {\n        this.props.getDocumentCategory();\n      }\n      if (\n        this.props.documentReducer.documentSubCategory === null &&\n        this.props.claim_type === PlansTypeKeys.DOCUMENT_VALIDATION\n      ) {\n        this.props.getDocumentSubCategory();\n      }\n      if (\n        this.props.documentReducer.documentFields === null &&\n        this.props.claim_type === PlansTypeKeys.DOCUMENT_VALIDATION\n      ) {\n        this.props.getDocumentFields();\n      }\n      if (\n        this.props.candidateApplications.candidate_applications !== null &&\n        this.props.claim_type === PlansTypeKeys.APPLICATION\n      )\n        this.setLoading(false);\n\n      if (\n        (this.props.claiming.candidateDocuments === null ||\n          this.props.claiming.candidateDocuments.length !==\n            this.props.auth.documents.length) &&\n        this.props.claim_type === PlansTypeKeys.DOCUMENT_VALIDATION\n      ) {\n        this.props.getMyRejectedDocuments(\n          (status: boolean, msg: string, data?: DocumentClaimUser[]) => {\n            this.setLoading(status);\n            if (!status) {\n              if (msg.length > 0) {\n                this.props.PushPopupAlert({\n                  title: msg,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n              if (data) {\n                // PROPS VALIDATION PROCESS ###############\n                if (\n                  this.props.claim_type &&\n                  this.props.file_id &&\n                  this.state.formType === \"DEFAULT\"\n                ) {\n                  if (\n                    this.props.claim_type === PlansTypeKeys.DOCUMENT_VALIDATION\n                  ) {\n                    let _isDocumentIdValid = this.isDocumentIdValid(\n                      data,\n                      this.props.file_id\n                    );\n                    if (!_isDocumentIdValid.status) {\n                      this.props.PushPopupAlert({\n                        title: _isDocumentIdValid.msg,\n                        theme: _isDocumentIdValid.alert,\n                      });\n                      // setAlertError(_isDocumentIdValid.msg);\n                      this.props.setFormState(false);\n                    } else {\n                      this.setState({\n                        thisClaimType: this.props.claim_type,\n                        claimFileId: this.props.file_id,\n                        formType: \"PROPS\",\n                      });\n                    }\n                  }\n                }\n              }\n            }\n          }\n        );\n      } else this.setLoading(false);\n\n      if (this.props.claim_type === PlansTypeKeys.EXAMINATION)\n        this.setLoading(false);\n\n      if (this.props.claiming.claimReasons === null) {\n        this.props.getClaimReasons((status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length > 0) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        });\n      }\n\n      if (this.props.claiming.myClaims === null) {\n        this.props.getMyClaims(\n          this.props.auth.user.user_id,\n          this.props.auth.application_session.session_plan_id,\n          (status: boolean, msg: string) => {\n            this.setLoading(status);\n            if (status === false && msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        );\n      } else this.setLoading(false);\n\n      // PROPS VALIDATION PROCESS ###############\n      if (\n        !isEmptyOrSpaces(this.props.claim_type) &&\n        !isEmptyOrSpaces(this.props.file_id) &&\n        this.state.formType === \"DEFAULT\"\n      ) {\n        this.setState({ thisClaimType: this.props.claim_type });\n        if (\n          this.props.claim_type === PlansTypeKeys.DOCUMENT_VALIDATION &&\n          this.props.claiming.candidateDocuments\n        ) {\n          let _isDocumentIdValid = this.isDocumentIdValid(\n            this.props.claiming.candidateDocuments,\n            this.props.file_id\n          );\n          if (!_isDocumentIdValid.status) {\n            this.props.PushPopupAlert({\n              title: _isDocumentIdValid.msg,\n              theme: _isDocumentIdValid.alert,\n            });\n            // setAlertError(_isDocumentIdValid.msg);\n            this.props.setFormState(false);\n          } else {\n            this.setState({\n              thisClaimType: this.props.claim_type,\n              claimFileId: this.props.file_id,\n              formType: \"PROPS\",\n            });\n          }\n        }\n        if (\n          this.props.claim_type === PlansTypeKeys.APPLICATION &&\n          this.props.candidateApplications.candidate_applications\n        ) {\n          let _isApplicationIdValid = this.isApplicationIdValid(\n            this.props.candidateApplications.candidate_applications,\n            this.props.file_id\n          );\n          if (!_isApplicationIdValid.status) {\n            this.props.PushPopupAlert({\n              title: _isApplicationIdValid.msg,\n              theme: _isApplicationIdValid.alert,\n            });\n            this.props.setFormState(false);\n          } else {\n            this.setState({\n              thisClaimType: this.props.claim_type,\n              claimFileId: this.props.file_id,\n              formType: \"PROPS\",\n            });\n          }\n        }\n\n        if (\n          this.props.claim_type === PlansTypeKeys.EXAMINATION &&\n          this.props.candidateExam.user_exams_done\n        ) {\n          let _isExamIdValid = this.isExamIdValid(\n            this.props.candidateExam.user_exams_done,\n            this.props.file_id\n          );\n          if (!_isExamIdValid.status) {\n            this.props.PushPopupAlert({\n              title: _isExamIdValid.msg,\n              theme: _isExamIdValid.alert,\n            });\n            this.props.setFormState(false);\n          } else {\n            this.setState({\n              thisClaimType: this.props.claim_type,\n              claimFileId: this.props.file_id,\n              formType: \"PROPS\",\n            });\n          }\n        }\n      }\n    }\n  };\n\n  getDocumentById = (\n    documents: DocumentClaimUser[],\n    doc_id: string\n  ): DocumentClaimUser => {\n    return documents.filter((item) => item.doc_id === doc_id)[0];\n  };\n\n  getApplicationById = (\n    applications: GetApplicationsAPI[],\n    application_id: string\n  ): claimApplicationsInterface | undefined => {\n    let result: claimApplicationsInterface | undefined = undefined;\n    let thisApplication = applications.find(\n      (item) => item.application_id === application_id\n    );\n\n    if (thisApplication)\n      result = {\n        application_id: thisApplication.application_id,\n        application_period: thisApplication.application_session.session_plan_id,\n        createdAt: thisApplication.createdAt,\n        exams: thisApplication.exams,\n        position: thisApplication.position,\n        application_status:\n          thisApplication.application_status as ApplicationStates,\n        updatedAt: thisApplication.updatedAt,\n        user_id: thisApplication.user_id,\n        application_history: thisApplication.application_history,\n        application_session: thisApplication.application_session,\n        override_by: {\n          application_status: thisApplication.override_by.application_status,\n          comment: thisApplication.override_by.comment,\n          date: thisApplication.override_by.date,\n          user_id: thisApplication.override_by.user_id,\n        },\n      };\n\n    return result;\n  };\n\n  getValidation = (\n    thisId: string\n  ): {\n    old_reason: string;\n    old_status: string;\n    old_evaluated_by: string;\n  } => {\n    let result: {\n      old_reason: string;\n      old_status: string;\n      old_evaluated_by: string;\n    } = { old_reason: \"\", old_status: \"\", old_evaluated_by: \"\" };\n\n    if (\n      this.state.thisClaimType === PlansTypeKeys.DOCUMENT_VALIDATION &&\n      this.props.claiming.candidateDocuments\n    ) {\n      result = {\n        old_reason: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.comment,\n        old_status: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.validation_status,\n        old_evaluated_by: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.user_id,\n      };\n    } else if (\n      this.state.thisClaimType === PlansTypeKeys.APPLICATION &&\n      this.props.candidateApplications.candidate_applications &&\n      this.getApplicationById(\n        this.props.candidateApplications.candidate_applications,\n        thisId\n      )\n    ) {\n      result = {\n        old_reason: this.getApplicationById(\n          this.props.candidateApplications.candidate_applications,\n          thisId\n        )!.override_by.comment,\n        old_status: this.getApplicationById(\n          this.props.candidateApplications.candidate_applications,\n          thisId\n        )!.override_by.application_status,\n        old_evaluated_by: this.getApplicationById(\n          this.props.candidateApplications.candidate_applications,\n          thisId\n        )!.override_by.user_id,\n      };\n    }\n\n    return result;\n  };\n\n  loadUserById = async (user_id: string, callback: Function) => {\n    if (isEmptyOrSpaces(user_id)) {\n      return this.props.PushPopupAlert({\n        title: \"No user id provided\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    try {\n      setAxiosToken();\n      const res = await axios.get<UserInterface>(\n        `${API.AUTH}/users/${user_id}`\n      );\n      console.log(\"====================================\");\n      console.log({ loadUserById: res });\n      console.log(\"====================================\");\n      if (res) {\n        callback(res.data);\n      }\n    } catch (error) {\n      console.error({ error });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  getClaimTitle = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    // title from document\n    if (\n      claimType === PlansTypeKeys.DOCUMENT_VALIDATION &&\n      this.props.claiming.candidateDocuments\n    ) {\n      result = ClaimGetDocTitle(\n        this.props.documentReducer,\n        this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          this.state.claimFileId\n        )\n      ).main;\n    }\n    // title from application\n    if (\n      claimType === PlansTypeKeys.APPLICATION &&\n      this.props.candidateApplications.candidate_applications &&\n      this.getApplicationById(\n        this.props.candidateApplications.candidate_applications,\n        this.state.claimFileId\n      )\n    ) {\n      result = this.getApplicationById(\n        this.props.candidateApplications.candidate_applications,\n        this.state.claimFileId\n      )!.position.position_title;\n    }\n    // title from examination\n    if (\n      claimType === PlansTypeKeys.EXAMINATION &&\n      getCourseIdBySheetId(\n        this.props.candidateExam.user_exams_done,\n        this.state.claimFileId\n      )\n    ) {\n      result = getCourseIdBySheetId(\n        this.props.candidateExam.user_exams_done,\n        this.state.claimFileId\n      )!.course;\n    }\n    // if (\n    //   claimType === PlansTypeKeys.PLACEMENT_TRANSFER &&\n    //   this.state.myPlacement\n    // ) {\n    //   result = \"Placed on \" + this.state.myPlacement.placed.school.school_name;\n    // }\n\n    return result;\n  };\n\n  cleanToClose = () => {\n    this.props.setFormState(false);\n    this.setState({\n      claimFileId: \"\",\n      thisClaimType: null,\n      thisClaimTypeId: \"\",\n      claimComment: \"\",\n      chooseClaimFile: false,\n      formType: \"DEFAULT\",\n      viewThisFile: \"\",\n      formError: null,\n    });\n  };\n\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!this.state.thisClaimType) {\n      return this.setFormError({\n        element: \"claim_type\",\n        msg: \"Claim type is required!\",\n      });\n    }\n    if (isEmptyOrSpaces(this.state.claimFileId)) {\n      return this.setFormError({\n        element: \"claim_file\",\n        msg: `Please select ${this.state.thisClaimType.toLocaleLowerCase()} you are claiming on!`,\n      });\n    }\n\n    if (!this.state.claimReason) {\n      return this.setFormError({\n        element: \"claim_reason\",\n        msg: `Please select the reason of your claim!`,\n      });\n    }\n\n    if (isEmptyOrSpaces(this.state.claimComment)) {\n      return this.setFormError({\n        element: \"claim_comment\",\n        msg: `Claim comment is required!`,\n      });\n    }\n\n    if (!this.props.auth.application_session) {\n      return this.setAlertError(`No active claiming session is available!`);\n    }\n    let old_evaluator_email: string = \"info@system.com\";\n    let old_evaluator_name: string = \"System\";\n    let evaluator_email: string = \"\";\n    let evaluator_name: string = \"\";\n    let title: string = this.getClaimTitle(this.state.thisClaimType);\n\n    if (\n      this.state.thisClaimType !== PlansTypeKeys.EXAMINATION &&\n      this.getValidation(this.state.claimFileId).old_evaluated_by !== \"system\"\n    ) {\n      await this.loadUserById(\n        this.getValidation(this.state.claimFileId).old_evaluated_by,\n        (data: UserInterface) => {\n          old_evaluator_email = data.email;\n          old_evaluator_name =\n            data.user_info.fname + \" \" + data.user_info.lname;\n        }\n      );\n    }\n    this.setLoadingForm(true);\n    try {\n      setAxiosToken();\n      const res = await axios.post<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/create`,\n        {\n          claiming_on_id: this.state.claimFileId,\n          type_key: this.state.thisClaimType,\n          user: this.props.auth.user.user_id,\n          period_id: this.props.auth.application_session.session_plan_id,\n          default_claim_resaons: this.state.claimReason.id,\n          reason: this.state.claimComment,\n          // old_reason: this.getValidation(this.state.claimFileId).old_reason,\n          // old_status: this.getValidation(this.state.claimFileId).old_status,\n          // old_evaluated_by: this.getValidation(this.state.claimFileId)\n          //   .old_evaluated_by,\n          old_reason:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"System\"\n              : this.getValidation(this.state.claimFileId).old_reason,\n          old_status:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"Failed\"\n              : this.getValidation(this.state.claimFileId).old_status,\n          old_evaluated_by:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"\"\n              : this.getValidation(this.state.claimFileId).old_evaluated_by,\n          old_evaluator_email,\n          old_evaluator_name,\n          evaluator_email,\n          evaluator_name,\n          title,\n        }\n      );\n      console.log(\"====================================\");\n      console.log({ createClaim: res.data });\n      console.log(\"====================================\");\n      if (res.status === 201 || res.status === 200) {\n        this.props.createClaim(res.data);\n        this.props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        this.cleanToClose();\n        this.props.setFormState(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.props.setFormState(false);\n    this.setLoadingForm(false);\n  };\n\n  displayClaimType = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    switch (claimType) {\n      case PlansTypeKeys.APPLICATION:\n        result = \"application\";\n        break;\n      case PlansTypeKeys.DOCUMENT_VALIDATION:\n        result = \"document\";\n        break;\n      case PlansTypeKeys.EXAMINATION:\n        result = \"exam\";\n        break;\n      case PlansTypeKeys.MARKS_PUBLICATION:\n        result = \"marks publication\";\n        break;\n      case PlansTypeKeys.PLACEMENT_TRANSFER:\n        result = \"placement\";\n        break;\n      default:\n        result = \"\";\n        break;\n    }\n\n    return result;\n  };\n\n  selectClaimType = (thisClaim: string) => {\n    this.setState({\n      thisClaimType: isEmptyOrSpaces(thisClaim)\n        ? null\n        : (thisClaim as PlansTypeKeys),\n    });\n  };\n\n  generateChooseFileTitle = (thisClaimType: PlansTypeKeys | null): string => {\n    let result: string = \"\";\n\n    switch (thisClaimType) {\n      case PlansTypeKeys.APPLICATION:\n        result = `Select application you are claiming on?`;\n        break;\n      case PlansTypeKeys.DOCUMENT_VALIDATION:\n        result = `Select document you are claiming on?`;\n        break;\n      case PlansTypeKeys.EXAMINATION:\n        result = `Select exam you are claiming on?`;\n        break;\n      case PlansTypeKeys.MARKS_PUBLICATION:\n        result = `Select marks publication you are claiming on?`;\n        break;\n      case PlansTypeKeys.PLACEMENT_TRANSFER:\n        result = `Select placement you are claiming on?`;\n        break;\n      default:\n        result = \"Select file you are claiming on?\";\n        break;\n    }\n\n    return result;\n  };\n\n  getClaimById = (\n    myClaims: CandidateClaimInterface[],\n    fileId: string,\n    sessionId: string\n  ): CandidateClaimInterface | undefined => {\n    return myClaims.find(\n      (item) => item.claiming_on_id === fileId && item.period_id === sessionId\n    );\n  };\n\n  render() {\n    // CHECK IF STILL LOADING DATA ===============\n    if (\n      this.props.auth.application_session !== null &&\n      (this.state.loading ||\n        (this.props.claiming.myClaims === null &&\n          !isEmptyOrSpaces(this.props.file_id) &&\n          !isEmptyOrSpaces(this.props.claim_type)))\n    ) {\n      return <Loading />;\n    }\n\n    if (\n      this.props.claiming.myClaims &&\n      this.props.auth.application_session &&\n      this.getClaimById(\n        this.props.claiming.myClaims,\n        this.props.file_id,\n        this.props.auth.application_session.session_plan_id\n      ) !== undefined\n    ) {\n      return (\n        <div>\n          <h2 className=\"text-center text-2xl font-bold p-3 text-gray-500\">\n            Claims on this {this.displayClaimType(this.props.claim_type!)}\n          </h2>\n          {this.getClaimById(\n            this.props.claiming.myClaims,\n            this.props.file_id,\n            this.props.auth.application_session.session_plan_id\n          )!.claims.length >= 1 ? (\n            <div>\n              {this.getClaimById(\n                this.props.claiming.myClaims,\n                this.props.file_id,\n                this.props.auth.application_session.session_plan_id\n              )!.claims.map((itm) => (\n                <div className=\"p-2 border rounded mb-2\">\n                  <div className=\"p-1 border-b\">\n                    <span className=\"text-gray-400\">Created date:</span>{\" \"}\n                    <b>{DATE(itm.createdAt)}</b>\n                  </div>\n                  <div className=\"p-1 border-b\">\n                    <span className=\"text-gray-400\">Reason:</span>{\" \"}\n                    <p>{itm.reason}</p>\n                  </div>\n                  <div className=\"p-1 border-b\">\n                    <span className=\"text-gray-400\">Evaluation comment:</span>{\" \"}\n                    <p>{itm.evaluation_comment}</p>\n                  </div>\n                  <div className=\"p-1\">\n                    <span className=\"text-gray-400 block\">decision:</span>{\" \"}\n                    <h3 className=\"text-xl font-bold\">\n                      {itm.decision_taken_status}\n                    </h3>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>No claims found!</div>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"pb-3\">\n        {/* CLAIM FORM ============================================== */}\n        {this.state.viewThisFile.length <= 0 && (\n          <form onSubmit={(e) => this.handleSubmit(e)}>\n            <div className=\"px-6 pb-3\">\n              {this.state.alertError && (\n                <div\n                  className=\"alert-warning cursor-pointer\"\n                  onClick={() => this.setAlertError(null)}\n                >\n                  {this.state.alertError}\n                </div>\n              )}\n              <div className=\"text-base text-gray-700 sm:text-lg\">\n                {/* SELECT CLAIM TYPE ============================================== */}\n                <div className=\"flex flex-col mb-2\">\n                  <label>Claim type</label>\n                  <select\n                    className={`rounded px-2 py-2 w-full bg-white focus:outline-none ${\n                      this.state.formType === \"PROPS\" && \"cursor-not-allowed\"\n                    } ${\n                      this.state.formError &&\n                      this.state.formError.element === \"claim_type\"\n                        ? \"border-red-500\"\n                        : \"border-gray-500\"\n                    } border-2`}\n                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                      this.selectClaimType(e.target.value);\n                      this.setClaimFileId(\"\");\n                      this.state.formError &&\n                        this.state.formError.element === \"claim_type\" &&\n                        this.setFormError(null);\n                    }}\n                    value={\n                      this.state.thisClaimType ? this.state.thisClaimType : \"\"\n                    }\n                    disabled={\n                      this.state.loadingForm || this.state.formType === \"PROPS\"\n                    }\n                  >\n                    <option value=\"\">Choose claim type</option>\n                    {Object.values(PlansTypeKeys).map((item, index) => (\n                      <option value={item} key={index + item}>\n                        {capitalizeFirstLetter(\n                          item.toLocaleLowerCase().replace(/_/g, \" \")\n                        )}\n                      </option>\n                    ))}\n                  </select>\n                  {this.state.formError &&\n                    this.state.formError.element === \"claim_type\" && (\n                      <span className=\"text-red-500\">\n                        {this.state.formError.msg}\n                      </span>\n                    )}\n                </div>\n                {/* END SELECT CLAIM TYPE ============================================== */}\n\n                {/* SELECT FILE TO CLAIM ON ============================================== */}\n                <div className=\"flex flex-col mb-2\">\n                  <label>\n                    {this.generateChooseFileTitle(this.state.thisClaimType)}\n                  </label>\n                  <div\n                    className={`text-left bg-white border-2 ${\n                      this.state.formType !== \"PROPS\"\n                        ? \"border-gray-700\"\n                        : \"border-gray-400 text-gray-500\"\n                    } rounded w-full ${\n                      this.state.chooseClaimFile ? \"h-64\" : \"h-10\"\n                    } ${\n                      this.state.formError &&\n                      this.state.formError.element === \"claim_file\"\n                        ? \"border-red-500\"\n                        : \"\"\n                    } border-2 ${\n                      this.state.thisClaimType &&\n                      !this.state.chooseClaimFile &&\n                      this.state.formType !== \"PROPS\"\n                        ? \"cursor-pointer\"\n                        : !this.state.chooseClaimFile && \"cursor-not-allowed\"\n                    }`}\n                    title={\n                      !this.state.thisClaimType\n                        ? \"Choose claim type first!\"\n                        : \"\"\n                    }\n                    onClick={() => {\n                      this.state.formType === \"DEFAULT\" &&\n                        this.state.thisClaimType &&\n                        !this.state.chooseClaimFile &&\n                        this.setChooseClaimFile(true);\n                      this.state.formError &&\n                        this.state.formError.element === \"claim_file\" &&\n                        this.setFormError(null);\n                    }}\n                  >\n                    {/* DISPLAYING FILTERED SELECTING FILE ============================ */}\n                    {this.state.claimFileId.length > 0 &&\n                    !this.state.chooseClaimFile ? (\n                      <p className=\"my-1 mx-2\">\n                        {this.state.thisClaimType ===\n                          PlansTypeKeys.DOCUMENT_VALIDATION &&\n                          this.props.claiming.candidateDocuments &&\n                          ClaimGetDocTitle(\n                            this.props.documentReducer,\n                            this.getDocumentById(\n                              this.props.claiming.candidateDocuments,\n                              this.state.claimFileId\n                            )\n                          ).main}\n                        {this.state.thisClaimType ===\n                          PlansTypeKeys.APPLICATION &&\n                          this.props.candidateApplications\n                            .candidate_applications &&\n                          this.getApplicationById(\n                            this.props.candidateApplications\n                              .candidate_applications,\n                            this.state.claimFileId\n                          ) &&\n                          this.getApplicationById(\n                            this.props.candidateApplications\n                              .candidate_applications,\n                            this.state.claimFileId\n                          )!.position.position_title}\n                      </p>\n                    ) : (\n                      !this.state.chooseClaimFile && (\n                        <p className=\"my-1 mx-2\">\n                          Select Claim{\" \"}\n                          {this.state.thisClaimType &&\n                            this.state.thisClaimType\n                              .toLocaleLowerCase()\n                              .replace(/_/g, \" \")}\n                        </p>\n                      )\n                    )}\n                    {/* END DISPLAYING FILTERED SELECTING FILE ============================ */}\n\n                    {/* LISTING OF REJECTED DOCUMENTS ============================ */}\n                    {this.state.chooseClaimFile &&\n                      this.state.thisClaimType ===\n                        PlansTypeKeys.DOCUMENT_VALIDATION &&\n                      this.props.claiming.candidateDocuments &&\n                      this.props.claiming.myClaims &&\n                      this.props.auth.application_session && (\n                        <FormDocumentList\n                          setChooseClaimFile={this.setChooseClaimFile}\n                          setClaimFileId={this.setClaimFileId}\n                          setViewThisFile={this.setViewThisFile}\n                          claimFileId={this.state.claimFileId}\n                          viewThisFile={this.state.viewThisFile}\n                          candidateDocuments={\n                            this.props.claiming.candidateDocuments\n                          }\n                          documentCategories={this.props.documentReducer}\n                          myClaims={this.props.claiming.myClaims}\n                          activeSession={this.props.auth.application_session}\n                        />\n                      )}\n                    {/* END LISTING OF REJECTED DOCUMENTS ============================ */}\n                    {/* LISTING OF REJECTED APPLICATION ============================ */}\n                    {this.state.chooseClaimFile &&\n                      this.state.thisClaimType === PlansTypeKeys.APPLICATION &&\n                      this.props.claiming.candidateApplications &&\n                      this.props.claiming.myClaims &&\n                      this.props.auth.application_session && (\n                        <FormApplicationList\n                          setChooseClaimFile={this.setChooseClaimFile}\n                          setClaimFileId={this.setClaimFileId}\n                          setViewThisFile={this.setViewThisFile}\n                          claimFileId={this.state.claimFileId}\n                          viewThisFile={this.state.viewThisFile}\n                          candidateApplications={\n                            this.props.claiming.candidateApplications\n                          }\n                          myClaims={this.props.claiming.myClaims}\n                          activeSession={this.props.auth.application_session}\n                        />\n                      )}\n                    {/* END LISTING OF REJECTED APPLICATION ============================ */}\n                  </div>\n                  {this.state.formError &&\n                    this.state.formError.element === \"claim_file\" && (\n                      <span className=\"text-red-500\">\n                        {this.state.formError.msg}\n                      </span>\n                    )}\n                </div>\n                {/* END SELECT FILE TO CLAIM ON ============================================== */}\n\n                {/* CLAIM REASONS ========================================== */}\n                <div className=\"flex flex-col mb-2\">\n                  <label>Choose reason of your claim</label>\n                  <div\n                    className={`text-left bg-white border-2 border-gray-700 rounded w-full ${\n                      this.state.chooseClaimReason ? \"h-64\" : \"h-auto\"\n                    } ${\n                      this.state.formError &&\n                      this.state.formError.element === \"claim_reason\"\n                        ? \"border-red-500\"\n                        : \"\"\n                    } border-2 ${\n                      this.props.claiming.claimReasons === null\n                        ? \"cursor-wait\"\n                        : \"cursor-pointer\"\n                    }`}\n                    title=\"Choose the reason for your claim!\"\n                    onClick={() => {\n                      !this.state.chooseClaimReason &&\n                        this.setState({ chooseClaimReason: true });\n                      this.state.formError &&\n                        this.state.formError.element === \"claim_reason\" &&\n                        this.setFormError(null);\n                    }}\n                  >\n                    {/* DISPLAYING SELECTED REASON ============================ */}\n                    {this.state.claimReason && !this.state.chooseClaimReason ? (\n                      <p className=\"my-1 mx-2\">\n                        {this.state.claimReason.reason}\n                      </p>\n                    ) : (\n                      !this.state.chooseClaimReason && (\n                        <p className=\"my-1 mx-2\">Select reason</p>\n                      )\n                    )}\n                    {/* END DISPLAYING SELECTED REASON ============================ */}\n\n                    {/* LISTING OF CLAIM REASONS ============================ */}\n                    {this.state.chooseClaimReason &&\n                      this.props.claiming.claimReasons && (\n                        <ChooseReason\n                          setChooseClaimReason={this.setChooseClaimReason}\n                          setClaimReason={this.setClaimReason}\n                          claimReason={this.state.claimReason}\n                          allClaimReasons={this.props.claiming.claimReasons}\n                        />\n                      )}\n                    {/* END LISTING OF CLAIM REASONS ============================ */}\n                  </div>\n                  {this.state.formError &&\n                    this.state.formError.element === \"claim_reason\" && (\n                      <span className=\"text-red-500\">\n                        {this.state.formError.msg}\n                      </span>\n                    )}\n                </div>\n                {/* END CLAIM REASONS ========================================== */}\n\n                {/* CLAIM COMMENT ============================================== */}\n                <div className=\"flex flex-col\">\n                  <label>Comment</label>\n                  <textarea\n                    className={`text-left input-white w-20 inline-block ${\n                      this.state.formError &&\n                      this.state.formError.element === \"claim_comment\"\n                        ? \"border-red-500\"\n                        : \"border-gray-500\"\n                    } border-2`}\n                    placeholder={`Claim comment`}\n                    style={{ resize: \"none\" }}\n                    value={this.state.claimComment}\n                    onChange={(e) => {\n                      this.setClaimComment(e.target.value);\n                      this.state.formError &&\n                        this.state.formError.element === \"claim_comment\" &&\n                        this.setFormError(null);\n                    }}\n                    rows={3}\n                    disabled={this.state.loadingForm}\n                  ></textarea>\n                  {this.state.formError &&\n                    this.state.formError.element === \"claim_comment\" && (\n                      <span className=\"text-red-500\">\n                        {this.state.formError.msg}\n                      </span>\n                    )}\n                </div>\n                {/* END CLAIM COMMENT ============================================== */}\n              </div>\n              <div className=\"pt-3 flex justify-between\">\n                <button\n                  onClick={() => this.cleanToClose()}\n                  className={`btn bg-gray-400 text-white hover:bg-gray-600 focus:outline-none ${\n                    this.state.loadingForm && \"cursor-not-allowed\"\n                  }`}\n                  type=\"button\"\n                  disabled={this.state.loadingForm}\n                >\n                  Exit\n                </button>\n                <button\n                  className={`btn bg-primary text-white hover:bg-blue-600 focus:outline-none ${\n                    this.state.loadingForm && \"cursor-wait\"\n                  }`}\n                  type=\"submit\"\n                  disabled={this.state.loadingForm}\n                >\n                  {this.state.loadingForm ? \"Loading...\" : \"Claim\"}\n                </button>\n              </div>\n            </div>\n          </form>\n        )}\n        {/* END CLAIM FORM ============================================== */}\n\n        {/* CLAIM DOCUMENT VIEW ============================================== */}\n        {this.state.viewThisFile.length > 0 &&\n          this.props.claiming.candidateDocuments &&\n          this.state.thisClaimType === PlansTypeKeys.DOCUMENT_VALIDATION && (\n            <DocFormView\n              thisDoc={this.getDocumentById(\n                this.props.claiming.candidateDocuments,\n                this.state.viewThisFile\n              )}\n              setViewThisFile={this.setViewThisFile}\n              documentCategories={this.props.documentReducer}\n              setChooseClaimFile={this.setChooseClaimFile}\n              setClaimFileId={this.setClaimFileId}\n            />\n          )}\n        {/* END CLAIM DOCUMENT VIEW ============================================== */}\n        {/* CLAIM APPLICATION VIEW ============================================== */}\n        {this.state.viewThisFile.length > 0 &&\n          this.props.candidateApplications.candidate_applications &&\n          this.getApplicationById(\n            this.props.candidateApplications.candidate_applications,\n            this.state.viewThisFile\n          ) &&\n          this.state.thisClaimType === PlansTypeKeys.APPLICATION && (\n            <ApplicationFormView\n              thisApplication={\n                this.getApplicationById(\n                  this.props.candidateApplications.candidate_applications,\n                  this.state.viewThisFile\n                )!\n              }\n              documentCategories={this.props.documentReducer}\n              setChooseClaimFile={this.setChooseClaimFile}\n              setClaimFileId={this.setClaimFileId}\n              setViewThisFile={this.setViewThisFile}\n            />\n          )}\n        {/* END CLAIM APPLICATION VIEW ============================================== */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  document,\n  claiming,\n  candidateApplications,\n  candidateExam,\n}: StoreState): {\n  auth: Auth;\n  documentReducer: DocumentReducerInterface;\n  claiming: ClaimingReducerType;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  candidateExam: candidateExamStoreInterface;\n} => {\n  return {\n    auth: auth,\n    documentReducer: document,\n    claiming,\n    candidateApplications: candidateApplications,\n    candidateExam: candidateExam,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getMyClaims,\n  getMyAnswers,\n  getClaimReasons,\n  createClaim,\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(ClaimFormComponent);\n","import React, { Component } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { claimReasonInterface } from \"../../../interfaces\";\nimport search from \"../../../utils/search\";\n\nexport const claimReasonsData = [\n  { key: 1, reason: \"Not placed (Sinahawe umwanya)\" },\n  {\n    key: 2,\n    reason:\n      \"Not placed with higher marks (Sinahawe umwanya kandi hari abo ndusha twakoze bimwe bawuhawe)\",\n  },\n  {\n    key: 3,\n    reason:\n      \"Want to change district of placement (Nifuza guhindurirwa akarere nahawemo umwanya)\",\n  },\n  {\n    key: 4,\n    reason: \"Rejected offer by mistake (Nibeshye nanga umwanya nahawe)\",\n  },\n  {\n    key: 0,\n    reason: \"None of the above (nta na kimwe muri ibyo byavuzwe haruguru)\",\n  },\n];\n\ntype ChooseReasonProps = {\n  claimReason: claimReasonInterface | null;\n  setClaimReason: (value: claimReasonInterface | null) => void;\n  setChooseClaimReason: (value: boolean) => void;\n  allClaimReasons: claimReasonInterface[];\n};\n\ntype ChooseReasonState = {\n  searchInput: string;\n};\n\nclass ChooseReason extends Component<ChooseReasonProps, ChooseReasonState> {\n  constructor(props: ChooseReasonProps) {\n    super(props);\n\n    this.state = {\n      searchInput: \"\",\n    };\n  }\n\n  setSearchInput = (value: string) => {\n    this.setState({ searchInput: value });\n  };\n\n  render() {\n    return (\n      <div>\n        {/* SEARCH PART */}\n        <div className=\"flex items-center w-full my-1\">\n          <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n            onChange={(e) => this.setSearchInput(e.target.value)}\n            value={this.state.searchInput}\n          />\n          <button\n            className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n            type=\"button\"\n            onClick={() => this.props.setChooseClaimReason(false)}\n          >\n            Close\n          </button>\n        </div>\n        {/* END SEARCH PART ///////////////// */}\n\n        <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n          {search(this.props.allClaimReasons, this.state.searchInput).map(\n            (item: claimReasonInterface, index) => (\n              <section key={index.toString() + item.id}>\n                <div\n                  className={`py-1 w-full px-2 hover:bg-gray-100 cursor-pointer ${\n                    this.props.claimReason &&\n                    this.props.claimReason.id === item.id\n                      ? \"border-l-4 border-blue-500 bg-blue-50\"\n                      : \"my-1\"\n                  }`}\n                  onClick={() => {\n                    this.props.setChooseClaimReason(false);\n                    this.props.setClaimReason(item);\n                  }}\n                >\n                  <p className=\"text-base text-black\">{item.reason}</p>\n                </div>\n              </section>\n            )\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default React.memo(ChooseReason);\n","import React from \"react\";\nimport { DocumentClaimUser } from \"../../../actions/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { API } from \"../../../utils/api\";\nimport { ClaimGetDocTitle } from \"./ClaimForm\";\n\ntype DocFormViewProps = {\n  thisDoc: DocumentClaimUser;\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n};\n\nconst DocFormView: React.FC<DocFormViewProps> = (props) => {\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-gray-100 px-4 py-1 animate__animated animate__fadeIn\">\n        <div className=\"flex flex-col mb-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-xl\">\n              {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n            </span>\n            <button\n              type=\"button\"\n              className=\"btn btn-blue\"\n              onClick={() => {\n                props.setChooseClaimFile(false);\n                props.setClaimFileId(props.thisDoc.doc_id);\n                props.setViewThisFile(\"\");\n              }}\n            >\n              Choose\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span className=\"font-bold text-yellow-900 rounded px-3 py-1\">\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              ################\n              {/* {loadingUsers ? (\n                <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n              ) : getUserDocuments(\n                  props.userList,\n                  props.thisDoc.validated_by.user_id\n                ) ? (\n                getUserDocuments(\n                  props.userList,\n                  props.thisDoc.validated_by.user_id\n                )!.user.user_info.fname +\n                \" \" +\n                getUserDocuments(\n                  props.userList,\n                  props.thisDoc.validated_by.user_id\n                )!.user.user_info.lname\n              ) : (\n                \"-\"\n              )} */}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n          <div className=\"w-full my-1\">\n            <img\n              src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n              alt=\"doc file\"\n              className={`w-full`}\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default React.memo(DocFormView);\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { ApplicationSession } from \"../../../actions\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n} from \"../../../interfaces\";\nimport { ApplicationStates } from \"../../../interfaces/application\";\nimport { isClaimAllowed } from \"./ClaimForm\";\n\nconst getRejectedApplicants = (\n  applicationData: claimApplicationsInterface[]\n): claimApplicationsInterface[] => {\n  return applicationData.filter(\n    (item) => item.application_status === ApplicationStates.Rejected\n  );\n};\n\nexport const searchApplication = (\n  objList: claimApplicationsInterface[],\n  text: any\n): claimApplicationsInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (prop === \"position\") {\n        flag =\n          product.position.position_title\n            .toString()\n            .toLowerCase()\n            .indexOf(text.toLowerCase()) > -1;\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n  // return objList.filter((product) =>\n  //   product.position.position_title.includes(text)\n  // );\n};\n\ntype FormApplicationListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  candidateApplications: claimApplicationsInterface[];\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n};\n\nconst FormApplicationList: React.FC<FormApplicationListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            getRejectedApplicants(props.candidateApplications).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.application_id\n              )\n            ).length > 0\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}{\" \"}\n      {/* searchData(props.candidateApplications, searchInput) */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {getRejectedApplicants(props.candidateApplications).filter((item) =>\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            item.application_id\n          )\n        ).length > 0 ? (\n          searchApplication(\n            getRejectedApplicants(props.candidateApplications).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.application_id\n              )\n            ),\n            searchInput\n          ).map((item, index) => (\n            <div\n              className={`group flex items-center justify-between my-1 hover:bg-gray-100 ${\n                props.claimFileId === item.application_id &&\n                \"bg-blue-50 border-l-4 border-blue-500\"\n              }`}\n              key={index + item.application_id}\n            >\n              <div\n                className=\"p-1 w-full mr-2 cursor-pointer\"\n                onClick={() => {\n                  props.setChooseClaimFile(false);\n                  props.setClaimFileId(item.application_id);\n                }}\n              >\n                <p className=\"text-base font-medium text-black\">\n                  {item.position.position_title}\n                </p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                onClick={() => {\n                  props.setViewThisFile(item.application_id);\n                }}\n              >\n                View\n              </button>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No Rejected document available\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default React.memo(FormApplicationList);\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { ClaimGetDocTitle, isClaimAllowed } from \"./ClaimForm\";\nimport { DocumentClaimUser } from \"../../../actions/claiming\";\nimport { CategorySubcategoryData } from \"../../../interfaces/candidatesInterfaces\";\nimport { CandidateClaimInterface } from \"../../../interfaces\";\nimport { ApplicationSession } from \"../../../actions\";\n\nexport interface DocumentTitleInterface {\n  category_id: string;\n  company: string;\n  description: string;\n  email: string;\n  end_year: string;\n  files: string;\n  names: string;\n  phone_number: string;\n  school: {\n    school_name: string;\n    _id: string;\n    status: boolean;\n    education_category_id?: {\n      education_category_title: string;\n      _id: string;\n    };\n    district_id?: {\n      district_name: string;\n      _id: string;\n    };\n  } | null;\n  school_id: string;\n  start_year: string;\n  sub_category_id: string;\n  title: string;\n  year: string;\n  validation_status: string;\n  validated_by: {\n    user_id: string;\n    comment: string;\n    validation_status: string;\n    date: string;\n  };\n  doc_id: string;\n  doc_title: string;\n  category_subcategory_data: CategorySubcategoryData | null;\n}\n\nexport const DocumentTitleData = (\n  documentData: DocumentClaimUser[],\n  documentCategories: DocumentReducerInterface\n): DocumentTitleInterface[] | [] => {\n  let documentTemp: DocumentTitleInterface[] = [];\n  for (let i in documentData) {\n    documentTemp.push({\n      category_id: documentData[i].category_id,\n      company: documentData[i].company,\n      description: documentData[i].description,\n      email: documentData[i].email,\n      end_year: documentData[i].end_year,\n      files: documentData[i].files,\n      names: documentData[i].names,\n      phone_number: documentData[i].phone_number,\n      school: documentData[i].school,\n      school_id: documentData[i].school_id,\n      start_year: documentData[i].start_year,\n      sub_category_id: documentData[i].sub_category_id,\n      title: documentData[i].title,\n      year: documentData[i].year,\n      validation_status: documentData[i].validation_status,\n      validated_by: documentData[i].validated_by,\n      doc_id: documentData[i].doc_id,\n      doc_title: ClaimGetDocTitle(documentCategories, documentData[i]).main,\n      category_subcategory_data: documentData[i].category_subcategory_data,\n    });\n  }\n  return documentTemp;\n};\n\nconst getRejectedDocuments = (\n  documentData: DocumentClaimUser[]\n): DocumentClaimUser[] => {\n  console.log({\n    rejected: documentData.filter(\n      (item) => item.validation_status === \"rejected\"\n    ),\n  });\n  return documentData.filter((item) => item.validation_status === \"rejected\");\n};\n\nexport const searchDocuments = (\n  objList: DocumentTitleInterface[],\n  text: any\n): DocumentTitleInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter(\n    (product) =>\n      product.doc_title.toString().toLowerCase().indexOf(text.toLowerCase()) >\n      -1\n  );\n};\n\ntype FormDocumentListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  candidateDocuments: DocumentClaimUser[];\n  documentCategories: DocumentReducerInterface;\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n};\n\nconst FormDocumentList: React.FC<FormDocumentListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            DocumentTitleData(\n              getRejectedDocuments(props.candidateDocuments),\n              props.documentCategories\n            ).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.doc_id\n              )\n            ).length > 0\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {props.candidateDocuments.filter((item) =>\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            item.doc_id\n          )\n        ).length > 0 ? (\n          searchDocuments(\n            DocumentTitleData(\n              getRejectedDocuments(props.candidateDocuments),\n              props.documentCategories\n            ).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.doc_id\n              )\n            ),\n            searchInput\n          ).map((doc, index) => (\n            <section key={index + doc.doc_id}>\n              <div\n                className={`group flex items-center justify-between my-1 hover:bg-gray-100 ${\n                  props.claimFileId === doc.doc_id &&\n                  \"bg-blue-50 border-l-4 border-blue-500\"\n                }`}\n              >\n                <div\n                  className=\"p-1 w-full mr-2 cursor-pointer\"\n                  onClick={() => {\n                    props.setChooseClaimFile(false);\n                    props.setClaimFileId(doc.doc_id);\n                  }}\n                >\n                  <p className=\"text-base font-medium text-black\">\n                    {ClaimGetDocTitle(props.documentCategories, doc).main}\n                  </p>\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                  onClick={() => {\n                    props.viewThisFile === doc.doc_id\n                      ? props.setViewThisFile(\"\")\n                      : props.setViewThisFile(doc.doc_id);\n                  }}\n                >\n                  {props.viewThisFile === doc.doc_id ? \"Close\" : \"View\"}\n                </button>\n              </div>\n            </section>\n          ))\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No Rejected document available\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default React.memo(FormDocumentList);\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  SubQuestionInterface,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\n\n// All question types except Embedded and Hybrid\n\ninterface AnswersTypesCollectionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  item: SubQuestionInterface;\n  hybrid: boolean;\n}\n\nconst AnswersTypesCollection = (props: AnswersTypesCollectionProps) => {\n  return (\n    <div>\n      {/* TrueFalse */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.TrueFalse &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <TrueFalse\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toTrueFalse(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.Calculated ||\n          props.item.typeShort === QuestionForHybrid.SimpleCalculate) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <SimpleCalculated\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toSimpleCalculated(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.SingleMultiple ||\n          props.item.typeShort === QuestionForHybrid.MultipleChoice) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <MultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.CalculatedMultipleChoice &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <CalculatedMultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toCalculatedMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n\n      {/* Matching */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Matching &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Matching\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMatching(itm.answer),\n                shuffledAnswers: Shuffle(toMatching(itm.answer)),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n              selectedExam={props.selectedExam}\n              selectedLanguage={props.selectedLanguage}\n            />\n          ))}\n      {/* Esssay */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Essay &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Essay\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toEssay(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Numerical */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Numeric &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Numerical\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toNumerical(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* ShortAnswer */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.ShortAnswer &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <ShortAnswer\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toShortAnswer(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n    </div>\n  );\n};\n\nexport default AnswersTypesCollection;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\nimport AnswersTypesCollection from \"./AnswersTypesCollection\";\n\ninterface HybridProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst HybridAnswers = (props: HybridProps) => {\n  let str = \"a\";\n  // useEffect(() => {\n  //   if (props.selectedQuestionAnswer.question_id !== null) {\n  //     // Check if question is already there in answersList\n  //     let checkAnswerAvail = props.available_answers.find(\n  //       (item) => item.question_id === props.selectedQuestionAnswer.question_id\n  //     );\n  //     if (props.wholeQuestion !== undefined) {\n  //       let answersRes: QuestionAnswerInterface[] = [];\n  //       if (checkAnswerAvail === undefined) {\n  //         answersRes = props.wholeQuestion.answers;\n  //       } else {\n  //         for (let newAns of props.wholeQuestion.answers) {\n  //           if (\n  //             checkAnswerAvail.answers.find(\n  //               (item) => item._id === newAns._id\n  //             ) === undefined\n  //           ) {\n  //             console.log(\"Ans not duplicted: \", newAns);\n  //             answersRes = [\n  //               ...answersRes,\n  //               {\n  //                 _id: newAns._id,\n  //                 reference: newAns.reference,\n  //                 answer: [],\n  //               },\n  //             ];\n  //           }\n  //         }\n  //       }\n  //       props.answerQuestionFn({\n  //         question_id: props.selectedQuestionAnswer.question_id,\n  //         status: false, //Check if submitted online\n  //         answers: answersRes,\n  //       });\n  //     }\n  //   }\n  // }, [props]);\n  return (\n    <div>\n      {props.wholeQuestion !== undefined &&\n        props.wholeQuestion.sub_question.length > 0 &&\n        props.wholeQuestion.sub_question.map((item, i) => {\n          let stri = String.fromCharCode(str.charCodeAt(str.length - 1) + i);\n          return (\n            <div\n              title=\"Click to choose this option\"\n              key={i + 1}\n              className={`px-2 py-2\n             bg-white\n            rounded mb-2`}\n            >\n              <div className=\"flex flex-row items-center w-full gap-2 mb-2\">\n                <div>\n                  <div className=\"flex items-center justify-center h-8 w-8 rounded-full bg-gray-100 border border-gray-400 font-bold\">\n                    {stri}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between w-full gap-2\">\n                  <div className=\"font-bold\">{item.description}</div>\n                  <div>\n                    <div className=\"bg-blue-100 text-blue-600 px-3 py-1 rounded-full font-bold\">\n                      {item.marks} marks\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"border-t px-2 py-2\">\n                <AnswersTypesCollection\n                  type={props.type}\n                  available_answers={props.available_answers}\n                  selectedQuestionAnswer={props.selectedQuestionAnswer}\n                  answerQuestionFn={props.answerQuestionFn}\n                  wholeQuestion={props.wholeQuestion}\n                  selectedExam={props.selectedExam}\n                  selectedLanguage={props.selectedLanguage}\n                  item={item}\n                  hybrid={true}\n                />\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default HybridAnswers;\n","import React, { Component, Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  applicationPeriodsStoreInterface,\n  InitialExamDetails,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI, PositionAPICourse } from \"../../interfaces\";\nimport {\n  ApplicationPeriodGet,\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\nimport { MdClose } from \"react-icons/md\";\nimport ChooseExamCenter, {\n  LocationTableInterface,\n} from \"../Application/ExamCenter/ChooseExamCenter\";\nimport { sentExamInterface } from \"../Application/ExamCenter/ExamCenter\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\n\nexport const compareWithToday = (tooday: moment.Moment, date: string) => {\n  const myDate = DATE(date, \"MM/DD/YYYY\");\n  let todayConverted =\n    (tooday.get(\"month\") < 9 ? \"0\" : \"\") +\n    (tooday.get(\"month\") + 1).toString() +\n    \"/\" +\n    tooday.get(\"date\") +\n    \"/\" +\n    tooday.get(\"year\");\n  if (new Date(myDate).getTime() < new Date(todayConverted).getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport interface ExamDoneDetailsAnswers {\n  exam_id: string;\n  course: string;\n  course_name: string;\n  discription: string;\n  termes: string;\n  rules: {\n    right_click_enabled: boolean;\n    copy_enabled: boolean;\n    paste_enabled: boolean;\n    stop_candidate_when_comeback: boolean;\n    allow_to_leave_browser: boolean;\n  };\n  period: string;\n  exam_date: string;\n}\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface changeLocProps {\n  changeLocation: () => void;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (selected_exam: InitialExamDetails | null) => void; // Not used\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\n\nconst ChangeLocationComponent = (props: changeLocProps): JSX.Element => {\n  const [display, setDisplay] = useState<boolean>(true);\n  if (display === false) {\n    return <div></div>;\n  }\n  return (\n    <div className=\"absolute right-2 left-2 md:right-1/4 md:left-1/4 lg:left-1/2 lg:right-auto bg-yellow-50 shadow-xl rounded py-1 px-1 flex flex-row justify-between items-center gap-2 text-yellow-800 -mt-5 lg:-mt-8\">\n      <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-1\">\n        <span className=\"font-bold\">You are advised to change location</span>\n        <div\n          onClick={props.changeLocation}\n          className=\"px-2 py-1 rounded bg-blue-100 text-blue-600 w-max cursor-pointer\"\n        >\n          Change\n        </div>\n      </div>\n      <div\n        onClick={() => setDisplay(false)}\n        className=\"bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center p-1 h-8 w-8 cursor-pointer\"\n      >\n        <MdClose className=\"text-4xl\" />\n      </div>\n    </div>\n  );\n};\n\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  loadingExamsDone: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n  selectedCourse: course | null;\n  centersModal: boolean;\n  maxExamModal: boolean;\n  selectedPosition: string;\n  successMessage: string;\n  selectedExam: ExamDoneDetailsAnswers | null;\n  doing_exam: boolean;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingExamsDone: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n      selectedCourse: null,\n      centersModal: false,\n      maxExamModal: false,\n      selectedPosition: \"\",\n      successMessage: \"\",\n      selectedExam: null,\n      doing_exam: false,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setloadingExamsDone = (status: boolean) => {\n    this.setState({ loadingExamsDone: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      // console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setLoading(true);\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setLoading(true);\n        } else {\n          this.setLoading(true);\n        }\n      }\n    );\n  };\n\n  InitializationFn = (\n    application: GetApplicationsAPI,\n    item: UserExamsListInterface\n  ) => {\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          if (\n            application.application_status === ApplicationStates.Shortlisted\n          ) {\n            // Select exam\n            this.props.setSelectedPosition(application.position);\n            this.props.setSelectedCourse(\n              application.position.courses.find(\n                (itm) => itm.course_id === item.course\n              )!\n            );\n            this.setState({ doing_exam: true });\n            return (\n              this.props.periods.selected_period &&\n              this.props.InitializeExamDetails(\n                application.application_session.session_plan_id,\n                course.course_id,\n                center_id.district_id,\n                center_id.center_id,\n                center_id.room_id,\n                application.position,\n                true,\n                this.setLoading\n              )\n            );\n          } else {\n            alert(\"Corresponding application is not shortlisted!\");\n          }\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.props.LoadCandidateApplications(\n      this.props.auth.user.user_id,\n      this.setLoading\n    );\n  };\n  findLocation = (position_id: string, course_id: string) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      const test = this.props.candidateApplications.candidate_applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.exams.filter((itm) => itm.course_id === course_id)\n      );\n      if (test !== undefined) {\n        let course = test.exams.find((itm) => itm.course_id === course_id);\n        if (course !== undefined) {\n          return course;\n        }\n      }\n    }\n    return null;\n  };\n  updateLocation = async (\n    application_id: string,\n    exams: sentExamInterface[]\n  ) => {\n    this.setState({ loading: true });\n    for (let i in exams) {\n      try {\n        const res = await axios.post(\n          `${API.APPLICATION}/application/updatemissed`,\n          {\n            application_id: application_id,\n            exams: exams[i],\n          }\n        );\n        if (res.status === 200) {\n          this.setState({\n            selectedCourse: null,\n            centersModal: false,\n            maxExamModal: false,\n            selectedPosition: \"\",\n            successMessage: \"Location updated successfully!\",\n          });\n          this.loadUserApplications();\n        }\n      } catch (error: any) {\n        console.log(\"Update loc err: \", { ...error });\n      }\n    }\n  };\n  updateLocationFunction = (exams: sentExamInterface[]) => {\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      let application =\n        this.props.candidateApplications.candidate_applications.find(\n          (item) => item.position.position_id === this.state.selectedPosition\n        );\n      if (application !== undefined) {\n        this.updateLocation(application.application_id, exams);\n      } else {\n        alert(\"Invalid application\");\n      }\n    } else {\n      alert(\"Missing application\");\n    }\n  };\n  addLocation = (\n    course_id: string,\n    course_name: string,\n    course_code: string,\n    location: LocationTableInterface,\n    exam_id: string\n  ) => {\n    return this.updateLocationFunction([\n      {\n        course_id: course_id,\n        proctoring_type: \"Center\",\n        center_id: location.center_id,\n        district_id: location.district_id,\n      },\n    ]);\n  };\n  componentDidMount = () => {\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session?.session_plan_id\n        : this.props.periods.selected_period.session_plan_id;\n\n    if (selPeriod !== undefined && this.state.candidateExams === null) {\n      this.loadCandidateExams(this.props.auth.user.user_id, selPeriod);\n    }\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (this.props.periods.applicationPeriods === null) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.candidateApplications.candidate_applications === null) {\n      this.loadUserApplications();\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm._id === item._id) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    if (this.props.candidateApplications.candidate_applications !== null) {\n      for (let item of exams) {\n        if (\n          this.props.candidateApplications.candidate_applications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm.course === item.course) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string,\n    selected_period: ApplicationPeriodGet | null\n  ): GetApplicationsAPI | null => {\n    if (applications !== null && selected_period !== null) {\n      let temp = applications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.application_session.session_plan_id ===\n            selected_period.session_plan_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  setMaxExamModal = (status: boolean) => {\n    this.setState({ maxExamModal: status });\n  };\n\n  changeLocation = (item: PositionAPICourse) => {\n    this.setState({ selectedCourse: item, centersModal: true });\n    this.setMaxExamModal(true);\n  };\n\n  closeModal = () => {\n    this.setState({ centersModal: false });\n    this.setMaxExamModal(false);\n  };\n\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    const selPeriod =\n      this.props.periods.selected_period === null\n        ? this.props.auth.application_session\n        : this.props.periods.selected_period;\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (\n      this.props.candidateExam.selected_exam_id !== null &&\n      this.props.candidateExam.selected_exam_details !== null &&\n      (this.props.candidateExam.doing_exam === true ||\n        this.state.doing_exam === true)\n    ) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.selectedCourse === null ? (\n          <div className=\"mt-2 -ml-2 mr-3 pb-5\">\n            <div className=\"rounded mt-2\">\n              <div className=\"flex flex-row items-center gap-3\">\n                <Link\n                  to=\"/apps-page\"\n                  title=\"Back to menus\"\n                  className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n                >\n                  <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n                </Link>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-3xl\">My exams</span>\n                  <span className=\"text-gray-600 text-sm\">\n                    List of exams that are assigned to you\n                  </span>\n                </div>\n              </div>\n            </div>\n            {this.state.successMessage !== \"\" && (\n              <div\n                title=\"Click to close the message\"\n                onClick={() => this.setState({ successMessage: \"\" })}\n                className=\"animate__animated animate__zoomIn px-3 py-2 bg-green-500 text-white my-2 rounded cursor-pointer\"\n              >\n                {this.state.successMessage}\n              </div>\n            )}\n            {console.log(\"Not found: \", this.state.candidateExams)}\n            {this.state.loading === true ||\n            this.state.loadingExamsDone === true ||\n            this.state.candidateExams === null ||\n            this.props.candidateApplications.candidate_applications == null ? (\n              <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n                <Loading />\n              </div>\n            ) : this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).length === 0 ? (\n              <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n                No exams found\n              </div>\n            ) : (\n              this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).map((item, i) => (\n                <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div>\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                          <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                            Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-gray-100 underline text-gray-500  font-bold rounded-full px-2\">\n                            Start time: {item.start_time}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-blue-100 text-blue-900  font-bold rounded-full px-2\">\n                            Status: {item.user_status}\n                          </div>\n                        </div>\n                        {this.findLocation(item.position, item.course) !==\n                          null && (\n                          <div className=\"flex flex-row items-center gap-2 mt-2\">\n                            <div>\n                              Exam center:{\" \"}\n                              <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                {\n                                  this.findLocation(item.position, item.course)\n                                    ?.center_name\n                                }\n                              </span>\n                            </div>\n                            <div className=\"w-max flex flex-col md:flex-row\">\n                              Room number:{\" \"}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 ? (\n                                <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                  Waiting room\n                                </span>\n                              ) : (\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.room_number\n                                  }\n                                </span>\n                              )}\n                              {/* Change loc */}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 &&\n                                validateExamDate(\n                                  item.exam_date,\n                                  item.start_time,\n                                  item.end_time\n                                ) !== ExamTimeStatus.Expired && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"lg:w-full flex flex-row items-center justify-end\">\n                      {this.state.activeExams.find(\n                        (itm) => itm === item._id\n                      ) !== undefined ||\n                      item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Paused ? (\n                        validateExamDate(\n                          item.exam_date,\n                          item.start_time,\n                          item.end_time\n                        ) !== ExamTimeStatus.Expired ? (\n                          this.selectApplication(\n                            this.props.candidateApplications\n                              .candidate_applications,\n                            item.position,\n                            item.course,\n                            selPeriod\n                          )?.application_status !==\n                          ApplicationStates.Shortlisted ? (\n                            <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                              Not shortlisted\n                            </div>\n                          ) : (\n                            <div\n                              onClick={() => {\n                                let application = this.selectApplication(\n                                  this.props.candidateApplications\n                                    .candidate_applications,\n                                  item.position,\n                                  item.course,\n                                  selPeriod\n                                );\n                                if (application !== null) {\n                                  this.InitializationFn(application, item);\n                                } else {\n                                  alert(\"Invalid exam!\");\n                                }\n                              }}\n                              className={`${\n                                item.user_status === UserExamStatus.Editing ||\n                                item.user_status === UserExamStatus.Paused\n                                  ? \"bg-green-600 group-hover:bg-green-800\"\n                                  : \"bg-blue-600 group-hover:bg-blue-800\"\n                              } btn  text-white cursor-pointer w-max`}\n                            >\n                              {item.user_status === UserExamStatus.Editing\n                                ? \"Back to Exam\"\n                                : item.user_status === UserExamStatus.Paused\n                                ? \"Paused, back to exam\"\n                                : \"Start Exam\"}\n                            </div>\n                          )\n                        ) : item.user_status === UserExamStatus.Editing ||\n                          item.user_status === UserExamStatus.Done ||\n                          item.user_status === UserExamStatus.Paused ||\n                          item.user_status === UserExamStatus.Removed ? (\n                          <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                            <span>Marks</span>\n                            <span className=\"text-2xl font-extrabold -mt-2\">\n                              {item.user_marks.toFixed(\n                                item.user_marks === 100 || item.user_marks === 0\n                                  ? 0\n                                  : 2\n                              )}\n                              %\n                            </span>\n                            <div\n                              onClick={() =>\n                                this.setState({\n                                  selectedExam: {\n                                    course: item.course,\n                                    course_name: item.course_name,\n                                    discription: item.discription,\n                                    termes: item.termes,\n                                    rules: item.rules,\n                                    period: item.period,\n                                    exam_date: item.exam_date,\n                                    exam_id: item._id,\n                                  },\n                                })\n                              }\n                              className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                            >\n                              Check details\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                            Expired\n                          </div>\n                        )\n                      ) : item.found === false ? (\n                        <div\n                          title=\"Please wait for the exam time\"\n                          className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                        >\n                          <CountDown\n                            start_time={new Date(today.toString()).toString()}\n                            duration_min={getMinutesFromTwoDates(\n                              new Date(today.toString()),\n                              new Date(\n                                DATE(item.exam_date, \"MM/DD/YYYY\") +\n                                  \" \" +\n                                  item.start_time\n                              )\n                            )}\n                            timeout={() => this.setTimeOut(item._id)}\n                            returnString={true}\n                            labels={true}\n                            days\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                          <span>Marks</span>\n                          <span className=\"text-2xl font-extrabold -mt-2\">\n                            {item.user_marks.toFixed(\n                              item.user_marks === 100 || item.user_marks === 0\n                                ? 0\n                                : 2\n                            )}\n                            %\n                          </span>\n                          <div\n                            onClick={() =>\n                              this.setState({\n                                selectedExam: {\n                                  course: item.course,\n                                  course_name: item.course_name,\n                                  discription: item.discription,\n                                  termes: item.termes,\n                                  rules: item.rules,\n                                  period: item.period,\n                                  exam_date: item.exam_date,\n                                  exam_id: item._id,\n                                },\n                              })\n                            }\n                            className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                          >\n                            Check details\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {/* Not prepared exams */}\n            {this.state.candidateExams !== null &&\n              this.state.loading !== true &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).length > 0 &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).map((item, i) => (\n                <div\n                  key={i + 1}\n                  className=\"my-2 rounded bg-white p-2 py-3 group\"\n                >\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div className=\"\">\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-base text-gray-600 font-bold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                          {this.findLocation(item.position, item.course) !==\n                            null && (\n                            <div className=\"flex flex-row items-center gap-2 mt-2\">\n                              <div className=\"flex flex-col md:flex-row md:items-center\">\n                                Exam center:{\" \"}\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.center_name\n                                  }\n                                </span>\n                              </div>\n                              <div className=\"w-max flex flex-col md:flex-row md:items-center\">\n                                Room number:{\" \"}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 ? (\n                                  <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                    Waiting room\n                                  </span>\n                                ) : (\n                                  <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                    {\n                                      this.findLocation(\n                                        item.position,\n                                        item.course\n                                      )?.room_number\n                                    }\n                                  </span>\n                                )}\n                                {/* Change loc */}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                      Not prepared\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : this.state.loading === true ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : (\n          <div className=\"animate__animated animate__fadeInUp animate__faster mt-2 mr-1 -ml-3 rounded-t-md bg-white shadow-md pb-5\">\n            <div className=\"flex flex-row gap-4 items-center justify-between bg-blue-100 py-2 px-2 mb-2\">\n              <div className=\"flex flex-col w-full\">\n                <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-2\">\n                  <span className=\"font-bold text-xl text-gray-800\">\n                    Change exam location\n                  </span>\n                  <div className=\"bg-white hover:text-yellow-700 hover:bg-white rounded-full p-1 h-10 w-10 border-2 border-white hover:border-yellow-600 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => {\n                        this.setState({\n                          centersModal: false,\n                          selectedCourse: null,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ChooseExamCenter\n              positionCourses={this.state.selectedCourse}\n              addLocation={this.addLocation}\n              closeModal={this.closeModal}\n            />\n          </div>\n        )}\n        {this.state.selectedExam !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600 px-2\">\n                Exam result details\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectedExam: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <CandidateAnswersDetails\n              exam_id={this.state.selectedExam}\n              showAnswers={false}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    periods: periods,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { VscLoading } from \"react-icons/vsc\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../../actions\";\nimport { updateSessionPlan } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport {\n  allPlanTypes,\n  PlansInterface,\n  PlansTypeInterface,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  SessionPlanTypeStatus,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { API } from \"../../../utils/api\";\nimport { DATE, errorToText } from \"../../../utils/functions\";\n\nexport const isActivationAllowed = (thisPlans: PlansInterface): boolean => {\n  let today: Date = new Date(),\n    end_date = new Date(thisPlans.end_date);\n  if (end_date.getTime() >= today.getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport const getPlanTypeByKey = (\n  type_key: PlansTypeKeys\n): PlansTypeInterface | undefined => {\n  return allPlanTypes.find((item) => item.type_key === type_key);\n};\n\nexport const isPlanActive = (\n  viewThisSession: SessionPlanInterface,\n  thisPlan: PlansInterface\n): \"OPEN\" | \"CLOSED\" | \"WAITING\" => {\n  if (viewThisSession.is_active) {\n    let today = new Date(),\n      planEndDate = new Date(thisPlan.end_date),\n      planStartDate = new Date(thisPlan.start_date);\n    if (\n      planEndDate.getTime() >= today.getTime() &&\n      planStartDate.getTime() <= today.getTime() &&\n      thisPlan.type_status !== SessionPlanTypeStatus.CLOSED\n    ) {\n      return \"OPEN\";\n    } else if (\n      planStartDate.getTime() > today.getTime() &&\n      thisPlan.type_status !== SessionPlanTypeStatus.CLOSED\n    ) {\n      return \"WAITING\";\n    }\n  }\n  return \"CLOSED\";\n};\n\ntype SessionDetailsProps = {\n  viewThisSession: SessionPlanInterface;\n  setViewThisSession: (data: SessionPlanInterface) => void;\n\n  // REDUX ----------------\n  updateSessionPlan: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype SessionDetailsState = {\n  loadingRequest: string;\n};\n\nexport class SessionDetails extends Component<\n  SessionDetailsProps,\n  SessionDetailsState\n> {\n  constructor(props: SessionDetailsProps) {\n    super(props);\n\n    this.state = {\n      loadingRequest: \"\",\n    };\n  }\n\n  handlePlanActivation = async (\n    session: SessionPlanInterface,\n    thisPlan: PlansInterface\n  ) => {\n    const newState: \"open\" | \"close\" = session.is_active ? \"close\" : \"open\";\n\n    if (!window.confirm(`Are you sure you want to ${newState} this plan?`)) {\n      return true;\n    }\n\n    if (!isActivationAllowed(thisPlan)) {\n      this.props.PushPopupAlert({\n        title: `Opening/Closing plan which has been expired is not allowed!`,\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    let newData: SessionPlanInterface = {\n      session_plan_name: session.session_plan_name,\n      period: session.period,\n      is_active: session.is_active,\n      plans: [],\n      createdAt: session.createdAt,\n      updatedAt: session.updatedAt,\n      session_plan_id: session.session_plan_id,\n    };\n    for (const key in session.plans) {\n      if (Object.prototype.hasOwnProperty.call(session.plans, key)) {\n        const element = session.plans[key];\n        if (thisPlan.type_key === element.type_key) {\n          if (thisPlan.type_status === SessionPlanTypeStatus.OPEN) {\n            newData.plans.push({\n              type_id: thisPlan.type_id,\n              type_title: thisPlan.type_title,\n              type_key: thisPlan.type_key,\n              type_status: SessionPlanTypeStatus.CLOSED,\n              start_date: thisPlan.start_date,\n              end_date: thisPlan.end_date,\n              allowed_claim_level: thisPlan.allowed_claim_level,\n              _id: thisPlan._id,\n              history: thisPlan.history,\n            });\n          } else {\n            newData.plans.push({\n              type_id: thisPlan.type_id,\n              type_title: thisPlan.type_title,\n              type_key: thisPlan.type_key,\n              type_status: SessionPlanTypeStatus.OPEN,\n              start_date: thisPlan.start_date,\n              end_date: thisPlan.end_date,\n              allowed_claim_level: thisPlan.allowed_claim_level,\n              _id: thisPlan._id,\n              history: thisPlan.history,\n            });\n          }\n        } else {\n          newData.plans.push(element);\n        }\n      }\n    }\n\n    console.log(\"====================================\");\n    console.log({ newData });\n    console.log(\"====================================\");\n\n    this.setState({ loadingRequest: thisPlan.type_key });\n    try {\n      const res = await axios.put<SessionPlanInterface>(\n        `${API.CLAIMING}/session/${session.session_plan_id}`,\n        newData\n      );\n      this.props.updateSessionPlan(res.data);\n      this.props.setViewThisSession(res.data);\n      this.props.PushPopupAlert({\n        title: `Session ${newState}d successfully`,\n        theme: PopupAlertTheme.info,\n      });\n      this.setState({ loadingRequest: \"\" });\n      console.log(\"updateSessionPlan: \", res);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.warning,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <table className=\"w-full bg-white shadow p-5\" id=\"session_content\">\n        <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n          <tr>\n            <td className=\"p-2\">#</td>\n            <td className=\"p-2\">Plan Type</td>\n            <td className=\"p-2\">Start Date</td>\n            <td className=\"p-2\">End date</td>\n            {this.props.viewThisSession.is_active && (\n              <td className=\"p-2\" colSpan={2}>\n                Status\n              </td>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {/* WHILE DATA FOUND ====================== */}\n          {this.props.viewThisSession.plans.map((item, index) => (\n            <tr\n              key={index + item._id}\n              className={`border-b border-gray-200 hover:bg-gray-100`}\n            >\n              <td className=\"p-2 text-left whitespace-nowrap\">{index + 1}</td>\n              <td className=\"p-2 text-left\">\n                <span className=\"text-lg\">\n                  {getPlanTypeByKey(item.type_key) &&\n                    capitalizeFirstLetter(\n                      getPlanTypeByKey(item.type_key)!.type_title\n                    )}\n                </span>\n              </td>\n              <td className=\"p-2 text-left\">{DATE(item.start_date)}</td>\n              <td className=\"p-2 text-left\">{DATE(item.end_date)}</td>\n              {this.props.viewThisSession.is_active && (\n                <td>\n                  {isPlanActive(this.props.viewThisSession, item) === \"OPEN\" ? (\n                    <span className={`px-2 py-1 font-semibold text-green-700`}>\n                      Open\n                    </span>\n                  ) : isPlanActive(this.props.viewThisSession, item) ===\n                    \"WAITING\" ? (\n                    <span className={`px-2 py-1 font-semibold text-gray-700`}>\n                      Waiting\n                    </span>\n                  ) : (\n                    <span className={`px-2 py-1 font-semibold text-red-700`}>\n                      Closed\n                    </span>\n                  )}\n                </td>\n              )}\n              {this.props.viewThisSession.is_active && (\n                <td>\n                  {isActivationAllowed(item) && (\n                    <div className=\"flex items-center justify-center gap-1\">\n                      <div\n                        className={`relative ${\n                          this.state.loadingRequest.length > 0\n                            ? \"cursor-not-allowed\"\n                            : \"cursor-pointer\"\n                        }`}\n                        title={\n                          item.type_status === SessionPlanTypeStatus.OPEN\n                            ? \"Deactivating session\"\n                            : \"Activating session\"\n                        }\n                        onClick={() =>\n                          this.state.loadingRequest.length <= 0 &&\n                          this.handlePlanActivation(\n                            this.props.viewThisSession,\n                            item\n                          )\n                        }\n                      >\n                        <span className=\"block w-14 h-8 bg-gray-100 rounded-full shadow-inner\"></span>\n                        <span\n                          className={`absolute block w-6 h-6 mt-1 ml-1 rounded-full shadow inset-y-0 left-0 focus-within:shadow-outline transition-transform duration-500 ease-in-out ${\n                            item.type_status === SessionPlanTypeStatus.CLOSED\n                              ? \"bg-red-500\"\n                              : \"bg-green-500 transform translate-x-full\"\n                          }`}\n                        ></span>\n                      </div>\n                      {this.state.loadingRequest === item.type_key && (\n                        <VscLoading className=\"animate__animated animate__rotateIn animate__infinite\" />\n                      )}\n                    </div>\n                  )}\n                </td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default React.memo(connect(null, {\n  updateSessionPlan,\n  PushPopupAlert,\n})(SessionDetails));\n","import React from \"react\";\nimport {\n  BsCheckSquareFill,\n  BsCheckCircleFill,\n  BsArrowRightSquareFill,\n  BsArrowRightCircleFill,\n} from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionInterface,\n  questionType,\n  TrueFalseQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  QuestionLanguage,\n  LanguageInterface,\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionAnswerFormat,\n} from \"../../../interfaces\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../QuestionDetails/ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { findQType } from \"./FindAnswerHybrid\";\n\ninterface FindAnswerProps {\n  question: QuestionInterface;\n  answersList: QuestionAnswersStore[];\n  selectedLanguage: QuestionLanguage | LanguageInterface;\n  questionTypes: questionType[];\n  showCorrectAnswer: boolean;\n  subQuestionType?: questionTypeElementsType;\n  reference?: number;\n  onClick: () => void;\n}\n\nconst resultDiv = (\n  user_answers: QuestionAnswerFormat[],\n  question_answers: QuestionAnswerFormat[],\n  props: FindAnswerProps\n): JSX.Element => {\n  switch (\n    props.subQuestionType === undefined\n      ? findQuestionType(props.question.type, props.questionTypes)\n      : props.subQuestionType\n  ) {\n    case questionTypeElementsType.MultipleChoice:\n      const userAnswer: MultipleChoiceQuestionAnswerInterface[] =\n        toMultipleChoice(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswer\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl text-blue-600\">\n                  <BsCheckSquareFill />\n                </div>\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl text-blue-600\">\n                        <BsCheckSquareFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.SingleMultiple:\n      const userAnswerSingle: MultipleChoiceQuestionAnswerInterface[] =\n        toMultipleChoice(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerSingle\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl text-blue-600\">\n                  <BsCheckCircleFill />\n                </div>\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl text-blue-600\">\n                        <BsCheckCircleFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n\n    case questionTypeElementsType.CalculatedMultipleChoice:\n      const userAnswer1: CalculatedMultipleChoiceQuestionAnswerInterface[] =\n        toCalculatedMultipleChoice(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswer1\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl text-blue-600\">\n                  <BsCheckSquareFill />\n                </div>\n                <div className=\"text-base font-normal text-gray-500\">\n                  {item.value.length > 1 ? (\n                    <>\n                      Between{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[0]}\n                      </span>{\" \"}\n                      and{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[1]}\n                      </span>\n                    </>\n                  ) : (\n                    <span className=\"text-gray-700\">\n                      {item.value[0].toString()}\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl text-blue-600\">\n                        <BsCheckSquareFill />\n                      </div>\n                      <div className=\"text-base font-normal text-gray-500\">\n                        {item.value.length > 1 ? (\n                          <>\n                            Between{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0]}\n                            </span>{\" \"}\n                            and{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[1]}\n                            </span>\n                          </>\n                        ) : (\n                          <span className=\"text-blue-600\">\n                            {item.value[0].toString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n\n    case questionTypeElementsType.Matching:\n      const userAnswerMatch: MatchingQuestionAnswerInterface[] =\n        toMatching(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerMatch.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n            >\n              <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                  {i + 1}\n                </div>\n              </div>\n              <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                <div\n                  className=\"w-full mt-3 lg:mb-0\"\n                  dangerouslySetInnerHTML={{ __html: item.value }}\n                ></div>\n                <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                  <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                    <BsArrowRightSquareFill />\n                  </div>\n                  <div\n                    className=\"w-full mr-2\"\n                    dangerouslySetInnerHTML={{ __html: item.status }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n                  >\n                    <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                      <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                        {i + 1}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                      <div\n                        className=\"w-full mt-3 lg:mb-0\"\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                      <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                        <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                          <BsArrowRightSquareFill />\n                        </div>\n                        <div\n                          className=\"w-full mr-2\"\n                          dangerouslySetInnerHTML={{ __html: item.status }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.TrueFalse:\n      const userAnswerTureFalse: TrueFalseQuestionAnswerInterface[] =\n        toTrueFalse(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerTureFalse\n            .filter((itm) => itm.status === true)\n            .map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers\n                  .filter((itm) => itm.status === true)\n                  .map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{ __html: item.value }}\n                      ></div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.Numeric:\n      const userAnswerNumerical: NumericalQuestionAnswerInterface[] =\n        toNumerical(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerNumerical.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div className=\"text-gray-600 text-base font-normal\">\n                {item.value.length > 1 ? (\n                  <>\n                    Between{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[0]}\n                    </span>{\" \"}\n                    and{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[1]}\n                    </span>\n                  </>\n                ) : (\n                  item.value.length > 0 && (\n                    <span className=\"text-gray-700\">\n                      {item.value[0].toString()}\n                    </span>\n                  )\n                )}\n              </div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div className=\"text-gray-600 text-base font-normal\">\n                      {item.value.length > 1 ? (\n                        <>\n                          Between{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[0] - item.value[1]}\n                          </span>{\" \"}\n                          and{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[0] + item.value[1]}\n                          </span>\n                        </>\n                      ) : (\n                        item.value.length > 0 && (\n                          <span className=\"text-blue-700\">\n                            {item.value[0].toString()}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.SimpleCalculate:\n      const userAnswerSimpleCalculate: SimpleCalculatedQuestionAnswerInterface[] =\n        toSimpleCalculated(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerSimpleCalculate.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div className=\"text-gray-600 text-base font-normal\">\n                {item.value.length > 1 ? (\n                  <>\n                    Between{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[0]}\n                    </span>{\" \"}\n                    and{\" \"}\n                    <span className=\"underline text-gray-600 font-extrabold\">\n                      {item.value[1]}\n                    </span>\n                  </>\n                ) : (\n                  item.value.length > 0 && (\n                    <span className=\"text-gray-700\">\n                      {item.value[0].toString()}\n                    </span>\n                  )\n                )}\n              </div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div className=\"text-gray-600 text-base font-normal\">\n                      {item.value.length > 1 ? (\n                        <>\n                          Between{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[0]}\n                          </span>{\" \"}\n                          and{\" \"}\n                          <span className=\"underline text-blue-600 font-extrabold\">\n                            {item.value[1]}\n                          </span>\n                        </>\n                      ) : (\n                        item.value.length > 0 && (\n                          <span className=\"text-blue-700\">\n                            {item.value[0].toString()}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.ShortAnswer:\n      const userAnswerShortAnswer: ShortAnswerQuestionAnswerInterface[] =\n        toShortAnswer(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerShortAnswer.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: item.value,\n                }}\n              ></div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: item.value,\n                      }}\n                    ></div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    // Essay\n    case questionTypeElementsType.Essay:\n      const userAnswerEssay: EssayQuestionAnswerInterface[] =\n        toEssay(user_answers);\n      return (\n        <div className=\"w-full\">\n          {userAnswerEssay.map((item, i) => (\n            <div\n              key={i + 1}\n              onClick={props.onClick}\n              className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n            >\n              <div className=\"text-xl\">\n                <BsArrowRightCircleFill />\n              </div>\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: item.value,\n                }}\n              ></div>\n            </div>\n          ))}\n          {/* Correct answers */}\n          {props.showCorrectAnswer === true && (\n            <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n              <div className=\"font-extrabold text-lg\">Correct answer</div>\n              <div>\n                {question_answers.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    onClick={props.onClick}\n                    className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                  >\n                    <div className=\"text-xl\">\n                      <BsArrowRightCircleFill />\n                    </div>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: item.value,\n                      }}\n                    ></div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    case questionTypeElementsType.Embedded:\n      return <div></div>;\n    case questionTypeElementsType.Hybrid:\n      return <div></div>;\n    default:\n      return <div className=\"text-blue-600 font-extrabold\">Answer added</div>;\n  }\n};\n\nconst FindAnswer = (props: FindAnswerProps) => {\n  const answer = props.answersList.find(\n    (item) => item.question_id === props.question.question_id\n  );\n  let UserAnswersSel = props.question.question.find(\n    (itm) => itm.language === props.selectedLanguage\n  );\n  if (UserAnswersSel === undefined && props.question.question.length > 0) {\n    UserAnswersSel =\n      props.question.question.find(\n        (itm) => itm.language === props.selectedLanguage\n      ) === undefined\n        ? props.question.question[0]\n        : props.question.question.find(\n            (itm) => itm.language === props.selectedLanguage\n          )!;\n  }\n  if (answer === undefined || UserAnswersSel === undefined) {\n    return (\n      <div className=\"text-yellow-600 font-extrabold text-2xl text-center\">\n        No answer found!\n      </div>\n    );\n  } else {\n    let SubQ = UserAnswersSel.sub_question.find(\n      (itm) => findQType(itm.typeShort) === props.subQuestionType\n    );\n    return (\n      <div>\n        {SubQ === undefined\n          ? resultDiv(\n              answer.answers[0].answer,\n              UserAnswersSel.answers[0].answer,\n              props\n            )\n          : answer.answers\n              .filter((itm) => SubQ && itm.reference === SubQ.reference)\n              .map((user_answer) => {\n                const testQ = UserAnswersSel!.answers.find(\n                  (itm) => itm.reference === user_answer.reference\n                );\n                if (testQ !== undefined) {\n                  return resultDiv(user_answer.answer, testQ.answer, props);\n                } else {\n                  return <div>Answered</div>;\n                }\n              })}\n      </div>\n    );\n  }\n};\n\nexport default FindAnswer;\n","import {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { MdCheckCircle, MdClose } from \"react-icons/md\";\nimport { Auth } from \"../../../actions/auth\";\nimport {\n  candidateExamStoreInterface,\n  QuestionAnswersStore,\n} from \"../../../actions/candidate_exam\";\nimport { questionTypesStoreInterface } from \"../../../actions/questionTypes\";\nimport { System } from \"../../../actions/system\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { EmbeddedQuestion } from \"../../../components/QuestionPreview/QuestionPreview\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n} from \"../../../interfaces/question\";\nimport {\n  ExamAnsweredQuestions,\n  ExamPendingQuestions,\n  findQuestionType,\n} from \"../utils/utils\";\nimport FindAnswer from \"./FindAnswer\";\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n  selectedLanguage: QuestionLanguage;\n  wholeQuestion: QuestionInterface;\n  answersList: QuestionAnswersStore[];\n}\n\nexport const findQType = (\n  typeShort: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid\n): questionTypeElementsType => {\n  let changed: questionTypeElementsType = questionTypeElementsType.Hybrid;\n  switch (typeShort) {\n    case QuestionForHybrid.Calculated:\n      changed = questionTypeElementsType.Calculated;\n      break;\n    case QuestionForHybrid.CalculatedMultipleChoice:\n      changed = questionTypeElementsType.CalculatedMultipleChoice;\n      break;\n    case QuestionForHybrid.Essay:\n      changed = questionTypeElementsType.Essay;\n      break;\n    case QuestionForHybrid.Matching:\n      changed = questionTypeElementsType.Matching;\n      break;\n    case QuestionForHybrid.MultipleChoice:\n      changed = questionTypeElementsType.MultipleChoice;\n      break;\n    case QuestionForHybrid.Numeric:\n      changed = questionTypeElementsType.Numeric;\n      break;\n    case QuestionForHybrid.ShortAnswer:\n      changed = questionTypeElementsType.ShortAnswer;\n      break;\n    case QuestionForHybrid.SimpleCalculate:\n      changed = questionTypeElementsType.SimpleCalculate;\n      break;\n    case QuestionForHybrid.SingleMultiple:\n      changed = questionTypeElementsType.SingleMultiple;\n      break;\n    case QuestionForHybrid.TrueFalse:\n      changed = questionTypeElementsType.TrueFalse;\n      break;\n  }\n  return changed;\n};\n\nconst FindAnswerHybrid = (props: QuestionsReviewProps) => {\n  let str = \"a\";\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    );\n  }\n  return (\n    <div className={`pt-4 border-t border-gray-300 bg-white`}>\n      <div className=\"px-4 pb-2\">\n        <div className=\"my-2\">\n          <div\n            className=\"flex flex-col gap-3 overflow-y-auto\"\n            style={{ maxHeight: \"100%\" }}\n          >\n            {console.log(\n              \"Whole: \",\n              props.wholeQuestion,\n              props.selectedLanguage\n            )}\n            <div>\n              {findQuestionType(\n                props.wholeQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid &&\n                props.wholeQuestion.question.find(\n                  (test) => test.language === props.selectedLanguage\n                ) !== undefined &&\n                props.wholeQuestion.question\n                  .find((test) => test.language === props.selectedLanguage)!\n                  .sub_question.map((item, i) => {\n                    let stri = String.fromCharCode(\n                      str.charCodeAt(str.length - 1) + i\n                    );\n                    return (\n                      <div\n                        key={i + 1}\n                        className=\"bg-white hover:bg-white border border-white hover:border-blue-400 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast group\"\n                      >\n                        <div className=\"grid md:grid-cols-12 w-full\">\n                          <div className=\"col-span-12 flex flex-row items-center gap-3\">\n                            <div\n                              key={i + 1}\n                              className=\"w-6 h-6 p-2 rounded-full bg-blue-100 flex justify-center items-center font-bold text-lg text-blue-600 cursor-pointer\"\n                            >\n                              {stri}\n                            </div>\n                            <div className=\"text-sm w-full\">\n                              {props.wholeQuestion.question.find(\n                                (test) =>\n                                  test.language === props.selectedLanguage\n                              ) !== undefined ? (\n                                findQuestionType(\n                                  item.type,\n                                  props.questionTypes.questionTypes\n                                ) === questionTypeElementsType.Embedded ? (\n                                  EmbeddedQuestion(\n                                    props.wholeQuestion!,\n                                    props.questionTypes.questionTypes,\n                                    props.selectedLanguage,\n                                    props.candidateExam.question_answers,\n                                    (data: QuestionAnswerInterface) => {}\n                                  )\n                                ) : (\n                                  <div\n                                    className=\"font-bold text-gray-700 text-base\"\n                                    dangerouslySetInnerHTML={{\n                                      __html: item.description,\n                                    }}\n                                  ></div>\n                                )\n                              ) : (\n                                props.wholeQuestion.question.length > 0 && (\n                                  <div\n                                    className=\"font-bold text-gray-700 text-base max-h-20 truncate\"\n                                    dangerouslySetInnerHTML={{\n                                      __html: item.description,\n                                    }}\n                                  ></div>\n                                )\n                              )}\n                              <div className=\"text-blue-700 font-bold text-sm w-full\">\n                                Answer: &nbsp;\n                                {props.questionTypes.questionTypes !== null && (\n                                  <FindAnswer\n                                    selectedLanguage={props.selectedLanguage}\n                                    question={props.wholeQuestion}\n                                    answersList={props.answersList}\n                                    questionTypes={\n                                      props.questionTypes.questionTypes\n                                    }\n                                    onClick={() => {}}\n                                    showCorrectAnswer={false}\n                                    subQuestionType={findQType(item.typeShort)}\n                                    reference={item.reference}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FindAnswerHybrid;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getAllClaims,\n    PushPopupAlert,\n  })(AdminFilterByType)\n);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(\n    sessions.filter((item) => item.session_plan_id === period_id)[0]\n  );\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod.session_plan_id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option\n                key={session.session_plan_id + item}\n                value={session.session_plan_id}\n              >\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default React.memo(ClaimHeaderTitle);\n","import React, { Component } from \"react\";\nimport { MdAdd, MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport search from \"../../../utils/search\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  // console.log(\"====================================\");\n  // console.log({ claimList, claim_id });\n  // console.log(\"====================================\");\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getClaimReasons: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  searchClaim: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n      searchClaim: \"\",\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  setSearchClaim = (value: string) => {\n    this.setState({ searchClaim: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n      this.loadExamAnswers(\n        thisSession ? thisSession : sessions[0],\n        this.props.auth.user.user_id\n      );\n    }\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan.session_plan_id,\n      user_id,\n      (status: boolean, msg: string, data: SessionPlanInterface | \"none\") => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n    if (this.props.claiming.claimReasons === null) {\n      this.props.getClaimReasons((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status) {\n          if (msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => {\n                this.setClaimForm(true);\n                // alert(\"clicked\");\n              }}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            {/* FILTER FORM =================================== */}\n            <section className=\"flex flex-col-reverse sm:flex-row items-center gap-2 w-full my-2\">\n              <div className=\"w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setSearchClaim(e.target.value)\n                  }\n                  type=\"text\"\n                  className=\"input-white h-10 text-sm border-2 border-gray-400 focus:border-gray-500 w-full\"\n                  placeholder={`Search claim by title or type`}\n                  value={this.state.searchClaim}\n                  disabled={\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ).length > 0\n                      ? false\n                      : true\n                  }\n                />\n              </div>\n            </section>\n            {/* END FILTER FORM =================================== */}\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim level</td>\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"Nothing found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  search(\n                    filterClaimsByClaimType(\n                      this.props.claiming.myClaims,\n                      this.props.claiming.selectedClaimType\n                    ),\n                    this.state.searchClaim\n                  ).map((claim: CandidateClaimInterface, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {claim.title}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap italic\">\n                        Level {claim.claim_level}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.PLACEMENT_TRANSFER && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Placement not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  getClaimReasons,\n  loadCourses,\n  getMyPlacement,\n  getMyAnswers,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline, MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { DATE, errorToText, showDate } from \"../../utils/functions\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span\n              className=\"font-normal\"\n              dangerouslySetInnerHTML={{\n                __html: props.thisClaim.previous.reason,\n              }}\n            ></span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {props.thisApplication.position.description}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  ClaimStatus,\n  course,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { claimShowAnswer } from \"./Candidate/ExaminationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  claimReasons: claimReasonInterface[] | null;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <CandidateAnswersDetails\n                showAnswers={false}\n                exam_id={claimShowAnswer(\n                  props.thisExamSheet,\n                  props.thisExam.course_name\n                )}\n              />\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.userDetails.user_info.fname +\n                          \" \" +\n                          props.thisClaim.userDetails.user_info.lname\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default React.memo(connect(mapStateToProps, {\n  loadQuestionTypes,\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView));\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default React.memo(connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimPlacementView));\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default React.memo(\n  connect(mapStateToProps, {\n    GetClaimingTypes,\n    setSelectedClaimType,\n    getMyRejectedApplications,\n    getMyRejectedDocuments,\n    PushPopupAlert,\n  })(FilterByType)\n);\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { BiExport, BiSort } from \"react-icons/bi\";\nimport { FiEdit } from \"react-icons/fi\";\nimport { ImFilesEmpty } from \"react-icons/im\";\nimport {\n  MdCheckBox,\n  MdCheckBoxOutlineBlank,\n  MdHistory,\n  MdRadioButtonChecked,\n  MdRadioButtonUnchecked,\n} from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadEducationCategories,\n  PushPopupAlert,\n  schoolLevelsStoreInterface,\n} from \"../../../actions\";\nimport {\n  getAllClaims,\n  getAllApplications,\n  setSelectedClaimType,\n  GetClaimingTypes,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport {\n  generatePDF,\n  reportSettingsInterface,\n} from \"../../../components/DownloadPDF/rest\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport {\n  SideNavigation,\n  MainItem,\n} from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  claimReportContentInterface,\n  claimReportContentKeyInterface,\n  ClaimToPrintInterface,\n} from \"../../../interfaces/claimings\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport ExportToExcel from \"../../../utils/ExportToExcel\";\nimport { DATE, sortThisArray } from \"../../../utils/functions\";\nimport { ClaimTypesEnum, whichClaimType } from \"../../Claimings/Candidate\";\nimport TableLoading from \"../../../components/Loading/TableLoading\";\nimport {\n  education_category,\n  PlansTypeKeys,\n  SessionPlanInterface,\n} from \"../../../interfaces\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport {\n  capitalizeFirstLetter,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport ChooseSession from \"../../SessionSettings/ChooseSession\";\nimport NoSession from \"../../SessionSettings/NoSession\";\n\nexport const reportClaimType = (\n  type: PlansTypeKeys | \"all\"\n): ClaimTypesEnum | \"all\" => {\n  let result: ClaimTypesEnum | \"all\" = \"all\";\n  switch (type) {\n    case PlansTypeKeys.APPLICATION:\n      result = ClaimTypesEnum.application;\n      break;\n    case PlansTypeKeys.DOCUMENT_VALIDATION:\n      result = ClaimTypesEnum.document;\n      break;\n    case PlansTypeKeys.EXAMINATION:\n      result = ClaimTypesEnum.exam;\n      break;\n    case PlansTypeKeys.MARKS_PUBLICATION:\n      result = ClaimTypesEnum.marks_publication;\n      break;\n    case PlansTypeKeys.PLACEMENT_TRANSFER:\n      result = ClaimTypesEnum.placement;\n      break;\n    default:\n      result = \"all\";\n      break;\n  }\n\n  return result;\n};\n\nconst searchData = (\n  objList: ClaimToPrintInterface[],\n  text: string\n): ClaimToPrintInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (\n        prop === \"names\" ||\n        prop === \"gender\" ||\n        prop === \"national_id\" ||\n        prop === \"phone\" ||\n        prop === \"email\" ||\n        prop === \"claim_title\" ||\n        prop === \"claim_type\" ||\n        prop === \"claim_level\" ||\n        prop === \"education_category\" ||\n        prop === \"claim_session\" ||\n        prop === \"date\" ||\n        prop === \"decision\"\n      ) {\n        if (product[prop]) {\n          flag =\n            product[prop]!.toString()\n              .toLowerCase()\n              .indexOf(text.toLowerCase()) > -1;\n        }\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n};\n\nconst defaultReportContent: claimReportContentInterface[] = [\n  {\n    key: claimReportContentKeyInterface.names,\n    title: \"Applicant Names\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.national_id,\n    title: \"National ID\",\n    status: true,\n  },\n  { key: claimReportContentKeyInterface.gender, title: \"Gender\", status: true },\n  { key: claimReportContentKeyInterface.phone, title: \"Phone\", status: true },\n  {\n    key: claimReportContentKeyInterface.claim_session,\n    title: \"Claim Session\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.education_category,\n    title: \"Education Institute\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.date,\n    title: \"Claim Date\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.decision,\n    title: \"Decision\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_title,\n    title: \"Claim Title\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_type,\n    title: \"Claim Type\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_level,\n    title: \"Claim Level\",\n    status: true,\n  },\n];\n\ntype AppProps = {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  // systemPositions: PositionAPI[] | null;\n  // courses: course[] | null;\n  schoolLevels: schoolLevelsStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  // loadCourses: Function;\n  // getAllAnswers: Function;\n  setSelectedClaimType: Function;\n  // getPositions: Function;\n  getAllClaims: Function;\n  GetClaimingTypes: Function;\n  // getAllApplications: Function;\n  GetAllSessionPlans: Function;\n  // getDocumentCategory: Function;\n  // getDocumentSubCategory: Function;\n  // getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst _ClaimingReport: React.FC<AppProps> = (props) => {\n  const [thisPeriod, setThisPeriod] = useState<SessionPlanInterface | null>(\n    null\n  );\n  const [thisLevel, setThisLevel] = useState<number | \"all\">(\"all\");\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingSession, setLoadingSession] = useState<boolean>(true);\n  const [periodChanged, setPeriodChanged] = useState<boolean>(false);\n  const [loadingClaims, setLoadingClaims] = useState<boolean>(true);\n  const [loadingInstitutes, setLoadingInstitutes] = useState<boolean>(true);\n  const [downloading, setDownloading] = useState<boolean>(false);\n  const [claimToPrint, setClaimToPrint] = useState<\n    ClaimToPrintInterface[] | null\n  >();\n\n  const [sortProperty, setSortProperty] = useState<string>(\"\");\n  const [isSorted, setIsSorted] = useState<boolean>(false);\n  const [sortOrder, setSortOrder] = useState<\"ASC\" | \"DESC\">(\"ASC\");\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  const [generateReportModal, setGenerateReportModal] = useState<{\n    reportType: \"EXCEL\" | \"PDF\";\n    status: boolean;\n  } | null>(null);\n  const [reportTitle, setReportTitle] = useState<string>(\"\");\n  const [reportContent, setReportContent] =\n    useState<claimReportContentInterface[]>(defaultReportContent);\n  const [selectAll, setSelectAll] = useState<boolean>(true);\n  const [formError, setFormError] = useState<{\n    element: string;\n    msg: string;\n  } | null>(null);\n  const [selectPeriod, setSelectPeriod] = useState<boolean>(false);\n  const [thisEducation, setThisEducation] = useState<\n    education_category | \"all\"\n  >(\"all\");\n\n  useEffect(() => {\n    // LOADING EDUCATION CATEGORY =================================\n    if (\n      props.schoolLevels.education_categories === null ||\n      props.schoolLevels.education_categories.length === 0\n    ) {\n      props.loadEducationCategories(setLoadingInstitutes);\n    } else {\n      setLoadingInstitutes(false);\n    }\n    // END LOADING EDUCATION CATEGORY =================================\n    // LOADING CLAIM TYPES ========================================\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n    // END LOADING CLAIM TYPES ========================================\n    // LOADING APPLICATION SESSION ====================================\n    if (props.application_sessions === null) {\n      props.GetAllSessionPlans((status: boolean, msg: string) => {\n        if (!status) {\n          setLoadingSession(false);\n          setLoading(false);\n          if (msg.length) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    } else if (loadingSession) {\n      setLoading(false);\n      setLoadingSession(false);\n    }\n\n    // SETTING ACTIVE SESSION ==========================\n    if (\n      thisPeriod === null &&\n      !loadingSession &&\n      props.application_sessions &&\n      props.application_sessions.length > 0\n    ) {\n      let thisSession = props.application_sessions.find(\n        (item) => item.is_active === true\n      );\n      setThisPeriod(thisSession ? thisSession : props.application_sessions[0]);\n      // if (props.claiming.allAnswer === null) {\n      //   props.getAllAnswers(\n      //     thisSession\n      //       ? thisSession.session_plan_id\n      //       : props.application_sessions[0].session_plan_id,\n      //     (status: boolean, msg: string) => {\n      //       setLoading(status);\n      //       if (!status && msg.length) {\n      //         props.PushPopupAlert({\n      //           title: msg,\n      //           theme: PopupAlertTheme.danger,\n      //         });\n      //       }\n      //     }\n      //   );\n      // }\n    }\n\n    // LOADING DOCUMENT CATEGORIES ==========================\n    // if (!props.documentReducer.documentCategory && loadingDocuments) {\n    //   props.getDocumentCategory();\n    //   setLoadingDocuments(false);\n    // } else if (loadingDocuments) {\n    //   setLoadingDocuments(false);\n    // }\n    // LOADING DOCUMENT CLARIFICATIONS ==========================\n    // if (!props.documentReducer.documentSubCategory && loadingClarifications) {\n    //   props.getDocumentSubCategory();\n    //   setLoadingClarifications(false);\n    // } else if (loadingClarifications) {\n    //   setLoadingClarifications(false);\n    // }\n    // LOADING DOCUMENT FIELDS ==========================\n    // if (!props.documentReducer.documentFields && loadingFields) {\n    //   props.getDocumentFields();\n    //   setLoadingFields(false);\n    // } else if (loadingFields) {\n    //   setLoadingFields(false);\n    // }\n\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (props.claiming.allClaims === null && thisPeriod !== null) {\n      props.getAllClaims(\n        2,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && setLoadingClaims(status);\n          if (status === false && msg.length) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && loadingClaims) {\n      setLoadingClaims(false);\n    }\n\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    // if (props.claiming.allApplications === null && thisPeriod !== null) {\n    //   props.getAllApplications(\n    //     thisPeriod.session_plan_id,\n    //     (status: boolean, msg: string) => {\n    //       !status && setLoadingApplications(status);\n    //       if (status === false && msg.length) {\n    //         props.PushPopupAlert({\n    //           title: msg,\n    //           theme: PopupAlertTheme.danger,\n    //         });\n    //       }\n    //     }\n    //   );\n    // } else if (thisPeriod && loadingApplications) {\n    //   setLoadingApplications(false);\n    // }\n\n    // if (props.systemPositions === null) {\n    //   props.getPositions((status: boolean, msg: string) => {\n    //     setLoadingPosition(status);\n    //     console.log({ status: status, msg: msg });\n    //     if (msg.length) {\n    //       props.PushPopupAlert({\n    //         title: msg,\n    //         theme: PopupAlertTheme.danger,\n    //       });\n    //     }\n    //   });\n    // } else if (loadingPosition) {\n    //   setLoadingPosition(false);\n    // }\n\n    // LOADING COURSE ====================================\n    // if (\n    //   props.courses === null ||\n    //   (props.courses.length === 0 && loadingCourses)\n    // ) {\n    //   props.loadCourses(setLoadingCourses);\n    // } else if (loadingCourses) {\n    //   setLoadingCourses(false);\n    // }\n  }, [loadingClaims, loadingSession, props, thisPeriod]);\n\n  if (loading === true) {\n    return (\n      <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n        Loading Data...\n      </div>\n    );\n  }\n\n  if (props.application_sessions && props.application_sessions.length === 0) {\n    return <NoSession />;\n  }\n\n  // const displayClaimTitle = (thisClaim: CandidateClaimInterface): string => {\n  //   let result: string = thisClaim.claiming_on_id;\n  //   if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n  //     result =\n  //       thisClaim.userDetails.details.filter(\n  //         (item) => item.validation_status !== \"waiting\"\n  //       ).length > 0\n  //         ? adminDisplayClaimTitle(\n  //             props.documentReducer,\n  //             thisClaim.userDetails.details.filter(\n  //               (item) => item.validation_status !== \"waiting\"\n  //             ),\n  //             thisClaim\n  //           )\n  //         : \"Document not found\";\n  //   }\n  //   if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n  //     if (props.claiming.allApplications) {\n  //       let thisApplication = props.claiming.allApplications.find(\n  //         (item) => item._id === thisClaim.claiming_on_id\n  //       );\n  //       if (\n  //         thisApplication &&\n  //         props.claiming.allApplications &&\n  //         props.systemPositions\n  //       ) {\n  //         let thisPosition = props.systemPositions.find(\n  //           (item) => item.position_id === thisApplication!.position\n  //         );\n  //         if (thisPosition) {\n  //           result = thisPosition.position_title;\n  //         } else {\n  //           result = \"Application not found\";\n  //         }\n  //       }\n  //     }\n  //   }\n\n  //   if (\n  //     thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n  //     props.courses &&\n  //     props.claiming.allAnswer\n  //   ) {\n  //     let thisAnswer = getCourseIdBySheetId(\n  //       props.claiming.allAnswer,\n  //       thisClaim.claiming_on_id\n  //     );\n  //     if (thisAnswer && getCourseById(props.courses, thisAnswer.course)) {\n  //       result =\n  //         \"Exam of \" +\n  //         getCourseById(props.courses, thisAnswer.course)!.course_name;\n  //     } else {\n  //       result = \"Unknown exam\";\n  //     }\n  //   }\n\n  //   return result;\n  // };\n\n  // const getClaimInstitute = (\n  //   thisClaim: CandidateClaimInterface\n  // ): string | null => {\n  //   if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n  //     return null;\n  //   }\n  //   // if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n  //   //   if (props.claiming.allApplications) {\n  //   //     let thisApplication = props.claiming.allApplications.find(\n  //   //       (item) => item._id === thisClaim.claiming_on_id\n  //   //     );\n  //   //     if (\n  //   //       thisApplication &&\n  //   //       props.claiming.allApplications &&\n  //   //       props.systemPositions\n  //   //     ) {\n  //   //       // return thisApplication.\n  //   //       let thisPosition = props.systemPositions.find(\n  //   //         (item) => item.position_id === thisApplication!.position\n  //   //       );\n  //   //       if (thisPosition) {\n  //   //         return thisPosition.education_institute_id.education_institute_id;\n  //   //       }\n  //   //     }\n  //   //   }\n  //   // }\n\n  //   return null;\n  // };\n\n  const onPeriodChange = (period_id: string) => {\n    setPeriodChanged(true);\n    props.getAllClaims(2, period_id, (status: boolean, msg: string) => {\n      !status && setPeriodChanged(false);\n      if (status === false && msg.length) {\n        props.PushPopupAlert({\n          title: msg,\n          theme: PopupAlertTheme.danger,\n        });\n      }\n    });\n  };\n\n  const isClaimTypeActive = (\n    selectedType: PlansTypeKeys | \"all\",\n    currentType: PlansTypeKeys | \"all\"\n  ): boolean => {\n    if (currentType === \"all\" && selectedType === \"all\") {\n      return true;\n    } else if (currentType !== \"all\" && selectedType !== \"all\") {\n      if (currentType === selectedType) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const setSort = (thisProperty: string) => {\n    if (sortProperty === thisProperty && sortOrder === \"ASC\") {\n      setSortOrder(\"DESC\");\n    } else {\n      setSortOrder(\"ASC\");\n    }\n    setSortProperty(thisProperty);\n    setIsSorted(true);\n  };\n\n  const ClaimTypes = (\n    claims: ClaimToPrintInterface[]\n  ): {\n    title: string;\n    count: number;\n    type: PlansTypeKeys | \"all\";\n  }[] => {\n    let output: {\n      title: string;\n      count: number;\n      type: PlansTypeKeys | \"all\";\n    }[] = [{ title: \"All types\", count: claims.length, type: \"all\" }];\n\n    Object.values(PlansTypeKeys).forEach((PlansKey) => {\n      if (PlansKey !== PlansTypeKeys.MARKS_PUBLICATION) {\n        output.push({\n          title: capitalizeFirstLetter(reportClaimType(PlansKey)),\n          count:\n            claims.length > 0\n              ? claims.filter(\n                  (itm) => itm.claim_type === reportClaimType(PlansKey)\n                ).length\n              : 0,\n          type: PlansKey,\n        });\n      }\n    });\n\n    return output;\n  };\n\n  const ClaimLevels = (\n    claims: ClaimToPrintInterface[]\n  ): {\n    title: string;\n    count: number;\n    level: number | \"all\";\n  }[] => {\n    let output: {\n        title: string;\n        count: number;\n        level: number | \"all\";\n      }[] = [{ title: \"All levels\", count: claims.length, level: \"all\" }],\n      levels: number[] = [1, 2];\n    for (let i in levels) {\n      output.push({\n        title: \"Level \" + levels[i],\n        count: claims.filter((itm) => itm.claim_level === levels[i]).length,\n        level: levels[i],\n      });\n    }\n    return output;\n  };\n\n  const updateReportContent = (key: claimReportContentKeyInterface) => {\n    let index: number = reportContent.findIndex((item) => item.key === key);\n    let newArray: claimReportContentInterface[] = reportContent;\n    newArray[index].status = !newArray[index].status;\n    setReportContent(newArray);\n    let isSelectAllNeeded = newArray.find((item) => item.status === false);\n    if (isSelectAllNeeded) {\n      setSelectAll(false);\n    } else {\n      setSelectAll(true);\n    }\n\n    // UPDATE APPLICATION LIST FOR UPDATE ==============================\n    updateClaimToPrint();\n  };\n\n  const updateClaimToPrint = () => {\n    // UPDATE REPORT TITLE ========================\n    if (thisPeriod) {\n      let title = \"Claim Report \" + thisPeriod.session_plan_name;\n      // if (thisLevel!==\"all\") {\n      //   title = \"Claim Report - Level \"+thisLevel + thisPeriod.session_plan_name;\n      // }\n      setReportTitle(title);\n    }\n    // UPDATE CONTENT =============================\n    if (props.claiming.allClaims && props.claiming.claimTypes) {\n      let arrayNew: ClaimToPrintInterface[] = [];\n      let n: number = 1;\n      for (const key in props.claiming.allClaims) {\n        if (\n          Object.prototype.hasOwnProperty.call(props.claiming.allClaims, key)\n        ) {\n          for (const keyClaim in props.claiming.allClaims[key].claims) {\n            if (\n              Object.prototype.hasOwnProperty.call(\n                props.claiming.allClaims[key].claims,\n                keyClaim\n              )\n            ) {\n              const element = props.claiming.allClaims[key].claims[keyClaim];\n              const thisType = whichClaimType(props.claiming.allClaims[key]);\n              let dataArray: ClaimToPrintInterface = {\n                claim_id: n,\n                names:\n                  props.claiming.allClaims[key].userDetails.user_info.fname +\n                  \" \" +\n                  props.claiming.allClaims[key].userDetails.user_info.lname,\n                gender: props.claiming.allClaims[key].userDetails.user_info.sex\n                  ? \"Male\"\n                  : \"Female\",\n                national_id: props.claiming.allClaims[key].userDetails.n_id!,\n                phone: props.claiming.allClaims[key].userDetails.phone_number,\n                email: props.claiming.allClaims[key].userDetails.email,\n                claim_type: thisType ? thisType : \"\",\n                claim_level: element.level,\n                education_category: \"\",\n                claim_session: thisPeriod ? thisPeriod.session_plan_name : \"\",\n                date: DATE(element.createdAt),\n                decision: element.decision_taken_status\n                  ? element.decision_taken_status\n                  : \"PENDING\",\n                claim_title: props.claiming.allClaims[key].title,\n              };\n              for (const key in reportContent) {\n                if (Object.prototype.hasOwnProperty.call(reportContent, key)) {\n                  if (!reportContent[key].status) {\n                    delete dataArray[reportContent[key].key];\n                  }\n                }\n              }\n              arrayNew.push(dataArray);\n              n++;\n            }\n          }\n        }\n      }\n      setClaimToPrint(arrayNew);\n      arrayNew = [];\n      n = 1;\n    }\n  };\n\n  const FC_ClaimData = (\n    allClaims: CandidateClaimInterface[] | null\n  ): ClaimToPrintInterface[] | null => {\n    if (allClaims === null) return null;\n    let arrayNew: ClaimToPrintInterface[] = [];\n    let n: number = 1;\n    // LOOP IN ALL CLAIM ONE BY ONE ###########################\n    for (const key in allClaims) {\n      if (Object.prototype.hasOwnProperty.call(allClaims, key)) {\n        // LOOP IN ALL CLAIM OF ONE FILE ONE BY ONE ===========================\n        for (const keyClaim in allClaims[key].claims) {\n          if (\n            Object.prototype.hasOwnProperty.call(\n              allClaims[key].claims,\n              keyClaim\n            )\n          ) {\n            const element = allClaims[key].claims[keyClaim];\n            const thisType = whichClaimType(allClaims[key]);\n            let dataArray: ClaimToPrintInterface = {\n              claim_id: n,\n              names:\n                allClaims[key].userDetails.user_info.fname +\n                \" \" +\n                allClaims[key].userDetails.user_info.lname,\n              gender: allClaims[key].userDetails.user_info.sex\n                ? \"Male\"\n                : \"Female\",\n              national_id: allClaims[key].userDetails.n_id!,\n              phone: allClaims[key].userDetails.phone_number,\n              email: allClaims[key].userDetails.email,\n              claim_type: thisType ? thisType : \"\",\n              claim_level: element.level,\n              education_category:\n                allClaims[key].institute_id &&\n                !isEmptyOrSpaces(allClaims[key].institute_id)\n                  ? allClaims[key].institute_id\n                  : null,\n              claim_session: thisPeriod ? thisPeriod.session_plan_name : \"\",\n              date: DATE(element.createdAt),\n              decision: element.decision_taken_status\n                ? element.decision_taken_status\n                : \"PENDING\",\n              claim_title: allClaims[key].title\n                ? allClaims[key].title\n                : \"Undefined\",\n            };\n            // for (const key in reportContent) {\n            //   if (Object.prototype.hasOwnProperty.call(reportContent, key)) {\n            //     if (!reportContent[key].status) {\n            //       delete dataArray[reportContent[key].key];\n            //     }\n            //   }\n            // }\n            arrayNew.push(dataArray);\n            n++;\n          }\n        }\n      }\n    }\n    return arrayNew;\n  };\n\n  const resetReportContent = (currentState: boolean) => {\n    let newArray: claimReportContentInterface[] = reportContent;\n    for (const key in newArray) {\n      if (isChangeAllowed(newArray[key].key)) {\n        newArray[key].status = !currentState;\n      }\n    }\n\n    setReportContent(newArray);\n    setSelectAll(!currentState);\n    updateClaimToPrint();\n  };\n\n  const isChangeAllowed = (key: claimReportContentKeyInterface): boolean => {\n    if (\n      key === claimReportContentKeyInterface.names ||\n      key === claimReportContentKeyInterface.decision ||\n      key === claimReportContentKeyInterface.claim_session ||\n      key === claimReportContentKeyInterface.claim_type ||\n      key === claimReportContentKeyInterface.date\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  const FC_GeneratePDF = () => {\n    if (!document.querySelectorAll(\"#report_content tbody tr\").length) {\n      props.PushPopupAlert({\n        title: `Can't generate Report of empty Data`,\n        theme: PopupAlertTheme.warning,\n      });\n      return;\n    }\n\n    if (thisPeriod) {\n      const table: HTMLElement | null =\n        document.getElementById(\"report_content\");\n      const reportSettings: reportSettingsInterface = {\n        doneBy: props.auth.user.fname + \" \" + props.auth.user.lname,\n        title: \"Claim Report\",\n        subjectTitle: \"Claim type\",\n        subject:\n          props.claiming.selectedClaimType === \"all\"\n            ? \"All Types\"\n            : props.claiming.selectedClaimType,\n        period: thisPeriod.session_plan_name,\n        footer: \"Online Recruitment\",\n        institute:\n          thisEducation === \"all\"\n            ? \"All institute\"\n            : thisEducation.education_category_title,\n      };\n      table && generatePDF(reportSettings, table, setDownloading);\n    }\n  };\n\n  const FC_FilterClaims = (\n    allClaims: ClaimToPrintInterface[],\n    claimType: PlansTypeKeys | \"all\",\n    claimLevel: number | \"all\",\n    institute: education_category | \"all\"\n  ): ClaimToPrintInterface[] => {\n    let result: ClaimToPrintInterface[] = allClaims;\n    if (claimType !== \"all\") {\n      result = result.filter((item) => item.claim_type === claimType);\n    }\n    if (claimLevel !== \"all\") {\n      result = result.filter((item) => item.claim_level === claimLevel);\n    }\n\n    if (institute !== \"all\") {\n      result = result.filter(\n        (item) =>\n          item.education_category === null ||\n          item.education_category === institute.education_institute_id\n      );\n    }\n\n    return result;\n  };\n\n  return (\n    <Fragment>\n      <SideNavigation>\n        <div className=\"flex flex-col mb-4\">\n          <span className=\"text-sm text-gray-600 mb-2\">\n            Education categories:\n          </span>\n          {props.schoolLevels.education_categories === null ||\n          loadingInstitutes ? (\n            <Loading />\n          ) : props.schoolLevels.education_categories.length === 0 ? (\n            <span>No result found</span>\n          ) : (\n            <Fragment>\n              <div\n                onClick={() => setThisEducation(\"all\")}\n                className={`border rounded px-2 py-2 mb-2 cursor-pointer ${\n                  thisEducation === \"all\"\n                    ? \"bg-blue-600 text-white hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                    : \"hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                } font-bold flex flex-row items-center gap-2`}\n              >\n                {thisEducation === \"all\" ? (\n                  <MdRadioButtonChecked />\n                ) : (\n                  <MdRadioButtonUnchecked />\n                )}\n                <span>All</span>\n              </div>\n              {props.schoolLevels.education_categories.map((item, i) => (\n                <div\n                  onClick={() => setThisEducation(item)}\n                  key={i + 1}\n                  className={`border rounded px-2 py-2 mb-2 cursor-pointer ${\n                    thisEducation !== \"all\" &&\n                    thisEducation.education_institute_id ===\n                      item.education_institute_id\n                      ? \"bg-blue-600 text-white hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                      : \"hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                  } font-bold flex flex-row items-center gap-2`}\n                >\n                  {thisEducation !== \"all\" &&\n                  thisEducation.education_institute_id ===\n                    item.education_institute_id ? (\n                    <MdRadioButtonChecked />\n                  ) : (\n                    <MdRadioButtonUnchecked />\n                  )}\n                  <span>{item.education_category_title}</span>\n                </div>\n              ))}\n            </Fragment>\n          )}\n        </div>\n        <div className=\"\">\n          <div className=\"text-gray-600 text-sm mb-2\">Selected period:</div>\n          <div\n            onClick={() => setSelectPeriod(true)}\n            className=\"font-bold bg-blue-50 border border-blue-200 rounded py-2 cursor-pointer text-xs px-2 hover:underline  text-blue-600  mb-4 w-full flex flex-row items-center animate__animated animate__zoomIn\"\n          >\n            {thisPeriod !== null\n              ? `${thisPeriod.session_plan_name} - ${thisPeriod.period}`\n              : \"Filter by period\"}\n            <FiEdit className=\"text-3xl text-blue-600\" />\n          </div>\n        </div>\n        <div className=\"pt-1\">\n          <div className=\"text-sm text-gray-700 pb-2 pt-2\">Claim types:</div>\n          {props.claiming.claimTypes === null ||\n          FC_ClaimData(props.claiming.allClaims) === null ? (\n            <Loading />\n          ) : (\n            ClaimTypes(FC_ClaimData(props.claiming.allClaims)!).map(\n              (item, index: number) => (\n                <div\n                  onClick={() =>\n                    props.setSelectedClaimType(reportClaimType(item.type))\n                  }\n                  key={item.title + index}\n                >\n                  <MainItem\n                    title={item.title}\n                    count={item.count}\n                    active={isClaimTypeActive(\n                      props.claiming.selectedClaimType,\n                      item.type\n                    )}\n                  />\n                </div>\n              )\n            )\n          )}\n        </div>\n        <div className=\"pt-1\">\n          <div className=\"text-sm text-gray-700 pb-2 pt-2\">Claim level:</div>\n          {props.claiming.claimTypes === null ||\n          FC_ClaimData(props.claiming.allClaims) === null ? (\n            <Loading />\n          ) : (\n            ClaimLevels(FC_ClaimData(props.claiming.allClaims)!).map(\n              (item, index: number) => (\n                <div\n                  onClick={() => setThisLevel(item.level)}\n                  key={item.title + index}\n                >\n                  <MainItem\n                    title={item.title}\n                    count={item.count}\n                    active={item.level === thisLevel}\n                  />\n                </div>\n              )\n            )\n          )}\n        </div>\n      </SideNavigation>\n      <section>\n        {/* REPORT TITLE ============================================ */}\n        <div className=\"grid md:grid-cols-12\">\n          <div className=\"col-span-8\">\n            <div className=\"mt-4 mx-4 flex flex-col gap-1\">\n              <span className=\"text-3xl font-bold text-gray-700\">\n                Claim report\n              </span>\n            </div>\n          </div>\n          <div className=\"col-span-4\">\n            <div className=\"float-right mt-2\">\n              {props.claiming.allClaims && props.claiming.allClaims.length > 0 && (\n                <div className=\"flex flex-row items-center justify-end font-bold mb-2\">\n                  <BiExport className=\"text-2xl text-gray-500\" />\n                  <span className=\"text-gray-500\">Export as</span>\n                  <button\n                    className=\"px-4 py-1 ml-1 rounded bg-white border hover:text-blue-600 font-bold hover:bg-blue-50 border-gray-200\"\n                    disabled={loading}\n                    onClick={() => {\n                      updateClaimToPrint();\n                      setGenerateReportModal({\n                        reportType: \"EXCEL\",\n                        status: true,\n                      });\n                    }}\n                  >\n                    EXCEL\n                  </button>\n                  <button\n                    className={`px-4 py-1 ml-1 rounded bg-white border hover:text-blue-600 font-bold hover:bg-blue-50 border-gray-200 ${\n                      downloading && \"cursor-wait\"\n                    }`}\n                    onClick={() => FC_GeneratePDF()}\n                    disabled={loading || downloading}\n                  >\n                    PDF\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {/* END REPORT TITLE ============================================ */}\n        <div className=\"bg-white my-4\">\n          <div className=\"w-full px-2 py-2\">\n            <input\n              onChange={(e) => setSearchInput(e.target.value)}\n              type=\"text\"\n              value={searchInput}\n              placeholder=\"Search...\"\n              className=\"w-full bg-gray-100 py-2 px-3 rounded focus:border-gray-800\"\n              disabled={\n                props.claiming.allClaims === null ||\n                props.claiming.claimTypes === null ||\n                FC_ClaimData(props.claiming.allClaims) === null ||\n                periodChanged\n              }\n            />\n          </div>\n          <table className=\"w-full shadow\" id=\"report_content\">\n            <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n              <tr>\n                <td className=\"px-2 py-2\">#</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"names\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Applicant names <BiSort />\n                  </div>\n                </td>\n                <td className=\"px-2 py-2\">National ID</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"gender\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Gender <BiSort />\n                  </div>\n                </td>\n                <td className=\"px-2 py-2\">Phone</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_title\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Title <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_type\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Type <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_level\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Level <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"decision\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Status <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"date\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Date <BiSort />\n                  </div>\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {props.claiming.allClaims === null ||\n              props.claiming.claimTypes === null ||\n              periodChanged ? (\n                <TableLoading cols={10} />\n              ) : FC_ClaimData(props.claiming.allClaims) === null ? (\n                <TableLoading cols={10} />\n              ) : FC_FilterClaims(\n                  FC_ClaimData(props.claiming.allClaims)!,\n                  props.claiming.selectedClaimType,\n                  thisLevel,\n                  thisEducation\n                ).length === 0 ? (\n                <tr>\n                  <td colSpan={10} className=\"px-2 py-2\">\n                    <div className=\"flex flex-col text-gray-400 items-center justify-center bg-gray-100 rounded py-10\">\n                      <ImFilesEmpty className=\"text-8xl text-gray-400 mb-2 animate__animated animate__shakeX\" />\n                      <span className=\"text-sm font-bold\">\n                        No result found! Please try to search again\n                      </span>\n                      <div className=\"w-full mt-2 flex flex-row items-center justify-center\">\n                        <ul className=\"text-sm py-2 text-blue-600 font-bold flex flex-row gap-2\">\n                          <li\n                            onClick={() => setSelectPeriod(true)}\n                            className=\"underline text-gray-500 cursor-pointer\"\n                          >\n                            Filter by period\n                          </li>\n                          <li className=\"text-gray-400 italic\">or</li>\n                          <li className=\"text-gray-500\">\n                            Filter by Claim type\n                          </li>\n                          <li className=\"text-gray-400 italic\">or</li>\n                          <li className=\"text-gray-500\">\n                            Filter by Claim Level\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </td>\n                </tr>\n              ) : (\n                sortThisArray(\n                  isSorted,\n                  searchData(\n                    FC_FilterClaims(\n                      FC_ClaimData(props.claiming.allClaims)!,\n                      props.claiming.selectedClaimType,\n                      thisLevel,\n                      thisEducation\n                    ),\n                    searchInput\n                  ),\n                  sortProperty,\n                  sortOrder\n                ).map((item: ClaimToPrintInterface, i) => (\n                  <tr\n                    key={i + 1}\n                    className={`${\n                      i % 2 !== 0 ? \"bg-gray-100\" : \"bg-white\"\n                    } text-gray-600 hover:bg-blue-100 hover:text-blue-700 border-b border-gray-300 hover:border-blue-500 text-sm`}\n                  >\n                    <td className=\"px-2 py-2\">{i + 1}</td>\n                    <td className=\"px-2 py-2\">{item.names}</td>\n                    <td className=\"px-2 py-2\">{item.national_id}</td>\n                    <td className=\"px-2 py-2\">{item.gender}</td>\n                    <td className=\"px-2 py-2\">{item.phone}</td>\n                    <td className=\"px-2 py-2\">{item.claim_title}</td>\n                    <td className=\"px-2 py-2\">{item.claim_type}</td>\n                    <td className=\"px-2 py-2\">{\"Level \" + item.claim_level}</td>\n                    <td className=\"px-2 py-2\">\n                      {item.decision}\n                      {/* {capitalizeFirstLetter(item.decision)} */}\n                    </td>\n                    <td className=\"px-2 py-2\">{item.date}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </section>\n      {/* GENERATE DYNAMIC REPORT CONTENT MODAL */}\n      {generateReportModal !== null && generateReportModal.status === true && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              {/* <IoBriefcase className=\"text-5xl text-gray-500\" /> */}\n              <div className=\"flex flex-col\">\n                <span className=\"font-bold text-2xl text-gray-500\">\n                  Generating Report contents\n                </span>\n                <span className=\"text-sm text-blue-600 font-normal\">\n                  Generating {generateReportModal.reportType} Report\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setGenerateReportModal(null)}\n          backDropClose={false}\n          widthSizeClass={ModalSize.medium}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <div className=\"px-6\">\n            <div className=\"my-2 text-base text-gray-700 sm:text-lg\">\n              <div className=\"flex flex-col\">\n                <label>Title</label>\n                <input\n                  type=\"text\"\n                  className={`text-left input-white w-20 inline-block ${\n                    formError && formError.element === \"report_title\"\n                      ? \"border-red-500\"\n                      : \"border-gray-500\"\n                  } border-2`}\n                  placeholder=\"Sub Category Title\"\n                  value={reportTitle}\n                  onChange={(e) => {\n                    setFormError(null);\n                    setReportTitle(e.target.value);\n                  }}\n                  disabled={loading}\n                />\n                {formError && formError.element === \"report_title\" && (\n                  <span className=\"text-red-500\">{formError.msg}</span>\n                )}\n              </div>\n              <div className=\"flex flex-col mt-2\">\n                <label>Report content</label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 items-center gap-2 mt-2\">\n                  {reportContent.map((item, index) => (\n                    <div\n                      key={index}\n                      className={`flex items-center gap-1 ${\n                        isChangeAllowed(item.key)\n                          ? \"cursor-pointer\"\n                          : \"cursor-not-allowed\"\n                      }`}\n                      onClick={() =>\n                        isChangeAllowed(item.key) &&\n                        updateReportContent(item.key)\n                      }\n                      title={\n                        !isChangeAllowed(item.key)\n                          ? \"Required for every report!\"\n                          : \"\"\n                      }\n                    >\n                      {item.status ? (\n                        <MdCheckBox className=\"w-6 h-6 text-blue-700\" />\n                      ) : (\n                        <MdCheckBoxOutlineBlank className=\"w-6 h-6\" />\n                      )}\n                      <span>{item.title}</span>\n                    </div>\n                  ))}\n                </div>\n                {formError && formError.element === \"report_content\" && (\n                  <span className=\"text-red-500\">{formError.msg}</span>\n                )}\n              </div>\n            </div>\n            <div className=\"flex justify-between mb-2 mt-4\">\n              <div\n                className={`flex items-center gap-1 cursor-pointer`}\n                onClick={() => resetReportContent(selectAll)}\n              >\n                {selectAll ? (\n                  <MdCheckBox className=\"w-6 h-6 text-blue-700\" />\n                ) : (\n                  <MdCheckBoxOutlineBlank className=\"w-6 h-6\" />\n                )}\n                <span>Select all</span>\n              </div>\n\n              {claimToPrint && !loading && (\n                <ExportToExcel\n                  fileData={claimToPrint}\n                  fileName={reportTitle}\n                  btnName=\"Generate\"\n                />\n              )}\n            </div>\n          </div>\n        </Modal>\n      )}\n      {/* END GENERATE DYNAMIC REPORT CONTENT MODAL */}\n      {selectPeriod && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <MdHistory className=\"text-5xl text-blue-600\" />\n              <span className=\"flex flex-col\">Choose a period</span>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => thisPeriod !== null && setSelectPeriod(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <ChooseSession\n            allSession={props.application_sessions}\n            setSelectSession={(value: SessionPlanInterface | \"all\") => {\n              value !== \"all\" && setThisPeriod(value);\n              value !== \"all\" && onPeriodChange(value.session_plan_id);\n              value !== \"all\" && setSelectPeriod(false);\n            }}\n            chooseAll={false}\n            currentSelected={thisPeriod ? thisPeriod : \"all\"}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  schoolLevels,\n}: StoreState): {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    application_sessions: sessionPlan.allSessionPlans,\n    claiming,\n    documentReducer: document,\n    schoolLevels,\n  };\n};\n\nexport const ClaimingReport = connect(mapStateToProps, {\n  getAllClaims,\n  GetClaimingTypes,\n  getAllApplications,\n  GetAllSessionPlans,\n  loadEducationCategories,\n  setSelectedClaimType,\n  PushPopupAlert,\n})(_ClaimingReport);\n"],"sourceRoot":""}