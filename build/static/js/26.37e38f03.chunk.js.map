{"version":3,"sources":["utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","components/Courses/Courses.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","components/Questions/QuestionItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","components/QuestionPreview/QuestionPreview.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","containers/PrepareExam/EditExam/EditExam.tsx","containers/PrepareExam/ExamsList/ExamDetails.tsx","containers/PrepareExam/ExamsList/ExamsList.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","toMultipleChoice","answers","answer","value","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","_UploadQuestion","props","setLoading","setState","loading","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedEducationCategory","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","item","period","periods","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","loadCourses","state","searchCourseInput","className","this","education_category_title","school_level_name","onChange","e","target","placeholder","onClick","schoolLevels","education_categories","loadEducationCategories","loadSchoolLevels","style","minHeight","searchData","map","setSelectedCourse","selected_course_id","course_name","course_code","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","educationCategories","Component","UploadQuestion","connect","auth","questionBank","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","selectedQuestionItem","selectedKey","QuestionAnswer","data","wholeQuestion","language","selectedLanguage","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","useState","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","marks","setSelectedKey","QuestionLanguages","lang","checkAns","uuidv4","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","console","log","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","HandleInput","Title","languages","questionItems","handleUpdateQuestionDetails","_id","description","Description","QuestionChapters","selectedCourse","chapters","setAddChapter","addedChapters","name","ChangeLanguage","visible","setVisible","languagesList","setSelectedLanguage","_EditQuestion","QuestionLang","question","actionStatus","PushPopupAlert","PopupAlertTheme","success","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","window","confirm","ans","chapter_id","submitEditedQuestion","a","addedQuestion","question_id","customNumber","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","selectedQuestion","questionLangs","testing","Loading","LoadingType","white","onSubmit","Modal","large","Courses","selected_course","EditQuestion","system","prepareExam","setUploadedQuestions","QuestionItem","editMode","setEditMode","setSelectedQuestion","select","callBack","number","extraLarge","questionsList","questionAnswers","answerQuestionFn","preview","submitQuestionAnswer","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","checkAnswer","available_answers","selectedQuestionAnswer","x","addAnswerItemFn","newAnswers","useEffect","oldAnswers","temp","t","addAnswer","SimpleCalculated","answeredValue","getRandomArbitrary","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","checkIfSelected","displayWindow","setDisplayWindow","setSelectedAnswer","selectedQuestionId","selectedLang","selectedExam","questions","testLang","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","Questions","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","to","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","actionType","changeProctoringRule","proctoringRules","newData","selected","addQuestionToPaper","removeToQuestionPaper","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","is_active","formErr","selectCourse","currentStep","StepStatus","Step1","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","validateTwoTime","axios","post","API","QBank","exam_status","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","redirectToExams","errors","message","applicationPeriods","loadApplicationPeriods","examsList","loadExamsListByPeriod","application_session","editQuestion","total","handleChangeTermes","setSelectCourse","setSelectPeriod","GetExamsByPeriod","setSelectedPeriod","Prepare","addQuestionModal","submitExam","qts","stepStatus","disabled","NoResultThemes","Dark","AlertInterface","body","PrepareExam","loadExamsList","QuestionPreview","doExam","setSelectedExamQuestion","setQuestionLanguage","selectLang","setSelectLang","filterLanguages","langs","langItem","testLangQ","l","width","findQuestionType","question_answers","candidate_exam","Shuffle","PrepareExamSteps","Steps","session_plan_name","Switch","_EditExam","addEditExamQuestion","put","setLoadingProps","setSelectedExam","findExamDetails","EditExam","DATE_DATA","ExamDetails","exam","height","exam_total_marks","DATE","createdAt","setSelectedExamEdit","_ExamsList","examsByPeriod","Exam","setSelectedExamItem","examToEdit","colSpan","ApplicationPeriods","ExamsList"],"mappings":"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","file":"static/js/26.37e38f03.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport {\n  questionType,\n  questionTypeElements,\n  questionTypeElementsType,\n} from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answer: QuestionAnswerInterface[];\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answer: this.props.selectedQuestion.answer,\n      selectedLanguage: QuestionLanguages[0],\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n    };\n  }\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.id === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: res,\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: res,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [editedAnswer.value[0], question.answer[0].value[1]],\n          status: [\n            editedAnswer.value[0] - question.answer[0].value[1],\n            editedAnswer.value[0] + question.answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: newEditedAnswer,\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: newEditedAnswer,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: [editedAnswer],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answer.filter((itm) => itm.status === true).length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerInterface\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerInterface[] = current.answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          answer: res,\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.id === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: res,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answer: this.state.answer,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({ selectedKey: selectedKey });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n          <ChangeLanguage\n            setSelectedLanguage={this.setSelectedLang}\n            selectedLanguage={this.state.selectedLanguage}\n            languagesList={questionLangs}\n          />\n        )}\n        {console.log(\"Langs: \", questionLangs)}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col\">\n                  <label className=\"text-gray-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-blue-600 flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() =>\n                      this.setState({ selectedKey: SelectedKeysEdit.Title })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setState({\n                        selectedKey: SelectedKeysEdit.Description,\n                      })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course !== null && (\n              <QuestionChapters\n                selectedCourse={\n                  this.props.course.courses &&\n                  this.props.course.courses.find(\n                    (itm) => itm.course_id === this.state.course\n                  )\n                }\n                addedChapters={this.state.chapters}\n                setAddChapter={this.setAddChapter}\n              />\n            )}\n            <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n              <div className=\"\"></div>\n              <div\n                className=\"btn bg-blue-600 text-white cursor-pointer\"\n                onClick={() => this.setState({ showQuestionChapters: false })}\n              >\n                Done\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerInterface }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  questionTypeElementsType,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerInterface }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from 'react'\nimport { IoShieldCheckmarkSharp } from 'react-icons/io5';\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      numberOfTests: 2,\n    }\n  }\n  \n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\"\n      },\n      {\n        id: 2,\n        value: \"secondnumber\"\n      }\n    ]\n    let defaultNumberOfTests = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n    return (\n      <div className=\"mt-2\">\n        <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RunTest\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answer).map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <>\n              <div className=\"flex flex-col w-full\">\n                <div>Correct answer</div>\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    setEditQuestionAnswer(e.target.value);\n                    if (\n                      editQuestionAnswer !== \"\" &&\n                      !isNaN(parseFloat(editQuestionAnswer))\n                    ) {\n                      props.updateAnswerNumericalValue(check, item.id, {\n                        value: [parseFloat(e.target.value)],\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }\n                  }}\n                  value={`${editQuestionAnswer}`}\n                  type=\"text\"\n                  className=\"input-gray-lg w-full border-2 border-gray-500\"\n                />\n              </div>\n            </>\n          ) : (\n            <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n              <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              <span>Answer: </span>\n              <span>{item.value[0]}</span>\n            </div>\n          )}\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div\n              className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n            >\n              <div className=\"flex flex-col w-full\">\n                <div>Error on the answer</div>\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    setEditQuestionAnswerStatus(e.target.value);\n                    if (\n                      editQuestionAnswerStatus !== \"\" &&\n                      !isNaN(parseFloat(editQuestionAnswerStatus))\n                    ) {\n                      props.updateAnswerNumericalValue(check, item.id, {\n                        value: item.value,\n                        status: [parseFloat(e.target.value)],\n                        id: item.id,\n                      });\n                    }\n                  }}\n                  value={`${editQuestionAnswerStatus}`}\n                  type=\"text\"\n                  className=\"input-gray-lg w-full border-2 border-gray-500\"\n                />\n              </div>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n              <MdError className=\"text-2xl text-gray-500\" />\n              <span className=\"text-gray-500\">Error: </span>\n              <span className=\"text-gray-500\">{item.value[1]}</span>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport SimpleCalculate from '../AnswersQuestionTypes/SimpleCalculate';\nimport Numerical from '../AnswersQuestionTypes/Numerical';\nimport ShortAnswer from '../AnswersQuestionTypes/ShortAnswer';\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.SimpleCalculate && \n        <SimpleCalculate \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && \n        <Numerical \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.ShortAnswer && \n        <ShortAnswer \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateShortAnswer={props.updateShortAnswer}\n        />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default EditSimpleCalculate\n","import React from 'react'\nimport { RiCheckboxBlankCircleLine } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { MdRadioButtonChecked } from 'react-icons/md';\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"}`}>\n        <div \n          onClick={() => {\n            let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n            if (check === undefined) {\n              check = props.wholeQuestion[0];\n            }\n            props.editTrueFalseStatus(\n              item.id, !item.status\n            )\n          }}\n          className={`flex flex-row items-center gap-2 cursor-pointer ${item.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600 w-40`}>\n            {item.status === false ?\n            <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" /> :\n            <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default TrueFalse\n","import React, { useState } from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, QuestionLanguages, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { v4 as uuidv4 } from 'uuid';\nimport TrueFalse from '../AnswersQuestionTypes/TrueFalse';\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<{lang: LanguageInterface; answer: QuestionAnswerInterface}[]>([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(itm => itm.language === answer.lang.key);\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  }\n  const handleAnswer = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: { value: itm.answer.value, status: status, id: itm.answer.id }\n        })\n      }\n      setAddedAnswer(backup);\n    }\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && \n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      }\n      \n      {showAddAnswerStatus === false ?\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n        <div className=\"flex flex-col gap-2\">\n        {QuestionLanguages.map((item, i) => (\n          <div key={i + 1}className=\"flex flex-col gap-2\">\n            <span className=\"font-bold text-blue-600\">{item.value}</span>\n          <input \n            value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n              handleAnswer(\n                item, \n                { \n                  id: addedAnswer.length > 0 ? addedAnswer[0].answer.id : uuidv4(),\n                  value: e.target.value, \n                  status: addedAnswer.length > 0 ? addedAnswer[0].answer.status : false\n                })}\n            type=\"text\" className=\"input-gray-lg\" />\n          </div>\n        ))}\n        </div>\n        <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n        <div \n        onClick={() => handleStatus(addedAnswer.length > 0 ? !(addedAnswer[0].answer.status) : false)}\n        className={`flex flex-row items-center gap-2 cursor-pointer ${addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600`}>\n          {addedAnswer.length > 0 && addedAnswer[0].answer.status === false ?\n          <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n          <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n          <span className=\"font-bold text-xl\">{addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"True\" : \"False\"}</span>\n        </div>\n        <div onClick={() => AddAnswer()} className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\">Add</div>\n        <div onClick={() => setShowAddAnswer(false)} className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\">Cancel</div>\n      </div>\n      </div>}\n      {showAddAnswerStatus === false &&\n      <div className=\"rounded bg-white px-2 pb-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.TrueFalse && \n        <TrueFalse \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editTrueFalseStatus={props.editTrueFalseStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n        />\n        }\n      </div>}\n    </div>\n  )\n}\n\nexport default EditTrueFalse\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  questionTypeElementsType,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-row items-center animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-3\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(false);\n  // const [minimize, setMinimize] = useState<boolean>(true);\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n              {/* <AiOutlineMinusCircle onClick={() => setMinimize(false)} className=\"text-2xl\" /> */}\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      <div\n        onClick={() => props.select === true && props.callBack(props.question)}\n        className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n          props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n        } hover:border-blue-600 mb-3`}\n      >\n        <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n          <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n            <div>\n              {props.select === false ? (\n                <div className=\"font-bold text-blue-600\">({props.number})</div>\n              ) : props.status === true ? (\n                <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n              ) : (\n                <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n              )}\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">\n                {props.questionTypes.questionTypes &&\n                  props.questionTypes.questionTypes.find(\n                    (itm) => itm.id && itm.id === props.question.type\n                  )?.title}\n              </span>\n              <span className=\"font-bold\">\n                {props.question.question[0].title}\n              </span>\n              <div\n                className=\"w-full text-xs\"\n                dangerouslySetInnerHTML={{\n                  __html: props.question.question[0].description,\n                }}\n              ></div>\n            </div>\n          </div>\n          {props.select === false && (\n            <div className=\"flex flex-row items-center gap-2\">\n              <div\n                onClick={() => setSelectedQuestion(props.question)}\n                className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <CgDetailsMore className=\"text-3xl text-gray-700\" />\n              </div>\n              <div\n                onClick={() => setEditMode(true)}\n                className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <MdEdit className=\"text-3xl text-blue-700\" />\n              </div>\n              <div\n                onClick={() =>\n                  props.select === false && props.callBack(props.question)\n                }\n                className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n              >\n                <IoMdTrash className=\"text-3xl text-yellow-700\" />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      {editMode === true && (\n        <Modal\n          title=\"\"\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setEditMode(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={false}\n          padding={{ title: false }}\n        >\n          <div className=\"pt-0\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        </Modal>\n      )}\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.type === questionTypeElementsType.SingleMultiple\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  TrueFalseQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n\n  const addAnswer = (\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [\n          ...temp,\n          {\n            id: t.id,\n            value: t.value,\n            status: false,\n          },\n        ];\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  SimpleCalculatedQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: [newAnswers[0].value],\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0].toString()\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  ShortAnswerQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: \"\",\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"200px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: [item.value],\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {getRandomArbitrary(item.value[0], item.value[1])\n                .toFixed(2)\n                .toString()}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: item.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ans: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(\n              (it) => it.status.toString() === ans.status\n            );\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let ans = temp.answer.find((itm) => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(\n            props.selectedQuestionAnswer.question_id,\n            props.selectedLanguage,\n            ans\n          );\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [\n            ...res,\n            {\n              id: ans.id,\n              lang: item.language,\n              status: ans.status.toString(),\n            },\n          ];\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.setLoading\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) =>\n              itm.period === this.props.periods.selected_period?.session_plan_id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Confirm preparation\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => {\n              if (\n                this.props.periods.selected_period !== null &&\n                this.props.periods.selected_period.is_active === true\n              ) {\n                this.setState({ selectPeriod: false });\n              } else {\n                alert(\"Please choose active session\");\n              }\n            }}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n})(_PrepareExam);\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-80 md:pb-60\">\n          {/* <div\n            className={`h-8 ${\n              props.submitQuestionAnswer === true\n                ? \"animate__animated animate__fadeIn bg-yellow-50 text-yellow-700 animate-pulse\"\n                : \"text-blue-400 italic\"\n            } px-3 py-2 rounded  font-bold text-sm`}\n          >\n            {props.submitQuestionAnswer === true\n              ? \"Saving your answer ...\"\n              : \"\"}\n          </div> */}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.title,\n                    }}\n                    className=\"text-sm text-gray-600\"\n                  ></div>\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.description,\n                    }}\n                    className=\"text-lg text-gray-800 font-bold\"\n                  ></div>\n                </div>\n              )}\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div\n                  onClick={() => setSelectLang(!selectLang)}\n                  className=\"flex flex-row items-center gap-2\"\n                >\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{ width: \"97px\" }}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">\n                      Language\n                    </span>\n                    <span\n                      title={\n                        filterLanguages().find(\n                          (itm) => itm.key === selectedLanguage\n                        )?.value\n                      }\n                      className=\"text-sm font-bold text-blue-600 truncate\"\n                      style={{ width: \"97px\" }}\n                    >\n                      {\n                        filterLanguages().find(\n                          (itm) => itm.key === selectedLanguage\n                        )?.value\n                      }\n                    </span>\n                  </div>\n                  <div\n                    className={`${\n                      selectLang === true\n                        ? \"bg-yellow-800 text-white\"\n                        : \"bg-gray-50 hover:bg-blue-600\"\n                    } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                  >\n                    {selectLang === true ? (\n                      <FaTimes className=\"text-xl my-2 mx-2\" />\n                    ) : (\n                      <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                    )}\n                  </div>\n                </div>\n                {selectLang === true && (\n                  <div\n                    className=\"relative rounded overflow-hidden\"\n                    style={{ width: \"182px\" }}\n                  >\n                    <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                      {filterLanguages().map((item, i) => (\n                        <span\n                          onClick={() => {\n                            props.setQuestionLanguage(item.key);\n                            setSelectLang(!selectLang);\n                            setSelectedLanguage(item.key);\n                          }}\n                          key={i + 1}\n                          className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                            selectedLanguage === item.key\n                              ? \"bg-blue-800 font-extrabold border-blue-800\"\n                              : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                          }`}\n                        >\n                          {selectedLanguage === item.key ? (\n                            <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                          ) : (\n                            <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                          )}{\" \"}\n                          {item.value}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"my-4 py-2 px-2 bg-white rounded\"\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answer\n                      )\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addEditExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addEditExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      this.props.addEditExamQuestion(question);\n    } else {\n      alert(\n        \"You can not add questions while its time has ended or being done!\"\n      );\n    }\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      if (\n        window.confirm(\n          \"Are you sure do you want to remove question from the exam questions paper?\"\n        ) === true\n      ) {\n        this.props.addEditExamQuestion(question);\n      }\n    } else {\n      alert(\n        \"You can not remove questions while its time has ended or being done!\"\n      );\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = true;\n    // if (\n    //   this.props.prepareExam.selectedExam === null ||\n    //   this.props.prepareExam.selectedExam.questions.length !== 0\n    // ) {\n    //   conf = window.confirm(\n    //     \"Are you sure do you want to change course? You will loose your selected questions\"\n    //   );\n    // }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0 ||\n      this.props.course.selected_course === null\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.props.setLoadingProps\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.props.setLoadingProps\n          );\n      }\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (\n      this.props.course.courses !== null &&\n      this.props.course.selected_course === null\n    ) {\n      let myCourse = this.props.course.courses.find(\n        (itm) => itm.course_id === this.props.selectedExam.course\n      );\n      if (myCourse !== undefined) {\n        this.props.setSelectedCourse(myCourse);\n        this.chooseCourse(myCourse);\n      }\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        {validateExamDate(\n                          this.props.selectedExam.exam_date,\n                          this.props.selectedExam.start_time,\n                          this.props.selectedExam.end_time\n                        ) === ExamTimeStatus.Waiting && (\n                          <div\n                            onClick={() =>\n                              this.props.selectedCourse === null\n                                ? this.setState({ selectCourse: true })\n                                : this.setState({ addQuestionModal: true })\n                            }\n                            className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                          >\n                            <MdAdd className=\"text-2xl\" /> Add question\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Editing Exam\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                {this.props.prepareExam.selectedExam &&\n                validateExamDate(\n                  this.props.prepareExam.selectedExam!.exam_date,\n                  this.props.prepareExam.selectedExam!.start_time,\n                  this.props.prepareExam.selectedExam!.end_time\n                ) === ExamTimeStatus.Waiting ? (\n                  <div\n                    onClick={() => this.submitExamPreparation()}\n                    className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  >\n                    Confirm edit exam\n                  </div>\n                ) : (\n                  <div>Can not edit</div>\n                )}\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addEditExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n})(_EditExam);\n","import React from \"react\";\nimport { GoTrashcan } from \"react-icons/go\";\nimport { MdClose, MdEdit } from \"react-icons/md\";\nimport {\n  applicationPeriodsStoreInterface,\n  courseStoreInterface,\n} from \"../../../actions\";\nimport { ExamItemResponse } from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\ninterface ExamDetailsProps {\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  exam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  setSelectedExamEdit: (exam: ExamItemResponse | null) => void;\n}\n\nconst ExamDetails = (props: ExamDetailsProps) => {\n  return (\n    <div className=\"fixed h-full w-full bg-black bg-opacity-50 top-0 left-0 flex items-center justify-center z-50 animate__animated animate__fadeIn animate__faster overflow-y-auto\">\n      <div className=\"group absolute right-0 bg-white shadow-xl w-3/4 md:w-2/4 border z-50 h-full animate__animated animate__fadeInRight animate__faster\">\n        <div className=\"bg-white text-blue-700 font-bold text-2xl flex flex-row justify-between gap-3 items-center px-3 py-3\">\n          <div>\n            <span className=\"font-bold\">\n              {props.course.courses &&\n                props.course.courses.find(\n                  (itm) => itm.course_id === props.exam.course\n                )?.course_code}\n            </span>\n            -\n            {props.course.courses &&\n              props.course.courses.find(\n                (itm) => itm.course_id === props.exam.course\n              )?.course_name}\n          </div>\n          <div\n            onClick={() => props.setSelectedExam(null)}\n            className=\"text-2xl text-red-600 bg-red-50 group-hover:bg-red-100 rounded-full p-1 cursor-pointer\"\n          >\n            <MdClose />\n          </div>\n        </div>\n        <div\n          className=\"px-3 py-6 text-sm overflow-y-auto bg-gray-100\"\n          style={{ height: \"80vh\" }}\n        >\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam total marks</span>\n            <span className=\"text-blue-800 font-bold bg-blue-100 rounded-full px-2\">\n              {props.exam.exam_total_marks}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam date</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.exam_date)}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam start time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.start_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam ending time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.end_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam duration</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.duration}mins\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam number of questions</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.questions.length}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam period</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.periods.applicationPeriods &&\n                props.periods.applicationPeriods.find(\n                  (itm) => itm.session_plan_id === props.exam.period\n                )?.session_plan_name}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam description</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.discription}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam terms and conitions</span>\n            <div\n              dangerouslySetInnerHTML={{ __html: props.exam.termes }}\n              className=\"text-blue-600 font-bold\"\n            ></div>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600 mb-2\">Exam rules</span>\n            <div className=\"text-blue-600 font-bold bg-white rounded\">\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Leave browser</span>\n                <span\n                  className={`${\n                    props.exam.rules.allow_to_leave_browser === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.allow_to_leave_browser === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Copy</span>\n                <span\n                  className={`${\n                    props.exam.rules.copy_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.copy_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Paste</span>\n                <span\n                  className={`${\n                    props.exam.rules.paste_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.paste_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Right click</span>\n                <span\n                  className={`${\n                    props.exam.rules.right_click_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.right_click_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Come back after leaving room</span>\n                <span\n                  className={`${\n                    props.exam.rules.stop_candidate_when_comeback === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.stop_candidate_when_comeback === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam status</span>\n            <span\n              className={`${\n                validateExamDate(\n                  props.exam.exam_date,\n                  props.exam.start_time,\n                  props.exam.end_time\n                ) === ExamTimeStatus.Online\n                  ? \"text-green-600 font-bold bg-green-100\"\n                  : \"text-yellow-600 font-bold bg-yellow-100\"\n              } rounded-full px-3 py-1`}\n            >\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              )}\n            </span>\n          </div>\n\n          <div className=\"flex flex-row items-center justify-between py-3\">\n            <span className=\"text-gray-600\">Exam created at</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.createdAt)}\n            </span>\n          </div>\n        </div>\n        <div className=\"bg-white p-3 pt-0 rounded-b mt-5 absolute bottom-0 w-full\">\n          {\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 my-2\">\n              <div\n                onClick={() => props.setSelectedExamEdit(props.exam)}\n                className=\"bg-blue-100 hover:bg-blue-600 hover:text-white rounded p-3 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-blue-800\"\n              >\n                <div>\n                  <MdEdit className=\"text-2xl\" />\n                </div>\n                <span className=\"text-base\">Edit</span>\n              </div>\n              <div></div>\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              ) === ExamTimeStatus.Waiting ? (\n                <div\n                  onClick={() => alert(\"Deleted\")}\n                  className=\"bg-red-50 hover:bg-red-600 hover:text-white rounded p-3 border border-red-50 group-hover:border-red-100 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-red-800\"\n                >\n                  <div>\n                    <GoTrashcan className=\"text-2xl\" />\n                  </div>\n                  <span className=\"text-base\">Remove</span>\n                </div>\n              ) : (\n                <div></div>\n              )}\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExamDetails;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport {\n  ExamItemResponse,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { Link } from \"react-router-dom\";\nimport ExamDetails from \"./ExamDetails\";\nimport { EditExam } from \"../EditExam/EditExam\";\nimport { validateExamDate } from \"../../../utils/question_bank\";\n\ninterface ExamsListProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedExam: (exam: ExamItemResponse) => void;\n}\ninterface ExamsListState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  selectedExam: ExamItemResponse | null;\n  examToEdit: ExamItemResponse | null;\n}\n\nclass _ExamsList extends Component<ExamsListProps, ExamsListState> {\n  constructor(props: ExamsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      duration: 1,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      selectedExam: null,\n      examToEdit: null,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  examsByPeriod = (Exam: ExamItemResponse[]) => {\n    let temp = Exam.filter(\n      (item) =>\n        item.period === this.props.periods.selected_period?.session_plan_id\n    );\n    return temp;\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    // if (this.props.course.selected_course === null) {\n    //   this.setState({ selectCourse: true });\n    // }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n    // if (this.props.prepareExam.examsList === null || this.props.prepareExam.examsList.length === 0) {\n    if (this.props.periods.selected_period !== null) {\n      this.props.loadExamsListByPeriod(\n        this.props.periods.selected_period.session_plan_id,\n        this.setLoading\n      );\n    } else {\n      this.props.auth.application_session &&\n        this.props.loadExamsListByPeriod(\n          this.props.auth.application_session.session_plan_id,\n          this.setLoading\n        );\n    }\n    // }\n  };\n  setSelectedExamItem = (exam: ExamItemResponse | null) => {\n    this.setState({ selectedExam: exam });\n  };\n  setSelectedExamEdit = (exam: ExamItemResponse | null) => {\n    this.setState({ examToEdit: exam });\n    if (exam === null) {\n      this.setState({ selectedExam: null });\n    }\n  };\n  setUploadingStatus = (status: boolean) => {\n    alert(\"Hello\");\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n  }\n  render() {\n    return (\n      <Fragment>\n        {this.state.examToEdit === null ? (\n          <div>\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-row items-center\">\n                  {/* <RiFilePaperFill className=\"text-7xl text-blue-600\" /> */}\n                  <div className=\"flex flex-col px-2\">\n                    <span className=\"text-gray-600 text-2xl font-bold\">\n                      List of exams\n                    </span>\n                    <span className=\"text-blue-600 text-sm font-bold mt-1\">\n                      Period:{\" \"}\n                      {this.props.periods.selected_period === null ? (\n                        <span className=\"text-yellow-700 italic\">\n                          Not selected!\n                        </span>\n                      ) : (\n                        `${\n                          this.props.periods.selected_period.session_plan_name\n                        } - ${\n                          this.props.periods.selected_period.is_active === true\n                            ? \"Active\"\n                            : \"Not valid!\"\n                        }`\n                      )}\n                    </span>\n                    {/* <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span> */}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.setState({ selectPeriod: true })}\n                    className={`btn ${\n                      this.props.periods.selected_period === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 border border-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    {this.props.periods.selected_period === null\n                      ? \"Choose period\"\n                      : \"Change period\"}\n                  </div>\n                  <Link\n                    to=\"prepare-exam\"\n                    className={`btn bg-blue-600 text-white h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    Prepare exam\n                  </Link>\n                </div>\n              </div>\n            </div>\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Loading exams list, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                <div className=\"w-full overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-blue-50 font-bold text-gray-800\">\n                      <tr>\n                        <td className=\"py-2 pl-2 font-bold\">#</td>\n                        <td className=\"py-2\">Course</td>\n                        <td className=\"py-2\">Exam date</td>\n                        <td className=\"py-2\">Start time</td>\n                        <td className=\"py-2\">End time</td>\n                        <td className=\"py-2\">Exam duration</td>\n                        <td className=\"py-2\">Exam</td>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.props.prepareExam.examsList === null ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : this.examsByPeriod(this.props.prepareExam.examsList)\n                          .length === 0 ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <div className=\"rounded bg-gray-100 px-3 py-3 flex items-center justify-center\">\n                              No exams found!\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        this.examsByPeriod(\n                          this.props.prepareExam.examsList\n                        ).map((item, i) => (\n                          <tr\n                            title=\"Click to view details\"\n                            onClick={() =>\n                              this.setState({ selectedExam: item })\n                            }\n                            key={i + 1}\n                            className={`border-b border-gray-300 text-sm hover:bg-blue-50 cursor-pointer hover:border-blue-300`}\n                          >\n                            <td className=\"pl-2 px-2 font-bold\">{i + 1}</td>\n                            <td className=\"py-2\">\n                              <span className=\"font-bold\">\n                                {this.props.course.courses &&\n                                  this.props.course.courses.find(\n                                    (itm) => itm.course_id === item.course\n                                  )?.course_code}\n                              </span>\n                              -\n                              {this.props.course.courses &&\n                                this.props.course.courses.find(\n                                  (itm) => itm.course_id === item.course\n                                )?.course_name}\n                            </td>\n                            <td className=\"py-2\">\n                              {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                            </td>\n                            <td className=\"py-2\">{item.start_time}</td>\n                            <td className=\"py-2\">{item.end_time}</td>\n                            <td className=\"py-2 font-bold text-blue-600\">\n                              {item.duration}mins\n                            </td>\n                            <td className=\"py-2\">\n                              {validateExamDate(\n                                item.exam_date,\n                                item.start_time,\n                                item.end_time\n                              )}\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                  {this.state.selectedExam !== null && (\n                    <ExamDetails\n                      course={this.props.course}\n                      periods={this.props.periods}\n                      exam={this.state.selectedExam}\n                      setSelectedExam={this.setSelectedExamItem}\n                      setSelectedExamEdit={this.setSelectedExamEdit}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          this.props.course.courses &&\n          this.props.course.courses.find(\n            (itm) =>\n              this.state.examToEdit &&\n              itm.course_id === this.state.examToEdit.course\n          ) !== undefined && (\n            <EditExam\n              selectedCourse={\n                this.props.course.courses.find(\n                  (itm) =>\n                    this.state.examToEdit &&\n                    itm.course_id === this.state.examToEdit.course\n                )!\n              }\n              selectedExam={this.state.examToEdit}\n              setSelectedExam={this.setSelectedExamEdit}\n              setUploadingStatus={this.setUploadingStatus}\n              loadExamsList={this.props.loadExamsList}\n              setLoadingProps={this.setLoading}\n            />\n          )\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const ExamsList = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n})(_ExamsList);\n"],"sourceRoot":""}