{"version":3,"sources":["containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/DoExam/DoExamTitle/FindAnswer.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","assets/profile.png","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","components/ProctoringRuleItem/ProctoringRuleItem.tsx","containers/DoExam/DoExam.tsx"],"names":["toMultipleChoice","answers","res","answer","id","value","status","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","FindAnswer","props","answersList","find","item","question_id","question","UserAnswersSel","itm","language","selectedLanguage","undefined","className","findQuestionType","type","questionTypes","questionTypeElementsType","MultipleChoice","userAnswer","filter","map","i","onClick","dangerouslySetInnerHTML","__html","showCorrectAnswer","SingleMultiple","userAnswerSingle","CalculatedMultipleChoice","userAnswer1","length","toString","Matching","userAnswerMatch","TrueFalse","userAnswerTureFalse","Numeric","userAnswerNumerical","SimpleCalculate","userAnswerSimpleCalculate","ShortAnswer","userAnswerShortAnswer","checkAnswer","available_answers","check","selectedQuestionAnswer","x","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","test","a","title","oldAnswers","temp","t","addAnswer","SimpleCalculated","answeredValue","onChange","e","target","style","minHeight","Numerical","getRandomArbitrary","toFixed","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","checkIfSelected","useState","displayWindow","setDisplayWindow","setSelectedAnswer","ans","selectedQuestionId","selectedLang","selectedExam","testing","questions","QuestionLanguages","lang","testLang","key","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","Footer","connect","auth","doExam","candidateExam","system","proctoring","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","setSelectedExamQuestion","findIndex","candidate_exam","selectedIndexPrevious","selected_question","selectedIndexNext","ConfirmSubmitAnswer","exam_id","questionAnswered","question_answers","SubmitAnswer","setProfileWindowStatus","windowStatus","profile","position","top","right","events","questionsList","selected_exam_id","exam_paper_id","height","submitQuestionAnswer","Profile","width","src","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","event_type_id","description","DATE","time","Date","getHours","getMinutes","getSeconds","QuestionDetails","setQuestionLanguage","loadQuestionTypes","loading","setLoading","selectLang","setSelectLang","QuestionData","q","getDefaultLanguage","findSelectedQuestionDetails","filterLanguages","langs","selectedQuestionDetails","langItem","testLangQ","l","questionSelected","selected_language","Loading","LoadingType","white","marks","Shuffle","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","setSubmitModal","window","confirm","submitExam","maxHeight","DoExamTitle","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","course_name","course_code","alignSelf","start_time","duration","CountDown","duration_min","timeout","returnString","labels","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","maxWidth","displayClose","padding","marginTop","ModalMarginTop","small","DoExamResults","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","page","ProctoringRuleItem","getDetails","examDetails","rule_key","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","_DoEam","setState","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","setExamQuestionAnswer","setCompletedTest","completedTest","changingExamStatusLoading","changingExamStatus","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","periods","selected_period","selected_exam_details","checkUserExam","exam","positions","selected_position","exam_room_details","RequestUserExamDetails","user_id","position_id","userExamLocation","district_id","center_id","room_id","setLoadExamResultMessage","BackToExamination","loadUserProfileDetails","FC_GetProfileDetails","msg","componentDidMount","sex","course","courses","loadCourses","exam_questions_answers","testAnswers","componentWillUnmount","socket","emit","Events","USER_DISCONNECTED_ONLINE_SERVER","setLoadExamResultNoMessage","PushPopupAlert","PopupAlertTheme","danger","success","user_exams_done","exam_paper","CleanCandidateExam","examQuestionIds","sel_question","SubmitExamQuestionAnswer","disability","gender","email","phone_number","in_education","questions_order","submitWholeExam","axios","put","API","DO_EXAM","doneExam","submittedExam","document","fullscreenElement","exitFullscreen","errorToText","startExam","display_exam","start_exam","requestExam","loadCandidateExamFromSupervisor","candidateDetailsProctoring","joined","pauseExam","inExam","data","application_session_id","application_session","session_plan_id","done_by","EventsLabels","DONE_EXAM","FC_SaveEvent","error","EXAM_DONE_SERVER","timeOutExam","TIME_OUT","TIME_OUT_SERVER","getExam","REQUEST_EXAM_SERVER","examStatus","loadUserExamErr","added_minutes","group_id","this","location","reload","ProctoringCandidateOnline","restartExam","CleanCandidateExamAnswers","setExamStatus","UserExamActions","Restart","stopExam","Done","period_id","removeClient","Removed","examAlreadyDone","candidateStopExam","reason","candidateContinueExam","joinedRoom","changeTime","timer","candidateProctoringDetails","requestUserAnswers","QuestionsList","selected_course","preview","setSelectedCandidateExam","extraLarge","exam_date","termes","medium","Component","DoExam","ChangeExamStatus","loadCandidateExam","setSelectedPeriod","GetUserExamDetails","FC_AddRules"],"mappings":"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","file":"static/js/39.1aa7dbb7.chunk.js","sourcesContent":["import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React from \"react\";\nimport {\n  BsCheckSquareFill,\n  BsCheckCircleFill,\n  BsArrowRightSquareFill,\n  BsArrowRightCircleFill,\n} from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionInterface,\n  questionType,\n  questionTypeElementsType,\n  TrueFalseQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  QuestionLanguage,\n  LanguageInterface,\n} from \"../../../interfaces\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../QuestionDetails/ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\n\ninterface FindAnswerProps {\n  question: QuestionInterface;\n  answersList: QuestionAnswersStore[];\n  selectedLanguage: QuestionLanguage | LanguageInterface;\n  questionTypes: questionType[];\n  showCorrectAnswer: boolean;\n  onClick: () => void;\n}\n\nconst FindAnswer = (props: FindAnswerProps) => {\n  const answer = props.answersList.find(\n    (item) => item.question_id === props.question.question_id\n  );\n  const UserAnswersSel = props.question.question.find(\n    (itm) => itm.language === props.selectedLanguage\n  );\n  if (answer === undefined || UserAnswersSel === undefined) {\n    return (\n      <div className=\"text-yellow-600 font-extrabold text-2xl text-center\">\n        No answer found!\n      </div>\n    );\n  } else {\n    switch (findQuestionType(props.question.type, props.questionTypes)) {\n      case questionTypeElementsType.MultipleChoice:\n        const userAnswer: MultipleChoiceQuestionAnswerInterface[] =\n          toMultipleChoice(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswer\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl text-blue-600\">\n                    <BsCheckSquareFill />\n                  </div>\n                  <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl text-blue-600\">\n                          <BsCheckSquareFill />\n                        </div>\n                        <div\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.SingleMultiple:\n        const userAnswerSingle: MultipleChoiceQuestionAnswerInterface[] =\n          toMultipleChoice(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerSingle\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl text-blue-600\">\n                    <BsCheckCircleFill />\n                  </div>\n                  <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl text-blue-600\">\n                          <BsCheckCircleFill />\n                        </div>\n                        <div\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case questionTypeElementsType.CalculatedMultipleChoice:\n        const userAnswer1: CalculatedMultipleChoiceQuestionAnswerInterface[] =\n          toCalculatedMultipleChoice(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswer1\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl text-blue-600\">\n                    <BsCheckSquareFill />\n                  </div>\n                  <div className=\"text-base font-normal text-gray-500\">\n                    {item.value.length > 1 ? (\n                      <>\n                        Between{\" \"}\n                        <span className=\"underline text-gray-600 font-extrabold\">\n                          {item.value[0]}\n                        </span>{\" \"}\n                        and{\" \"}\n                        <span className=\"underline text-gray-600 font-extrabold\">\n                          {item.value[1]}\n                        </span>\n                      </>\n                    ) : (\n                      <span className=\"text-gray-700\">\n                        {item.value[0].toString()}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl text-blue-600\">\n                          <BsCheckSquareFill />\n                        </div>\n                        <div className=\"text-base font-normal text-gray-500\">\n                          {item.value.length > 1 ? (\n                            <>\n                              Between{\" \"}\n                              <span className=\"underline text-blue-600 font-extrabold\">\n                                {item.value[0]}\n                              </span>{\" \"}\n                              and{\" \"}\n                              <span className=\"underline text-blue-600 font-extrabold\">\n                                {item.value[1]}\n                              </span>\n                            </>\n                          ) : (\n                            <span className=\"text-blue-600\">\n                              {item.value[0].toString()}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case questionTypeElementsType.Matching:\n        const userAnswerMatch: MatchingQuestionAnswerInterface[] = toMatching(\n          answer.answer\n        );\n        return (\n          <div className=\"w-full\">\n            {userAnswerMatch.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n              >\n                <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                  <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                    {i + 1}\n                  </div>\n                </div>\n                <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                  <div\n                    className=\"w-full mt-3 lg:mb-0\"\n                    dangerouslySetInnerHTML={{ __html: item.value }}\n                  ></div>\n                  <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                    <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                      <BsArrowRightSquareFill />\n                    </div>\n                    <div\n                      className=\"w-full mr-2\"\n                      dangerouslySetInnerHTML={{ __html: item.status }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 font-bold border border-blue-300\"\n                    >\n                      <div className=\"text-xl text-blue-600 font-bold p-3 pr-1 md:pr-3\">\n                        <div className=\"h-8 w-8 p-3 bg-blue-100 rounded-full flex items-center justify-center\">\n                          {i + 1}\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col lg:flex-row items-center gap-3 w-full h-full truncate\">\n                        <div\n                          className=\"w-full mt-3 lg:mb-0\"\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                        <div className=\"flex flex-row items-center gap-3 w-full mb-3 lg:mb-0\">\n                          <div className=\"text-3xl text-gray-500 group-hover:text-blue-600\">\n                            <BsArrowRightSquareFill />\n                          </div>\n                          <div\n                            className=\"w-full mr-2\"\n                            dangerouslySetInnerHTML={{ __html: item.status }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.TrueFalse:\n        const userAnswerTureFalse: TrueFalseQuestionAnswerInterface[] =\n          toTrueFalse(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerTureFalse\n              .filter((itm) => itm.status === true)\n              .map((item, i) => (\n                <div\n                  key={i + 1}\n                  onClick={props.onClick}\n                  className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                >\n                  <div className=\"text-xl\">\n                    <BsArrowRightCircleFill />\n                  </div>\n                  <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n                </div>\n              ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer\n                    .filter((itm) => itm.status === true)\n                    .map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={props.onClick}\n                        className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                      >\n                        <div className=\"text-xl\">\n                          <BsArrowRightCircleFill />\n                        </div>\n                        <div\n                          dangerouslySetInnerHTML={{ __html: item.value }}\n                        ></div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.Numeric:\n        const userAnswerNumerical: NumericalQuestionAnswerInterface[] =\n          toNumerical(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerNumerical.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div className=\"text-gray-600 text-base font-normal\">\n                  {item.value.length > 1 ? (\n                    <>\n                      Between{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[0]}\n                      </span>{\" \"}\n                      and{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[1]}\n                      </span>\n                    </>\n                  ) : (\n                    item.value.length > 0 && (\n                      <span className=\"text-gray-700\">\n                        {item.value[0].toString()}\n                      </span>\n                    )\n                  )}\n                </div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div className=\"text-gray-600 text-base font-normal\">\n                        {item.value.length > 1 ? (\n                          <>\n                            Between{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0] - item.value[1]}\n                            </span>{\" \"}\n                            and{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0] + item.value[1]}\n                            </span>\n                          </>\n                        ) : (\n                          item.value.length > 0 && (\n                            <span className=\"text-blue-700\">\n                              {item.value[0].toString()}\n                            </span>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.SimpleCalculate:\n        const userAnswerSimpleCalculate: SimpleCalculatedQuestionAnswerInterface[] =\n          toSimpleCalculated(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerSimpleCalculate.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div className=\"text-gray-600 text-base font-normal\">\n                  {item.value.length > 1 ? (\n                    <>\n                      Between{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[0]}\n                      </span>{\" \"}\n                      and{\" \"}\n                      <span className=\"underline text-gray-600 font-extrabold\">\n                        {item.value[1]}\n                      </span>\n                    </>\n                  ) : (\n                    item.value.length > 0 && (\n                      <span className=\"text-gray-700\">\n                        {item.value[0].toString()}\n                      </span>\n                    )\n                  )}\n                </div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div className=\"text-gray-600 text-base font-normal\">\n                        {item.value.length > 1 ? (\n                          <>\n                            Between{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[0]}\n                            </span>{\" \"}\n                            and{\" \"}\n                            <span className=\"underline text-blue-600 font-extrabold\">\n                              {item.value[1]}\n                            </span>\n                          </>\n                        ) : (\n                          item.value.length > 0 && (\n                            <span className=\"text-blue-700\">\n                              {item.value[0].toString()}\n                            </span>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      case questionTypeElementsType.ShortAnswer:\n        const userAnswerShortAnswer: ShortAnswerQuestionAnswerInterface[] =\n          toShortAnswer(answer.answer);\n        return (\n          <div className=\"w-full\">\n            {userAnswerShortAnswer.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={props.onClick}\n                className=\"bg-gray-100 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-gray-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n              >\n                <div className=\"text-xl\">\n                  <BsArrowRightCircleFill />\n                </div>\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: item.value,\n                  }}\n                ></div>\n              </div>\n            ))}\n            {/* Correct answers */}\n            {props.showCorrectAnswer === true && (\n              <div className=\"border-l-4 rounded-xl border-blue-600 bg-white p-3\">\n                <div className=\"font-extrabold text-lg\">Correct answer</div>\n                <div>\n                  {UserAnswersSel.answer.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      onClick={props.onClick}\n                      className=\"bg-blue-50 rounded px-3 cursor-pointer flex flex-row items-center gap-3 text-blue-600 hover:text-blue-600 mb-1 py-3 font-bold\"\n                    >\n                      <div className=\"text-xl\">\n                        <BsArrowRightCircleFill />\n                      </div>\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: item.value,\n                        }}\n                      ></div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      default:\n        return <div className=\"text-blue-600 font-extrabold\">Answer added</div>;\n    }\n  }\n};\n\nexport default FindAnswer;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.type === questionTypeElementsType.SingleMultiple\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  TrueFalseQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n\n  const addAnswer = (\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [\n          ...temp,\n          {\n            id: t.id,\n            value: t.value,\n            status: false,\n          },\n        ];\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  SimpleCalculatedQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: [newAnswers[0].value],\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0].toString()\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  ShortAnswerQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: \"\",\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"200px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: [item.value],\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: item.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ans: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(\n              (it) => it.status.toString() === ans.status\n            );\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let ans = temp.answer.find((itm) => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(\n            props.selectedQuestionAnswer.question_id,\n            props.selectedLanguage,\n            ans\n          );\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [\n            ...res,\n            {\n              id: ans.id,\n              lang: item.language,\n              status: ans.status.toString(),\n            },\n          ];\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React from \"react\";\nimport { IoNotifications } from \"react-icons/io5\";\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from \"../utils/utils\";\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n  proctoring: Proctoring;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (\n        let x: number = 0;\n        x < props.candidateExam.candidate_exam.questions.length;\n        x++\n      ) {\n        if (\n          props.candidateExam.candidate_exam.questions[x].question_id ===\n          question_id\n        ) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  };\n\n  let selectedIndexPrevious: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0\n        ? findIndex(props.candidateExam.selected_question)\n        : props.candidateExam.candidate_exam.questions.length\n      : -1;\n\n  let selectedIndexNext: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0 &&\n        findIndex(props.candidateExam.selected_question) <\n          props.candidateExam.candidate_exam.questions.length - 1\n        ? findIndex(props.candidateExam.selected_question)\n        : findIndex(props.candidateExam.selected_question) === 0\n        ? 0\n        : -1\n      : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(\n        (item) =>\n          questionAnswered(\n            props.candidateExam.question_answers,\n            item.question_id,\n            findQuestionType(item.type, props.questionTypes.questionTypes)!\n          ) === true\n      );\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {/* {console.log(\"Selected: \", selectedIndexNext)} */}\n      <div className=\"flex flex-row items-center\">\n        <div\n          onClick={() =>\n            props.setProfileWindowStatus(!props.windowStatus.profile)\n          }\n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}\n        >\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div\n              className=\"bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\"\n              style={{ position: \"relative\", top: \"-10px\", right: \"-12px\" }}\n            >\n              {props.proctoring.events.length}\n            </div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && (\n            <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">\n              New events <br />\n              are available\n            </div>\n          )}\n        </div>\n\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexPrevious - 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex justify-center items-center\"\n          style={{ height: \"fit-content\" }}\n        >\n          <MdChevronLeft className=\"text-xl\" />{\" \"}\n          <span className=\"hidden md:block\">Previous</span>\n        </button>\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">\n            Question{\" \"}\n            {props.candidateExam.selected_question &&\n              findIndex(props.candidateExam.selected_question) + 1}\n          </span>\n          {props.submitQuestionAnswer === true ? (\n            <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">\n              Saving question answer...\n            </span>\n          ) : (\n            <span className=\"text-xs\">Auto save is activated</span>\n          )}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div> */}\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexNext + 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex items-center\"\n        >\n          <span className=\"hidden md:block\">Next</span>{\" \"}\n          <MdChevronRight className=\"text-xl\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    system: system,\n    proctoring: proctoring,\n  };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;\n","import React from \"react\";\nimport { IoClose } from \"react-icons/io5\";\nimport userImage from \"../../../assets/profile.png\";\n\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring } from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { DATE } from \"../../../utils/functions\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose\n                  onClick={() => props.setProfileWindowStatus(false)}\n                  className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\"\n                />\n              </div>\n            </div>\n            <div\n              className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            >\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">\n              {props.auth.user.fname} {props.auth.user.lname}\n            </span>\n            <span className=\"text-gray-400 text-xs\">\n              ID: {props.auth.user.n_id}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>{props.proctoring.events.length}</span>\n          </div>\n          <div\n            className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\"\n            style={{ paddingBottom: \"550px\", paddingTop: \"10px\" }}\n          >\n            {props.proctoring.events.length === 0 ? (\n              <div className=\"text-white font-bold\">No events found!</div>\n            ) : (\n              props.proctoring.events.map((item, i) => (\n                <div className=\"flex flex-col text-gray-300 border-b py-2 border-gray-700\">\n                  <div\n                    key={i + 1}\n                    className=\"flex flex-row items-center my-1 gap-2\"\n                  >\n                    <div className=\"bg-gray-600 text-white h-6 w-6 px-3 rounded-full flex items-center justify-center\">\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span>{item.event_type_id}</span>\n                      <span className=\"font-bold\">{item.description}</span>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row justify-between items-center\">\n                    <span className=\"text-gray-500\">\n                      {DATE(item.time, \"DD/MM/YYYY\")}\n                    </span>\n                    <span className=\"bg-gray-600 px-2 rounded-full text-xs font-bold text-yellow-300\">\n                      {new Date(item.time).getHours()} :\n                      {new Date(item.time).getMinutes()} :\n                      {new Date(item.time).getSeconds()}\n                    </span>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {})(_Profile);\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../interfaces/index\";\nimport { newAnswer } from \"../DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from \"../../../interfaces/exam_question\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../components/Loading/LoadingV2\";\nimport MultipleChoice from \"./Answers/MultipleChoice\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"./ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\nimport TrueFalse from \"./Answers/TrueFalse\";\nimport Matching from \"./Answers/Matching\";\nimport SimpleCalculated from \"./Answers/SimpleCalculated\";\nimport ShortAnswer from \"./Answers/ShortAnswer\";\nimport Numerical from \"./Answers/Numerical\";\nimport CalculatedMultipleChoice from \"./Answers/CalculatedMultipleChoice\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { Shuffle } from \"../../../utils/functions\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined =\n        props.candidateExam.candidate_exam.questions.find(\n          (itm) =>\n            props.candidateExam.selected_question &&\n            itm.question_id === props.candidateExam.selected_question &&\n            itm.question.find(\n              (testLang) => testLang.language === getDefaultLanguage()\n            ) !== undefined\n        );\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  };\n\n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res: QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(\n        (itm) => itm.question_id === props.candidateExam.selected_question\n      );\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  };\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    const selectedQuestionDetails =\n      props.candidateExam.candidate_exam?.questions.find(\n        (itm) => itm.question_id === props.candidateExam.selected_question\n      );\n    if (selectedQuestionDetails !== undefined) {\n      for (let langItem of selectedQuestionDetails.question) {\n        let testLangQ = QuestionLanguages.find(\n          (l) => l.key === langItem.language\n        );\n        if (testLangQ !== undefined) {\n          langs = [...langs, testLangQ];\n        }\n      }\n    }\n    return langs;\n  };\n  const getDefaultLanguage = (): QuestionLanguage => {\n    let questionSelected = props.candidateExam.candidate_exam?.questions.find(\n      (itm) => itm.question_id === props.candidateExam.selected_question\n    );\n    let check = questionSelected?.question.find(\n      (item) => item.language === props.candidateExam.selected_language\n    );\n    if (check === undefined && questionSelected !== undefined) {\n      return questionSelected.question[0].language;\n    }\n    return props.candidateExam.selected_language;\n  };\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          {/* <div\n            className={`h-8 ${\n              props.submitQuestionAnswer === true\n                ? \"animate__animated animate__fadeIn bg-yellow-50 text-yellow-700 animate-pulse\"\n                : \"text-blue-400 italic\"\n            } px-3 py-2 rounded  font-bold text-sm`}\n          >\n            {props.submitQuestionAnswer === true\n              ? \"Saving your answer ...\"\n              : \"\"}\n          </div> */}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {QuestionData() !== null &&\n                QuestionData()?.question.find(\n                  (itm) => itm.language === getDefaultLanguage()\n                ) && (\n                  <div className=\"text-md flex flex-col w-full\">\n                    <div className=\"flex flex-row gap-2 items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">\n                        {QuestionData() !== null &&\n                          QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )?.title}\n                      </span>\n                      <div className=\"text-sm bg-blue-600  rounded-full font-bold px-2 py-1 mx-2 my-1 text-white\">\n                        <span className=\"font-extrabold text-white\">\n                          {QuestionData() !== null && QuestionData()?.marks}\n                        </span>{\" \"}\n                        Mark(s)\n                      </div>\n                    </div>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: QuestionData()!.question.find(\n                          (itm) => itm.language === getDefaultLanguage()\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold\"\n                    ></div>\n                  </div>\n                )}\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div\n                  onClick={() => setSelectLang(!selectLang)}\n                  className=\"flex flex-row items-center gap-2\"\n                >\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{ width: \"97px\" }}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">\n                      Language\n                    </span>\n                    <span\n                      title={\n                        filterLanguages().find(\n                          (itm) => itm.key === getDefaultLanguage()\n                        )?.value\n                      }\n                      className=\"text-sm font-bold text-blue-600 truncate\"\n                      style={{ width: \"97px\" }}\n                    >\n                      {\n                        filterLanguages().find(\n                          (itm) => itm.key === getDefaultLanguage()\n                        )?.value\n                      }\n                    </span>\n                  </div>\n                  <div\n                    className={`${\n                      selectLang === true\n                        ? \"bg-yellow-800 text-white\"\n                        : \"bg-gray-50 hover:bg-blue-600\"\n                    } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                  >\n                    {selectLang === true ? (\n                      <FaTimes className=\"text-xl my-2 mx-2\" />\n                    ) : (\n                      <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                    )}\n                  </div>\n                </div>\n                {selectLang === true && (\n                  <div\n                    className=\"relative rounded overflow-hidden\"\n                    style={{ width: \"182px\" }}\n                  >\n                    <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                      {filterLanguages().map((item, i) => (\n                        <span\n                          onClick={() => {\n                            props.setQuestionLanguage(item.key);\n                            setSelectLang(!selectLang);\n                          }}\n                          key={i + 1}\n                          className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                            getDefaultLanguage() === item.key\n                              ? \"bg-blue-800 font-extrabold border-blue-800\"\n                              : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                          }`}\n                        >\n                          {getDefaultLanguage() === item.key ? (\n                            <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                          ) : (\n                            <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                          )}{\" \"}\n                          {item.value}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"my-4 py-2 px-2 bg-white rounded\"\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.candidateExam.candidate_exam?.questions.find(\n                    (itm) =>\n                      itm.question_id === props.candidateExam.selected_question\n                  )?.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toTrueFalse(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={getDefaultLanguage()}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toMatching(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        findSelectedQuestionDetails().find(\n                          (itm) => itm.language === getDefaultLanguage()\n                        )!.answer\n                      )\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toSimpleCalculated(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toShortAnswer(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toNumerical(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    answers: toCalculatedMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;\n","import React from \"react\";\nimport { MdCheckCircle, MdClose } from \"react-icons/md\";\nimport { Auth } from \"../../../actions/auth\";\nimport { candidateExamStoreInterface } from \"../../../actions/candidate_exam\";\nimport { questionTypesStoreInterface } from \"../../../actions/questionTypes\";\nimport { System } from \"../../../actions/system\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  QuestionLanguage,\n} from \"../../../interfaces/question\";\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from \"../utils/utils\";\nimport FindAnswer from \"./FindAnswer\";\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamPendingQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    );\n  }\n  return (\n    <div\n      className={`pt-4 border-t border-gray-300 ${\n        PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"\n      }`}\n    >\n      {props.candidateExam.candidate_exam &&\n      AnsweredQuest.length !==\n        props.candidateExam.candidate_exam.questions.length &&\n      PendingQuest.length !== 0 ? (\n        <div>\n          <div className=\"grid md:grid-cols-2 h-full\">\n            <div className=\"md:col-span-2 h-full\">\n              <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n                {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n                <div className=\"flex flex-col\">\n                  <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">\n                    Submit with incomplete questions\n                  </div>\n                  <div className=\"text-gray-700 text-sm text-left pb-2\">\n                    Please, make sure to complete the following remaining\n                    questions which are not yet answered. Please, if you proceed\n                    anyway, for these questions, you will not be marked!\n                  </div>\n                </div>\n                <div className=\"mr-4\">\n                  <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => props.setSubmitModal(false)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"md:col-span-2\">\n              <div className=\"\">\n                <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                  {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                  <div className=\"text-center mb-5 text-gray-600 font-bold\">\n                    Pick a question number you want to answer directly\n                  </div>\n                  <div className=\"flex justify-center items-center text-center\">\n                    <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                      {props.candidateExam.candidate_exam.questions.map(\n                        (item, i) =>\n                          PendingQuest.find(\n                            (itm) => itm.question_id === item.question_id\n                          )?.question_id !== undefined && (\n                            <div\n                              onClick={() => {\n                                props.candidateExam.candidate_exam &&\n                                  props.setSelectedExamQuestion(\n                                    props.candidateExam.candidate_exam\n                                      .exam_paper_id,\n                                    item.question_id\n                                  );\n                                props.setSubmitModal(false);\n                              }}\n                              key={i + 1}\n                              className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\"\n                            >\n                              {i + 1}\n                            </div>\n                          )\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                  <div\n                    onClick={() => props.setSubmitModal(false)}\n                    className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\"\n                  >\n                    Back to edit\n                  </div>\n                  <div\n                    onClick={() => {\n                      if (\n                        window.confirm(\n                          \"Are you sure do you want submit your exam with question not answered?\"\n                        ) === true\n                      ) {\n                        props.submitExam();\n                      }\n                    }}\n                    className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\"\n                  >\n                    Submit anyway\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"px-4 pb-2\">\n          <div className=\"flex flex-row items-center justify-between mb-4\">\n            <div className=\"text-blue-700 font-bold\">\n              Hey{\" \"}\n              <b>\n                <u>{props.auth.user.fname}</u>\n              </b>\n              , All questions have been answered, are you sure do you want to\n              submit the final answers?\n            </div>\n            <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n              <MdClose\n                className=\"cursor-pointer font-extrabold text-3xl\"\n                onClick={() => props.setSubmitModal(false)}\n              />\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between\">\n            <div\n              onClick={() => props.setSubmitModal(false)}\n              className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\"\n            >\n              <span className=\"\">Back to edit</span>\n            </div>\n            <div\n              onClick={() => {\n                if (\n                  window.confirm(\n                    \"Are you sure do you want submit your exam?\"\n                  ) === true\n                ) {\n                  props.submitExam();\n                }\n              }}\n              className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\"\n            >\n              <MdCheckCircle className=\"text-3xl\" />\n              <span className=\"\">Submit exam</span>\n            </div>\n          </div>\n\n          <div className=\"my-2\">\n            <div className=\"font-extrabold text-xl text-yellow-900 my-2 mt-4\">\n              Verify your answers\n            </div>\n            <div\n              className=\"flex flex-col gap-3 overflow-y-auto\"\n              style={{ maxHeight: \"100%\" }}\n            >\n              {props.candidateExam.candidate_exam === null ? (\n                <Loading />\n              ) : (\n                AnsweredQuest.length > 0 &&\n                AnsweredQuest.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className=\"bg-white hover:bg-white border border-white hover:border-blue-400 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast group\"\n                  >\n                    <div className=\"grid md:grid-cols-12 w-full\">\n                      <div className=\"col-span-11 flex flex-row items-center gap-3\">\n                        <div\n                          key={i + 1}\n                          className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\"\n                        >\n                          {i + 1}\n                        </div>\n                        <div className=\"text-sm w-full\">\n                          <div\n                            className=\"font-bold text-gray-700 text-base\"\n                            dangerouslySetInnerHTML={{\n                              __html: item.question.find(\n                                (test) =>\n                                  test.language === props.selectedLanguage\n                              )!.description,\n                            }}\n                          ></div>\n                          <div className=\"text-blue-700 font-bold text-sm w-full\">\n                            Answer:&nbsp;{\" \"}\n                            {props.questionTypes.questionTypes !== null && (\n                              <FindAnswer\n                                selectedLanguage={props.selectedLanguage}\n                                question={item}\n                                answersList={\n                                  props.candidateExam.question_answers\n                                }\n                                questionTypes={\n                                  props.questionTypes.questionTypes\n                                }\n                                onClick={() => {\n                                  props.candidateExam.candidate_exam &&\n                                    props.setSelectedExamQuestion(\n                                      props.candidateExam.candidate_exam\n                                        .exam_paper_id,\n                                      item.question_id\n                                    );\n                                  props.setSubmitModal(false);\n                                }}\n                                showCorrectAnswer={false}\n                              />\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-span-12 md:col-span-1 float-right flex items-center justify-end pt-2 md:pt-0\">\n                        <div\n                          onClick={() => {\n                            props.candidateExam.candidate_exam &&\n                              props.setSelectedExamQuestion(\n                                props.candidateExam.candidate_exam\n                                  .exam_paper_id,\n                                item.question_id\n                              );\n                            props.setSubmitModal(false);\n                          }}\n                          className=\"bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 group-hover:bg-blue-600 group-hover:text-white group-hover:border-none flex items-center justify-center h-max md:ml-3\"\n                        >\n                          Edit\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionsReview;\n","import React, { Fragment } from \"react\";\nimport { useState } from \"react\";\nimport { IoDocumentTextOutline } from \"react-icons/io5\";\nimport { MdCheckCircle } from \"react-icons/md\";\nimport Modal, {\n  Themes,\n  ModalSize,\n  ModalMarginTop,\n} from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from \"../utils/utils\";\nimport { course } from \"../../../interfaces\";\nimport QuestionsReview from \"./QuestionsReview\";\nimport { CountDown } from \"../../../components/CountDown/CountDown\";\n\ninterface TestTitleInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n  start_time: string;\n  duration_min: number;\n  timeout: () => void;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n\n  const TotalAnswered: number = props.candidateExam.candidate_exam\n    ? NumberOfAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam\n    ? (TotalAnswered * 100) /\n      props.candidateExam.candidate_exam.questions.length\n    : 0;\n  return (\n    <Fragment>\n      <div className=\"bg-gray-800\">\n        <div className=\"grid grid-cols-6\">\n          <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n            <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n              <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n              <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n                <span className=\"font-bold text-lg truncate -mb-1\">\n                  {props.selectedExam?.course_name}\n                </span>\n                <span className=\"text-gray-300 text-xs truncate\">\n                  Code: {props.selectedExam?.course_code}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"col-span-6 md:col-span-4 lg:col-span-4\"\n            style={{ alignSelf: \"center\" }}\n          >\n            <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n              <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n                <div className=\"text-gray-200 text-sm w-full hidden lg:block\">\n                  Completed {TotalAnswered} of{\" \"}\n                  {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.questions.length}\n                </div>\n                <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                  <div\n                    className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  ></div>\n                </div>\n                <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                  <div\n                    className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  >\n                    <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">\n                      {answeredPercentage}%\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-4 hidden lg:block h-full\">\n                <div className=\"flex flex-row justify-center items-center h-full\">\n                  <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                    <div>\n                      Start time:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam?.start_time}\n                      </span>\n                    </div>\n                    <div>\n                      Duration:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam &&\n                        props.candidateExam.candidate_exam.duration / 60 > 1\n                          ? (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hours\"\n                          : props.candidateExam.candidate_exam &&\n                            (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hour\"}\n                        {props.candidateExam.candidate_exam &&\n                          props.candidateExam.candidate_exam.duration % 60 >\n                            0 &&\n                          \", \" +\n                            (props.candidateExam.candidate_exam.duration % 60) +\n                            \" mins\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-5 bg-gray-800\">\n                <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                  <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                    <span>Counting down</span>\n                    <div className=\"text-lg lg:text-xl font-bold\">\n                      <CountDown\n                        start_time={props.start_time}\n                        duration_min={props.duration_min}\n                        timeout={() => props.timeout()}\n                        returnString={true}\n                        labels\n                      />\n                    </div>\n                  </div>\n                  {props.submitQuestionAnswer === true ? (\n                    <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 border border-gray-600 animate-pulse\">\n                      Saving...\n                    </div>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        props.SubmitAnswer();\n                        setSubmitModal(true);\n                      }}\n                      type=\"button\"\n                      className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\"\n                    >\n                      <MdCheckCircle className=\"text-white text-xl\" />\n                      <span>Submit</span>\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {submitModal === true && (\n        <Modal\n          title={\"\"}\n          backDrop={true}\n          theme={\n            props.candidateExam.question_answers.length === 0\n              ? Themes.default\n              : Themes.default\n          }\n          close={() => setSubmitModal(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.maxWidth}\n          displayClose={false}\n          padding={{ title: false }}\n          marginTop={ModalMarginTop.small}\n        >\n          <QuestionsReview\n            auth={props.auth}\n            candidateExam={props.candidateExam}\n            system={props.system}\n            setSelectedExamQuestion={props.setSelectedExamQuestion}\n            submitQuestionAnswer={props.submitQuestionAnswer}\n            questionTypes={props.questionTypes}\n            loadQuestionTypes={props.loadQuestionTypes}\n            submitExam={props.submitExam}\n            selectedExam={props.selectedExam}\n            setSubmitModal={setSubmitModal}\n            selectedLanguage={props.candidateExam.selected_language}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n} => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React from \"react\";\nimport { MdCheckCircleOutline, MdHighlightOff } from \"react-icons/md\";\nimport { InitialExamDetails } from \"../../actions/candidate_exam\";\n\ninterface ProctoringRuleItemProps {\n  examDetails: () => InitialExamDetails | null;\n  rule_key: string;\n}\n\nconst ProctoringRuleItem = (props: ProctoringRuleItemProps) => {\n  const getDetails = () => {\n    let res: {\n      value: string;\n      status: boolean;\n    } | null = null;\n    if (props.examDetails() !== null) {\n      switch (props.rule_key) {\n        case \"right_click_enabled\":\n          res = {\n            value: \"Right click\",\n            status: props.examDetails()!.rules.right_click_enabled,\n          };\n          break;\n        case \"copy_enabled\":\n          res = {\n            value: \"Copy text\",\n            status: props.examDetails()!.rules.copy_enabled,\n          };\n          break;\n        case \"paste_enabled\":\n          res = {\n            value: \"Paste item or text\",\n            status: props.examDetails()!.rules.paste_enabled,\n          };\n          break;\n        case \"stop_candidate_when_comeback\":\n          res = {\n            value: \"Coming back after leaving\",\n            status: props.examDetails()!.rules.stop_candidate_when_comeback,\n          };\n          break;\n        case \"allow_to_leave_browser\":\n          res = {\n            value: \"Leave browser\",\n            status: props.examDetails()!.rules.allow_to_leave_browser,\n          };\n          break;\n      }\n    }\n    return res;\n  };\n  return (\n    <div className=\"flex flex-row items-center justify-between w-full border-b py-2\">\n      <div\n        className={`flex flex-row items-center ${\n          getDetails()?.status === true\n            ? \"text-blue-600 font-bold\"\n            : \"text-yellow-800 font-bold\"\n        }`}\n      >\n        {getDetails()?.status === true ? (\n          <MdCheckCircleOutline className=\"text-2xl mr-3\" />\n        ) : (\n          <MdHighlightOff className=\"text-2xl mr-3\" />\n        )}\n        <span>{getDetails()?.value}</span>\n      </div>\n      <span\n        className={`rounded-full px-3 py-1 border font-bold ${\n          getDetails()?.status === true\n            ? \"bg-white text-blue-800 border-blue-100\"\n            : \"bg-yellow-50 text-yellow-800 border-yellow-100\"\n        }`}\n      >\n        {getDetails()?.status === true ? \"Allowed\" : \"Prohibited\"}\n      </span>\n    </div>\n  );\n};\n\nexport default ProctoringRuleItem;\n","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  Socket,\n  FC_AddRules,\n  FT_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n  Proctoring,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  EventInterface,\n  Events,\n  EventsLabels,\n  LiveServer__Candidate_Details,\n  LiveServer__Room,\n  question_answer,\n} from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport {\n  CandidateExam,\n  CandidateExamQuestionAnswer,\n  ExamInterface,\n  ExamResultsDetails,\n  examStatus,\n  UserExamActions,\n  userExamDetails,\n} from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdCheckCircle, MdInfoOutline } from \"react-icons/md\";\nimport ProctoringRuleItem from \"../../components/ProctoringRuleItem/ProctoringRuleItem\";\n\ninterface DoExamProps {\n  proctoring: Proctoring;\n  FC_GetProfileDetails: Function;\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (\n    exam_id: string,\n    CheckUserExam: (candidateExam: CandidateExam) => void,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (\n    userExamDetails: userExamDetails,\n    callback: (loading: boolean) => void,\n    setLoadExamResultMessage: (msg: string, status: boolean) => void,\n    BackToExamination: (exam: ExamResultsDetails) => void\n  ) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  CleanCandidateExamAnswers: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (\n    answer: CandidateExamQuestionAnswer,\n    callback: (loading: boolean) => void,\n    actionStatus: (msg: string, status: boolean) => void\n  ) => void;\n  GetUserExamDetails: (\n    request: RequestUserExamDetailsInterface,\n    callback: (loading: boolean) => void\n  ) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n  setExamStatus: (\n    user: string,\n    exam_paper_id: string,\n    action: UserExamActions,\n    reason: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_SaveEvent: Function;\n  socket: Socket;\n  FC_AddRules: FT_AddRules;\n  loadCandidateExamFromSupervisor: (\n    candidateExam: CandidateExam,\n    firstTime: boolean\n  ) => void;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n  changingExamStatus: boolean;\n  inExam: boolean;\n\n  // Exam counter\n  start_exam: boolean;\n  start_time: string;\n  duration: number;\n  added_minutes: number;\n  group_id: string;\n  submittedExam: boolean;\n  candidateDetailsProctoring: LiveServer__Candidate_Details | null;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n      changingExamStatus: false,\n      // timer\n      start_exam: false,\n      start_time: \"\",\n      duration: 0,\n      added_minutes: 0,\n      group_id: \"\",\n      inExam: false,\n      submittedExam: false,\n      candidateDetailsProctoring: null,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  };\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    // console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  changingExamStatusLoading = (status: boolean) => {\n    this.setState({ changingExamStatus: status });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check;\n      }\n    }\n    return null;\n  };\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (\n      this.props.positions.selected_position !== null &&\n      this.props.candidateExam.selected_exam_details !== null\n    ) {\n      if (this.props.candidateExam.exam_room_details !== null) {\n        // alert(this.props.candidateExam.exam_room_details.district_id)\n        this.props.RequestUserExamDetails(\n          {\n            user: this.props.auth.user.user_id,\n            position: this.props.positions.selected_position.position_id,\n            exam: exam,\n            userExamLocation: {\n              district_id:\n                this.props.candidateExam.exam_room_details.district_id,\n              center_id: this.props.candidateExam.exam_room_details.center_id,\n              room_id: this.props.candidateExam.exam_room_details.room_id,\n            },\n          },\n          this.setLoading,\n          this.setLoadExamResultMessage,\n          this.props.BackToExamination\n        );\n      }\n    }\n  };\n\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  componentWillUnmount = () => {\n    if (this.props.candidateExam.exam_room_details) {\n      this.props.socket.socket.emit(Events.USER_DISCONNECTED_ONLINE_SERVER, {\n        room_id: this.props.candidateExam.exam_room_details.room_id,\n        user_id: this.props.auth.user.user_id,\n      });\n    }\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      // );\n      let test = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.exam_paper ===\n          this.props.candidateExam.candidate_exam?.exam_paper_id\n      );\n      if (test === undefined) {\n        this.props.CleanCandidateExam(\n          this.props.candidateExam.candidate_exam.exam_paper_id\n        );\n      }\n    }\n  };\n\n  SubmitAnswer = () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.question_answers.length > 0\n    ) {\n      let examQuestionIds: string[] = [];\n      for (let temp of this.props.candidateExam.candidate_exam.questions) {\n        examQuestionIds = [...examQuestionIds, temp.question_id];\n      }\n      for (let answer of this.props.candidateExam.question_answers) {\n        let sel_question =\n          this.props.candidateExam.candidate_exam.questions.find(\n            (item) => item.question_id === answer.question_id\n          );\n        if (\n          answer.status === false &&\n          this.props.candidateExam.exam_room_details &&\n          sel_question !== undefined\n        ) {\n          //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer(\n            {\n              user: this.props.auth.user.user_id,\n              exam_paper: this.props.candidateExam.candidate_exam.exam_paper_id,\n              // New updates need to be checked\n              position: this.props.candidateExam.exam_room_details.position_id,\n              disability: this.props.auth.user.disability,\n              fname: this.props.auth.user.fname,\n              lname: this.props.auth.user.lname,\n              gender: this.props.auth.user.sex,\n              email: this.props.auth.user.email,\n              phone_number: this.props.auth.user.phone_number,\n              in_education: this.props.auth.user.in_education,\n              questions_order: examQuestionIds,\n              // End new updates\n              question: answer.question_id,\n              language:\n                sel_question.question.find(\n                  (itm) =>\n                    itm.language === this.props.candidateExam.selected_language\n                ) === undefined\n                  ? sel_question.question[0].language\n                  : this.props.candidateExam.selected_language,\n              userAnswer: answer.answer,\n            },\n            this.setSubmitQuestionAnswer,\n            this.setLoadExamResultNoMessage\n          );\n        }\n      }\n    }\n  };\n\n  submitExam = async () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.exam_room_details !== null\n    ) {\n      let exam_id = this.props.candidateExam.candidate_exam.exam_paper_id;\n      let user_id = this.props.auth.user.user_id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(\n          `${API.DO_EXAM}/answersheet/submit/${user_id}/${exam_id}`\n        );\n        if (res) {\n          this.doneExam();\n          this.setState({ submittedExam: true });\n          // this.props.CleanCandidateExam(exam_id);\n          // Exit full screen\n          if (document.fullscreenElement) {\n            if (document.exitFullscreen) {\n              document.exitFullscreen();\n            }\n          }\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success,\n          });\n        }\n      } catch (error: any) {\n        // console.log(\"Submit exam err: \", { ...error });\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  };\n\n  startExam = () => {\n    this.setState({ display_exam: true, start_exam: true });\n    this.props.candidateExam.selected_exam_id !== null &&\n      this.requestExam(\n        this.props.candidateExam.selected_exam_id,\n        (status: boolean, exam: CandidateExam) => {\n          // console.log(\"Testing exam from supervisor: \", exam);\n          if (status === true) {\n            this.props.loadCandidateExamFromSupervisor(\n              exam,\n              this.state.candidateDetailsProctoring !== null &&\n                this.state.candidateDetailsProctoring.user.joined === true\n                ? true\n                : false\n            );\n          }\n        }\n      );\n  };\n  pauseExam = () => {\n    this.setState({ display_exam: false, start_exam: false, inExam: false });\n  };\n\n  doneExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Done the exam\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.DONE_EXAM,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.EXAM_DONE_SERVER, data);\n    }\n  };\n\n  timeOutExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Time out\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.TIME_OUT,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id: this.props.candidateExam.exam_room_details.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.TIME_OUT_SERVER, data);\n      this.submitExam();\n      // console.log(\"this.submitExam(); ==> timeOutExam()\");\n    }\n  };\n\n  requestExam = (\n    exam_id: string,\n    getExam: (status: boolean, exam: CandidateExam) => void\n  ) => {\n    this.props.socket.socket.emit(Events.REQUEST_EXAM_SERVER, exam_id, getExam);\n  };\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/candidate-exams\" />;\n    }\n\n    if (\n      this.state.loading === true ||\n      this.props.candidateExam.exam_room_details === null\n    ) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Loading, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Submitting your exam, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50 w-full\">\n        <Fragment>\n          {/* {console.log(\"Rules: \")} */}\n          {this.state.inExam === false ? (\n            <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n              <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n                <div className=\"text-white text-lg px-4 mb-4\">Confirm</div>\n                <div className=\"flex flex-col items-center justify-center mb-10\">\n                  <Loading />\n                  <div className=\"text-yellow-800 text-xl font-bold my-5\">\n                    Something went wrong, retry again!\n                  </div>\n\n                  <div\n                    onClick={() => window.location.reload()}\n                    className=\"btn bg-yellow-100 text-yellow-800 border border-yellow-600 w-max text-center cursor-pointer\"\n                  >\n                    Click here to reload\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <ProctoringCandidateOnline\n              startExam={() => {\n                this.startExam();\n                this.setState({ start_exam: true });\n              }}\n              restartExam={() => {\n                if (this.props.candidateExam.candidate_exam !== null) {\n                  let id =\n                    this.props.candidateExam.candidate_exam.exam_paper_id;\n                  this.props.CleanCandidateExamAnswers(id);\n\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    id,\n                    UserExamActions.Restart,\n                    \"Exam restarted by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n\n                  // this.props.candidateExam.candidate_exam &&\n                  //   this.props.requestUserAnswers(\n                  //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                  //     this.props.auth.user.user_id,\n                  //     this.setLoading\n                  //   );\n                }\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              stopExam={() => {\n                // EXAM DONE ON WHOLE ROOM\n                // Stop all the room\n                // this.setState({ start_exam: false });\n                // console.log(\"DONE whole room\");\n                this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Done,\n                    \"All candidates ended by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              room_id={this.props.candidateExam.exam_room_details.room_id}\n              exam_id={\n                this.props.candidateExam.candidate_exam === null\n                  ? this.props.candidateExam.selected_exam_id\n                  : this.props.candidateExam.candidate_exam.exam_paper_id\n              }\n              position_id={\n                this.props.candidateExam.exam_room_details.position_id\n              }\n              application_session_id={\n                this.props.candidateExam.exam_room_details.period_id\n              }\n              removeClient={() => {\n                // REMOVE INDIVIDUAL\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Removed,\n                    \"Exam stopped by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              examAlreadyDone={() => {\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                // console.log(\"Exam already done\");\n              }}\n              candidateStopExam={(reason: string) => {\n                // PAUSE\n                // console.log(`candidateStopExam: ${reason}`);\n                // this.pauseExam();\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Paused,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n              }}\n              candidateContinueExam={(reason: string) => {\n                // console.log(`candidateContinueExam: ${reason}`);\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Continue,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              joinedRoom={(data: LiveServer__Room) => {\n                // console.log(\"Joined room: \", data);\n                this.setState({\n                  group_id: data.group_id,\n                });\n              }}\n              changeTime={(timer: {\n                duration: number;\n                start_time: string;\n                added_minutes: string;\n              }) => {\n                this.setState({\n                  duration: timer.duration,\n                  start_time: timer.start_time,\n                });\n              }}\n              candidateProctoringDetails={(\n                data: LiveServer__Candidate_Details\n              ) => {\n                this.setState({ candidateDetailsProctoring: data });\n                if (data.user.joined === true) {\n                  this.startExam();\n                  this.props.candidateExam.candidate_exam &&\n                    this.props.requestUserAnswers(\n                      this.props.candidateExam.candidate_exam.exam_paper_id,\n                      this.props.auth.user.user_id,\n                      this.setLoading\n                    );\n                }\n                // console.log(\"Joined: \", data.user.joined);\n              }}\n            >\n              {this.state.start_exam === false ||\n              (this.props.candidateExam.candidate_exam === null &&\n                this.state.inExam === true) ? (\n                // || this.props.proctoring.exam.start_exam === false\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    <MdInfoOutline className=\"text-9xl text-blue-600\" />\n                    <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">\n                      Please wait for the supervisor\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The supervisor will allow you to start your exam, please\n                      wait or contact him/her when forgot to let you start exam!\n                    </div>\n\n                    <Loading />\n                    <div className=\"flex flex-row items-center -mt-2\">\n                      <div\n                        onClick={() => window.location.reload()}\n                        className=\"btn bg-blue-100 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-808\"\n                      >\n                        Reload page\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : this.props.candidateExam.candidate_exam === null ||\n                this.props.candidateExam.candidate_exam === null ||\n                this.props.proctoring.exam.start_exam === false ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    {/* <MdInfoOutline className=\"text-9xl text-blue-600\" /> */}\n                    <div className=\"text-gray-700 text-5xl px-4 text-center font-extrabold\">\n                      Wait for the exam\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The exam is not yet initiated, wait for the supervisor to\n                      load the exam. If it continues to delay, please contact\n                      your invigilator\n                    </div>\n\n                    <Loading />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  {this.state.completedTest === true &&\n                  this.props.doExam.exam_answers?.exam_questions_answers\n                    ?.questionAnswers !== null ? (\n                    <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                      <DoExamResults\n                        page=\"doExam\"\n                        answeredQuestions={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers\n                        }\n                        testAnswers={\n                          this.props.doExam.exam_answers?.exam_questions_answers\n                            ?.questionAnswers.length === undefined\n                            ? 0\n                            : this.props.doExam.exam_answers\n                                ?.exam_questions_answers?.questionAnswers.length\n                        }\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                      <div className=\"grid md:grid-cols-12 h-full\">\n                        {this.state.windowStatus.profile === true && (\n                          <div\n                            className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                          >\n                            <Profile\n                              setProfileWindowStatus={\n                                this.setProfileWindowStatus\n                              }\n                            />\n                          </div>\n                        )}\n                        <div\n                          className={`col-span-${\n                            this.state.windowStatus.profile === false\n                              ? \"12\"\n                              : \"10\"\n                          } bg-gray-800 shadow-lg h-full`}\n                        >\n                          <div className=\"flex flex-row h-screen bg-gray-800\">\n                            <div className=\"h-full\">\n                              {/* Questions list */}\n                              <div className={`h-full`}>\n                                <QuestionsList\n                                  windowStatus={this.state.windowStatus}\n                                  setProfileWindowStatus={\n                                    this.setProfileWindowStatus\n                                  }\n                                  setQuestionsListWindowStatus={\n                                    this.setQuestionsListWindowStatus\n                                  }\n                                  questionTypes={this.props.questionTypes}\n                                  loadQuestionTypes={\n                                    this.props.loadQuestionTypes\n                                  }\n                                  SubmitAnswer={this.SubmitAnswer}\n                                />\n                              </div>\n                            </div>\n                            <div className=\"w-full h-full\">\n                              {/* Do exam test title */}\n                              <DoExamTitle\n                                setCompletedTest={this.setCompletedTest}\n                                windowStatus={this.state.windowStatus}\n                                setProfileWindowStatus={\n                                  this.setProfileWindowStatus\n                                }\n                                setQuestionsListWindowStatus={\n                                  this.setQuestionsListWindowStatus\n                                }\n                                questionTypes={this.props.questionTypes}\n                                loadQuestionTypes={this.props.loadQuestionTypes}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                                submitExam={() => {\n                                  this.submitExam();\n                                  // console.log(\n                                  //   \"this.submitExam() ===> <DoExamTitle />\"\n                                  // );\n                                }}\n                                selectedExam={this.props.course.selected_course}\n                                SubmitAnswer={this.SubmitAnswer}\n                                start_time={this.state.start_time}\n                                duration_min={this.state.duration}\n                                timeout={() => this.timeOutExam()}\n                              />\n                              {/* Question details */}\n                              <QuestionDetails\n                                questionAnswers={\n                                  this.props.doExam.exam_answers\n                                    ?.exam_questions_answers?.questionAnswers\n                                }\n                                answerQuestionFn={this.answerQuestionFn}\n                                selectedQuestion={this.state.selectedQuestion}\n                                setSelectedQuestion={this.setSelectedQuestion}\n                                preview={false}\n                                submitQuestionAnswer={\n                                  this.state.submitQuestionAnswer\n                                }\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <Footer\n                        windowStatus={this.state.windowStatus}\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                        setQuestionsListWindowStatus={\n                          this.setQuestionsListWindowStatus\n                        }\n                        questionTypes={this.props.questionTypes}\n                        loadQuestionTypes={this.props.loadQuestionTypes}\n                        SubmitAnswer={this.SubmitAnswer}\n                        submitQuestionAnswer={this.state.submitQuestionAnswer}\n                      />\n                    </div>\n                  )}\n                </div>\n              )}\n            </ProctoringCandidateOnline>\n          )}\n          {this.props.candidateExam.candidate_exam === null &&\n            this.state.inExam === false && (\n              <Modal\n                title=\"\"\n                backDrop={true}\n                theme={Themes.default}\n                close={() => this.props.setSelectedCandidateExam(null)}\n                backDropClose={false}\n                widthSizeClass={ModalSize.extraLarge}\n                displayClose={false}\n                padding={{ title: false }}\n              >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? (\n                    <Loading />\n                  ) : (\n                    <div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                        <div className=\"my-2 w-full\">\n                          <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                            {this.props.course.selected_course && (\n                              <div>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_code\n                                  }\n                                  -\n                                </span>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_name\n                                  }\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam date:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {DATE(\n                                this.examDetails()!.exam_date,\n                                \"DD/MM/YYYY\"\n                              )}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Start time:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails()?.start_time}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam duration:\n                            </span>\n                            {this.examDetails() !== null && (\n                              <span className=\"text-blue-600 font-bold\">\n                                {this.examDetails()!.duration / 60 >= 1 &&\n                                  this.examDetails()!.duration / 60 +\n                                    \" hrs\"}{\" \"}\n                                {this.examDetails()!.duration % 60 > 0 && (\n                                  <span>\n                                    {this.examDetails()!.duration % 60} mins\n                                  </span>\n                                )}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                      <div className=\"flex flex-row justify-center items-center\">\n                        {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                      </div>\n                      <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Examination rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: this.examDetails()!.termes,\n                              }}\n                            ></div>\n                          )}\n                        </div>\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Exam Proctoring rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <>\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"right_click_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"copy_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"paste_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"stop_candidate_when_comeback\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"allow_to_leave_browser\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        <span className=\"text-blue-700\">\n                          If you are ready, click to start the exam now, The\n                          system will start to count your time!\n                        </span>\n                      </div>\n                      <div className=\"flex flex-row items-center justify-between mt-2\">\n                        <button\n                          onClick={() =>\n                            this.props.setSelectedCandidateExam(null)\n                          }\n                          className=\"btn bg-gray-50 text-gray-600 border\"\n                        >\n                          Go Back\n                        </button>\n                        <button\n                          onClick={() => {\n                            this.setState({ inExam: true });\n                            this.props.candidateExam.selected_exam_id !==\n                              null &&\n                              this.requestExam(\n                                this.props.candidateExam.selected_exam_id,\n                                (status: boolean, exam: CandidateExam) => {\n                                  if (status === true) {\n                                    this.props.loadCandidateExamFromSupervisor(\n                                      exam,\n                                      this.state.candidateDetailsProctoring !==\n                                        null &&\n                                        this.state.candidateDetailsProctoring\n                                          .user.joined === true\n                                        ? true\n                                        : false\n                                    );\n                                  }\n                                }\n                              );\n                          }}\n                          className=\"btn bg-blue-600 text-white\"\n                        >\n                          I accept, Start exam\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </Modal>\n            )}\n          {this.state.submittedExam === true && (\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.medium}\n              displayClose={false}\n              padding={{ title: false }}\n            >\n              <div className=\"px-5 py-5\">\n                <div className=\"flex flex-row items-center justify-center\">\n                  <MdCheckCircle className=\"text-7xl text-blue-600\" />\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <span className=\"text-3xl font-extrabold text-blue-600 text-center\">\n                    Exam submitted\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center mt-3 mb-5\">\n                  <span className=\"text-center text-gray-500\">\n                    Thank you for attending the exam, Your exam has been\n                    submitted successfully!, click continue to the applications\n                    list, you will open the application to view your score right\n                    now.\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <div\n                    onClick={() => {\n                      this.setState({ submittedExam: false });\n                      if (document.fullscreenElement) {\n                        if (document.exitFullscreen) {\n                          document.exitFullscreen();\n                        }\n                      }\n                      this.props.candidateExam.candidate_exam &&\n                        this.props.CleanCandidateExam(\n                          this.props.candidateExam.candidate_exam.exam_paper_id\n                        );\n                      window.location.reload();\n                    }}\n                    className=\"btn bg-blue-100 text-blue-700 rounded w-max cursor-pointer\"\n                  >\n                    Continue to view marks\n                  </div>\n                </div>\n              </div>\n            </Modal>\n          )}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n  socket,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  positions: positionsStoreInterface;\n  socket: Socket;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    course: course,\n    periods: periods,\n    questionTypes: questionTypes,\n    positions: positions,\n    socket,\n    proctoring,\n  };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  FC_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n})(_DoEam);\n"],"sourceRoot":""}