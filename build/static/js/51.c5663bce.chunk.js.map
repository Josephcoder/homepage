{"version":3,"sources":["containers/PrepareExam/ExamsList/ExamDetails.tsx","containers/PrepareExam/ExamsList/ExamsList.tsx","containers/PrepareExam/EditExam/EditExam.tsx"],"names":["ExamDetails","props","className","course","courses","find","itm","course_id","exam","course_code","course_name","onClick","setSelectedExam","style","height","exam_total_marks","DATE","exam_date","start_time","end_time","duration","questions","length","periods","applicationPeriods","_id","period","session_plan_name","discription","dangerouslySetInnerHTML","__html","termes","rules","allow_to_leave_browser","copy_enabled","paste_enabled","right_click_enabled","stop_candidate_when_comeback","validateExamDate","ExamTimeStatus","Online","createdAt","setSelectedExamEdit","Waiting","alert","_ExamsList","setLoading","status","setState","loading","addQuestionToPaper","question","addExamQuestion","removeToQuestionPaper","window","confirm","showPeriodFilter","selectPeriod","chooseCourse","myCourse","conf","prepareExam","x","setSelectedCourse","selectCourse","examQuestionsIds","ids","question_id","examsByPeriod","Exam","temp","filter","item","selected_period","newRes","push","undefined","exam_status","questions_per_page","number_format","updatedAt","id","GetExamsByPeriod","setSelectedPeriod","loadExamsListByPeriod","componentDidMount","schoolLevels","showInstitutes","setShowInstitutes","questionTypes","loadQuestionTypes","loadApplicationPeriods","loadCourses","questionBank","selected_course","loadQuestionBank","selectedEducationCategory","session_plan","setSelectedExamItem","selectedExam","examToEdit","setUploadingStatus","state","addQuestionModal","formErr","element","msg","QuestionNumberFormat","NUMBER","search","this","is_active","to","Loading","colSpan","onChange","e","target","value","type","placeholder","examsList","searchData","map","i","title","EditExam","selectedCourse","loadExamsList","setLoadingProps","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","large","displayClose","padding","Courses","selected_course_id","Questions","callBack","questionsList","questionPaper","ApplicationPeriods","InitializeInstitution","setSelectedEducationCategory","data","onSelect","Component","ExamsList","connect","auth","system","loadSchoolLevels","loadEducationCategories","setSelectedSchoolLevel","setUploadedQuestions","PushPopupAlert","getHoursList","hrs","getMinutesList","mins","_EditExam","changeProctoringRule","key","proctoringRules","rule","newData","selected","caption","addEditExamQuestion","setStep","step","PrepareExamStepsEnum","Step2","validateTwoTime","duration_hours","duration_minutes","currentStep","StepStatus","Step1","submitExamPreparation","a","axios","put","API","QBank","PrepareExamStatus","Created","redirectToExams","description","PopupAlertTheme","success","response","errors","message","console","log","findExamDetails","unSelectQuestion","editQuestion","findTotalMarks","total","marks","handleChangeTermes","setSelectCourse","setSelectPeriod","submitExam","stepStatus","actionType","PrepareActionTypes","DATE_DATA","parseInt","disabled","EXAM_QUESTIONS_NUMBERING","NoResultThemes","Dark","select","number","AlertInterface","danger","selectedQuestion","extraLarge","body"],"mappings":"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","file":"static/js/51.c5663bce.chunk.js","sourcesContent":["import React from \"react\";\nimport { GoTrashcan } from \"react-icons/go\";\nimport { MdClose, MdEdit } from \"react-icons/md\";\nimport {\n  applicationPeriodsStoreInterface,\n  courseStoreInterface,\n} from \"../../../actions\";\nimport { ExamItemResponse } from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\ninterface ExamDetailsProps {\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  exam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  setSelectedExamEdit: (exam: ExamItemResponse | null) => void;\n}\n\nconst ExamDetails = (props: ExamDetailsProps) => {\n  return (\n    <div className=\"fixed h-full w-full bg-black bg-opacity-50 top-0 left-0 flex items-center justify-center z-50 animate__animated animate__fadeIn animate__faster overflow-y-auto\">\n      <div className=\"group absolute right-0 bg-white shadow-xl w-3/4 md:w-2/4 border z-50 h-full animate__animated animate__fadeInRight animate__faster\">\n        <div className=\"bg-white text-blue-700 font-bold text-2xl flex flex-row justify-between gap-3 items-center px-3 py-3\">\n          <div>\n            <span className=\"font-bold\">\n              {props.course.courses &&\n                props.course.courses.find(\n                  (itm) => itm.course_id === props.exam.course\n                )?.course_code}\n            </span>\n            -\n            {props.course.courses &&\n              props.course.courses.find(\n                (itm) => itm.course_id === props.exam.course\n              )?.course_name}\n          </div>\n          <div\n            onClick={() => props.setSelectedExam(null)}\n            className=\"text-2xl text-red-600 bg-red-50 group-hover:bg-red-100 rounded-full p-1 cursor-pointer\"\n          >\n            <MdClose />\n          </div>\n        </div>\n        <div\n          className=\"px-3 py-6 text-sm overflow-y-auto bg-gray-100\"\n          style={{ height: \"80vh\" }}\n        >\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam total marks</span>\n            <span className=\"text-blue-800 font-bold bg-blue-100 rounded-full px-2\">\n              {props.exam.exam_total_marks}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam date</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.exam_date)}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam start time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.start_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam ending time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.end_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam duration</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.duration}mins\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam number of questions</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.questions.length}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam period</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.periods.applicationPeriods &&\n                props.periods.applicationPeriods.find(\n                  (itm) => itm._id === props.exam.period\n                )?.session_plan_name}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam description</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.discription}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam terms and conitions</span>\n            <div\n              dangerouslySetInnerHTML={{ __html: props.exam.termes }}\n              className=\"text-blue-600 font-bold\"\n            ></div>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600 mb-2\">Exam rules</span>\n            <div className=\"text-blue-600 font-bold bg-white rounded\">\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Leave browser</span>\n                <span\n                  className={`${\n                    props.exam.rules.allow_to_leave_browser === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.allow_to_leave_browser === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Copy</span>\n                <span\n                  className={`${\n                    props.exam.rules.copy_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.copy_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Paste</span>\n                <span\n                  className={`${\n                    props.exam.rules.paste_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.paste_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Right click</span>\n                <span\n                  className={`${\n                    props.exam.rules.right_click_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.right_click_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Come back after leaving room</span>\n                <span\n                  className={`${\n                    props.exam.rules.stop_candidate_when_comeback === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.stop_candidate_when_comeback === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam status</span>\n            <span\n              className={`${\n                validateExamDate(\n                  props.exam.exam_date,\n                  props.exam.start_time,\n                  props.exam.end_time\n                ) === ExamTimeStatus.Online\n                  ? \"text-green-600 font-bold bg-green-100\"\n                  : \"text-yellow-600 font-bold bg-yellow-100\"\n              } rounded-full px-3 py-1`}\n            >\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              )}\n            </span>\n          </div>\n\n          <div className=\"flex flex-row items-center justify-between py-3\">\n            <span className=\"text-gray-600\">Exam created at</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.createdAt)}\n            </span>\n          </div>\n        </div>\n        <div className=\"bg-white p-3 pt-0 rounded-b mt-5 absolute bottom-0 w-full\">\n          {\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 my-2\">\n              <div\n                onClick={() => props.setSelectedExamEdit(props.exam)}\n                className=\"bg-blue-100 hover:bg-blue-600 hover:text-white rounded p-3 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-blue-800\"\n              >\n                <div>\n                  <MdEdit className=\"text-2xl\" />\n                </div>\n                <span className=\"text-base\">Edit</span>\n              </div>\n              <div></div>\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              ) === ExamTimeStatus.Waiting ? (\n                <div\n                  onClick={() => alert(\"Deleted\")}\n                  className=\"bg-red-50 hover:bg-red-600 hover:text-white rounded p-3 border border-red-50 group-hover:border-red-100 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-red-800\"\n                >\n                  <div>\n                    <GoTrashcan className=\"text-2xl\" />\n                  </div>\n                  <span className=\"text-base\">Remove</span>\n                </div>\n              ) : (\n                <div></div>\n              )}\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExamDetails;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n  setShowInstitutes,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport {\n  ExamItemResponse,\n  ExamItemResponseFull,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { Link } from \"react-router-dom\";\nimport ExamDetails from \"./ExamDetails\";\nimport { EditExam } from \"../EditExam/EditExam\";\nimport { validateExamDate } from \"../../../utils/question_bank\";\nimport searchData from \"../../../utils/search\";\nimport InitializeInstitution from \"../../../components/InitializeInstitution/InitializeInstitution\";\nimport { education_category } from \"../../../interfaces\";\n\ninterface ExamsListProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  schoolLevels: schoolLevelsStoreInterface;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedExam: (exam: ExamItemResponse) => void;\n  setShowInstitutes: (status: boolean) => void;\n  setSelectedEducationCategory: (data: education_category) => void;\n}\ninterface ExamsListState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  selectedExam: ExamItemResponse | null;\n  examToEdit: ExamItemResponse | null;\n  search: string;\n}\n\nclass _ExamsList extends Component<ExamsListProps, ExamsListState> {\n  constructor(props: ExamsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      duration: 1,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      selectedExam: null,\n      examToEdit: null,\n      search: \"\",\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  examsByPeriod = (Exam: ExamItemResponse[]): ExamItemResponseFull[] => {\n    let temp = Exam.filter(\n      (item) => item.period === this.props.periods.selected_period?._id\n    );\n    let newRes: ExamItemResponseFull[] = [];\n    for (let item of temp) {\n      newRes.push({\n        questions: item.questions,\n        exam_total_marks: item.exam_total_marks,\n        status: item.status,\n        period: item.period,\n        course: item.course,\n        course_id: item.course,\n        course_code:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_code,\n        course_name:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_name,\n        exam_status: item.exam_status,\n        termes: item.termes,\n        questions_per_page: item.questions_per_page,\n        exam_date: item.exam_date,\n        start_time: item.start_time,\n        end_time: item.end_time,\n        duration: item.duration,\n        number_format: item.number_format,\n        discription: item.discription,\n        createdAt: item.createdAt,\n        updatedAt: item.updatedAt,\n        id: item.id,\n        rules: item.rules,\n      });\n    }\n    return newRes;\n  };\n\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period._id, this.setLoading);\n  };\n\n  componentDidMount = () => {\n    if (this.props.schoolLevels.showInstitutes === true) {\n      this.props.setShowInstitutes(false);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    // if (this.props.course.selected_course === null) {\n    //   this.setState({ selectCourse: true });\n    // }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n    // if (this.props.prepareExam.examsList === null || this.props.prepareExam.examsList.length === 0) {\n    if (this.props.periods.selected_period !== null) {\n      this.props.loadExamsListByPeriod(\n        this.props.periods.selected_period._id,\n        this.setLoading\n      );\n    } else {\n      this.props.schoolLevels.selectedEducationCategory !== null &&\n        this.props.schoolLevels.selectedEducationCategory.session_plan !==\n          null &&\n        this.props.loadExamsListByPeriod(\n          this.props.schoolLevels.selectedEducationCategory.session_plan._id,\n          this.setLoading\n        );\n    }\n    // }\n  };\n  setSelectedExamItem = (exam: ExamItemResponse | null) => {\n    this.setState({ selectedExam: exam });\n  };\n  setSelectedExamEdit = (exam: ExamItemResponse | null) => {\n    this.setState({ examToEdit: exam });\n    if (exam === null) {\n      this.setState({ selectedExam: null });\n    }\n  };\n  setUploadingStatus = (status: boolean) => {\n    alert(\"Hello\");\n  };\n  render() {\n    return (\n      <Fragment>\n        {this.state.examToEdit === null ? (\n          <div>\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-row items-center\">\n                  {/* <RiFilePaperFill className=\"text-7xl text-blue-600\" /> */}\n                  <div className=\"flex flex-col px-2\">\n                    <span className=\"text-gray-600 text-2xl font-bold\">\n                      List of exams\n                    </span>\n                    <span className=\"text-blue-600 text-sm font-bold mt-1\">\n                      Period:{\" \"}\n                      {this.props.periods.selected_period === null ? (\n                        <span className=\"text-yellow-700 italic\">\n                          Not selected!\n                        </span>\n                      ) : (\n                        `${\n                          this.props.periods.selected_period.session_plan_name\n                        } - ${\n                          this.props.periods.selected_period.is_active === true\n                            ? \"Active\"\n                            : \"Not valid!\"\n                        }`\n                      )}\n                    </span>\n                    {/* <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span> */}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.setState({ selectPeriod: true })}\n                    className={`btn ${\n                      this.props.periods.selected_period === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 border border-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    {this.props.periods.selected_period === null\n                      ? \"Choose period\"\n                      : \"Change period\"}\n                  </div>\n                  <Link\n                    to=\"prepare-exam\"\n                    className={`btn bg-blue-600 text-white h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    Prepare exam\n                  </Link>\n                </div>\n              </div>\n            </div>\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Loading exams list, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                <div className=\"w-full overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-blue-50 font-bold text-gray-800\">\n                      <tr>\n                        <td className=\"py-2 pl-2 font-bold\">#</td>\n                        <td className=\"py-2\">Course</td>\n                        <td className=\"py-2\">Exam date</td>\n                        <td className=\"py-2\">Start time</td>\n                        <td className=\"py-2\">End time</td>\n                        <td className=\"py-2\">Exam duration</td>\n                        <td className=\"py-2\">Exam</td>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td colSpan={7}>\n                          <input\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => this.setState({ search: e.target.value })}\n                            type=\"text\"\n                            className=\"input-white border border-gray-500 my-2\"\n                            placeholder=\"Search\"\n                            value={this.state.search}\n                          />\n                        </td>\n                      </tr>\n                      {this.props.prepareExam.examsList === null ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).length === 0 ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <div className=\"rounded bg-gray-100 px-3 py-3 flex items-center justify-center\">\n                              No exams found!\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).map((item, i) => (\n                          <tr\n                            title=\"Click to view details\"\n                            onClick={() =>\n                              this.setState({ selectedExam: item })\n                            }\n                            key={i + 1}\n                            className={`border-b border-gray-300 text-sm hover:bg-blue-50 cursor-pointer hover:border-blue-300`}\n                          >\n                            <td className=\"pl-2 px-2 font-bold\">{i + 1}</td>\n                            <td className=\"py-2\">\n                              <span className=\"font-bold\">\n                                {item.course_code}\n                              </span>\n                              -{item.course_name}\n                            </td>\n                            <td className=\"py-2\">\n                              {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                            </td>\n                            <td className=\"py-2\">{item.start_time}</td>\n                            <td className=\"py-2\">{item.end_time}</td>\n                            <td className=\"py-2 font-bold text-blue-600\">\n                              {item.duration}mins\n                            </td>\n                            <td className=\"py-2\">\n                              {validateExamDate(\n                                item.exam_date,\n                                item.start_time,\n                                item.end_time\n                              )}\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                  {this.state.selectedExam !== null && (\n                    <ExamDetails\n                      course={this.props.course}\n                      periods={this.props.periods}\n                      exam={this.state.selectedExam}\n                      setSelectedExam={this.setSelectedExamItem}\n                      setSelectedExamEdit={this.setSelectedExamEdit}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          this.props.course.courses &&\n          this.props.course.courses.find(\n            (itm) =>\n              this.state.examToEdit &&\n              itm.course_id === this.state.examToEdit.course\n          ) !== undefined && (\n            <EditExam\n              selectedCourse={\n                this.props.course.courses.find(\n                  (itm) =>\n                    this.state.examToEdit &&\n                    itm.course_id === this.state.examToEdit.course\n                )!\n              }\n              selectedExam={this.state.examToEdit}\n              setSelectedExam={this.setSelectedExamEdit}\n              setUploadingStatus={this.setUploadingStatus}\n              loadExamsList={this.props.loadExamsList}\n              setLoadingProps={this.setLoading}\n            />\n          )\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-row items-center gap-3\">\n                {this.props.questionBank.questions !== null &&\n                  this.props.questionBank.questions.length > 0 && (\n                    <Link\n                      to={\"/upload-questions\"}\n                      className=\"btn bg-blue-100 hover:bg-blue-200 text-blue-700 cursor-pointer\"\n                    >\n                      Upload new\n                    </Link>\n                  )}\n                <span>Add Exam Questions</span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.loading === false &&\n          this.props.schoolLevels.selectedEducationCategory === null &&\n          this.props.schoolLevels.showInstitutes === false && (\n            <InitializeInstitution\n              schoolLevels={this.props.schoolLevels}\n              setSelectedEducationCategory={(data: education_category) => {\n                this.props.setSelectedEducationCategory(data);\n                if (data.session_plan !== null) {\n                  this.GetExamsByPeriod(data.session_plan);\n                } else {\n                  this.setState({ selectPeriod: true });\n                }\n                this.props.setShowInstitutes(false);\n              }}\n              onSelect={() => {\n                this.props.setShowInstitutes(false);\n              }}\n            />\n          )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const ExamsList = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n  setShowInstitutes,\n})(_ExamsList);\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addEditExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addEditExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting ||\n      this.props.selectedExam.questions.length === 0\n    ) {\n      this.props.addEditExamQuestion(question);\n    } else {\n      alert(\n        \"You can not add questions while its time has ended or being done!\"\n      );\n    }\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting ||\n      this.props.selectedExam.questions.length === 0\n    ) {\n      if (\n        window.confirm(\n          \"Are you sure do you want to remove question from the exam questions paper?\"\n        ) === true\n      ) {\n        this.props.addEditExamQuestion(question);\n      }\n    } else {\n      alert(\n        \"You can not remove questions while its time has ended or being done!\"\n      );\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.state.exam_date === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"exam_date\",\n            msg: \"Please choose exam date\",\n          },\n        });\n      }\n      if (this.state.start_time === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"start_time\",\n            msg: \"Please fill exam start time\",\n          },\n        });\n      }\n      if (this.state.end_time === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"end_time\",\n            msg: \"Please fill exam ending time\",\n          },\n        });\n      }\n      if (\n        validateTwoTime(this.state.start_time, this.state.end_time) === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"end_time\",\n            msg: \"Please end time should be greater than start time\",\n          },\n        });\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"duration_hours\",\n            msg: \"Please fill exam duration\",\n          },\n        });\n      }\n      if (this.state.questions_per_page < 1) {\n        return this.setState({\n          formErr: {\n            element: \"questions_per_page\",\n            msg: \"Please fill number of questions per page\",\n          },\n        });\n      }\n      if (this.state.number_format === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"number_format\",\n            msg: \"Please fill questions numbering format\",\n          },\n        });\n      }\n      if (this.state.discription === \"\") {\n        return this.setState({\n          formErr: {\n            element: \"discription\",\n            msg: \"Please fill exam description\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = true;\n    // if (\n    //   this.props.prepareExam.selectedExam === null ||\n    //   this.props.prepareExam.selectedExam.questions.length !== 0\n    // ) {\n    //   conf = window.confirm(\n    //     \"Are you sure do you want to change course? You will loose your selected questions\"\n    //   );\n    // }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0 ||\n      this.props.course.selected_course === null\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period._id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period._id,\n          this.props.setLoadingProps\n        );\n      } else {\n        this.props.schoolLevels.selectedEducationCategory !== null &&\n          this.props.schoolLevels.selectedEducationCategory.session_plan !==\n            null &&\n          this.props.loadExamsListByPeriod(\n            this.props.schoolLevels.selectedEducationCategory.session_plan._id,\n            this.props.setLoadingProps\n          );\n      }\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (\n      this.props.course.courses !== null &&\n      this.props.course.selected_course === null\n    ) {\n      let myCourse = this.props.course.courses.find(\n        (itm) => itm.course_id === this.props.selectedExam.course\n      );\n      if (myCourse !== undefined) {\n        this.props.setSelectedCourse(myCourse);\n        this.chooseCourse(myCourse);\n      }\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period._id, this.setLoading);\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-black text-2xl\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        {(validateExamDate(\n                          this.props.selectedExam.exam_date,\n                          this.props.selectedExam.start_time,\n                          this.props.selectedExam.end_time\n                        ) === ExamTimeStatus.Waiting ||\n                          this.props.selectedExam.questions.length === 0) && (\n                          <div\n                            onClick={() =>\n                              this.props.selectedCourse === null\n                                ? this.setState({ selectCourse: true })\n                                : this.setState({ addQuestionModal: true })\n                            }\n                            className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                          >\n                            <MdAdd className=\"text-2xl\" /> Add question\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to details\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-row items-center gap-3\">\n                {this.props.questionBank.questions !== null &&\n                  this.props.questionBank.questions.length > 0 && (\n                    <Link\n                      to={\"/upload-questions\"}\n                      className=\"btn bg-blue-100 hover:bg-blue-200 text-blue-700 cursor-pointer\"\n                    >\n                      Upload new\n                    </Link>\n                  )}\n                <span>Add Exam Questions</span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={\n                  this.props.prepareExam.questions.length === 0 &&\n                  this.props.prepareExam.selectedExam &&\n                  this.props.prepareExam.selectedExam.questions.length > 0\n                    ? this.props.prepareExam.selectedExam.questions\n                    : this.props.prepareExam.questions\n                }\n              />\n            )}\n            {this.props.prepareExam.questions.length}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Editing Exam\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                {/* {this.props.prepareExam.selectedExam &&\n                (validateExamDate(\n                  this.props.prepareExam.selectedExam!.exam_date,\n                  this.props.prepareExam.selectedExam!.start_time,\n                  this.props.prepareExam.selectedExam!.end_time\n                ) === ExamTimeStatus.Waiting ||\n                  this.props.selectedExam.questions.length === 0) ? ( */}\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Confirm edit exam\n                </div>\n                {/* ) : (\n                  <div>Can not edit</div>\n                )} */}\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addEditExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n})(_EditExam);\n"],"sourceRoot":""}