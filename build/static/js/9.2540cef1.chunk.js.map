{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","assets/profile.png","components/InformationModal/InformationModal.tsx","containers/ProctoringCandidateOnline/ProctoringCandidateOnline.tsx","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","containers/DoExam/DoExam.tsx"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","InformationModal","title","description","close","onClick","className","joined_room","_ProctoringCandidateOnline","props","componentWillUnmount","socket","off","ExamEvents","START_EXAM_CLIENT","STOP_EXAM_CLIENT","CAND_CONTINUE_EXAM_CLIENT","CAND_RESTART_EXAM_CLIENT","CAND_WARNING_EXAM_CLIENT","CAND_STOP_EXAM_CLIENT","examStart","state","setState","request_fullScreen","exit_fullScreen","FC_MeStartStopExam","startExam","stopExam","closeInfoModal","inform_modal","active","requestFullScreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullScreen","exitFullscreen","eventBrodcaster","type","proctoring","exam","start_exam","event","eventDefiner","user_id","auth","user","done_by","room_id","room","event_type","FC_CandidateExamEvent","FC_BlockExam","emit","CAND_EXAM_EVENT_SERVER","warning","this","email","fname","lname","FC_AddMyDataToProctoring","muted","stopped","peer","peer_id","ref","Events","JOIN_ROOM","users_list","on","prevState","msg","me","restartExam","addEventListener","preventDefault","window","lastEvent","events_list","events","children","React","Component","ProctoringCandidateOnline","connect","Footer","doExam","candidateExam","system","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","setSelectedExamQuestion","findIndex","question_id","candidate_exam","x","questions","id","selectedIndexPrevious","selected_question","selectedIndexNext","console","log","setProfileWindowStatus","windowStatus","profile","style","position","top","right","questionsList","selected_exam_id","height","Profile","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","width","src","userImage","alt","n_id","paddingBottom","paddingTop","map","item","DoExamTitle","useState","submitModal","setSubmitModal","incompleteQuestions","answeredPercentage","alignSelf","start_time","duration","Modal","backDrop","theme","Themes","default","backDropClose","widthSizeClass","ModalSize","large","displayClose","padding","Loading","question","setCompletedTest","DoExamResults","redirect","setRedirect","findExamResult","undefined","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","find","itm","user_answers","answer","status","page","_DoEam","setLoading","loading","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","answerQuestionFn","setExamQuestionAnswer","completedTest","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","examDetails","periods","selected_period","check","selected_exam_details","componentDidMount","course","courses","loadCourses","exam_questions_answers","testAnswers","examStatus","QuestionsList","QuestionDetails","preview","setSelectedCandidateExam","selected_course","course_code","course_name","termes","DATE","exam_date","loadCandidateExam","DoExam","ChangeExamStatus","InitializeExamDetails","setSelectedPeriod"],"mappings":"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","file":"static/js/9.2540cef1.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React, { FC, ReactElement } from \"react\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\ntype InformationModalProps = {\n  title: string;\n  description: string;\n  close: Function;\n};\n\nconst InformationModal: FC<InformationModalProps> = ({\n  title,\n  description,\n  close,\n}): ReactElement => {\n  // return (\n  //   <div className=\"fixed top-5 w-3/4 right-0 left-0 mx-auto bg-yellow-300 rounded\">\n  //     <div className=\"bg-yellow-200 p-3 rounded-md\">\n  //       <h1 className=\"text-2xl font-bold text-yellow-900\">{title}</h1>\n  //       <p className=\"text-sm mt-1\">{description}</p>\n  //     </div>\n\n  //     <div className=\"p-2 text-right\">\n  //       <button\n  //         onClick={() => close()}\n  //         className=\"py-1 px-3 rounded-md bg-yellow-500 btn-sm hover:bg-red-600 hover:text-white\"\n  //       >\n  //         Close\n  //       </button>\n  //     </div>\n  //   </div>\n  // );\n\n  return (\n    <div\n      onClick={() => close()}\n      className=\"fixed top-3 cursor-pointer bg-opacity-70 bg-yellow-100 hover:bg-opacity-90 w-lg right-0 left-0 mt-6 rounded-md mx-auto  py-5 px-3 max-w-sm animate__bounceIn\"\n    >\n      <div className=\"w-full flex\">\n        <div className=\"\">\n          <MdInfoOutline className=\"text-6xl inline text-yellow-800 opacity-50\" />\n        </div>\n        <div className=\"flex-1 pl-2\">\n          <h1 className=\"text-xl text-yellow-800 font-bold\">{title}</h1>\n          <p className=\"mt-0 text-gray-700\">{description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default InformationModal;\n","import React, { Fragment, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  Events,\n  EventInterface,\n  ExamEvents,\n  CandidateProctoringInterface,\n} from \"../../interfaces\";\nimport { eventDefiner, eventDefinerInterface } from \"../../actions/proctoring\";\nimport InformationModal from \"../../components/InformationModal/InformationModal\";\n\nimport {\n  Auth,\n  Socket,\n  Proctoring,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n} from \"../../actions\";\nimport { MdFullscreen, MdFullscreenExit, MdReport } from \"react-icons/md\";\n\n// props for the component\ninterface ProctoringCandidateOnlineProps {\n  socket: Socket;\n  eventDefiner: Function;\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_AddMyDataToProctoring: Function;\n  FC_MeStartStopExam: Function;\n  FC_CandidateExamEvent: Function;\n  children: ReactNode;\n  startExam: Function;\n  stopExam: Function;\n  restartExam: Function;\n  FC_BlockExam: Function;\n}\n\ninterface AppState {\n  request_fullScreen: boolean;\n  exit_fullScreen: boolean;\n  warning: any;\n  inform_modal: {\n    title: string;\n    description: string;\n    active: boolean;\n  };\n}\n\nlet joined_room = false;\n\nclass _ProctoringCandidateOnline extends React.Component<\n  ProctoringCandidateOnlineProps,\n  AppState\n> {\n  constructor(props: ProctoringCandidateOnlineProps) {\n    super(props);\n\n    this.state = {\n      request_fullScreen: this.props.proctoring.exam.start_exam,\n      exit_fullScreen: false,\n      warning: null,\n      inform_modal: {\n        title: \"\",\n        description: \"\",\n        active: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { email, fname, lname, user_id } = this.props.auth.user;\n    // add the user to the list\n    if (joined_room === false) {\n      this.props.FC_AddMyDataToProctoring({\n        active: true,\n        email: email,\n        fname,\n        lname,\n        user_id,\n        muted: false,\n        stopped: false,\n        peer: \"\",\n        peer_id: \"\",\n        ref: \"\",\n      } as CandidateProctoringInterface);\n      this.props.socket.socket.emit(\n        Events.JOIN_ROOM,\n        {\n          room_id: this.props.proctoring.room.room_id,\n          user_id: this.props.auth.user.user_id,\n          peer_id: \"\",\n        },\n        (users_list: any) => {}\n      );\n      joined_room = true;\n    }\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.START_EXAM_CLIENT, (event: any) =>\n      this.examStart(true)\n    );\n\n    // Listen events\n    this.props.socket.socket.on(ExamEvents.STOP_EXAM_CLIENT, (event: any) =>\n      this.examStart(false)\n    );\n\n    // * WARNING CANDIDATE\n    this.props.socket.socket.on(\n      ExamEvents.CAND_WARNING_EXAM_CLIENT,\n      (event: any) => {\n        this.setState((prevState: AppState) => ({\n          warning: true,\n          inform_modal: {\n            title: \"WARNING\",\n            description: event.msg,\n            active: true,\n          },\n        }));\n        // Add event to the reducer\n        this.props.FC_CandidateExamEvent(\n          eventDefiner({\n            description: event.msg,\n            event_type: \"WARNING\",\n            done_by: \"Invigirator\",\n            room_id: this.props.proctoring.room.room_id,\n            user_id: event.user_id,\n          } as eventDefinerInterface)\n        );\n      }\n    );\n\n    // * STOP EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_STOP_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"STOP EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(true);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"STOP EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_CONTINUE_EXAM_CLIENT,\n      (event: any) => {\n        if (\n          event.user_id === this.props.auth.user.user_id &&\n          this.props.proctoring.me.stopped === true\n        ) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"CONTINUE EXAM\",\n              description: \"Invigirator allowed you to continue the exam\",\n              active: true,\n            },\n          }));\n\n          this.props.FC_BlockExam(false);\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: \"Invigirator allowed you to continue the exam\",\n              event_type: \"CONTINUE EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n        }\n      }\n    );\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      ExamEvents.CAND_RESTART_EXAM_CLIENT,\n      (event: any) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.setState((prevState: AppState) => ({\n            inform_modal: {\n              title: \"RESTART EXAM\",\n              description: event.msg,\n              active: true,\n            },\n          }));\n          this.props.FC_BlockExam(false);\n\n          // Add event to the reducer\n          this.props.FC_CandidateExamEvent(\n            eventDefiner({\n              description: event.msg,\n              event_type: \"RESTART EXAM\",\n              done_by: \"Supervisor\",\n              room_id: event.room_id,\n              user_id: event.user_id,\n            } as eventDefinerInterface)\n          );\n          // * Restart Function\n          this.props.restartExam();\n        }\n      }\n    );\n\n    //** EVENTS BROWSER */\n    // document.addEventListener(\"mouseenter\", (e) => {\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   );\n    // });\n\n    // document.addEventListener(\"mouseleave\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    document.addEventListener(\"copy\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\n        \"COPY TEXT\",\n        \"The candidate is try to copy the text\"\n      );\n    });\n\n    document.addEventListener(\"paste\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n      this.eventBrodcaster(\"TEXT PASTE\", \"pasted a text\");\n    });\n\n    document.addEventListener(\"visibilitychange\", (event) =>\n      this.eventBrodcaster(\"ZOOMING OUT\", \"Changing the visibility\")\n    );\n\n    // ! ERROR: causing to stop the candidate once they click on a modal into the browser\n    // document.addEventListener(\"focusout\", (event) =>\n    //   this.eventBrodcaster(\n    //     \"LEAVING BROWSER\",\n    //     \"The candidate is try to leave the browser\"\n    //   )\n    // );\n\n    window.addEventListener(\"blur\", () =>\n      this.eventBrodcaster(\n        \"LEAVING BROWSER\",\n        \"The candidate is try to leave the browser\"\n      )\n    );\n\n    // prevent the right-click\n    document.addEventListener(\"contextmenu\", (event) => {\n      if (this.props.proctoring.exam.start_exam === true) {\n        event.preventDefault();\n      }\n    });\n  }\n\n  componentWillUnmount = () => {\n    this.props.socket.socket.off(ExamEvents.START_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.STOP_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_CONTINUE_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_RESTART_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_WARNING_EXAM_CLIENT);\n    this.props.socket.socket.off(ExamEvents.CAND_STOP_EXAM_CLIENT);\n  };\n\n  // ***************************************************************************\n\n  /**\n   * @description define wheter the exam has started or not\n   * @param state boolean\n   */\n  examStart = (state: boolean) => {\n    if (state === true) {\n      // start exam\n      this.setState({\n        request_fullScreen: true,\n        exit_fullScreen: false,\n      });\n\n      this.props.FC_MeStartStopExam(true);\n      this.props.startExam();\n    } else {\n      // stop exam mode\n      this.setState({\n        request_fullScreen: false,\n        exit_fullScreen: true,\n      });\n\n      this.props.FC_MeStartStopExam(false);\n      this.props.stopExam();\n    }\n  };\n\n  closeInfoModal = () =>\n    this.setState({\n      inform_modal: {\n        active: false,\n        description: \"\",\n        title: \"\",\n      },\n    });\n\n  /**\n   * @description Request the fullscreen\n   */\n  requestFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    }\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n  };\n\n  /**\n   * @description Exist the fullscreen\n   */\n  exitFullScreen = () => {\n    this.setState({\n      request_fullScreen: false,\n      exit_fullScreen: false,\n    });\n    if (document.fullscreenElement) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n\n  /**\n   * @description get all the events and send them to the supervisor\n   * @param event\n   */\n  eventBrodcaster = (type: string, description: string) => {\n    if (this.props.proctoring.exam.start_exam === true) {\n      let event: EventInterface = eventDefiner({\n        description: description,\n        user_id: this.props.auth.user.user_id,\n        done_by: \"System\",\n        room_id: this.props.proctoring.room.room_id,\n        event_type: type,\n      } as eventDefinerInterface);\n\n      // Add event to the reducer\n      this.props.FC_CandidateExamEvent(event);\n      this.props.stopExam();\n\n      this.props.FC_BlockExam(true);\n\n      // send the event on the server\n      this.props.socket.socket.emit(ExamEvents.CAND_EXAM_EVENT_SERVER, event);\n    }\n  };\n\n  render() {\n    //* candidate stopped screen\n    if (\n      this.props.proctoring.me.stopped === true &&\n      this.props.proctoring.exam.start_exam === true\n    ) {\n      let lastEvent: EventInterface | null = null;\n      let events_list = this.props.proctoring.events;\n      if (events_list.length >= 1) {\n        lastEvent = events_list[events_list.length - 1];\n      }\n      return (\n        <div className=\"p-5 mx-auto mt-6 text-center bg-red-100 max-w-lg max-w-2/3 w-full rounded-md animate__bounceIn\">\n          <MdReport className=\"text-9xl text-red-900 inline\" />\n          <h1 className=\"text-2xl text-red-900 font-bold\">\n            You have beed stopped <br /> to continue the exam\n          </h1>\n\n          {lastEvent !== null && (\n            <Fragment>\n              <div className=\"mt-2\">\n                <h5 className=\"text-lg  text-red-800 inline-block\">\n                  You violated the rule of:\n                </h5>\n                <h2 className=\"text-md text-white font-bold bg-red-600 border-4 py-0.5 px-3 rounded-full inline-block ml-2 mx-auto\">\n                  {lastEvent?.event_type}\n                </h2>\n              </div>\n\n              <h3 className=\"text-md text-red-800 mt-3 font-bold\">\n                {lastEvent?.description}\n              </h3>\n            </Fragment>\n          )}\n\n          <div className=\"mt-5 border-t border-red-900 border-opacity-50 text-sm text-red-900 text-opacity-80 pt-3 mx-5\">\n            <b>The exam will be saved from where you left off,</b> <br />\n            You can explain the situation to the supervisor <br /> If your\n            reasons are clear you will be gived another chance\n          </div>\n        </div>\n      );\n    }\n\n    //* Request for the full screen\n    if (this.state.request_fullScreen === true) {\n      return (\n        <div className=\"bg-green-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreenExit className=\"text-9xl inline text-green-600 opacity-50\" />\n            <h1 className=\"text-3xl text-green-500 font-bold\">\n              Go Full-Screen mode{\" \"}\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              You need to go in <b>Full-screen mode</b>, in order to get a good\n              experience (Important)\n            </p>\n            <button\n              className=\" bg-green-600 hover:bg-green-800 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.requestFullScreen()}\n            >\n              Yes, go full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    //* Exit for the full screen\n    if (this.state.exit_fullScreen === true) {\n      return (\n        <div className=\"bg-blue-100 w-auto mt-6 rounded-md mx-auto text-center p-5 max-w-sm animate__bounceIn\">\n          <div className=\"\">\n            <MdFullscreen className=\"text-9xl inline text-blue-600 opacity-50\" />\n            <h1 className=\"text-3xl text-blue-600 font-bold\">\n              Quit Full-Screen mode\n            </h1>\n            <p className=\"mt-2 text-gray-700\">\n              Exam is completed, you can quit the <b>Fullscreen mode</b>\n              (optional)\n            </p>\n            <button\n              className=\" bg-blue-600 text-white p-3 font-bold text-md rounded-md w-full mt-3\"\n              onClick={() => this.exitFullScreen()}\n            >\n              Exit full-screen\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Fragment>\n        {this.state.inform_modal.active === true && (\n          <InformationModal\n            title={this.state.inform_modal.title}\n            description={this.state.inform_modal.description}\n            close={this.closeInfoModal}\n          />\n        )}\n\n        {this.props.children}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; proctoring: Proctoring; auth: Auth } => {\n  return { socket: socket, auth, proctoring };\n};\n\nexport const ProctoringCandidateOnline = connect(mapStateToProps, {\n  eventDefiner,\n  FC_AddMyDataToProctoring,\n  FC_MeStartStopExam,\n  FC_CandidateExamEvent,\n  FC_BlockExam,\n})(_ProctoringCandidateOnline);\n","import React from 'react'\nimport { BiChat } from 'react-icons/bi'\nimport { IoNotifications } from 'react-icons/io5'\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface; \n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (let x: number = 0; x < props.candidateExam.candidate_exam.questions.length; x++) {\n        if (props.candidateExam.candidate_exam.questions[x].id === question_id) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  }\n\n  let selectedIndexPrevious: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 ? \n  findIndex(props.candidateExam.selected_question) : props.candidateExam.candidate_exam.questions.length : -1;\n\n  let selectedIndexNext: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 && findIndex(props.candidateExam.selected_question) < props.candidateExam.candidate_exam.questions.length-1 ? \n  findIndex(props.candidateExam.selected_question) : findIndex(props.candidateExam.selected_question) === 0 ? 0 : -1 : 0;\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {console.log(\"Selected: \", selectedIndexNext)}\n      <div className=\"flex flex-row items-center\">\n        <div onClick={() => props.setProfileWindowStatus(!props.windowStatus.profile)} \n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}>\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div className=\"animate-bounce bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\" style={{position: 'relative', top: '-10px', right: '-12px'}}>02</div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && \n          <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">New events <br/>are available</div>}\n        </div>\n\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && props.setSelectedExamQuestion(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexPrevious-1].id)}\n        className=\"btn btn-blue flex justify-center items-center\" style={{height: 'fit-content'}}><MdChevronLeft className=\"text-xl\" /> <span className=\"hidden md:block\">Previous</span></button>\n\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">Question {props.candidateExam.selected_question && findIndex(props.candidateExam.selected_question)+1}</span>\n          <span className=\"text-xs\">Auto save is activated</span>\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div>\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && props.setSelectedExamQuestion(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexNext+1].id)}\n        className=\"btn btn-blue flex items-center\"><span className=\"hidden md:block\">Next</span> <MdChevronRight className=\"text-xl\" /></button>\n      </div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth;  candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;","import React from 'react'\nimport { IoClose } from 'react-icons/io5';\nimport userImage from '../../../assets/profile.png'\n\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  const Events = [1,2,3,4,5,6,7,8,9,0,3,231,45,534,6,3,534,6,3,12,5,6,7,8,9,0,3,231,45,534,6,3,12,5];\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose onClick={() => props.setProfileWindowStatus(false)} className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\" />\n              </div>\n            </div>\n            <div className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\" style={{width: '200px', height: '200px'}}>\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">{props.auth.user.fname} {props.auth.user.lname}</span>\n            <span className=\"text-gray-400 text-xs\">ID: {props.auth.user.n_id}</span>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>23</span>\n          </div>\n          <div className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\" style={{paddingBottom: '550px', paddingTop: '10px'}}>\n            {Events.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-row justify-between items-center text-red-300 my-1\">\n                <span>{i + 1}</span>\n                <span>Copied from external</span>\n                <span>2min</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n}: StoreState): { todos: Todo[]; auth: Auth; } => {\n  return { todos: todos, auth: auth, };\n};\n\nconst Profile = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n})(_Profile);\n\nexport default Profile;","import React, { Fragment } from 'react'\nimport { useState } from 'react'\nimport { IoDocumentTextOutline } from 'react-icons/io5'\nimport { MdArrowBack, MdCheckCircle, } from 'react-icons/md'\nimport { newAnswer } from '../DoExam'\nimport Modal, { Themes, ModalSize } from '../../../components/Modal/Modal'\nimport { RiErrorWarningFill } from 'react-icons/ri'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { exam_question } from '../../../interfaces/exam_question'\nimport Loading from '../../../components/Loading/Loading'\n\ninterface TestTitleInterface { \n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n  const answeredPercentage = props.candidateExam.candidate_exam ? (0*100)/props.candidateExam.candidate_exam?.questions.length : 0;\n  const submitExam = (allQuestions: exam_question[], answeredQuestions: newAnswer[]) => {\n    let incomplete:exam_question[] = [];\n    for (let i in allQuestions) {\n      let itm = answeredQuestions.find(item => item.question_id === allQuestions[i].question_id) && allQuestions[i];\n      console.log(itm)\n      if (itm === undefined) {\n        incomplete.push(allQuestions[i])\n      }\n    }\n    setIncompleteQuestions(incomplete);\n    setSubmitModal(true);\n  }\n  return (\n    <Fragment>\n    <div className=\"bg-gray-800\">\n      {console.log(\"Incompleted questions: \", incompleteQuestions)}\n      <div className=\"grid grid-cols-6\">\n        <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n          <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0\">\n            <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n            <span className=\"font-bold mr-3 text-xl ml-1 lg:ml-3\">Exam</span>\n          </div>\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-4\" style={{alignSelf: \"center\"}}>\n          <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n            <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n              <div className=\"text-gray-200 text-sm w-full hidden lg:block\">Completed {0} of {props.candidateExam.candidate_exam?.questions.length}</div>\n              <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                <div className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\" style={{width: `${answeredPercentage}%`}}></div>\n              </div>\n              <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                <div className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\" style={{width: `${answeredPercentage}%`}}>\n                  <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">{answeredPercentage}%</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-4 hidden lg:block h-full\">\n              <div className=\"flex flex-row justify-center items-center h-full\">\n                <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                  <div>Start time: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam?.start_time}</span></div>\n                  <div>Duration: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.duration > 1 ? props.candidateExam.candidate_exam.duration + \" hours\" : props.candidateExam.candidate_exam?.duration + \" hour\"}</span></div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-5 bg-gray-800\">\n              <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                  <span>Counting down</span>\n                  <span className=\"text-lg lg:text-xl font-bold\">00:59:59</span>\n                </div>\n                <button onClick={() => {setSubmitModal(true)}} type=\"button\" className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\">\n                  <MdCheckCircle className=\"text-white text-xl\" />\n                  <span>Submit</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {submitModal === true && \n    <Modal\n      title={<div className={`${incompleteQuestions.length === 0 ? \"text-blue-600\" : \"text-gray-800\"} font-bold text-2xl`}>Examination results submission</div>}\n      backDrop={true}\n      theme={incompleteQuestions.length === 0 ? Themes.default : Themes.default}\n      close={() => setSubmitModal(false)}\n      backDropClose={false}\n      widthSizeClass={ModalSize.large}\n      displayClose={true}\n      padding={{title: true,}} >\n        <div className=\"pt-4 border-t border-gray-300\">\n          {incompleteQuestions.length !== 0 ? \n          <div>\n            <div className=\"grid md:grid-cols-2\">\n              <div className=\"md:col-span-1\">\n                <div className=\"flex flex-col justify-center items-center mx-4 mb-3 rounded bg-gray-200 px-2 py-2\">\n                  <RiErrorWarningFill className=\"text-8xl text-gray-400\" />\n                  <div className=\"text-xl text-gray-700 font-bold mb-2 text-center\">There are incomplete questions</div>\n                  <div className=\"text-gray-600 text-xs text-center pb-2\">Please, make sure to complete the following remaining questions which are not yet answered. Please, if you proceed anyway, for these questions, you will not be marked!</div>\n                </div>\n              </div>\n              <div className=\"md:col-span-1\">\n                <div className=\" mr-3\">\n                  <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded\">\n                    <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div>\n                    <div className=\"text-xs text-center mb-5 mt-1 text-gray-600\">Choose a question number you want to answer directly</div>\n                    <div className=\"flex flex-row items-center justify-center gap-3\">\n                      {incompleteQuestions.map((item, i) => (\n                        <div onClick={() => { \n                          // props.setSelectedExamQuestion(item); \n                          setSubmitModal(false) }} key={i + 1} className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\">{item.question_id}</div>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row items-center justify-between mt-5 gap-3\">\n                    <div></div>\n                    <div onClick={() => setSubmitModal(false)} className=\"bg-gray-500 text-white flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-900\">Go back</div>\n                    {/* <div className=\"bg-blue-600 text-white flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-500\">Confirm submission</div> */}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n          : \n          <div className=\"px-4 pb-2\">\n            <div className=\"text-sm text-gray-500\">Hey <b>{props.auth.user.fname}</b>, All questions have been answered, are you sure do you want to submit the final answers?</div>\n            \n            <div className=\"my-2\">\n              <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Test your answers</div>\n              <div className=\"flex flex-col gap-3\">\n                {props.candidateExam.candidate_exam === null ? <Loading /> :\n                props.candidateExam.candidate_exam.questions.map((item, i) => (\n                  <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                    <div className=\"grid md:grid-cols-12 w-full\">\n                      <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                        <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{i + 1}</div>\n                        <div className=\"text-sm\">\n                          <div>{item.question[0].description}</div>\n                          <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                            {/* {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer} */}Answer\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-span-2 float-right flex items-center justify-end\">\n                        <div onClick={() => { \n                          // props.setSelectedQuestion(item); \n                          setSubmitModal(false) }} className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\">Edit</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 my-4 gap-4\">\n              <div onClick={() => setSubmitModal(false)} className=\"col-span-1 bg-white text-gray-700 flex items-center justify-center rounded px-5 py-2 cursor-pointer hover:bg-gray-200 hover:text-black border border-gray-400 hover:shadow-xs\">\n                <div className=\"flex flex-col justify-center items-center\">\n                  <MdArrowBack className=\"text-5xl\" />\n                  <span className=\"text-lg\">Back edit</span>\n                </div>\n              </div>\n              <div onClick={() => { setSubmitModal(false); props.setCompletedTest(true); props.SubmitExamAnswers(props.auth.user.n_id); }} className=\"col-span-1 bg-blue-100 text-blue-600 flex items-center justify-center rounded px-5 py-2 cursor-pointer hover:bg-blue-600 hover:text-white border border-blue-300 hover:shadow-lg\">\n                <div className=\"flex flex-col justify-center items-center\">\n                  <MdCheckCircle className=\"text-5xl\" />\n                  <span className=\"text-lg\">Submit test</span>\n                </div>\n              </div>\n            </div>\n          </div>}\n        </div>\n    </Modal>}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth; candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  InitializeExamDetails,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { question_answer } from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport { ExamInterface, examStatus } from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport CancelErrorMessage from \"./Cancel/CancelErrorMessage\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { IoIosPaper } from \"react-icons/io\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE } from \"../../utils/functions\";\n\ninterface DoExamProps {\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (exam_id: string, callback: (loading: boolean) => void) => void;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  InitializeExamDetails: (periodId: string, courseId: string, callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details.find(itm => itm.id === this.props.candidateExam.selected_exam_id);\n      if (check !== undefined) {\n        return check\n      }\n    }\n    return null;\n  }\n\n  componentDidMount = () => {\n    if (this.props.course.courses === null || this.props.course.courses.length === 0) {\n      this.props.loadCourses(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  render() {\n    // if (this.props.doExam.exam_answers) {\n    //   if (!this.props.doExam.exam_answers.exam_id) {\n    //     // return <Redirect to=\"/dashboard\" />;\n    //   } else if (this.props.doExam.exam_answers.status === examStatus.Done) {\n    //     if (\n    //       this.state.completedTest === false ||\n    //       this.props.doExam.exam_answers?.exam_questions_answers\n    //         ?.questionAnswers === null\n    //     ) {\n    //       // return <Redirect to=\"/dashboard\" />;\n    //     }\n    //   } else if (\n    //     this.props.doExam.exam_answers.status === examStatus.Canceled\n    //   ) {\n    //     // return <CancelErrorMessage />;\n    //   }\n    //   console.log(\"Exam status\", this.props.doExam.exam_answers.status);\n    // } else {\n    //   // return <Redirect to=\"/dashboard\" />;\n    // }\n\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/applications\" />\n    }\n\n    if (this.state.loading === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-full flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">Loading, Please wait...</div>\n            <Loading />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50\">\n      <ProctoringCandidateOnline\n        startExam={() => {\n          // this.props.ChangeExamStatus(this.props.auth.user.user_id, examStatus.Editing)\n        }}\n        restartExam={() => {\n          // this.initializeEmptyList()\n        }}\n        stopExam={() => {\n          // this.props.ChangeExamStatus(this.props.auth.user.user_id, examStatus.Canceled)\n        }}\n      >\n        <Fragment>\n          {this.props.candidateExam.candidate_exam === null ? \n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-full flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full\">\n              <div className=\"text-gray-500 text-lg px-4 mb-4\">Waiting for loading exam...</div>\n              <Loading />\n            </div>\n          </div> :\n          <div>\n            {this.state.completedTest === true &&\n            this.props.doExam.exam_answers?.exam_questions_answers\n              ?.questionAnswers !== null ? (\n              <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                <DoExamResults\n                  page=\"doExam\"\n                  answeredQuestions={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers\n                  }\n                  testAnswers={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers.length === undefined\n                      ? 0\n                      : this.props.doExam.exam_answers?.exam_questions_answers\n                          ?.questionAnswers.length\n                  }\n                />\n              </div>\n            ) : (\n              <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                <div className=\"grid md:grid-cols-12 h-full\">\n                  {this.state.windowStatus.profile === true && (\n                    <div\n                      className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                    >\n                      <Profile\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                      />\n                    </div>\n                  )}\n                  <div\n                    className={`col-span-${\n                      this.state.windowStatus.profile === false ? \"12\" : \"10\"\n                    } bg-gray-800 shadow-lg h-full`}\n                  >\n                    <div className=\"flex flex-row h-screen bg-gray-800\">\n                      <div className=\"h-full\">\n                        {/* Questions list */}\n                        <div className={`h-full`}>\n                          <QuestionsList\n                            windowStatus={this.state.windowStatus}\n                            setProfileWindowStatus={this.setProfileWindowStatus}\n                            setQuestionsListWindowStatus={\n                              this.setQuestionsListWindowStatus\n                            }\n                          />\n                        </div>\n                      </div>\n                      <div className=\"w-full h-full\">\n                        {/* Do exam test title */}\n                        <DoExamTitle\n                          setCompletedTest={this.setCompletedTest}\n                          windowStatus={this.state.windowStatus}\n                          setProfileWindowStatus={this.setProfileWindowStatus}\n                          setQuestionsListWindowStatus={\n                            this.setQuestionsListWindowStatus\n                          }\n                        />\n                        {/* Question details */}\n                        <QuestionDetails\n                          questionAnswers={\n                            this.props.doExam.exam_answers?.exam_questions_answers\n                              ?.questionAnswers\n                          }\n                          answerQuestionFn={this.answerQuestionFn}\n                          selectedQuestion={this.state.selectedQuestion}\n                          setSelectedQuestion={this.setSelectedQuestion}\n                          preview={false}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Footer\n                  windowStatus={this.state.windowStatus}\n                  setProfileWindowStatus={this.setProfileWindowStatus}\n                  setQuestionsListWindowStatus={this.setQuestionsListWindowStatus}\n                />\n              </div>\n            )}\n          </div>}\n          {this.props.candidateExam.candidate_exam === null &&\n          <Modal\n            title=\"\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.props.setSelectedCandidateExam(null)}\n            backDropClose={false}\n            widthSizeClass={ModalSize.large}\n            displayClose={false}\n            padding={{title: false,}} >\n              <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                {this.props.course.courses === null ? <Loading /> :\n                <div>\n                  <div className=\"flex items-center justify-center \">\n                    <IoIosPaper className=\"text-8xl text-blue-600\" />\n                  </div>\n                  {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                  <div className=\"flex flex-row justify-center items-center\">\n                    {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                  </div>\n                  <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                    <div className=\"text-blue-600 text-3xl mb-4\">\n                      {this.props.course.selected_course && \n                      <div>\n                        <span>{this.props.course.selected_course.course_code}-</span>\n                        <span>{this.props.course.selected_course.course_name}</span>\n                      </div>}\n                    </div>\n                    <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                    <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">Examination rules</div>\n                      {this.examDetails()?.termes}\n                      <div className=\"border-t-2 border-gray-400 mt-4 pt-2\">\n                        <div className=\"flex flex-row gap-3\">\n                          <span className=\"text-gray-400 font-normal\">Exam date:</span>\n                          <span className=\"text-blue-600 font-bold\">{DATE(this.examDetails()!.exam_date, \"DD/MM/YYYY\")}</span>\n                        </div>\n                        <div className=\"flex flex-row gap-3\">\n                          <span className=\"text-gray-400 font-normal\">Start time:</span>\n                          <span className=\"text-blue-600 font-bold\">{this.examDetails()?.start_time}</span>\n                        </div>\n                        <div className=\"flex flex-row gap-3\">\n                          <span className=\"text-gray-400 font-normal\">Exam duration:</span>\n                          <span className=\"text-blue-600 font-bold\">{this.examDetails()?.duration} hrs</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    If you are ready, start click to start the exam now, The system will start to count your time!\n                  </div>\n                  <div className=\"flex flex-row items-center justify-between mt-2\">\n                    <button onClick={() => this.props.setSelectedCandidateExam(null)} className=\"btn bg-gray-50 text-gray-600 border\">Go Back</button>\n                    <button onClick={() => this.props.candidateExam.selected_exam_id !== null && this.props.loadCandidateExam(this.props.candidateExam.selected_exam_id, this.setLoading)} className=\"btn bg-green-600 text-white\">I accept, Start exam</button>\n                  </div>\n                </div>}\n              </div>\n          </Modal>}\n        </Fragment>\n      </ProctoringCandidateOnline>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; course: courseStoreInterface; periods: applicationPeriodsStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, course: course, periods: periods, };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  InitializeExamDetails,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n})(_DoEam);\n"],"sourceRoot":""}