{"version":3,"sources":["interfaces/candidatesInterfaces.ts","interfaces/events.ts","interfaces/position.ts","components/ProctoringCandidateDetails/ProctoringCandidateDetails.tsx","components/ProctoringMainTopBar/ProctoringMainTopBar.tsx","components/ProctoringStatistics/ProctoringStatistics.tsx","components/ProctoringEvents/ProctoringEvents.tsx","containers/ProctoringOnlineSupervisor/ProctoringOnlineSupervisor.tsx","components/ProctoringCandidates/ProctoringCandidates.tsx","components/CenterCardSupervisor/CenterCardSupervisor.tsx","containers/ProctoringCenter/ProctoringCenter.tsx"],"names":["DocumentStatus","Events","ExamEvents","ExamEventTypes","validateDocCategory","requirement","userDocuments","undefined","find","item","category_id","category","user_detail_category_id","validateDocSubcategory","result","position_requirement","length","i","filterData","category_subcategory_data","category_subcategory_Data_id","_id","required","push","category_subcat_id","user_detail_subcategory_id","subcategory","validateDocSubcategoryOptional","returnValidatePosition","requirements","documents","status","ActiveTap","ProctoringMainTopBar","course_title","post_title","duration","started_at","end_at","exam_start","startExamHandler","stopExamHandler","focus_mode","focusToggle","leaveRoom","className","onClick","htmlFor","window","confirm","title","ProctoringStatistics","total","active","done","left","ProctoringEvents","events","candidates","clickOpen","clickHandler","map","evnt","findUser","cand","user_id","fname","lname","event_type","description","ActiveSideTap","ProctoringCandidateDetails","candidate","chatHandler","micHandler","focusHandler","stopHandler","restartHandler","warnHandler","closeHandler","home_proctoring","exam_started","useState","Details","setActive","email","bind","position_title","course_name","ProctoringCandidates","show_title","CenterCardSupervisor","seat_number","warningHandler","detailsHandler","continueHandler","color","stopped","_ProctoringOnlineSupervisor","props","myPeer","componentDidMount","proctoring","exam","room_id","course_id","position_id","FC_GetProctoringRoom","msg","setState","loading_room","candidate_loaded","socket","emit","JOIN_ROOM","room","auth","user","peer_id","active_candidates","FC_SetActiveCandidates","error","target","UPDATED_ROOM_LIST","console","log","on","USER_CONNECTED","new_user","FC_SetOneActiveCandidate","USER_DISCONNECTED","userId","FC_CandidateOffline","CAND_EXAM_EVENT_CLIENT","event","FC_CandidateExamEvent","off","FC_ClearExamToRoomProctoring","startCenterProctoring","sendEvent","CAND_WARNING_EXAM_SERVER","blank","e","ActiveSIdeTabHandler","itm","active_side_tab","SelectCandidateHandler","value","selected_candidate","START_EXAM_SERVER","data","FC_ExamStartStop","STOP_EXAM_SERVER","FC_ContinueExam","CAND_CONTINUE_EXAM_SERVER","stopCandidateHandler","CAND_STOP_EXAM_SERVER","FC_StopCandidate","warnCandidateHandler","restartCandidateHandler","CAND_RESTART_EXAM_SERVER","prevState","state","loading","online_room","online_candidates","start_exam","activeCandidates","this","filter","nonActiveCandidates","Spinner","Fragment","Candidates","React","Component","ProctoringOnlineSupervisor","connect","_ProctoringCenter","user_access","FC_RoomDetails","errorMsg","session","application_session","FC_ExamsDetailsData","exams_error","exams_error_msg","loaded","room_number","center_name","district_name","province_name","room_exams","key","examFound","exams_list","exams","exm","course","course_code","exam_date","FC_LoadExamToRoomProctoring","video_support","start_time","end_time","exam_done","period_id","exam_status","ProctoringCenter"],"mappings":"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","file":"static/js/15.75516c31.chunk.js","sourcesContent":["export interface CandidateInterface {\n  n_id: string;\n  fname: string;\n  lname: string;\n  date_of_birth: string;\n  district: string;\n  email: string;\n  phone_number: string;\n  stopped: boolean;\n  user_id: string;\n  // more details\n  application_number: string;\n  cell: string;\n  civil_status: string;\n  country_of_birth: string;\n  date_of_expiry: string;\n  date_of_issue: string;\n  document_type: string;\n  father_names: string;\n  issue_number: string;\n  mother_names: string;\n  photo: string;\n  place_of_birth: string;\n  place_of_issue: string;\n  province: string;\n  sector: string;\n  sex: string;\n  spouse?: any;\n  status: string;\n  village: string;\n  village_id: string;\n  // temporary details\n  active?: boolean;\n  ref?: any;\n  muted?: boolean;\n  room_id?: string;\n  video?: boolean;\n  stream?: any;\n  peer?: any;\n  peer_id?: any;\n  type?: any;\n  id?: string;\n}\n\nexport interface DocumentsCategories {\n  description: string;\n  fields: string[];\n  title: string;\n  user_detail_category_id: string;\n}\n\nexport interface DocumentsCategoriesWithCount {\n  description: string;\n  fields: string[];\n  title: string;\n  user_detail_category_id: string;\n  count: number;\n}\n\nexport interface DocumentSubCategories {\n  category_id: string;\n  description: string;\n  title: string;\n  user_detail_subcategory_id: string;\n}\n// export interface CategorySubcategoryData {\n//   category_id: string;\n//   category_subcategory_id: string;\n//   description: string;\n//   others: {\n//     key: string;\n//     value: string;\n//   }[];\n//   subcategory_id: string;\n//   title: string;\n// }\n\nexport interface CategorySubcategoryData {\n  category_id: string;\n  subcategory_id: string;\n  title: string;\n  description: string;\n  others: {\n    key: string;\n    value: string;\n  }[];\n  category_subcategory_Data_id: string;\n}\n\nexport interface DocumentUser_API {\n  category_id: string;\n  company: string;\n  description: string;\n  email: string;\n  end_year: string;\n  files: string;\n  names: string;\n  phone_number: string;\n  school: string;\n  school_id: string;\n  start_year: string;\n  sub_category_id: string;\n  title: string;\n  year: string;\n  validation_status: string;\n  doc_id: string;\n  category_subcategory_data: string;\n}\n\nexport interface DocumentUser {\n  category_id: string;\n  company: string;\n  description: string;\n  email: string;\n  end_year: string;\n  files: string;\n  names: string;\n  phone_number: string;\n  school: {\n    school_name: string;\n    _id: string;\n    status: boolean;\n    education_category_id?: {\n      education_category_title: string;\n      _id: string;\n    };\n    district_id?: {\n      district_name: string;\n      _id: string;\n    };\n  } | null;\n  school_id: string;\n  start_year: string;\n  sub_category_id: string;\n  title: string;\n  year: string;\n  validation_status: string;\n  doc_id: string;\n  category_subcategory_data: CategorySubcategoryData | null;\n}\n\nexport interface SchoolInterface {\n  district_id: string;\n  education_category_id: string;\n  school_name: string;\n  status: boolean;\n  _id: string;\n}\n\nexport enum DocumentStatus {\n  Waiting = \"waiting\",\n  Rejected = \"rejected\",\n  Approved = \"approved\",\n}\n\nexport interface CandidateProctoringInterfaceAPI {\n  course_code: string;\n  course_id: string;\n  course_name: string;\n  district: string;\n  education_institute_id: string;\n  email: string;\n  fname: string;\n  lname: string;\n  n_id: string;\n  phone_number: string;\n  position_id: string;\n  position_title: string;\n  school_level_id: string;\n  user_id: string;\n}\n\nexport interface CandidateProctoringInterface\n  extends CandidateProctoringInterfaceAPI {\n  active: boolean;\n  stopped: boolean;\n  ref?: any;\n  muted?: boolean;\n  peer?: any;\n  peer_id?: any;\n}\n","export enum Events {\n  USER_CONNECTED = \"user-connected\",\n  USER_DISCONNECTED = \"user-disconnected\",\n  JOIN_ROOM = \"join-room\",\n  UPDATED_ROOM_LIST = \"UPDATED_ROOM_LIST\",\n}\n\nexport enum ExamEvents {\n  START_EXAM_CLIENT = \"START_EXAM_CLIENT\",\n  START_EXAM_SERVER = \"START_EXAM_SERVER\",\n\n  STOP_EXAM_CLIENT = \"STOP_EXAM_CLIENT\",\n  STOP_EXAM_SERVER = \"STOP_EXAM_SERVER\",\n\n  CAND_EVENT_CLIENT = \"CAND_EVENT_CLIENT\",\n  CAND_EVENT_SERVER = \"CAND_EVENT_SERVER\",\n\n  CAND_CONTINUE_EXAM_SERVER = \"CAND_CONTINUE_EXAM_SERVER\",\n  CAND_CONTINUE_EXAM_CLIENT = \"CAND_CONTINUE_EXAM_CLIENT\",\n\n  CAND_STOP_EXAM_CLIENT = \"CAND_STOP_EXAM_CLIENT\",\n  CAND_STOP_EXAM_SERVER = \"CAND_STOP_EXAM_SERVER\",\n\n  CAND_RESTART_EXAM_CLIENT = \"CAND_RESTART_EXAM_CLIENT\",\n  CAND_RESTART_EXAM_SERVER = \"CAND_RESTART_EXAM_SERVER\",\n\n  ALL_CAND_RESTART_EXAM_CLIENT = \"ALL_CAND_RESTART_EXAM_CLIENT\",\n  ALL_CAND_RESTART_EXAM_SERVER = \"ALL_CAND_RESTART_EXAM_SERVER\",\n\n  CAND_WARNING_EXAM_CLIENT = \"CAND_WARNING_EXAM_CLIENT\",\n  CAND_WARNING_EXAM_SERVER = \"CAND_WARNING_EXAM_SERVER\",\n\n  CAND_BRODCAST_MSG_CLIENT = \"CAND_BRODCAST_MSG_CLIENT\",\n  CAND_BRODCAST_MSG_SERVER = \"CAND_BRODCAST_MSG_SERVER\",\n\n  CAND_PRIVATE_MSG_CLIENT = \"CAND_PRIVATE_MSG_CLIENT\",\n  CAND_PRIVATE_MSG_SERVER = \"CAND_PRIVATE_MSG_SERVER\",\n\n  CAND_EXAM_EVENT_CLIENT = \"CAND_EXAM_EVENT_CLIENT\",\n  CAND_EXAM_EVENT_SERVER = \"CAND_EXAM_EVENT_SERVER\",\n}\n\nexport enum ExamEventTypes {\n  PASTE_A_TEXT = \"PASTE A TEXT\",\n  MOVE_MOUSE_OUT = \"MOVE MOUSE OUT WINDOW\",\n}\n\nexport interface EventInterface {\n  event_id: string;\n  user_id: string;\n  event_type: string;\n  description: string;\n  room_id: string;\n  done_by?: string;\n  time: string;\n}\n","import { DocumentUser } from \".\";\n\nexport interface PositionAPI {\n  courses: {\n    course_name: string;\n    course_code: string;\n    description: string;\n    school_levels: string[];\n    course_id: string;\n  }[];\n  position_title: string;\n  description: string;\n  school_level_id: {\n    school_level_name: string;\n    description: string;\n    education_institute: string[];\n    courses: [];\n    school_level_id: string;\n  };\n  education_institute_id: {\n    education_category_title: string;\n    school_levels: [];\n    description: string;\n    education_institute_id: string;\n  };\n  requirements: PositionRequirements[];\n  isDeleted: boolean;\n  position_id: string;\n}\n\nexport interface PositionRequirementsOld {\n  user_detail_category_id: string;\n  title: string;\n  description: string;\n  fields: string[];\n  user_required_docs: {\n    category_id: string;\n    description: string;\n    title: string;\n    user_detail_subcategory_id: string;\n  }[];\n}\n\nexport interface PositionRequirements {\n  category: {\n    description: string;\n    fields: string[];\n    title: string;\n    user_detail_category_id: string;\n  };\n  subcategory: {\n    category_id: string;\n    description: string;\n    title: string;\n    user_detail_subcategory_id: string;\n  };\n  position_requirement: PositionSubcategoryData[];\n  required: boolean;\n}\n\nexport interface PositionSubcategoryData {\n  category_id: string;\n  subcategory_id: string;\n  description: string;\n  required: boolean;\n  title: string;\n  others: { key: string; value: string }[];\n  _id: string;\n  __v?: string;\n}\n\nexport const validateDocCategory = (\n  requirement: PositionRequirements,\n  userDocuments: DocumentUser[]\n) => {\n  if (\n    userDocuments.find(\n      (item) =>\n        item.category_id === requirement.category.user_detail_category_id\n    )?.category_id === undefined\n  ) {\n    return requirement.category.user_detail_category_id;\n  } else {\n    return null;\n  }\n};\n\n// If true, should return null\nexport const validateDocSubcategoryData = (\n  requirement: PositionSubcategoryData,\n  UserData: DocumentUser[]\n): string | null => {\n  let result: string | null = null;\n  // for (let requirement of requirements) {\n  if (\n    UserData.find(\n      (itm) =>\n        itm.category_subcategory_data &&\n        itm.category_subcategory_data.category_subcategory_Data_id ===\n          requirement._id\n    ) === undefined\n  ) {\n    result = requirement.subcategory_id;\n  }\n  // }\n  return result;\n};\n\nexport const validateDocSubcategory = (\n  requirement: PositionRequirements,\n  userDocuments: DocumentUser[]\n) => {\n  let result: {\n    category_subcat_id: string | null;\n    category_id: string | null;\n    user_detail_subcategory_id: string | null;\n  }[] = [];\n  if (requirement.position_requirement.length > 0) {\n    for (let i in requirement.position_requirement) {\n      let filterData = userDocuments.find((item) => item.category_subcategory_data &&\n        item.category_subcategory_data.category_subcategory_Data_id === requirement.position_requirement[i]._id\n        )?.category_subcategory_data;\n      if ((filterData === undefined || filterData === null) \n        && requirement.position_requirement[i].required === true\n      ) {\n        result.push({\n          category_subcat_id: requirement.position_requirement[i]._id,\n          category_id: requirement.category.user_detail_category_id,\n          user_detail_subcategory_id:\n            requirement.subcategory.user_detail_subcategory_id,\n        });\n      }\n    }\n  }\n  return result;\n};\n\n\nexport const validateDocSubcategoryOptional = (\n  requirement: PositionRequirements,\n  userDocuments: DocumentUser[]\n) => {\n  let result: {\n    category_subcat_id: string | null;\n    category_id: string | null;\n    user_detail_subcategory_id: string | null;\n  }[] = [];\n  if (requirement.position_requirement.length > 0) {\n    for (let i in requirement.position_requirement) {\n      let filterData = userDocuments.find((item) => item.category_subcategory_data &&\n        item.category_subcategory_data.category_subcategory_Data_id === requirement.position_requirement[i]._id\n        )?.category_subcategory_data;\n      if ((filterData === undefined || filterData === null) \n        && requirement.position_requirement[i].required === false\n      ) {\n        result.push({\n          category_subcat_id: requirement.position_requirement[i]._id,\n          category_id: requirement.category.user_detail_category_id,\n          user_detail_subcategory_id:\n            requirement.subcategory.user_detail_subcategory_id,\n        });\n      }\n    }\n  }\n  return result;\n};\n\nexport const returnValidatePosition = (\n  requirements: PositionRequirements[],\n  documents: DocumentUser[]\n) => {\n  let status = true;\n  for (let i in requirements) {\n    if (requirements[i].position_requirement.length === 0) {\n      if (\n        requirements[i] !== null &&\n        documents !== null &&\n        validateDocCategory(requirements[i], documents) !== null &&\n        validateDocCategory(requirements[i], documents) !== undefined\n      ) {\n        status = false;\n      }\n    } else {\n      if (validateDocSubcategory(requirements[i], documents).length !== 0) {\n        status = false;\n      }\n    }\n  }\n  return status;\n};\n","import React, { FC, ReactElement, useState } from \"react\";\nimport { CandidateProctoringInterface, EventInterface } from \"../../interfaces\";\nimport ProctoringEvents from \"../ProctoringEvents/ProctoringEvents\";\nimport {\n  MdAccountCircle,\n  MdArrowBack,\n  MdVolumeUp,\n  MdChat,\n  MdFullscreen,\n  MdNotInterested,\n  MdReplay,\n  MdWarning,\n} from \"react-icons/md\";\n\ntype ProctoringCandidateDetailsProps = {\n  candidate: CandidateProctoringInterface | undefined;\n  chatHandler: Function;\n  micHandler: Function;\n  focusHandler: Function;\n  stopHandler: Function;\n  restartHandler: Function;\n  warnHandler: Function;\n  closeHandler: Function;\n  events: EventInterface[];\n  home_proctoring: boolean;\n  exam_started: boolean;\n  focus_mode: boolean;\n};\n\nenum ActiveTap {\n  Details,\n  Events,\n}\n\nconst ProctoringCandidateDetails: FC<ProctoringCandidateDetailsProps> = ({\n  candidate,\n  chatHandler,\n  micHandler,\n  focusHandler,\n  stopHandler,\n  restartHandler,\n  warnHandler,\n  closeHandler,\n  events,\n  home_proctoring,\n  exam_started,\n  focus_mode,\n}): ReactElement => {\n  const [active, setActive] = useState(ActiveTap.Details);\n\n  if (candidate === undefined) {\n    return (\n      <div className=\"p-4 text-center bg-white\">\n        <h1 className=\"text-3xl text-gray-800\">Opps!!</h1>\n        <p className=\"text-3xl text-gray-700\">\n          The selected candidate can't be found{\" \"}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-1\">\n      <div\n        className={`p-2 border-rounded ${\n          focus_mode === true\n            ? \"bg-blue-900 text-white\"\n            : \"bg-gray-500 text-white\"\n        }  rounded-md flex items-baseline `}\n      >\n        <button\n          onClick={() => closeHandler()}\n          className=\"p-1 block bg-blue-900 bg-opacity-70 rounded-md mr-2 font-bold text-1xl\"\n        >\n          <MdArrowBack />\n        </button>\n        <h3 className=\"text-center -mt-1 mb-0 pb-0 text-1xl font-bold block text-blue-500--\">\n          User details\n        </h3>\n      </div>\n      <div className=\"p-2 text-center\">\n        <MdAccountCircle className=\"text-9xl text-center mx-auto\" />\n\n        <h1\n          className={`text-xl  ${\n            focus_mode === true ? \"text-white\" : \"text-gray-800\"\n          } font-bold`}\n        >\n          {candidate.email}\n        </h1>\n        <h2\n          className={` ${\n            focus_mode === true ? \"text-gray-400\" : \"text-gray-800\"\n          }  text-md`}\n        >\n          {candidate.fname} {candidate.lname}\n        </h2>\n      </div>\n      <div className=\"my-2 py-1 rounded grid grid-cols-3 gap-1\">\n        {/* buttons start here */}\n\n        {exam_started === true && candidate.active === false && (\n          <>\n            {home_proctoring === true && (\n              <>\n                <button\n                  onClick={micHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdVolumeUp className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-xs p-0 block -mt-0\">Mic</span>\n                </button>\n\n                <button\n                  onClick={chatHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdChat className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-xs p-0 block -mt-0\">Chat</span>\n                </button>\n\n                <button\n                  onClick={focusHandler.bind(this, candidate.user_id)}\n                  className=\"proctoring-action-button\"\n                >\n                  <MdFullscreen className=\"text-2xl mx-auto b-0 pb-0\" />\n                  <span className=\"text-xs p-0 block -mt-0\">Focus</span>\n                </button>\n              </>\n            )}\n\n            <button\n              onClick={stopHandler.bind(this, candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdNotInterested className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-xs p-0 block -mt-0\">Stop</span>\n            </button>\n\n            <button\n              onClick={restartHandler.bind(this, candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdReplay className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-xs p-0 block -mt-0\">Restart</span>\n            </button>\n\n            <button\n              title=\"give a warning\"\n              onClick={() => warnHandler(candidate.user_id)}\n              className=\"proctoring-action-button\"\n            >\n              <MdWarning className=\"text-2xl mx-auto b-0 pb-0\" />\n              <span className=\"text-xs p-0 block -mt-0\">Warn</span>\n            </button>\n          </>\n        )}\n      </div>\n\n      <div className=\"my-1 bg-blue-900 bg-opacity-40 rounded-md p-1 mt-2 grid grid-cols-2 gap-2 text-sm\">\n        <button\n          onClick={() => setActive(ActiveTap.Details)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Details\n              ? \"bg-blue-700 border-2 border-blue-300\"\n              : \"bg-blue-900\"\n          }`}\n        >\n          candidate\n        </button>\n\n        <button\n          onClick={() => setActive(ActiveTap.Events)}\n          className={`p-1 rounded-md text-white ${\n            active === ActiveTap.Events\n              ? \"bg-blue-700 border-2 border-blue-300\"\n              : \"bg-blue-900\"\n          }`}\n        >\n          Events\n        </button>\n      </div>\n\n      {active === ActiveTap.Details ? (\n        <div\n          className={`mt-2 ${\n            focus_mode === true ? \"text-white\" : \"text-gray-900\"\n          } border-blue-400`}\n        >\n          <h2 className=\" font-bold text-xl mb-1\">User information</h2>\n          <div className=\"p-2 rounded-md border   border-opacity-20\">\n            {/* details start from here */}\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Username:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">First name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.fname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Last name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.lname}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">email:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">{candidate.email}</h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Posistion:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.position_title}\n              </h4>\n            </div>\n            <div\n              className={`border-b  border-opacity-60 py-1 ${\n                focus_mode === true ? \"border-white\" : \"border-gray-400\"\n              }`}\n            >\n              <label className=\"text-sm m-0 p-0 opacity-70\">Course name:</label>\n              <h4 className=\"font-bold text-lg p-0 -mt-1\">\n                {candidate.course_name}\n              </h4>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ProctoringEvents\n          candidates={[candidate]}\n          events={events}\n          focus_mode={focus_mode}\n        />\n      )}\n    </div>\n  );\n};\nexport default ProctoringCandidateDetails;\n","import React, { FC, Fragment, ReactElement } from \"react\";\nimport { MdFullscreen, MdFullscreenExit } from \"react-icons/md\";\n// import { Link } from \"react-router-dom\";\ntype ProctoringMainTopBarProps = {\n  course_title: string;\n  post_title: string;\n  duration: string;\n  started_at: string;\n  end_at: string;\n  exam_start: boolean;\n  startExamHandler: Function;\n  stopExamHandler: Function;\n  focus_mode: boolean;\n  focusToggle: Function;\n  leaveRoom: Function;\n};\n\nconst ProctoringMainTopBar: FC<ProctoringMainTopBarProps> = ({\n  course_title,\n  post_title,\n  duration,\n  started_at,\n  end_at,\n  exam_start,\n  startExamHandler,\n  stopExamHandler,\n  focus_mode,\n  focusToggle,\n  leaveRoom,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div\n      className={`${\n        focus_mode === true\n          ? \"border-blue-500 border-opacity-30 text-white proctoring-evaluator-navigation\"\n          : \"bg-white rounded-t-sm\"\n      } py-2 px-3 border-b  grid grid-flow-row md:grid-cols-1 lg:grid-cols-2 transition-all ease-in-out`}\n    >\n      <div className=\"flex\">\n        <button\n          onClick={() => focusToggle()}\n          className={`px-2 ${\n            focus_mode === true\n              ? \"bg-blue-900 hover:bg-blue-500 \"\n              : \"bg-blue-100 hover:bg-blue-500 \"\n          } mr-2  rounded-md  hover:text-white`}\n        >\n          {focus_mode === true ? (\n            <Fragment>\n              <MdFullscreenExit className=\"text-3xl mx-auto -mb-2\" />\n              <span className=\"text-xs inline-block pt-1\">Un-Focus</span>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <MdFullscreen className=\"text-3xl mx-auto -mb-2\" />\n              <span className=\"text-xs inline-block pt-1\">Focus</span>\n            </Fragment>\n          )}\n        </button>\n        <div className=\"\">\n          <label\n            htmlFor=\"\"\n            className={`${\n              focus_mode === true ? \"text-gray-200\" : \"\"\n            } text-sm m-0`}\n          >\n            {post_title}\n          </label>\n          <h3 className=\"text-white- text-xl  font-bold\">{course_title}</h3>\n        </div>\n      </div>\n      <div className=\"text-red lg:pt-0 sm:pt-3 text-right md:text-left lg:text-right\">\n        <div className=\"grid grid-cols-5 gap-4 text-left\">\n          <div>\n            <label className=\"text-gray-400 text-sm\">Duration</label>\n            <h2 className=\"text-xl font-bold\">{duration}</h2>\n          </div>\n          <div>\n            <label className=\"text-gray-400 text-sm\">Started at:</label>\n            <h2 className=\"text-xl font-bold\">{started_at}</h2>\n          </div>\n          <div>\n            <label className=\"text-gray-400 text-sm\">End at</label>\n            <h2 className=\"text-xl font-bold\">{end_at}</h2>\n          </div>\n          {/* <div>\n            <label className=\"text-gray-400 text-sm\">Remaining </label>\n            <h2 className=\"text-xl font-bold\">{remaining}</h2>\n          </div> */}\n          <div className=\"flex items-center\">\n            {exam_start === false && (\n              <button\n                onClick={() =>\n                  window.confirm(\"Are you sure you want to leave the room??\") &&\n                  leaveRoom()\n                }\n                className=\"btn bg-red-100 text-red-900 w-full hover:bg-red-500 hover:text-white\"\n                title=\"Start Exam\"\n              >\n                Leave\n              </button>\n            )}\n          </div>\n\n          <div className=\"flex items-center\">\n            {exam_start === false ? (\n              <button\n                onClick={() => startExamHandler()}\n                className=\"btn bg-green-500 text-white w-full\"\n                title=\"Start Exam\"\n              >\n                Start\n              </button>\n            ) : (\n              <button\n                onClick={() => stopExamHandler()}\n                className=\"btn bg-red-600 text-white w-full\"\n                title=\"stop Exam\"\n              >\n                Stop\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProctoringMainTopBar;\n","import React, { FC, ReactElement } from \"react\";\n\ntype ProctoringStatisticsProps = {\n  total: number;\n  active: number;\n  done: number;\n  left: number;\n  focus_mode: boolean;\n};\n\nconst ProctoringStatistics: FC<ProctoringStatisticsProps> = ({\n  total,\n  active,\n  done,\n  left,\n  focus_mode,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div\n      className={`grid grid-col-4 grid-flow-col gap-4 p-2 ${\n        focus_mode === true ? \"bg-blue-900 text-gray-300\" : \"bg-white\"\n      } rounded-md m-2 text-center w-90`}\n    >\n      <div title=\"Total candite(s)\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{total}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Total\n        </label>\n      </div>\n      <div title=\"Active candite(s)\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{active}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Active\n        </label>\n      </div>\n      <div title=\"Candite(s) who done exam\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{done}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Done\n        </label>\n      </div>\n      <div title=\"Candite(s) who left unfinished\">\n        <h1 className=\"text-2xl font-bold -mb-1 p-0\">{left}</h1>\n        <label htmlFor=\"\" className=\"text-sm -mt-2\">\n          Left\n        </label>\n      </div>\n    </div>\n  );\n};\nexport default ProctoringStatistics;\n","import React, { FC, ReactElement } from \"react\";\nimport { EventInterface, CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringEventsProps = {\n  events: EventInterface[];\n  clickOpen?: boolean;\n  clickHandler?: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n};\n\nconst ProctoringEvents: FC<ProctoringEventsProps> = ({\n  events,\n  clickOpen = true,\n  clickHandler,\n  candidates,\n  focus_mode,\n}): ReactElement => {\n  /* function body */\n\n  return (\n    <div className=\"mt-2 p-2 rounded-md bg-gray-900 text-white\">\n      <h1 className=\"text-xl\">Events</h1>\n      <table className=\"w-full text-left\">\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th>username</th>\n            <th>Event type</th>\n            <th>Description</th>\n            <th>Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>James</th>\n            <th>COPY_EXAM</th>\n            <th>PASTE EXAM</th>\n            <th>Time</th>\n          </tr>\n          <tr>\n            <th>username</th>\n            <th>Event type</th>\n            <th>Description</th>\n            <th>Time</th>\n          </tr>\n          <tr>\n            <th>username</th>\n            <th>Event type</th>\n            <th>Description</th>\n            <th>Time</th>\n          </tr>\n          {events.map((evnt: EventInterface, i: number) => {\n            let findUser = candidates.find(\n              (cand: CandidateProctoringInterface) =>\n                cand.user_id === evnt.user_id\n            );\n            if (findUser === undefined) {\n              return null;\n            }\n            return (\n              <tr key={i}>\n                <td\n                  className=\"text-blue-500 font-bold\"\n                  title={findUser.fname + \" \" + findUser.lname}\n                >\n                  {findUser.lname}\n                </td>\n                <td className=\"text-red-400 text-sm pl-1\">{evnt.event_type}</td>\n                <td className=\"text-red-600 text-sm\">{evnt.description}</td>\n                <td className=\"text-gray-400 pl-1\">2min</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ProctoringEvents;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { StoreState } from \"../../reducers\";\n// import VideoCardSupervisor from \"./VideoCardSupervisor\";\nimport ProctoringMainTopBar from \"../../components/ProctoringMainTopBar/ProctoringMainTopBar\";\nimport ProctoringStatistics from \"../../components/ProctoringStatistics/ProctoringStatistics\";\nimport ProctoringCandidateDetails from \"../../components/ProctoringCandidateDetails/ProctoringCandidateDetails\";\nimport ProctoringEvents from \"../../components/ProctoringEvents/ProctoringEvents\";\nimport ProctoringCandidates from \"../../components/ProctoringCandidates/ProctoringCandidates\";\nimport CenterCardSupervisor from \"../../components/CenterCardSupervisor/CenterCardSupervisor\";\nimport {\n  // CandidateInterface,\n  // RoomServer,\n  EventInterface,\n  OnlineCandidates,\n  Events,\n  ExamEvents,\n  CandidateProctoringInterface,\n} from \"../../interfaces\";\n// import { eventDefiner, eventDefinerInterface } from \"../../actions/proctoring\";\nimport {\n  Socket,\n  FC_GetProctoringRoom,\n  Auth,\n  Proctoring,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n} from \"../../actions\";\nimport Spinner from \"../../components/Loading/Spinner\";\nimport { MdInfoOutline } from \"react-icons/md\";\n// props for the component\nexport interface ProctoringOnlineSupervisorProps {\n  socket: Socket;\n  auth: Auth;\n  proctoring: Proctoring;\n  // candidate: CandidateInterface;\n  // server_room: RoomServer;\n  FC_GetProctoringRoom: Function;\n  FC_SetActiveCandidates: Function;\n  FC_SetOneActiveCandidate: Function;\n  FC_CandidateOffline: Function;\n  FC_ExamStartStop: Function;\n  FC_ContinueExam: Function;\n  FC_StopCandidate: Function;\n  FC_CandidateExamEvent: Function;\n  FC_ClearExamToRoomProctoring: Function;\n}\n\nenum ActiveSideTap {\n  Candidates,\n  Events,\n}\n\ninterface AppState {\n  focus_mode: boolean;\n  // me: CandidateInterface;\n  loading: boolean;\n  loading_room: boolean;\n  // candidates: CandidateInterface[];\n  events: EventInterface[];\n  active_side_tab: ActiveSideTap;\n  selected_candidate: string | null;\n  online_room: boolean;\n  online_candidates: OnlineCandidates[];\n  start_exam: boolean;\n  error: {\n    target: string;\n    msg: string;\n  };\n}\n\nclass _ProctoringOnlineSupervisor extends React.Component<\n  ProctoringOnlineSupervisorProps,\n  AppState\n> {\n  private myPeer: any;\n\n  constructor(props: ProctoringOnlineSupervisorProps) {\n    super(props);\n\n    this.state = {\n      focus_mode: false,\n      loading_room: true,\n      // me: this.props.candidate,\n      loading: false,\n      // candidates: [],\n      events: [],\n      active_side_tab: ActiveSideTap.Events,\n      selected_candidate: null,\n      online_room: false,\n      online_candidates: [],\n      start_exam: false,\n      error: {\n        msg: \"\",\n        target: \"\",\n      },\n    };\n  }\n\n  componentDidMount = () => {\n    const { room_id, course_id, position_id } = this.props.proctoring.exam;\n    // load candidate\n    // check if the user have already joined the room\n    if (this.props.proctoring.candidates.length <= 0) {\n      this.props.FC_GetProctoringRoom(\n        { room_id, course_id, position_id },\n        (status: boolean, candidates: any[], msg: string) => {\n          if (status === true) {\n            this.setState({\n              loading_room: false,\n            });\n\n            //\n\n            if (this.props.proctoring.candidate_loaded === false) {\n              //* add the user to the list\n              this.props.socket.socket.emit(\n                Events.JOIN_ROOM,\n                {\n                  room_id: this.props.proctoring.room.room_id,\n                  user_id: this.props.auth.user.user_id,\n                  peer_id: \"\",\n                },\n                (active_candidates: OnlineCandidates[]) =>\n                  this.props.FC_SetActiveCandidates(active_candidates)\n              );\n            }\n          } else {\n            this.setState({\n              loading_room: false,\n              error: {\n                target: \"all\",\n                msg: msg,\n              },\n            });\n          }\n        }\n      );\n    } else {\n      // update the active list\n      this.props.socket.socket.emit(\n        Events.UPDATED_ROOM_LIST,\n        this.props.proctoring.room.room_id,\n        (active_candidates: OnlineCandidates[]) => {\n          console.log({ active_candidates });\n          this.props.FC_SetActiveCandidates(active_candidates);\n        }\n      );\n    }\n\n    // center room proctoring\n    //* New user connected\n    this.props.socket.socket.on(\n      Events.USER_CONNECTED,\n      (new_user: OnlineCandidates) => {\n        this.props.FC_SetOneActiveCandidate(new_user.user_id);\n      }\n    );\n\n    //* remove the candidate online\n    this.props.socket.socket.on(Events.USER_DISCONNECTED, (userId: any) =>\n      this.props.FC_CandidateOffline(userId)\n    );\n\n    /**\n     * @description Exam events\n     */\n    this.props.socket.socket.on(\n      ExamEvents.CAND_EXAM_EVENT_CLIENT,\n      (event: EventInterface) => this.props.FC_CandidateExamEvent(event)\n    );\n  };\n\n  // componentWillUnmount = () => {};\n  leaveRoom = () => {\n    // this.props.socket.socket.off(ExamEvents.START_EXAM_CLIENT);\n    this.props.socket.socket.off(Events.USER_CONNECTED);\n    this.props.socket.socket.off(Events.USER_DISCONNECTED);\n    this.props.socket.socket.off(ExamEvents.CAND_EXAM_EVENT_CLIENT);\n\n    this.props.FC_ClearExamToRoomProctoring();\n  };\n\n  startCenterProctoring = () => {};\n\n  sendEvent = () => {\n    console.log(\"Sending a signal\");\n    this.props.socket.socket.emit(ExamEvents.CAND_WARNING_EXAM_SERVER, {\n      user_id: this.props.auth.user.user_id,\n      room_id: this.props.proctoring.exam.room_id,\n    });\n  };\n  // ***************************************************************************\n\n  blank = (e: any) => console.log(\"clicked\");\n\n  /**\n   * chand the active tab on the side\n   * @param itm\n   * @returns\n   */\n  ActiveSIdeTabHandler = (itm: ActiveSideTap) =>\n    this.setState({ active_side_tab: itm });\n\n  SelectCandidateHandler = (value: string | null) =>\n    this.setState({ selected_candidate: value });\n\n  startExamHandler = () => {\n    if (window.confirm(\"Are you sure you want to start the exam??\")) {\n      this.props.socket.socket.emit(ExamEvents.START_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n        data: \"start exam\",\n      });\n      this.props.FC_ExamStartStop(true);\n    }\n  };\n\n  stopExamHandler = () => {\n    if (window.confirm(\"Are you sure you want to stop the exam??\")) {\n      this.props.socket.socket.emit(ExamEvents.STOP_EXAM_SERVER, {\n        room_id: this.props.proctoring.room.room_id,\n      });\n      this.props.FC_ExamStartStop(false);\n    }\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  continueHandler = (user_id: string) => {\n    this.props.FC_ContinueExam(user_id);\n    this.props.socket.socket.emit(ExamEvents.CAND_CONTINUE_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n    });\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  stopCandidateHandler = (user_id: string) => {\n    this.props.socket.socket.emit(ExamEvents.CAND_STOP_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n      msg: \"Hey you are stopped by the supervisor\",\n    });\n\n    this.props.FC_StopCandidate(user_id);\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  warnCandidateHandler = (user_id: string) => {\n    this.props.socket.socket.emit(ExamEvents.CAND_WARNING_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n      msg: \"yey you are fucked\",\n    });\n  };\n\n  /**\n   * @description Enable the candidate to continue the exam\n   * @param user_id\n   */\n  restartCandidateHandler = (user_id: string) => {\n    console.log(\"RESTART EXAM CANDIDATE\");\n    this.props.socket.socket.emit(ExamEvents.CAND_RESTART_EXAM_SERVER, {\n      room_id: this.props.proctoring.room.room_id,\n      user_id: user_id,\n      msg: \"You did it again\",\n    });\n  };\n\n  focusToggle = () =>\n    this.setState((prevState) => ({\n      focus_mode: !prevState.focus_mode,\n    }));\n\n  render() {\n    let activeCandidates = this.props.proctoring.candidates.filter(\n      (itm: CandidateProctoringInterface) => itm.active === true\n    );\n\n    let nonActiveCandidates = this.props.proctoring.candidates.filter(\n      (itm) => itm.active === false\n    );\n\n    return (\n      <div\n        className={`${\n          this.state.focus_mode === false\n            ? \" p-1\"\n            : \"fixed right-0 left-0 bottom-0 top-0 z-50\"\n        } transition-all ease-in-out`}\n      >\n        <ProctoringMainTopBar\n          focusToggle={this.focusToggle}\n          focus_mode={this.state.focus_mode}\n          course_title={this.props.proctoring.exam.course_name}\n          post_title={this.props.proctoring.exam.position_title}\n          duration={this.props.proctoring.exam.duration + \"H\"}\n          started_at=\"12:00 AM\"\n          end_at=\"14:00 PM\"\n          exam_start={this.props.proctoring.exam.start_exam}\n          startExamHandler={this.startExamHandler}\n          stopExamHandler={this.stopExamHandler}\n          leaveRoom={this.leaveRoom}\n        />\n\n        {/* this is the body */}\n        <div\n          className={`${\n            this.state.focus_mode === true\n              ? \"proctoring-body-contents text-white\"\n              : \"\"\n          }  h-screen`}\n        >\n          <div className=\"grid lg:grid-flow-col gap-4\">\n            <div className=\"col-span-4 p-2 pt-3 h-screen overflow-y-auto\">\n              {/* pictures or images */}\n              {this.props.proctoring.candidate_loaded === false ? (\n                <div className=\"p-8 text-center animate__animated animate__zoomIn\">\n                  <Spinner />\n                  <h2 className=\"text-xl font-bold text-gray-400\">\n                    Loading candidates\n                  </h2>\n                </div>\n              ) : (\n                <div className=\"animate__animated animate__zoomI\">\n                  <div\n                    className={`${\n                      this.state.focus_mode === true\n                        ? \"bg-blue-900 bg-opacity-30\"\n                        : \"bg-gray-100\"\n                    } rounded-md mb-4`}\n                  >\n                    <h3\n                      className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                        this.state.focus_mode === true\n                          ? \"text-blue-100 bg-blue-900\"\n                          : \"text-white bg-gray-500\"\n                      } pb-1 mb-1`}\n                    >\n                      <span className=\"flex-1\">Non active candidates </span>\n\n                      <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                        {activeCandidates.length}\n                      </span>\n                    </h3>\n                    {activeCandidates.length === 0 ? (\n                      <div className=\"py-8 text-center w-full\">\n                        <MdInfoOutline className=\"inline-block text-6xl\" />\n                        <h3 className=\"text-center text-2xl font-bold\">\n                          No candidate\n                        </h3>\n                        <h3 className=\"text-center\">\n                          Once candidates start to join they will apper here\n                        </h3>\n                      </div>\n                    ) : (\n                      <div className=\"grid grid-flow-row sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-5 gap-4\">\n                        {activeCandidates.map(\n                          (\n                            candidate: CandidateProctoringInterface,\n                            i: number\n                          ) => {\n                            return (\n                              <CenterCardSupervisor\n                                focus_mode={this.state.focus_mode}\n                                key={i}\n                                seat_number={i + 1}\n                                candidate={candidate}\n                                stopHandler={this.stopCandidateHandler}\n                                warningHandler={this.warnCandidateHandler}\n                                detailsHandler={this.SelectCandidateHandler}\n                                continueHandler={this.continueHandler}\n                                exam_started={\n                                  this.props.proctoring.exam.start_exam\n                                }\n                              />\n                            );\n                          }\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {nonActiveCandidates.length !== 0 && (\n                    <div\n                      className={`${\n                        this.state.focus_mode === true\n                          ? \"bg-blue-900 bg-opacity-30\"\n                          : \"bg-gray-100\"\n                      } rounded-md`}\n                    >\n                      <h3\n                        className={`text-2xl font-bold  pt-1.5 pb-1 px-2 rounded flex items-center ${\n                          this.state.focus_mode === true\n                            ? \"text-blue-100 bg-blue-900\"\n                            : \"text-white bg-gray-500\"\n                        } pb-1 mb-1`}\n                      >\n                        <span className=\"flex-1\">Non active candidates </span>\n                        <span className=\"inline-block mr-1 p-0.5 bg-green-700 text-white text-md py-0 px-2 rounded-full\">\n                          {nonActiveCandidates.length}\n                        </span>\n                      </h3>\n                      <div className=\"mt-3 mx-2 pb-2\">\n                        <ProctoringCandidates\n                          candidates={nonActiveCandidates}\n                          clickHandler={this.SelectCandidateHandler}\n                          show_title={false}\n                          focus_mode={this.state.focus_mode}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            <div\n              className={`${\n                this.state.focus_mode === true\n                  ? \"proctoring-side-section border-blue-500  border-opacity-30\"\n                  : \"bg-gray-100 \"\n              } p-2  col-span-1 transition-all ease-in-out  h-screen overflow-y-auto  border-l `}\n            >\n              {/* statistics */}\n              {this.state.selected_candidate === null ? (\n                <React.Fragment>\n                  <ProctoringStatistics\n                    total={43}\n                    active={43}\n                    done={43}\n                    left={43}\n                    focus_mode={this.state.focus_mode}\n                  />\n\n                  {/* candidatetabs */}\n\n                  {/* {this.state.online_room === true && ( */}\n                  <div className=\"my-2 p-1 rounded-md bg-blue-800 bg-opacity-60 grid grid-col-2 grid-flow-col gap-1\">\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Events\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Events\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Event list\n                    </button>\n\n                    <button\n                      onClick={this.ActiveSIdeTabHandler.bind(\n                        this,\n                        ActiveSideTap.Candidates\n                      )}\n                      className={`btn rounded-md bg-blue-700 text-blue-100 ${\n                        this.state.active_side_tab === ActiveSideTap.Candidates\n                          ? \"border-2 border-blue-400\"\n                          : \"bg-blue-800 bg-opacity-60\"\n                      }`}\n                    >\n                      Candidates\n                    </button>\n                  </div>\n                  {/* )} */}\n\n                  {/* events */}\n                  {this.state.active_side_tab === ActiveSideTap.Events ? (\n                    <ProctoringEvents\n                      candidates={this.props.proctoring.candidates}\n                      events={this.state.events}\n                      focus_mode={this.state.focus_mode}\n                    />\n                  ) : (\n                    <ProctoringCandidates\n                      candidates={this.props.proctoring.candidates}\n                      clickHandler={this.SelectCandidateHandler}\n                      focus_mode={this.state.focus_mode}\n                      show_title={false}\n                    />\n                  )}\n                </React.Fragment>\n              ) : (\n                <ProctoringCandidateDetails\n                  candidate={this.props.proctoring.candidates.find(\n                    (itm) => itm.user_id === this.state.selected_candidate\n                  )}\n                  events={this.state.events.filter(\n                    (evnt: EventInterface) =>\n                      evnt.user_id === this.state.selected_candidate\n                  )}\n                  chatHandler={this.blank}\n                  micHandler={this.blank}\n                  focusHandler={this.blank}\n                  stopHandler={this.stopCandidateHandler}\n                  restartHandler={this.restartCandidateHandler}\n                  warnHandler={this.warnCandidateHandler}\n                  closeHandler={() => this.SelectCandidateHandler(null)}\n                  home_proctoring={false}\n                  exam_started={this.props.proctoring.exam.start_exam}\n                  focus_mode={this.state.focus_mode}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  socket,\n  auth,\n  proctoring,\n}: StoreState): { socket: Socket; auth: Auth; proctoring: Proctoring } => {\n  return { socket: socket, auth: auth, proctoring: proctoring };\n};\n\nexport const ProctoringOnlineSupervisor = connect(mapStateToProps, {\n  FC_GetProctoringRoom,\n  FC_SetActiveCandidates,\n  FC_SetOneActiveCandidate,\n  FC_CandidateOffline,\n  FC_ExamStartStop,\n  FC_ContinueExam,\n  FC_StopCandidate,\n  FC_CandidateExamEvent,\n  FC_ClearExamToRoomProctoring,\n})(_ProctoringOnlineSupervisor);\n","import React, { FC, ReactElement } from \"react\";\nimport { MdAccountCircle } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype ProctoringCandidatesProps = {\n  clickHandler: Function;\n  candidates: CandidateProctoringInterface[];\n  focus_mode: boolean;\n  show_title: boolean;\n};\n\nconst ProctoringCandidates: FC<ProctoringCandidatesProps> = ({\n  clickHandler,\n  candidates,\n  focus_mode,\n  show_title,\n}): ReactElement => {\n  /* function body */\n  return (\n    <div className={`mt-2 ${focus_mode === true ? \"text-white p-2 \" : \"\"}`}>\n      {show_title === true && (\n        <h1 className=\"text-3xl font-bold text-center pb-2 border-b mb-1 border-gray-100\">\n          Candidates\n        </h1>\n      )}\n      <table\n        className={`w-full text-left ${\n          focus_mode === true ? \"\" : \"bg-white rounded-md\"\n        }  p-2\"`}\n      >\n        <thead className=\"text-sm text-gray-500\">\n          <tr>\n            <th></th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {candidates.map((cand: CandidateProctoringInterface, i: number) => (\n            <tr\n              key={i}\n              className={`border-b mb-1 ${\n                focus_mode === true\n                  ? \"border-blue-800 border-opacity-60 hover:bg-blue-900\"\n                  : \"border-gray-200 border-opacity-60 hover:bg-blue-100\"\n              }  cursor-pointer`}\n              onClick={clickHandler.bind(this, cand.user_id)}\n            >\n              <td\n                className={`${\n                  focus_mode === true ? \"text-blue-500\" : \"text-gray-400\"\n                }  w-5 text-left`}\n              >\n                <MdAccountCircle className=\"text-5xl\" />\n              </td>\n\n              <td className=\"text-gray-400 pl-1 py-1\">\n                <h4\n                  className={`font-bold text-lg p-0 m-0 ${\n                    focus_mode === true ? \"text-white\" : \"text-gray-900\"\n                  }`}\n                >\n                  {cand.email}\n                </h4>\n                <p className=\"text-sm p-0 m-0 -mt-1\">\n                  {cand.fname} {cand.lname}\n                </p>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default ProctoringCandidates;\n","import React, { FC, ReactElement } from \"react\";\nimport { MdNotInterested, MdWarning } from \"react-icons/md\";\nimport { CandidateProctoringInterface } from \"../../interfaces\";\n\ntype CenterCardSupervisorProps = {\n  seat_number: number;\n  candidate: CandidateProctoringInterface;\n  warningHandler: Function;\n  stopHandler: Function;\n  detailsHandler: Function;\n  continueHandler: Function;\n  exam_started: boolean;\n  focus_mode: boolean;\n};\n\nconst CenterCardSupervisor: FC<CenterCardSupervisorProps> = ({\n  seat_number,\n  candidate,\n  warningHandler,\n  stopHandler,\n  detailsHandler,\n  continueHandler,\n  exam_started,\n  focus_mode,\n}): ReactElement => {\n  /* function body */\n  let color =\n    candidate?.stopped === true ? \"red\" : focus_mode === true ? \"blue\" : \"gray\";\n  return (\n    <div\n      className={`bg-${color}-900 bg-opacity-50 hover:bg-opacity-100 cursor-pointer border-${color}-400 border p-2 rounded-md text-white transition-all ease-in-out`}\n      onClick={detailsHandler.bind(this, candidate.user_id)}\n    >\n      <div className=\"text-center\">\n        <span className={`text-${color}-200`}>Seat number</span>\n        <h1 className=\"text-5xl font-bold\">{seat_number}</h1>\n      </div>\n\n      <div className={`mt-1 border-t border-${color}-500 pt-2`}>\n        <h4 className={`text-xs text-${color}-400`}>Full names</h4>\n        <h4 className=\"text-sm font-bold\">\n          {candidate.fname} {candidate.lname}\n        </h4>\n      </div>\n\n      {exam_started === true && (\n        <div className=\"mt-2\">\n          {candidate.stopped === false ? (\n            <button\n              onClick={warningHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-yellow-300\"\n            >\n              <MdWarning className=\"inline\" /> Warn\n            </button>\n          ) : (\n            <button\n              onClick={continueHandler.bind(this, candidate.user_id)}\n              className=\"px-2 text-sm py-1 rounded-md text-gray-900 bg-green-400\"\n            >\n              <MdWarning className=\"inline\" /> Condinue\n            </button>\n          )}\n          <button\n            onClick={stopHandler.bind(this, candidate.user_id)}\n            className=\"px-2 text-sm py-1 rounded-md text-white- bg-red-700 ml-1\"\n          >\n            <MdNotInterested className=\"inline\" /> Stop\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default CenterCardSupervisor;\n","import React, { Fragment } from \"react\";\nimport { FaSchool } from \"react-icons/fa\";\nimport { MdLocationOn } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  FC_RoomDetails,\n  Proctoring,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n} from \"../../actions\";\nimport { ProctoringExam } from \"../../interfaces/socketInterfaces\";\nimport { StoreState } from \"../../reducers\";\nimport { ProctoringOnlineSupervisor } from \"../ProctoringOnlineSupervisor/ProctoringOnlineSupervisor\";\n\n// ProctoringOnlineSupervisor\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  FC_RoomDetails: Function;\n  FC_ExamsDetailsData: Function;\n  FC_LoadExamToRoomProctoring: Function;\n  FC_ClearExamToRoomProctoring: Function;\n}\n\ninterface AppState {\n  error: boolean;\n  errorMsg: string;\n  exams_error: boolean;\n  exams_error_msg: string;\n}\n\nclass _ProctoringCenter extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      error: false,\n      errorMsg: \"\",\n      exams_error: false,\n      exams_error_msg: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.auth.user_access.room_id.length >= 3) {\n      //** GET ROOM DETAILS */\n\n      if (this.props.proctoring.room.room_id === \"\") {\n        this.props.FC_RoomDetails(\n          this.props.auth.user_access.room_id,\n          (status: boolean, errorMsg: string) => {\n            if (status === true) {\n              console.log({ session: this.props.auth.application_session });\n\n              if (this.props.auth.application_session) {\n                //** GET EXAMS DETAILS */\n\n                // if (this.props.proctoring.room_exams.length === 0) {\n                this.props.FC_ExamsDetailsData(\n                  this.props.auth.application_session?._id,\n                  (status: boolean, error: string) => {\n                    if (status === false) {\n                      this.setState({\n                        exams_error: true,\n                        exams_error_msg: error,\n                      });\n                    }\n                  }\n                );\n                // } else {\n\n                // }\n              } else {\n                this.setState({\n                  error: true,\n                  errorMsg: \"No application session found\",\n                });\n              }\n            } else {\n              this.setState({\n                error: true,\n                errorMsg: errorMsg,\n              });\n            }\n          }\n        );\n      }\n    }\n  };\n\n  render() {\n    if (this.state.error === true) {\n      return (\n        <div className=\"mt-4\">\n          <div className=\"p-5 bg-red-100 rounded-md mx-auto text-center text-red-900 animate__animated animate__bounceIn\">\n            <h1 className=\"text-3xl font-bold\">Failed do load data</h1>\n            <p>{this.state.errorMsg}</p>\n          </div>\n        </div>\n      );\n    }\n    if (\n      this.state.error === false &&\n      this.props.proctoring.room.loaded === false\n    ) {\n      return (\n        <div className=\"m-5 text-center\">\n          <h5 className=\"text-gray-400 animate__animated animate__fadeIn animate__infinite text-xl\">\n            Loading room details\n          </h5>\n        </div>\n      );\n    }\n\n    const {\n      room_number,\n      center_name,\n      district_name,\n      province_name,\n      // district_id,\n      // center_id,\n      // province_id,\n      // room_id,\n    } = this.props.proctoring.room;\n\n    if (\n      this.props.proctoring.exam.course_id !== \"\" &&\n      this.props.proctoring.exam.position_id !== \"\"\n    ) {\n      return <ProctoringOnlineSupervisor />;\n    }\n    return (\n      <Fragment>\n        <div className=\"mr-2\">\n          <div className=\"p-5 bg-white rounded-b-md \">\n            <h2 className=\"text-2xl text-gray-600 font-bold text-center border-b pb-2\">\n              Room details\n            </h2>\n            <div className=\"flex flex-col md:flex-row\">\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <MdLocationOn className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 pt-3 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Province:</span>{\" \"}\n                    <b> {province_name}</b>\n                  </div>\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">District:</span>{\" \"}\n                    <b> {district_name}</b>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-1 items-center\">\n                <div className=\"p-4\">\n                  <FaSchool className=\"text-4xl\" />\n                </div>\n                <div className=\"p-2 flex-1\">\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Center name:</span>{\" \"}\n                    <b> {center_name}</b>\n                  </div>\n\n                  <div className=\"mb-1\">\n                    <span className=\"text-gray-400\">Room Number:</span>{\" \"}\n                    <b> {room_number}</b>\n                  </div>\n                </div>\n              </div>\n            </div>{\" \"}\n          </div>\n\n          <h2 className=\"mt-5 text-2xl font-bold text-gray-500\">\n            Exams on this room\n          </h2>\n          <div className=\"mt-2 p-2 bg-white rounded-md\">\n            {this.props.proctoring.room_exams.length <= 0 ? (\n              <div className=\"p-5 text-center\">\n                No exams assigned to this room\n              </div>\n            ) : (\n              <table className=\"w-full text-left\">\n                <thead className=\"bg-gray-100 rounded-md\">\n                  <tr>\n                    <th className=\"p-2\">#</th>\n                    <th className=\"p-2\">Position</th>\n                    <th className=\"p-2\">Course</th>\n                    <th className=\"p-2\">Code</th>\n                    <th className=\"p-2\">Date</th>\n                    <th className=\"p-2\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.props.proctoring.room_exams.map((room, key) => {\n                    let examFound = this.props.proctoring.exams_list.exams.find(\n                      (exm) => exm.course === room.course_id\n                    );\n\n                    return (\n                      <tr\n                        className=\"p-2 border-t group hover:bg-blue-50\"\n                        key={key}\n                      >\n                        <td className=\"p-2 text-gray-400\">{key + 1}</td>\n                        <td className=\"p-2 font-bold\">{room.course_name}</td>\n                        <td className=\"p-2\">\n                          <span className=\"p-1 text-sm bg-yellow-100 font-bold text-yellow-900 rounded\">\n                            {room.position_title}\n                          </span>\n                        </td>\n                        <td className=\"p-2\">{room.course_code}</td>\n                        <td className=\"p-2 text-sm\">\n                          {this.state.error === false &&\n                          this.props.proctoring.exams_list.loaded === false ? (\n                            <span className=\"text-blue-500 animate__animated animate__fadeIn animate__infinite\">\n                              Loading...\n                            </span>\n                          ) : examFound === undefined ? (\n                            \"Not found\"\n                          ) : (\n                            examFound.exam_date\n                          )}\n                        </td>\n                        <td className=\"p-2 text-right\">\n                          {examFound !== undefined && examFound !== undefined && (\n                            <Fragment>\n                              {room.course_id ===\n                                this.props.proctoring.exam.course_id &&\n                                room.position_id ===\n                                  this.props.proctoring.exam.position_id && (\n                                  <button\n                                    className=\" group-hover:bg-red-500 py-1 px-3 rounded text-red-500 group-hover:text-white bg-red-100\"\n                                    onClick={() =>\n                                      window.confirm(\n                                        \"Are you sure you want to exist the room\"\n                                      ) &&\n                                      this.props.FC_ClearExamToRoomProctoring()\n                                    }\n                                  >\n                                    Leave Room\n                                  </button>\n                                )}\n                              {this.props.proctoring.exam.room_id === \"\" && (\n                                <button\n                                  onClick={() => {\n                                    if (\n                                      examFound !== undefined &&\n                                      examFound !== undefined &&\n                                      room !== null &&\n                                      room !== undefined\n                                    ) {\n                                      this.props.FC_LoadExamToRoomProctoring({\n                                        video_support: false,\n                                        start_exam: false,\n                                        start_time: examFound?.start_time,\n                                        end_time: \"\",\n                                        exam_done: false,\n                                        period_id:\n                                          this.props.auth.application_session,\n                                        exam_status: examFound?.exam_status,\n                                        exam_date: examFound?.exam_date,\n                                        duration: examFound?.duration,\n                                        position_id: room.position_id,\n                                        position_title: room.position_title,\n                                        course_id: room.course_id,\n                                        course_code: room.course_code,\n                                        course_name: room.course_name,\n                                        room_id:\n                                          this.props.proctoring.room.room_id,\n                                      } as ProctoringExam);\n                                    }\n                                  }}\n                                  className=\" group-hover:bg-blue-500 py-1 px-3 rounded text-blue-500 group-hover:text-white bg-blue-100\"\n                                >\n                                  Open\n                                </button>\n                              )}\n                            </Fragment>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth, proctoring };\n};\n\nexport const ProctoringCenter = connect(mapStateToProps, {\n  FC_RoomDetails,\n  FC_ExamsDetailsData,\n  FC_LoadExamToRoomProctoring,\n  FC_ClearExamToRoomProctoring,\n})(_ProctoringCenter);\n"],"sourceRoot":""}