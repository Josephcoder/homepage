{"version":3,"sources":["containers/QuestionBank/QuestionsList/QuestionsList.tsx","utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","components/Courses/Courses.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/Essay.tsx","containers/DoExam/QuestionDetails/Answers/AnswersTypesCollection.tsx","containers/DoExam/QuestionDetails/Answers/HybridAnswers.tsx","components/QuestionPreview/QuestionPreview.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/QuestionBank/AddQuestion/ChooseMethod/ChooseMethod.tsx"],"names":["_QuestionsList","props","setLoading","status","setState","loading","setAddQuestion","addQuestion","chooseCourse","course","setSelectedCourse","loadQuestionBank","course_id","selectCourse","answerQuestionFn","answer","removeSelectedQuestion","question_id","removeQuestion","msg","successMessage","errorMessage","componentDidMount","questionTypes","length","loadQuestionTypes","courses","loadCourses","selected_course","questionBank","questions","setEditQuestion","item","setSelectedQuestion","editQuestion","unSelectQuestion","question","selectedQuestion","filterQuestions","questionType","searchKeyword","response","filter","type","keywordsToSearch","test","testResponse","SearchData","last","find","itm","_id","lst","state","searchQuestionInput","preview","searchByTpe","displaySearch","this","className","course_code","course_name","onClick","getQuestionType","map","i","id","title","description","onChange","e","target","value","placeholder","colSpan","theme","NoResultThemes","Dark","component","marks","window","confirm","LoadingType","dark","questionsList","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","questionAnswers","submitQuestionAnswer","large","selected_course_id","Component","QuestionsList","connect","auth","schoolLevels","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","ExamTimeStatus","today","moment","tz","TimeZone","question_types","type_id","check","undefined","check_type","questionTypeElements","key","element","findTotalMarks","results","sum","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","el","nextCharacter","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","proctoringDefaultRules","rule","caption","toMultipleChoice","answers","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","CoursesAction","Courses","periods","system","loadApplicationPeriods","setSelectedPeriod","PushPopupAlert","useState","addNew","setAddNew","search","setSearch","selectedCourse","setSelectedCourseComp","course_selected","deleteCourseFn","a","axios","delete","API","APPLICATION","PopupAlertTheme","success","warning","console","log","useEffect","school_levels","searchData","action","View","Update","Delete","body","closeModal","deleteSelected","chaptersOnly","medium","_UploadQuestion","setSearchLevel","educationCategory","schoolLevel","searchLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","preparedExams","period","selected_period","session_plan_id","filteredCourses","searched","filtered","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","searchCourseInput","education_category_title","school_level_name","education_categories","style","minHeight","educationCategories","UploadQuestion","AddCourse","setCourse_id","setCourse_name","setCourse_code","setDescription","chapters","setChapters","setSchool_levels","formError","setFormError","openAdd","chapter","addChapter","setAddChapter","submitCourse","preventDefault","obj","patch","info","post","data","errors","message","danger","onSubmit","disabled","name","uuidv4","addNewChapter","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","selectedQuestionItem","selectedKey","QuestionAnswer","wholeQuestion","language","selectedLanguage","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","setSelectedKey","QuestionLanguages","lang","checkAns","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","addedChapters","ChangeLanguage","languagesList","visible","setVisible","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","langItem","testLangQ","l","QuestionLang","actionStatus","updatedQuestion","current","editedAnswerIndex","editedAnswer","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","customNumber","is_deleted","UpdateQuestion","addExamQuestion","showQuestionChapters","setSelectedLang","questionLangs","testing","Loading","white","Modal","courseDetail","EditQuestion","prepareExam","setUploadedQuestions","SchoolLevelSelect","height","x","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","checkAnswer","available_answers","selectedQuestionAnswer","checkA","tes","selectedAns","addAnswerItemFn","newAnswers","questionAnswer","oldAnswers","selAns","tester","temp","newAnswersMultiple","xItem","addAnswer","SimpleCalculated","answeredValue","checkB","MatchingSelect","closeWindow","shuffledAnswers","findWord","checkIfSelected","displayWindow","setDisplayWindow","setSelectedAnswer","selectedQuestionId","selectedLang","ansi","selectedExam","testLang","checkE","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","getRandomArbitrary","AnswersTypesCollection","Shuffle","HybridAnswers","stri","String","fromCharCode","charCodeAt","hybrid","EmbeddedQuestion","newTextResult","findQuestionType","answeredQuestions","userQuestionAnswers","originalText","answerCheck","answered","select","returnSelect","QuestionPreview","doExam","candidateExam","setSelectedExamQuestion","setQuestionLanguage","selectLang","setSelectLang","width","question_answers","candidate_exam","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random","ChooseMethod","to"],"mappings":"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","file":"static/js/34.d3a79113.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  QuestionAnswersStore,\n  removeQuestion,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport * as Interfaces from \"../../../interfaces/index\";\nimport {\n  course,\n  QuestionInterface,\n  QuestionItemInterface,\n} from \"../../../interfaces/index\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { getQuestionType } from \"../../../utils/question_bank\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport { ChooseMethod } from \"../AddQuestion/ChooseMethod/ChooseMethod\";\nimport EditQuestion from \"../AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { LoadingType } from \"../../../components/Loading/LoadingV2\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport SearchData from \"../../../utils/search\";\nimport QuestionPreview from \"../../../components/QuestionPreview/QuestionPreview\";\nimport { MdClose } from \"react-icons/md\";\n\ninterface QuestionsListProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  removeQuestion: (\n    question_id: string,\n    callback: (loading: boolean, status: boolean, msg: string) => void\n  ) => void;\n}\ninterface QuestionsListState {\n  loading: boolean;\n  searchQuestionInput: string;\n  selectCourse: boolean;\n  addQuestion: boolean;\n  editQuestion: QuestionInterface | null;\n  preview: QuestionInterface | null;\n  selectedQuestion: QuestionInterface | null;\n  successMessage: string;\n  errorMessage: string;\n  searchByTpe: string | null;\n  displaySearch: boolean;\n}\n\nclass _QuestionsList extends Component<QuestionsListProps, QuestionsListState> {\n  constructor(props: QuestionsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchQuestionInput: \"\",\n      selectCourse: false,\n      addQuestion: false,\n      editQuestion: null,\n      preview: null,\n      selectedQuestion: null,\n      successMessage: \"\",\n      errorMessage: \"\",\n      searchByTpe: null,\n      displaySearch: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setAddQuestion = (status: boolean) => {\n    this.setState({ addQuestion: status });\n  };\n\n  chooseCourse = (course: course | null) => {\n    this.props.setSelectedCourse(course);\n    if (course !== null) {\n      this.props.loadQuestionBank(course.course_id, this.setLoading);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  // setSelectedQuestion = (question: exam_question) => {};\n\n  removeSelectedQuestion = (question_id: string) => {\n    this.props.removeQuestion(\n      question_id,\n      (loading: boolean, status: boolean, msg: string) => {\n        this.setState({ loading: loading });\n        if (loading === false && msg !== \"\") {\n          if (status === true) {\n            this.setState({ successMessage: msg });\n          } else {\n            this.setState({ errorMessage: msg });\n          }\n        }\n      }\n    );\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true });\n    } else {\n      this.setState({ selectCourse: false });\n    }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n  };\n\n  setEditQuestion = (item: QuestionInterface) => {\n    this.props.setSelectedQuestion(item);\n    this.setState({ editQuestion: item });\n  };\n\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n\n  setSelectedQuestion = (question: QuestionInterface) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  filterQuestions = (\n    questions: QuestionInterface[],\n    questionType: string | null,\n    searchKeyword: string\n  ) => {\n    let response: QuestionInterface[] = questions;\n    if (questionType !== null) {\n      response = questions.filter((item) => item.type === questionType);\n    }\n    if (searchKeyword !== \"\") {\n      let keywordsToSearch: QuestionItemInterface[] = [];\n      for (let test of response) {\n        keywordsToSearch = [...keywordsToSearch, test.question[0]];\n      }\n      let testResponse = SearchData(\n        keywordsToSearch,\n        searchKeyword\n      ) as QuestionItemInterface[];\n      response = response.filter((last) =>\n        testResponse.find(\n          (itm) =>\n            itm._id === last.question.find((lst) => lst._id === itm._id)?._id\n        )\n      );\n    }\n    return response;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div className=\"-ml-1 mr-2\">\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-col px-1\">\n                  <span className=\"text-gray-600 text-3xl font-bold\">\n                    Question Bank\n                  </span>\n                  <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.props.course.selected_course !== null && (\n                    <div\n                      onClick={() => this.setState({ selectCourse: true })}\n                      className={`btn cursor-pointer ${\n                        this.props.course.selected_course === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100  text-yellow-700 border border-yellow-200\"\n                          : \"bg-blue-50 hover:bg-blue-100  text-blue-600\"\n                      } h-max flex items-center justify-center h-10`}\n                    >\n                      {this.props.course.selected_course === null\n                        ? \"Choose course\"\n                        : \"Change course\"}\n                    </div>\n                  )}\n                  <div\n                    onClick={() => this.setState({ addQuestion: true })}\n                    className=\"btn cursor-pointer bg-white hover:bg-blue-100 border border-blue-600 text-blue-600 h-max flex items-center justify-center h-10\"\n                  >\n                    Add questions\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center gap-3\">\n                <div\n                  onClick={() =>\n                    this.setState({ displaySearch: !this.state.displaySearch })\n                  }\n                  className=\"w-full border hover:bg-blue-50 border-gray-400 px-3 py-2 rounded\"\n                >\n                  <div className=\"flex flex-row items-center justify-between text-gray-600 cursor-pointer\">\n                    <span className=\"text-sm font-bold\">\n                      {this.state.searchByTpe === null ? (\n                        <span>Filter by question type</span>\n                      ) : (\n                        this.props.questionTypes.questionTypes && (\n                          <span className=\"text-blue-600 font-bold\">\n                            {getQuestionType(\n                              this.props.questionTypes.questionTypes,\n                              this.state.searchByTpe\n                            )}\n                          </span>\n                        )\n                      )}\n                    </span>\n                    {/* <BsCaretRightFill className=\"text-xl\" /> */}\n                  </div>\n                  {this.state.displaySearch === true && (\n                    <div className=\"absolute w-auto bg-white shadow-md border rounded z-40 animate__animated animate__zoomIn animate__faster\">\n                      <div className=\"flex flex-row items-center justify-between text-white cursor-pointer bg-blue-600  px-3 py-3 rounded-t\">\n                        <span>Select question type</span>\n                        <MdClose\n                          onClick={() =>\n                            this.setState({\n                              displaySearch: !this.state.displaySearch,\n                            })\n                          }\n                          className=\"text-2xl\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => this.setState({ searchByTpe: null })}\n                        className={`flex flex-col py-2 px-3 group hover:bg-blue-100 ${\n                          this.state.searchByTpe === null ? \"bg-blue-100\" : \"\"\n                        } cursor-pointer`}\n                      >\n                        <span className=\"text-base font-extrabold text-gray-800 group-hover:text-blue-600\">\n                          All question types\n                        </span>\n                        <span className=\"text-xs text-gray-500\">\n                          Choose this option to view all types of questions\n                        </span>\n                      </div>\n                      {this.props.questionTypes.questionTypes !== null &&\n                        this.props.questionTypes.questionTypes.map(\n                          (item, i) => (\n                            <div\n                              key={i + 1}\n                              onClick={() =>\n                                item.id &&\n                                this.setState({ searchByTpe: item.id })\n                              }\n                              className={`flex flex-col py-2 px-3 group hover:bg-blue-100 ${\n                                this.state.searchByTpe === item.id\n                                  ? \"bg-blue-100\"\n                                  : \"\"\n                              } cursor-pointer`}\n                            >\n                              <span className=\"text-base font-extrabold text-gray-800 group-hover:text-blue-600\">\n                                {item.title}\n                              </span>\n                              <span className=\"text-xs text-gray-500\">\n                                {item.description}\n                              </span>\n                            </div>\n                          )\n                        )}\n                    </div>\n                  )}\n                </div>\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setState({ searchQuestionInput: e.target.value })\n                  }\n                  type=\"text\"\n                  className=\"input-white border h-10 text-sm border-gray-400 w-full\"\n                  placeholder=\"Search question by title or description\"\n                />\n              </div>\n\n              {this.state.errorMessage !== \"\" && (\n                <div\n                  onClick={() => this.setState({ errorMessage: \"\" })}\n                  className=\"px-3 py-2 rounded bg-yellow-100 text-yellow-700 font-bold my-2\"\n                >\n                  {this.state.errorMessage}\n                </div>\n              )}\n              {this.state.successMessage !== \"\" && (\n                <div\n                  onClick={() => this.setState({ successMessage: \"\" })}\n                  className=\"px-3 py-2 rounded bg-green-100 text-green-700 font-bold my-2\"\n                >\n                  {this.state.successMessage}\n                </div>\n              )}\n            </div>\n            <div className=\"flex-col\">\n              <div className=\"flex my-2 flex-row justify-between items-center\">\n                <span className=\"text-xl font-bold text-blue-600\">\n                  List of questions\n                </span>\n                <div className=\"underline font-bold text-blue-700 bg-white rounded-full px-3 py-1\">\n                  {this.props.questionBank.questions &&\n                    this.props.questionBank.questions.length}{\" \"}\n                  questions\n                </div>\n              </div>\n              <div className=\"flex flex-col\">\n                <div className=\"bg-white flex rounded\">\n                  <table className=\"table-auto w-full\">\n                    <thead>\n                      <tr className=\"text-left bg-blue-50 border-b-2 border-blue-500 text-blue-600\">\n                        <th className=\"p-3 w-1/12 pl-10\">#</th>\n                        <th className=\"p-3\">Question</th>\n                        <th>Category</th>\n                        <th>Marks</th>\n                        <th></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.loading === true ? (\n                        <tr>\n                          <td colSpan={5} className=\"pt-6\">\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : this.props.course.selected_course === null ? (\n                        <tr>\n                          <td colSpan={5}>\n                            <div className=\"bg-gray-100 flex flex-col items-center text-center gap-3 rounded px-3 py-3\">\n                              <span className=\"text-xl font-bold\">\n                                No course selected!\n                              </span>\n                              <div\n                                onClick={() =>\n                                  this.setState({ selectCourse: true })\n                                }\n                                className=\"btn bg-yellow-50 text-yellow-800 cursor-pointer hover:bg-white border border-white shadow hover:shadow-none hover:border-yellow-600\"\n                              >\n                                Choose a course\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                      ) : this.props.questionBank.questions === null ? (\n                        <tr>\n                          <td colSpan={5} className=\"pt-6\">\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : this.filterQuestions(\n                          this.props.questionBank.questions,\n                          this.state.searchByTpe,\n                          this.state.searchQuestionInput\n                        ).length === 0 ? (\n                        <tr>\n                          <td colSpan={5}>\n                            <div className=\"flex flex-col items-cnter justify-center\">\n                              <NoResult\n                                theme={NoResultThemes.Dark}\n                                value={\"\"}\n                                component={\n                                  <span className=\"font-bold text-gray-600 text-2xl -mt-4\">\n                                    No questions available!\n                                  </span>\n                                }\n                              />\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        this.props.questionTypes.questionTypes !== null &&\n                        this.props.questionTypes.questionTypes.length > 0 &&\n                        this.filterQuestions(\n                          this.props.questionBank.questions,\n                          this.state.searchByTpe,\n                          this.state.searchQuestionInput\n                        ).map((item, i) => (\n                          <tr\n                            key={i + 1}\n                            className=\"shadow-sm cursor-pointer border-none\"\n                          >\n                            <td className=\"flex items-center justify-center\">\n                              <div className=\"py-1 rounded-full my-3\">\n                                <span className=\"text-xl italic text-blue-600\">\n                                  {i < 9 && 0}\n                                  {i + 1}\n                                </span>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"py-2 px-3 flex flex-col\">\n                                <span className=\"text-sm text-gray-600 font-bold w-96 truncate\">\n                                  {item.question[0].title}\n                                </span>\n                                <span className=\"text-xs text-gray-500 w-96 truncate\">\n                                  {item.question[0].description}\n                                </span>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"text-xs font-bold text-gray-700 w-80 truncate\">\n                                {getQuestionType(\n                                  this.props.questionTypes.questionTypes,\n                                  item.type\n                                ) === null ? (\n                                  <span className=\"text-yellow-700\">\n                                    Invalid type\n                                  </span>\n                                ) : (\n                                  <span className=\"text-blue-600\">\n                                    {getQuestionType(\n                                      this.props.questionTypes.questionTypes,\n                                      item.type\n                                    )}\n                                  </span>\n                                )}\n                              </div>\n                            </td>\n                            <td>\n                              <span className=\"text-xs text-gray-500\">\n                                {item.marks}\n                              </span>\n                            </td>\n                            <td>\n                              <div className=\"flex justify-end pr-1\">\n                                <div\n                                  onClick={() => {\n                                    this.setState({ preview: item });\n                                    this.setState({ selectedQuestion: item });\n                                  }}\n                                  className=\"border border-gray-200 btn bg-gray-100 px-3 py-1 rounded text-gray-600 text-sm flex items-center\"\n                                >\n                                  <span>View</span>\n                                </div>\n                                <div\n                                  onClick={() => {\n                                    this.setEditQuestion(item);\n                                  }}\n                                  className=\"border border-blue-200 btn bg-blue-50 px-3 py-1 rounded text-blue-600 text-sm flex items-center ml-1\"\n                                >\n                                  <span>Edit</span>\n                                </div>\n                                <div\n                                  onClick={() => {\n                                    if (\n                                      window.confirm(\n                                        \"Are you sure do you want to delete this question?\"\n                                      ) === true\n                                    ) {\n                                      this.removeSelectedQuestion(\n                                        item.question_id\n                                      );\n                                    }\n                                  }}\n                                  className=\"border border-red-200 btn px-3 py-1 rounded bg-red-50 text-red-600 text-sm flex items-center ml-1\"\n                                >\n                                  <span>Delete</span>\n                                </div>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {this.props.course.selected_course !== null && (\n              <div className=\"bg-white px-2 py-2 mt-4 flex flex-col rounded-t\">\n                <span className=\"text-sm text-gray-600 font-bold\">Course</span>\n                <span className=\"font-bold text-xl text-blue-600\">\n                  {this.props.course.selected_course.course_code} -{\" \"}\n                  {this.props.course.selected_course.course_name}\n                </span>\n              </div>\n            )}\n            {this.props.questionBank.questions === null ||\n            this.props.questionBank.selectedQuestion === null ? (\n              <div className=\"mt-4 px-4 py-4 rounded bg-white\">\n                <Loading type={LoadingType.dark} />\n              </div>\n            ) : (\n              <EditQuestion\n                selectedQuestion={this.state.editQuestion}\n                questionsList={this.props.questionBank.questions}\n                unSelectQuestion={this.unSelectQuestion}\n              />\n            )}\n          </div>\n        )}\n        {this.state.preview !== null && this.state.selectedQuestion !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600\">\n                Question preview\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ preview: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <QuestionPreview\n              questionAnswers={[]}\n              answerQuestionFn={this.answerQuestionFn}\n              selectedQuestion={this.state.selectedQuestion}\n              setSelectedQuestion={this.setSelectedQuestion}\n              preview={true}\n              submitQuestionAnswer={false}\n            />\n          </Modal>\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestion === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-col\">\n                <span className=\"text-gray-800 text-3xl font-extrabold\">\n                  Choose method\n                </span>\n                <span className=\"text-gray-600 text-sm\">\n                  Prepare question bank by adding questions through two main\n                  methods\n                </span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestion: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <ChooseMethod close={this.setAddQuestion} />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nexport const QuestionsList = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  removeQuestion,\n})(_QuestionsList);\n","import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const CheckIfNoPendingExam = (\n  //NOT COMPLETE --> TO BE DONE\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position: PositionAPI,\n    start_exam: boolean,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition,\n            false,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    // Problem here!\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        // Check type of question\n        let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n        if (props.type === questionTypeElementsType.SingleMultiple) {\n          for (let t of selAns.answer) {\n            temp = [\n              ...temp,\n              {\n                id: t.id,\n                value: t.value,\n                status: false,\n              },\n            ];\n          }\n          addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n        }\n        let newAnswersMultiple: MultipleChoiceQuestionAnswerInterface[] = [];\n\n        for (let xItem of temp.length === 0 ? selAns.answer : temp) {\n          if (xItem.id === item.id) {\n            newAnswersMultiple = [\n              ...newAnswersMultiple,\n              {\n                id: xItem.id,\n                value: xItem.value,\n                status:\n                  props.type === questionTypeElementsType.SingleMultiple\n                    ? true\n                    : !xItem.status,\n              },\n            ];\n          } else {\n            newAnswersMultiple = [...newAnswersMultiple, xItem];\n          }\n\n          addAnswerItemFn(\n            newAnswersMultiple,\n            props.selectedQuestionAnswer.selectedAns\n          );\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: TrueFalseQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const addAnswer = (\n    //This has a problem\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let temp: TrueFalseQuestionAnswerInterface[] = [];\n        for (let t of selAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, selAns);\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let x of temp.length === 0 ? selAns.answer : temp) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: !x.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: [\n                {\n                  id: newAnswers[0].id,\n                  value: [newAnswers[0].value],\n                  status: newAnswers[0].status,\n                },\n              ],\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (\n    newAnswers: MatchingQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let x of selAns.answer) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: item.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ansi: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let checkE = testLang.answers.find(\n              (tes) =>\n                tes.reference ===\n                props.selectedQuestionAnswer.selectedAns.reference\n            );\n            if (checkE !== undefined) {\n              let testAnswerLang = checkE.answer.find(\n                (it) => it.status.toString() === ansi.status\n              );\n              if (testAnswerLang !== undefined) {\n                return testAnswerLang.status.toString();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let selAns = temp.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let ans = selAns.answer.find((itm) => itm.id === x);\n        if (ans !== undefined && ans.status !== \"\") {\n          if (props.selectedQuestionAnswer.question_id !== null) {\n            return checkAnswerStatus(\n              props.selectedQuestionAnswer.question_id,\n              props.selectedLanguage,\n              ans\n            );\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        let selAns = item.answers.find(\n          (tester) =>\n            tester.reference ===\n            props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (selAns !== undefined) {\n          for (let ans of selAns.answer) {\n            res = [\n              ...res,\n              {\n                id: ans.id,\n                lang: item.language,\n                status: ans.status.toString(),\n              },\n            ];\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  ShortAnswerQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: ShortAnswerQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer === undefined ? (\n        <div\n          className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n        >\n          <textarea\n            value={\"\"}\n            className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 bg-gray-50`}\n            style={{ minHeight: \"80px\" }}\n          ></textarea>\n        </div>\n      ) : (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"80px\" }}\n            ></textarea>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: [item.value],\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        // props.answerQuestionFn({\n        //   question_id: props.selectedQuestionAnswer.question_id,\n        //   status: true,\n        //   answer: [\n        //     {\n        //       id: props.selectedQuestionAnswer.answers[0].id,\n        //       value: [\"\"],\n        //       status: props.selectedQuestionAnswer.answers[0].status,\n        //     },\n        //   ],\n        // });\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of props.selectedQuestionAnswer.selectedAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0\n        ? props.selectedQuestionAnswer.selectedAns.answer\n        : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers, props.selectedQuestionAnswer.selectedAns);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EssayQuestionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: EssayQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Essay = (props: EssayQuestionProps) => {\n  const checkAnswer = (item: EssayQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        addAnswerItemFn(\n          [\n            {\n              id: selAns.answer[0].id,\n              value: item.value,\n              status: selAns.answer[0].status,\n            },\n          ],\n          selAns\n        );\n      }\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"300px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  SubQuestionInterface,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\n\n// All question types except Embedded and Hybrid\n\ninterface AnswersTypesCollectionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  item: SubQuestionInterface;\n  hybrid: boolean;\n}\n\nconst AnswersTypesCollection = (props: AnswersTypesCollectionProps) => {\n  return (\n    <div>\n      {/* TrueFalse */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.TrueFalse &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <TrueFalse\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toTrueFalse(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.Calculated ||\n          props.item.typeShort === QuestionForHybrid.SimpleCalculate) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <SimpleCalculated\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toSimpleCalculated(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.SingleMultiple ||\n          props.item.typeShort === QuestionForHybrid.MultipleChoice) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <MultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.CalculatedMultipleChoice &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <CalculatedMultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toCalculatedMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n\n      {/* Matching */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Matching &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Matching\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMatching(itm.answer),\n                shuffledAnswers: Shuffle(toMatching(itm.answer)),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n              selectedExam={props.selectedExam}\n              selectedLanguage={props.selectedLanguage}\n            />\n          ))}\n      {/* Esssay */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Essay &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Essay\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toEssay(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Numerical */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Numeric &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Numerical\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toNumerical(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* ShortAnswer */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.ShortAnswer &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <ShortAnswer\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toShortAnswer(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n    </div>\n  );\n};\n\nexport default AnswersTypesCollection;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\nimport AnswersTypesCollection from \"./AnswersTypesCollection\";\n\ninterface HybridProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst HybridAnswers = (props: HybridProps) => {\n  let str = \"a\";\n  // useEffect(() => {\n  //   if (props.selectedQuestionAnswer.question_id !== null) {\n  //     // Check if question is already there in answersList\n  //     let checkAnswerAvail = props.available_answers.find(\n  //       (item) => item.question_id === props.selectedQuestionAnswer.question_id\n  //     );\n  //     if (props.wholeQuestion !== undefined) {\n  //       let answersRes: QuestionAnswerInterface[] = [];\n  //       if (checkAnswerAvail === undefined) {\n  //         answersRes = props.wholeQuestion.answers;\n  //       } else {\n  //         for (let newAns of props.wholeQuestion.answers) {\n  //           if (\n  //             checkAnswerAvail.answers.find(\n  //               (item) => item._id === newAns._id\n  //             ) === undefined\n  //           ) {\n  //             console.log(\"Ans not duplicted: \", newAns);\n  //             answersRes = [\n  //               ...answersRes,\n  //               {\n  //                 _id: newAns._id,\n  //                 reference: newAns.reference,\n  //                 answer: [],\n  //               },\n  //             ];\n  //           }\n  //         }\n  //       }\n  //       props.answerQuestionFn({\n  //         question_id: props.selectedQuestionAnswer.question_id,\n  //         status: false, //Check if submitted online\n  //         answers: answersRes,\n  //       });\n  //     }\n  //   }\n  // }, [props]);\n  return (\n    <div>\n      {props.wholeQuestion !== undefined &&\n        props.wholeQuestion.sub_question.length > 0 &&\n        props.wholeQuestion.sub_question.map((item, i) => {\n          let stri = String.fromCharCode(str.charCodeAt(str.length - 1) + i);\n          return (\n            <div\n              title=\"Click to choose this option\"\n              key={i + 1}\n              className={`px-2 py-2\n             bg-white\n            rounded mb-2`}\n            >\n              <div className=\"flex flex-row items-center w-full gap-2 mb-2\">\n                <div>\n                  <div className=\"flex items-center justify-center h-8 w-8 rounded-full bg-gray-100 border border-gray-400 font-bold\">\n                    {stri}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between w-full gap-2\">\n                  <div className=\"font-bold\">{item.description}</div>\n                  <div>\n                    <div className=\"bg-blue-100 text-blue-600 px-3 py-1 rounded-full font-bold\">\n                      {item.marks} marks\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"border-t px-2 py-2\">\n                <AnswersTypesCollection\n                  type={props.type}\n                  available_answers={props.available_answers}\n                  selectedQuestionAnswer={props.selectedQuestionAnswer}\n                  answerQuestionFn={props.answerQuestionFn}\n                  wholeQuestion={props.wholeQuestion}\n                  selectedExam={props.selectedExam}\n                  selectedLanguage={props.selectedLanguage}\n                  item={item}\n                  hybrid={true}\n                />\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default HybridAnswers;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toEmbedded,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\nimport Essay from \"../../containers/DoExam/QuestionDetails/Answers/Essay\";\nimport {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n  regExEmbedded,\n} from \"@mastrecruit/common\";\nimport Embedded from \"../../containers/DoExam/QuestionDetails/Answers/Embedded\";\nimport Hybrid from \"../../containers/DoExam/QuestionDetails/Answers/Hybrid\";\nimport HybridAnswers from \"../../containers/DoExam/QuestionDetails/Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst returnSelect = (\n  data: QuestionAnswerInterface,\n  type: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid,\n  questionAnswers: QuestionAnswerInterface[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let answers: QuestionAnswerFormat[] = [];\n  for (let answer of data.answer) {\n    answers.push({\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    });\n  }\n  let answerCheck: QuestionAnswerInterface | undefined = questionAnswers.find(\n    (itm) => itm.reference === data.reference\n  );\n  let answered: QuestionAnswerFormat[] = [];\n  if (answerCheck !== undefined) {\n    answered = answerCheck.answer;\n  }\n  if (answers.length > 0) {\n    if (type === QuestionForEmbedded.SingleMultiple) {\n      return (\n        <span className=\"w-max\">\n          <select\n            className={`px-3 py-2 rounded text-base max-w-full border border-gray-300 ${\n              answered.length !== 0 &&\n              answers.find((itm) => itm.id === answered[0].id) !== undefined\n                ? \"text-blue-600 font-bold\"\n                : \"text-gray-700 font-bold\" //Example of condition of changing color\n            }`}\n            value={answered.length === 0 ? \"\" : answered[0].id}\n            onChange={(e) => {\n              let select = answers.find((itm) => itm.id === e.target.value);\n              if (select !== undefined) {\n                addAnswer({\n                  _id: data._id,\n                  reference: data.reference,\n                  answer: [\n                    {\n                      id: select.id,\n                      value: select.value,\n                      status: select.status,\n                    },\n                  ],\n                });\n              } else {\n                alert(\"Invalid choice!\");\n              }\n            }}\n          >\n            <option value={\"\"}>Choose correct answer</option>\n            {answers.map((item, i) => (\n              <option value={item.id} key={i + 1}>\n                {item.value}\n              </option>\n            ))}\n          </select>\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"w-max bg-green-100\">\n          <input\n            value={\n              answered.length === 0\n                ? \"\"\n                : type === QuestionForEmbedded.ShortAnswer\n                ? answered[0].value\n                : answered[0].value[0]\n            }\n            onChange={(e) => {\n              addAnswer({\n                _id: data._id,\n                reference: data.reference,\n                answer: [\n                  {\n                    id: answers[0].id,\n                    value:\n                      type === QuestionForEmbedded.ShortAnswer\n                        ? e.target.value\n                        : [e.target.value],\n                    status: answers[0].status,\n                  },\n                ],\n              });\n            }}\n            type=\"text\"\n            className=\"bg-white px-3 py-1 rounded text-base text-blue-600 font-bold border border-gray-300\"\n          />\n        </span>\n      );\n    }\n  } else {\n    return <div>Question not valid!</div>;\n  }\n};\n\nexport const EmbeddedQuestion = (\n  selectedQuestion: QuestionInterface,\n  questionTypes: questionType[] | null,\n  language: QuestionLanguage,\n  questionAnswers: QuestionAnswersStore[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let newTextResult = [];\n  // Testing Question\n  let question = selectedQuestion.question.find(\n    (itm) => itm.language === language\n  );\n  if (\n    findQuestionType(selectedQuestion.type, questionTypes) !== null &&\n    findQuestionType(selectedQuestion.type, questionTypes) ===\n      questionTypeElementsType.Embedded\n  ) {\n    let answeredQuestions: QuestionAnswerInterface[] = [];\n    if (question !== undefined) {\n      let userQuestionAnswers = questionAnswers.find(\n        (itm) => itm.question_id === selectedQuestion.question_id\n      );\n      if (userQuestionAnswers !== undefined) {\n        answeredQuestions = userQuestionAnswers.answers;\n      }\n\n      var answers = question.answers;\n      var originalText = question.description.split(\" \");\n      // var newTexts = question.description.match(regExEmbedded);\n\n      for (let check of originalText) {\n        let test = answers.find((itm) => itm.reference === parseInt(check[1]));\n        if (test !== undefined) {\n          // Find type of subQuestion\n          let type = question.sub_question.find(\n            (itm) => itm.reference === parseInt(check[1])\n          );\n          if (type !== undefined) {\n            newTextResult.push(\n              returnSelect(test, type.typeShort, answeredQuestions, addAnswer)\n            );\n          }\n        } else {\n          newTextResult.push(check);\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"w-full text-base font-semibold mt-2\">\n      {newTextResult.map((item, i) => (\n        <span key={i + 1} className=\"mr-1\">\n          {item}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-40 md:pb-10\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div className=\"flex flex-row justify-between w-full\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.title,\n                      }}\n                      className=\"text-sm text-gray-600 mb-2\"\n                    ></div>\n\n                    {/* Languages */}\n                    <div className=\"flex flex-row gap-2\">\n                      <div className=\"px-3 py-1 rounded-full flex items-center justify-center text-base font-bold bg-white text-blue-800\">\n                        {props.selectedQuestion.marks} marks\n                      </div>\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                    setSelectedLanguage(item.key);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    selectedLanguage === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {selectedLanguage === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {props.selectedQuestion.question_id !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) === questionTypeElementsType.Embedded ? (\n                    EmbeddedQuestion(\n                      props.selectedQuestion,\n                      props.questionTypes.questionTypes,\n                      selectedLanguage,\n                      props.candidateExam.question_answers,\n                      () => {}\n                    )\n                  ) : (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold mt-2\"\n                    ></div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.Hybrid)\n                ? \"\"\n                : \"bg-white\"\n            } rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n\n            {/* Numerical */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Essay answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toEssay(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers,\n                  }}\n                  wholeQuestion={props.selectedQuestion.question.find(\n                    (itm) => itm.language === selectedLanguage\n                  )}\n                  answerQuestionFn={props.answerQuestionFn}\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React from \"react\";\n// import { FaEdit } from \"react-icons/fa\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\nimport { SiMicrosoftexcel } from \"react-icons/si\";\nimport { Link } from \"react-router-dom\";\n\ninterface ChooseMethodProps {\n  close?: (state: boolean) => void;\n}\n\nexport const ChooseMethod = (props: ChooseMethodProps) => {\n  return (\n    <div className=\"px-2 py-2\">\n      <div className=\"flex flex-row items-center gap-3\">\n        {props.close === undefined && (\n          <Link to=\"/question-bank\">\n            <IoMdArrowRoundBack\n              className={`text-blue-600 text-4xl rounded-full bg-gray-100 cursor-pointer animate__animated animate__lightSpeedInLeft`}\n            />\n          </Link>\n        )}\n        {props.close === undefined && (\n          <div className=\"flex flex-col\">\n            <span className=\"text-gray-800 text-3xl font-extrabold\">\n              Choose method\n            </span>\n            <span className=\"text-gray-600 text-sm\">\n              Prepare question bank by adding questions through two main methods\n            </span>\n          </div>\n        )}\n      </div>\n      <div\n        className={`${\n          props.close === undefined ? \"mt-6\" : \"-mt-6\"\n        } grid md:grid-cols-2 bg-white px-4 py-4 rounded`}\n      >\n        {/* <div className=\"col-span-1\">\n          <Link to=\"/add-question\">\n            <div\n              className={`bg-blue-50 hover:bg-blue-100 border border-white px-6 py-6 rounded text-2xl mr-2 flex flex-col justify-center items-center ${\n                props.close === undefined &&\n                \"animate__animated animate__zoomIn animate__fast\"\n              }`}\n            >\n              <FaEdit className=\"text-8xl text-primary\" />\n              <span className=\"text-primary font-bold\">Add manually</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                This option allows you to prepare one question at time using\n                system's interface\n              </span>\n            </div>\n          </Link>\n        </div> */}\n        <div className=\"col-span-1\">\n          <Link to=\"/upload-questions\">\n            <div\n              className={`bg-white hover:bg-gray-100 border border-blue-600 hover:border-gray-600 px-6 py-6 rounded text-2xl ml-2 flex flex-col justify-center items-center ${\n                props.close === undefined &&\n                \"animate__animated animate__zoomIn animate__fast\"\n              }`}\n            >\n              <SiMicrosoftexcel className=\"text-8xl text-gray-600\" />\n              <span className=\"text-gray-600 font-bold\">Upload excel</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                The option of uploading list of questions through excel file.\n                You can also upload the exam at time\n              </span>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}