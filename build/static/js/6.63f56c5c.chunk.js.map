{"version":3,"sources":["components/Courses/Courses.tsx","containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["_UploadQuestion","props","setLoading","status","setState","loading","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedEducationCategory","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","courses","response","undefined","preparedExams","filter","item","find","itm","course","course_id","period","periods","selected_period","_id","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","i","setUploadingStatus","uploadingStatus","componentDidMount","length","loadCourses","state","searchCourseInput","className","this","education_category_title","school_level_name","onChange","e","target","value","type","placeholder","onClick","schoolLevels","education_categories","loadEducationCategories","loadSchoolLevels","style","minHeight","searchData","map","setSelectedCourse","selected_course_id","course_name","course_code","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","educationCategories","Component","UploadQuestion","connect","auth","questionBank","CoursesAction","Courses","system","loadApplicationPeriods","setSelectedPeriod","PushPopupAlert","useState","addNew","setAddNew","search","setSearch","selectedCourse","setSelectedCourseComp","course_selected","deleteCourseFn","a","axios","delete","API","APPLICATION","PopupAlertTheme","success","warning","console","log","useEffect","description","action","View","Update","Delete","extraLarge","body","closeModal","deleteSelected","chaptersOnly","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","id","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","toMatching","selectedQuestionItem","answers","answer","selectedKey","QuestionAnswer","data","check","wholeQuestion","language","selectedLanguage","key","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","parseInt","marks","setSelectedKey","QuestionLanguages","lang","checkAns","uuidv4","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","validateCalculatedFormula","msg","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","toString","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","toNumerical","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","Essay","updateEssayAnswer","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","reference","Embedded","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","sub_question","setShowLanguages","newSubQuestion","newSubQuestions","typeShort","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","QuestionForEmbedded","window","confirm","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","Hybrid","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","questionAnswers","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","chapters","setAddChapter","addedChapters","name","ChangeLanguage","languagesList","visible","setVisible","test","setSelectedLanguage","_EditQuestion","showLanguages","filterLanguages","langs","selectedQuestion","question","langItem","testLangQ","l","QuestionLang","res","actionStatus","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","getQuestionType","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","question_id","customNumber","is_deleted","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","addNewChapter","questionLangs","testing","Loading","LoadingType","white","onSubmit","Modal","large","selected_course","AddCourse","courseDetail","EditQuestion","prepareExam","setUploadedQuestions","setCourse_id","setCourse_name","setCourse_code","setDescription","setChapters","setSchool_levels","formError","setFormError","openAdd","chapter","addChapter","submitCourse","preventDefault","element","obj","patch","info","post","errors","message","disabled","SchoolLevelSelect","height","x","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random"],"mappings":"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","file":"static/js/6.63f56c5c.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period === this.props.periods.selected_period?._id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    // let wildCards = [\n    //   {\n    //     id: 1,\n    //     value: \"firstnumber\",\n    //   },\n    //   {\n    //     id: 2,\n    //     value: \"secondnumber\",\n    //   },\n    // ];\n    // let defaultNumberOfTests = [\n    //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    // ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCircle, BsSquare } from \"react-icons/bs\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle } from \"react-icons/bs\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle } from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}